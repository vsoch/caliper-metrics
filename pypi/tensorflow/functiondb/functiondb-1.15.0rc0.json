{
    "1.15.0rc0": {
        "tensorflow_core": {
            "_running_from_pip_package": []
        },
        "tensorflow_core.core": {},
        "tensorflow_core.core.lib": {},
        "tensorflow_core.core.lib.core.error_codes_pb2": {},
        "tensorflow_core.core.lib.core": {},
        "tensorflow_core.core.example.example_parser_configuration_pb2": {},
        "tensorflow_core.core.example.feature_pb2": {},
        "tensorflow_core.core.example.example_pb2": {},
        "tensorflow_core.core.example": {},
        "tensorflow_core.core.protobuf.debug_pb2": {},
        "tensorflow_core.core.protobuf.tensor_bundle_pb2": {},
        "tensorflow_core.core.protobuf.saved_object_graph_pb2": {},
        "tensorflow_core.core.protobuf.meta_graph_pb2": {},
        "tensorflow_core.core.protobuf.graph_debug_info_pb2": {},
        "tensorflow_core.core.protobuf.transport_options_pb2": {},
        "tensorflow_core.core.protobuf.verifier_config_pb2": {},
        "tensorflow_core.core.protobuf.saved_model_pb2": {},
        "tensorflow_core.core.protobuf.saver_pb2": {},
        "tensorflow_core.core.protobuf.trace_events_pb2": {},
        "tensorflow_core.core.protobuf.rewriter_config_pb2": {},
        "tensorflow_core.core.protobuf.tensorflow_server_pb2": {},
        "tensorflow_core.core.protobuf.cluster_pb2": {},
        "tensorflow_core.core.protobuf.device_properties_pb2": {},
        "tensorflow_core.core.protobuf.trackable_object_graph_pb2": {},
        "tensorflow_core.core.protobuf.control_flow_pb2": {},
        "tensorflow_core.core.protobuf.struct_pb2": {},
        "tensorflow_core.core.protobuf.named_tensor_pb2": {},
        "tensorflow_core.core.protobuf.config_pb2": {},
        "tensorflow_core.core.protobuf": {},
        "tensorflow_core.core.protobuf.queue_runner_pb2": {},
        "tensorflow_core.core.protobuf.tpu.tpu_embedding_configuration_pb2": {},
        "tensorflow_core.core.protobuf.tpu.compilation_result_pb2": {},
        "tensorflow_core.core.protobuf.tpu.topology_pb2": {},
        "tensorflow_core.core.protobuf.tpu.dynamic_padding_pb2": {},
        "tensorflow_core.core.protobuf.tpu.tpu_embedding_output_layout_pb2": {},
        "tensorflow_core.core.protobuf.tpu.optimization_parameters_pb2": {},
        "tensorflow_core.core.protobuf.tpu": {},
        "tensorflow_core.core.protobuf.data": {},
        "tensorflow_core.core.protobuf.data.experimental": {},
        "tensorflow_core.core.protobuf.data.experimental.snapshot_pb2": {},
        "tensorflow_core.core.grappler": {},
        "tensorflow_core.core.grappler.costs.op_performance_data_pb2": {},
        "tensorflow_core.core.grappler.costs": {},
        "tensorflow_core.core.framework.tensor_description_pb2": {},
        "tensorflow_core.core.framework.resource_handle_pb2": {},
        "tensorflow_core.core.framework.variable_pb2": {},
        "tensorflow_core.core.framework.reader_base_pb2": {},
        "tensorflow_core.core.framework.function_pb2": {},
        "tensorflow_core.core.framework.summary_pb2": {},
        "tensorflow_core.core.framework.versions_pb2": {},
        "tensorflow_core.core.framework.graph_transfer_info_pb2": {},
        "tensorflow_core.core.framework.types_pb2": {},
        "tensorflow_core.core.framework.log_memory_pb2": {},
        "tensorflow_core.core.framework.step_stats_pb2": {},
        "tensorflow_core.core.framework.tensor_shape_pb2": {},
        "tensorflow_core.core.framework.api_def_pb2": {},
        "tensorflow_core.core.framework.kernel_def_pb2": {},
        "tensorflow_core.core.framework.device_attributes_pb2": {},
        "tensorflow_core.core.framework.remote_fused_graph_execute_info_pb2": {},
        "tensorflow_core.core.framework.tensor_pb2": {},
        "tensorflow_core.core.framework.allocation_description_pb2": {},
        "tensorflow_core.core.framework.cost_graph_pb2": {},
        "tensorflow_core.core.framework.attr_value_pb2": {},
        "tensorflow_core.core.framework.op_def_pb2": {},
        "tensorflow_core.core.framework.graph_pb2": {},
        "tensorflow_core.core.framework.node_def_pb2": {},
        "tensorflow_core.core.framework": {},
        "tensorflow_core.core.framework.tensor_slice_pb2": {},
        "tensorflow_core.core.util.memmapped_file_system_pb2": {},
        "tensorflow_core.core.util.test_log_pb2": {},
        "tensorflow_core.core.util.saved_tensor_slice_pb2": {},
        "tensorflow_core.core.util.event_pb2": {},
        "tensorflow_core.core.util": {},
        "tensorflow_core.core.debug.debug_service_pb2": {},
        "tensorflow_core.core.debug.debugger_event_metadata_pb2": {},
        "tensorflow_core.core.debug": {},
        "tensorflow_core.core.debug.debug_service_pb2_grpc": {
            "add_EventListenerServicer_to_server": [
                "servicer",
                "server"
            ],
            "EventListenerStub": {
                "__init__": [
                    "self",
                    "channel"
                ]
            },
            "EventListenerServicer": {
                "SendEvents": [
                    "self",
                    "request_iterator",
                    "context"
                ],
                "SendTracebacks": [
                    "self",
                    "request",
                    "context"
                ],
                "SendSourceFiles": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.core.profiler.tfprof_output_pb2": {},
        "tensorflow_core.core.profiler.profile_pb2": {},
        "tensorflow_core.core.profiler.profiler_service_pb2_grpc": {
            "add_ProfilerServiceServicer_to_server": [
                "servicer",
                "server"
            ],
            "ProfilerServiceStub": {
                "__init__": [
                    "self",
                    "channel"
                ]
            },
            "ProfilerServiceServicer": {
                "Profile": [
                    "self",
                    "request",
                    "context"
                ],
                "Monitor": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.core.profiler.profiler_analysis_pb2_grpc": {
            "add_ProfileAnalysisServicer_to_server": [
                "servicer",
                "server"
            ],
            "ProfileAnalysisStub": {
                "__init__": [
                    "self",
                    "channel"
                ]
            },
            "ProfileAnalysisServicer": {
                "NewSession": [
                    "self",
                    "request",
                    "context"
                ],
                "EnumSessions": [
                    "self",
                    "request",
                    "context"
                ],
                "GetSessionToolData": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.core.profiler.profiler_analysis_pb2": {},
        "tensorflow_core.core.profiler.tfprof_log_pb2": {},
        "tensorflow_core.core.profiler.tfprof_options_pb2": {},
        "tensorflow_core.core.profiler.profiler_service_pb2": {},
        "tensorflow_core.core.profiler.op_profile_pb2": {},
        "tensorflow_core.core.profiler": {},
        "tensorflow_core.core.kernels": {},
        "tensorflow_core.core.kernels.boosted_trees.boosted_trees_pb2": {},
        "tensorflow_core.core.kernels.boosted_trees": {},
        "tensorflow_core.compiler": {},
        "tensorflow_core.compiler.xla.xla_data_pb2": {},
        "tensorflow_core.compiler.xla": {},
        "tensorflow_core.compiler.xla.python_api.types": {},
        "tensorflow_core.compiler.xla.python_api.xla_shape": {
            "_CreateShapeFromNumpy": [
                "ndarray"
            ],
            "CreateShapeFromNumpy": [
                "value"
            ],
            "CreateShapeFromDtypeAndTuple": [
                "dtype",
                "shape_tuple"
            ],
            "Shape": {
                "__init__": [
                    "self",
                    "element_type",
                    "dimensions",
                    "layout"
                ],
                "element_type": [
                    "self"
                ],
                "is_tuple": [
                    "self"
                ],
                "dimensions": [
                    "self"
                ],
                "tuple_shapes": [
                    "self"
                ],
                "layout": [
                    "self"
                ],
                "from_pyval": [
                    "pyval"
                ]
            }
        },
        "tensorflow_core.compiler.xla.python_api": {},
        "tensorflow_core.compiler.xla.experimental": {},
        "tensorflow_core.compiler.xla.experimental.xla_sharding.xla_sharding": {
            "replicate": [
                "tensor",
                "assign_tuple_sharding"
            ],
            "assign_device": [
                "tensor",
                "device",
                "assign_tuple_sharding"
            ],
            "tile": [
                "tensor",
                "tile_assignment",
                "assign_tuple_sharding"
            ],
            "split": [
                "tensor",
                "split_dimension",
                "num_devices",
                "assign_tuple_sharding"
            ],
            "Sharding": {
                "__init__": [
                    "self",
                    "proto"
                ],
                "replicate": [
                    "cls"
                ],
                "assign_device": [
                    "cls",
                    "core"
                ],
                "tile": [
                    "cls",
                    "tile_assignment"
                ],
                "split": [
                    "cls",
                    "tensor",
                    "split_dimension",
                    "num_devices"
                ],
                "apply_to_tensor": [
                    "self",
                    "tensor",
                    "assign_tuple_sharding"
                ],
                "proto": [
                    "self"
                ],
                "_get_or_create_tuple_proto": [
                    "self",
                    "op"
                ],
                "_create_tuple_proto": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow_core.compiler.xla.experimental.xla_sharding": {},
        "tensorflow_core.compiler.xla.service.hlo_pb2": {},
        "tensorflow_core.compiler.xla.service": {},
        "tensorflow_core.compiler.tf2xla": {},
        "tensorflow_core.compiler.tf2xla.ops.gen_xla_ops": {
            "xla_broadcast_helper": [
                "lhs",
                "rhs",
                "broadcast_dims",
                "name"
            ],
            "XlaBroadcastHelper": [
                "lhs",
                "rhs",
                "broadcast_dims",
                "name"
            ],
            "xla_broadcast_helper_eager_fallback": [
                "lhs",
                "rhs",
                "broadcast_dims",
                "name",
                "ctx"
            ],
            "xla_conv": [
                "lhs",
                "rhs",
                "window_strides",
                "padding",
                "lhs_dilation",
                "rhs_dilation",
                "feature_group_count",
                "dimension_numbers",
                "precision_config",
                "name"
            ],
            "XlaConv": [
                "lhs",
                "rhs",
                "window_strides",
                "padding",
                "lhs_dilation",
                "rhs_dilation",
                "feature_group_count",
                "dimension_numbers",
                "precision_config",
                "name"
            ],
            "xla_conv_eager_fallback": [
                "lhs",
                "rhs",
                "window_strides",
                "padding",
                "lhs_dilation",
                "rhs_dilation",
                "feature_group_count",
                "dimension_numbers",
                "precision_config",
                "name",
                "ctx"
            ],
            "xla_dequantize": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "transpose_output",
                "name"
            ],
            "XlaDequantize": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "transpose_output",
                "name"
            ],
            "xla_dequantize_eager_fallback": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "transpose_output",
                "name",
                "ctx"
            ],
            "xla_dot": [
                "lhs",
                "rhs",
                "dimension_numbers",
                "precision_config",
                "name"
            ],
            "XlaDot": [
                "lhs",
                "rhs",
                "dimension_numbers",
                "precision_config",
                "name"
            ],
            "xla_dot_eager_fallback": [
                "lhs",
                "rhs",
                "dimension_numbers",
                "precision_config",
                "name",
                "ctx"
            ],
            "xla_dynamic_slice": [
                "input",
                "start_indices",
                "size_indices",
                "name"
            ],
            "XlaDynamicSlice": [
                "input",
                "start_indices",
                "size_indices",
                "name"
            ],
            "xla_dynamic_slice_eager_fallback": [
                "input",
                "start_indices",
                "size_indices",
                "name",
                "ctx"
            ],
            "xla_dynamic_update_slice": [
                "input",
                "update",
                "indices",
                "name"
            ],
            "XlaDynamicUpdateSlice": [
                "input",
                "update",
                "indices",
                "name"
            ],
            "xla_dynamic_update_slice_eager_fallback": [
                "input",
                "update",
                "indices",
                "name",
                "ctx"
            ],
            "xla_einsum": [
                "a",
                "b",
                "equation",
                "name"
            ],
            "XlaEinsum": [
                "a",
                "b",
                "equation",
                "name"
            ],
            "xla_einsum_eager_fallback": [
                "a",
                "b",
                "equation",
                "name",
                "ctx"
            ],
            "xla_if": [
                "cond",
                "inputs",
                "then_branch",
                "else_branch",
                "Tout",
                "name"
            ],
            "XlaIf": [
                "cond",
                "inputs",
                "then_branch",
                "else_branch",
                "Tout",
                "name"
            ],
            "xla_if_eager_fallback": [
                "cond",
                "inputs",
                "then_branch",
                "else_branch",
                "Tout",
                "name",
                "ctx"
            ],
            "xla_key_value_sort": [
                "keys",
                "values",
                "name"
            ],
            "XlaKeyValueSort": [
                "keys",
                "values",
                "name"
            ],
            "xla_key_value_sort_eager_fallback": [
                "keys",
                "values",
                "name",
                "ctx"
            ],
            "xla_pad": [
                "input",
                "padding_value",
                "padding_low",
                "padding_high",
                "padding_interior",
                "name"
            ],
            "XlaPad": [
                "input",
                "padding_value",
                "padding_low",
                "padding_high",
                "padding_interior",
                "name"
            ],
            "xla_pad_eager_fallback": [
                "input",
                "padding_value",
                "padding_low",
                "padding_high",
                "padding_interior",
                "name",
                "ctx"
            ],
            "xla_recv": [
                "dtype",
                "tensor_name",
                "shape",
                "name"
            ],
            "XlaRecv": [
                "dtype",
                "tensor_name",
                "shape",
                "name"
            ],
            "xla_recv_eager_fallback": [
                "dtype",
                "tensor_name",
                "shape",
                "name",
                "ctx"
            ],
            "xla_reduce": [
                "input",
                "init_value",
                "dimensions_to_reduce",
                "reducer",
                "name"
            ],
            "XlaReduce": [
                "input",
                "init_value",
                "dimensions_to_reduce",
                "reducer",
                "name"
            ],
            "xla_reduce_eager_fallback": [
                "input",
                "init_value",
                "dimensions_to_reduce",
                "reducer",
                "name",
                "ctx"
            ],
            "xla_reduce_window": [
                "input",
                "init_value",
                "window_dimensions",
                "window_strides",
                "base_dilations",
                "window_dilations",
                "padding",
                "computation",
                "name"
            ],
            "XlaReduceWindow": [
                "input",
                "init_value",
                "window_dimensions",
                "window_strides",
                "base_dilations",
                "window_dilations",
                "padding",
                "computation",
                "name"
            ],
            "xla_reduce_window_eager_fallback": [
                "input",
                "init_value",
                "window_dimensions",
                "window_strides",
                "base_dilations",
                "window_dilations",
                "padding",
                "computation",
                "name",
                "ctx"
            ],
            "xla_replica_id": [
                "name"
            ],
            "XlaReplicaId": [
                "name"
            ],
            "xla_replica_id_eager_fallback": [
                "name",
                "ctx"
            ],
            "xla_select_and_scatter": [
                "operand",
                "window_dimensions",
                "window_strides",
                "padding",
                "source",
                "init_value",
                "select",
                "scatter",
                "name"
            ],
            "XlaSelectAndScatter": [
                "operand",
                "window_dimensions",
                "window_strides",
                "padding",
                "source",
                "init_value",
                "select",
                "scatter",
                "name"
            ],
            "xla_select_and_scatter_eager_fallback": [
                "operand",
                "window_dimensions",
                "window_strides",
                "padding",
                "source",
                "init_value",
                "select",
                "scatter",
                "name",
                "ctx"
            ],
            "xla_self_adjoint_eig": [
                "a",
                "lower",
                "max_iter",
                "epsilon",
                "name"
            ],
            "XlaSelfAdjointEig": [
                "a",
                "lower",
                "max_iter",
                "epsilon",
                "name"
            ],
            "xla_self_adjoint_eig_eager_fallback": [
                "a",
                "lower",
                "max_iter",
                "epsilon",
                "name",
                "ctx"
            ],
            "xla_send": [
                "tensor",
                "tensor_name",
                "name"
            ],
            "XlaSend": [
                "tensor",
                "tensor_name",
                "name"
            ],
            "xla_send_eager_fallback": [
                "tensor",
                "tensor_name",
                "name",
                "ctx"
            ],
            "xla_sort": [
                "input",
                "name"
            ],
            "XlaSort": [
                "input",
                "name"
            ],
            "xla_sort_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "xla_svd": [
                "a",
                "max_iter",
                "epsilon",
                "precision_config",
                "name"
            ],
            "XlaSvd": [
                "a",
                "max_iter",
                "epsilon",
                "precision_config",
                "name"
            ],
            "xla_svd_eager_fallback": [
                "a",
                "max_iter",
                "epsilon",
                "precision_config",
                "name",
                "ctx"
            ],
            "xla_while": [
                "input",
                "cond",
                "body",
                "name"
            ],
            "XlaWhile": [
                "input",
                "cond",
                "body",
                "name"
            ],
            "xla_while_eager_fallback": [
                "input",
                "cond",
                "body",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.compiler.tf2xla.ops": {},
        "tensorflow_core.compiler.tf2xla.python.xla": {
            "_unary_op": [
                "fn"
            ],
            "_broadcasting_binary_op": [
                "fn"
            ],
            "_shift_right_logical_helper": [
                "x",
                "y",
                "name"
            ],
            "_shift_right_arithmetic_helper": [
                "x",
                "y",
                "name"
            ],
            "_binary_op": [
                "fn"
            ],
            "broadcast": [
                "x",
                "dims",
                "name"
            ],
            "clamp": [
                "a",
                "x",
                "b",
                "name"
            ],
            "conv": [
                "lhs",
                "rhs",
                "window_strides",
                "padding",
                "lhs_dilation",
                "rhs_dilation",
                "dimension_numbers",
                "feature_group_count",
                "precision_config",
                "name"
            ],
            "dot": [
                "lhs",
                "rhs",
                "name"
            ],
            "dot_general": [
                "lhs",
                "rhs",
                "dimension_numbers",
                "precision_config",
                "name"
            ],
            "self_adjoint_eig": [
                "a",
                "lower",
                "max_iter",
                "epsilon"
            ],
            "svd": [
                "a",
                "max_iter",
                "epsilon",
                "precision_config"
            ],
            "random_normal": [
                "mu",
                "sigma",
                "dims",
                "name"
            ],
            "random_uniform": [
                "minval",
                "maxval",
                "dims",
                "name"
            ],
            "reduce_window": [
                "operand",
                "init",
                "reducer",
                "window_dimensions",
                "window_strides",
                "base_dilations",
                "window_dilations",
                "padding",
                "name"
            ],
            "reshape": [
                "x",
                "new_sizes",
                "dimensions",
                "name"
            ],
            "select": [
                "condition",
                "x",
                "y",
                "name"
            ],
            "slice": [
                "x",
                "start_dims",
                "limit_dims",
                "strides"
            ]
        },
        "tensorflow_core.compiler.tf2xla.python": {},
        "tensorflow_core.compiler.jit": {},
        "tensorflow_core.compiler.jit.ops.xla_ops": {
            "xla_cluster_output": [
                "input",
                "name"
            ],
            "XlaClusterOutput": [
                "input",
                "name"
            ],
            "xla_cluster_output_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "xla_launch": [
                "constants",
                "args",
                "resources",
                "Tresults",
                "function",
                "name"
            ],
            "XlaLaunch": [
                "constants",
                "args",
                "resources",
                "Tresults",
                "function",
                "name"
            ],
            "xla_launch_eager_fallback": [
                "constants",
                "args",
                "resources",
                "Tresults",
                "function",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.compiler.jit.ops.xla_ops_grad": {
            "_XlaClusterOutputGrad": [
                "_",
                "grad"
            ]
        },
        "tensorflow_core.compiler.jit.ops": {},
        "tensorflow_core._api": {},
        "tensorflow_core._api.v1.v1": {
            "_running_from_pip_package": []
        },
        "tensorflow_core._api.v1": {},
        "tensorflow_core._api.v1.random": {},
        "tensorflow_core._api.v1.random.experimental": {},
        "tensorflow_core._api.v1.metrics": {},
        "tensorflow_core._api.v1.losses": {},
        "tensorflow_core._api.v1.train": {},
        "tensorflow_core._api.v1.train.queue_runner": {},
        "tensorflow_core._api.v1.train.experimental": {},
        "tensorflow_core._api.v1.test": {},
        "tensorflow_core._api.v1.tpu": {},
        "tensorflow_core._api.v1.tpu.experimental": {},
        "tensorflow_core._api.v1.initializers": {},
        "tensorflow_core._api.v1.audio": {},
        "tensorflow_core._api.v1.bitwise": {},
        "tensorflow_core._api.v1.graph_util": {},
        "tensorflow_core._api.v1.logging": {},
        "tensorflow_core._api.v1.autograph": {},
        "tensorflow_core._api.v1.autograph.experimental": {},
        "tensorflow_core._api.v1.distribute": {},
        "tensorflow_core._api.v1.distribute.cluster_resolver": {},
        "tensorflow_core._api.v1.distribute.experimental": {},
        "tensorflow_core._api.v1.raw_ops": {},
        "tensorflow_core._api.v1.lookup": {},
        "tensorflow_core._api.v1.lookup.experimental": {},
        "tensorflow_core._api.v1.image": {},
        "tensorflow_core._api.v1.linalg": {},
        "tensorflow_core._api.v1.queue": {},
        "tensorflow_core._api.v1.math": {},
        "tensorflow_core._api.v1.summary": {},
        "tensorflow_core._api.v1.distributions": {},
        "tensorflow_core._api.v1.sysconfig": {},
        "tensorflow_core._api.v1.quantization": {},
        "tensorflow_core._api.v1.xla": {},
        "tensorflow_core._api.v1.xla.experimental": {},
        "tensorflow_core._api.v1.saved_model": {},
        "tensorflow_core._api.v1.saved_model.signature_def_utils": {},
        "tensorflow_core._api.v1.saved_model.tag_constants": {},
        "tensorflow_core._api.v1.saved_model.loader": {},
        "tensorflow_core._api.v1.saved_model.builder": {},
        "tensorflow_core._api.v1.saved_model.main_op": {},
        "tensorflow_core._api.v1.saved_model.signature_constants": {},
        "tensorflow_core._api.v1.saved_model.constants": {},
        "tensorflow_core._api.v1.saved_model.utils": {},
        "tensorflow_core._api.v1.saved_model.experimental": {},
        "tensorflow_core._api.v1.signal": {},
        "tensorflow_core._api.v1.spectral": {},
        "tensorflow_core._api.v1.io": {},
        "tensorflow_core._api.v1.io.gfile": {},
        "tensorflow_core._api.v1.python_io": {},
        "tensorflow_core._api.v1.lite": {},
        "tensorflow_core._api.v1.lite.constants": {},
        "tensorflow_core._api.v1.lite.experimental": {},
        "tensorflow_core._api.v1.lite.experimental.microfrontend": {},
        "tensorflow_core._api.v1.lite.experimental.microfrontend.python": {},
        "tensorflow_core._api.v1.lite.experimental.microfrontend.python.ops": {},
        "tensorflow_core._api.v1.lite.experimental.nn": {},
        "tensorflow_core._api.v1.config": {},
        "tensorflow_core._api.v1.config.optimizer": {},
        "tensorflow_core._api.v1.config.threading": {},
        "tensorflow_core._api.v1.config.experimental": {},
        "tensorflow_core._api.v1.gfile": {},
        "tensorflow_core._api.v1.nn": {},
        "tensorflow_core._api.v1.nn.rnn_cell": {},
        "tensorflow_core._api.v1.sparse": {},
        "tensorflow_core._api.v1.user_ops": {},
        "tensorflow_core._api.v1.dtypes": {},
        "tensorflow_core._api.v1.sets": {},
        "tensorflow_core._api.v1.manip": {},
        "tensorflow_core._api.v1.resource_loader": {},
        "tensorflow_core._api.v1.data": {},
        "tensorflow_core._api.v1.data.experimental": {},
        "tensorflow_core._api.v1.ragged": {},
        "tensorflow_core._api.v1.version": {},
        "tensorflow_core._api.v1.layers": {},
        "tensorflow_core._api.v1.layers.experimental": {},
        "tensorflow_core._api.v1.strings": {},
        "tensorflow_core._api.v1.profiler": {},
        "tensorflow_core._api.v1.app": {},
        "tensorflow_core._api.v1.compat": {},
        "tensorflow_core._api.v1.compat.v2": {},
        "tensorflow_core._api.v1.compat.v2.random": {},
        "tensorflow_core._api.v1.compat.v2.random.experimental": {},
        "tensorflow_core._api.v1.compat.v2.train": {},
        "tensorflow_core._api.v1.compat.v2.train.experimental": {},
        "tensorflow_core._api.v1.compat.v2.test": {},
        "tensorflow_core._api.v1.compat.v2.tpu": {},
        "tensorflow_core._api.v1.compat.v2.tpu.experimental": {},
        "tensorflow_core._api.v1.compat.v2.audio": {},
        "tensorflow_core._api.v1.compat.v2.bitwise": {},
        "tensorflow_core._api.v1.compat.v2.graph_util": {},
        "tensorflow_core._api.v1.compat.v2.autograph": {},
        "tensorflow_core._api.v1.compat.v2.autograph.experimental": {},
        "tensorflow_core._api.v1.compat.v2.distribute": {},
        "tensorflow_core._api.v1.compat.v2.distribute.cluster_resolver": {},
        "tensorflow_core._api.v1.compat.v2.distribute.experimental": {},
        "tensorflow_core._api.v1.compat.v2.raw_ops": {},
        "tensorflow_core._api.v1.compat.v2.lookup": {},
        "tensorflow_core._api.v1.compat.v2.lookup.experimental": {},
        "tensorflow_core._api.v1.compat.v2.image": {},
        "tensorflow_core._api.v1.compat.v2.linalg": {},
        "tensorflow_core._api.v1.compat.v2.queue": {},
        "tensorflow_core._api.v1.compat.v2.math": {},
        "tensorflow_core._api.v1.compat.v2.summary": {},
        "tensorflow_core._api.v1.compat.v2.summary.experimental": {},
        "tensorflow_core._api.v1.compat.v2.sysconfig": {},
        "tensorflow_core._api.v1.compat.v2.quantization": {},
        "tensorflow_core._api.v1.compat.v2.xla": {},
        "tensorflow_core._api.v1.compat.v2.xla.experimental": {},
        "tensorflow_core._api.v1.compat.v2.saved_model": {},
        "tensorflow_core._api.v1.compat.v2.signal": {},
        "tensorflow_core._api.v1.compat.v2.io": {},
        "tensorflow_core._api.v1.compat.v2.io.gfile": {},
        "tensorflow_core._api.v1.compat.v2.lite": {},
        "tensorflow_core._api.v1.compat.v2.lite.experimental": {},
        "tensorflow_core._api.v1.compat.v2.lite.experimental.microfrontend": {},
        "tensorflow_core._api.v1.compat.v2.lite.experimental.microfrontend.python": {},
        "tensorflow_core._api.v1.compat.v2.lite.experimental.microfrontend.python.ops": {},
        "tensorflow_core._api.v1.compat.v2.config": {},
        "tensorflow_core._api.v1.compat.v2.config.optimizer": {},
        "tensorflow_core._api.v1.compat.v2.config.threading": {},
        "tensorflow_core._api.v1.compat.v2.config.experimental": {},
        "tensorflow_core._api.v1.compat.v2.nn": {},
        "tensorflow_core._api.v1.compat.v2.sparse": {},
        "tensorflow_core._api.v1.compat.v2.dtypes": {},
        "tensorflow_core._api.v1.compat.v2.sets": {},
        "tensorflow_core._api.v1.compat.v2.data": {},
        "tensorflow_core._api.v1.compat.v2.data.experimental": {},
        "tensorflow_core._api.v1.compat.v2.ragged": {},
        "tensorflow_core._api.v1.compat.v2.version": {},
        "tensorflow_core._api.v1.compat.v2.strings": {},
        "tensorflow_core._api.v1.compat.v2.compat": {},
        "tensorflow_core._api.v1.compat.v2.feature_column": {},
        "tensorflow_core._api.v1.compat.v2.debugging": {},
        "tensorflow_core._api.v1.compat.v2.errors": {},
        "tensorflow_core._api.v1.compat.v2.nest": {},
        "tensorflow_core._api.v1.compat.v2.experimental": {},
        "tensorflow_core._api.v1.compat.v1": {},
        "tensorflow_core._api.v1.compat.v1.random": {},
        "tensorflow_core._api.v1.compat.v1.random.experimental": {},
        "tensorflow_core._api.v1.compat.v1.metrics": {},
        "tensorflow_core._api.v1.compat.v1.losses": {},
        "tensorflow_core._api.v1.compat.v1.train": {},
        "tensorflow_core._api.v1.compat.v1.train.queue_runner": {},
        "tensorflow_core._api.v1.compat.v1.train.experimental": {},
        "tensorflow_core._api.v1.compat.v1.test": {},
        "tensorflow_core._api.v1.compat.v1.tpu": {},
        "tensorflow_core._api.v1.compat.v1.tpu.experimental": {},
        "tensorflow_core._api.v1.compat.v1.initializers": {},
        "tensorflow_core._api.v1.compat.v1.audio": {},
        "tensorflow_core._api.v1.compat.v1.bitwise": {},
        "tensorflow_core._api.v1.compat.v1.graph_util": {},
        "tensorflow_core._api.v1.compat.v1.logging": {},
        "tensorflow_core._api.v1.compat.v1.autograph": {},
        "tensorflow_core._api.v1.compat.v1.autograph.experimental": {},
        "tensorflow_core._api.v1.compat.v1.distribute": {},
        "tensorflow_core._api.v1.compat.v1.distribute.cluster_resolver": {},
        "tensorflow_core._api.v1.compat.v1.distribute.experimental": {},
        "tensorflow_core._api.v1.compat.v1.raw_ops": {},
        "tensorflow_core._api.v1.compat.v1.lookup": {},
        "tensorflow_core._api.v1.compat.v1.lookup.experimental": {},
        "tensorflow_core._api.v1.compat.v1.image": {},
        "tensorflow_core._api.v1.compat.v1.linalg": {},
        "tensorflow_core._api.v1.compat.v1.queue": {},
        "tensorflow_core._api.v1.compat.v1.math": {},
        "tensorflow_core._api.v1.compat.v1.summary": {},
        "tensorflow_core._api.v1.compat.v1.distributions": {},
        "tensorflow_core._api.v1.compat.v1.sysconfig": {},
        "tensorflow_core._api.v1.compat.v1.quantization": {},
        "tensorflow_core._api.v1.compat.v1.xla": {},
        "tensorflow_core._api.v1.compat.v1.xla.experimental": {},
        "tensorflow_core._api.v1.compat.v1.saved_model": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.signature_def_utils": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.tag_constants": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.loader": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.builder": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.main_op": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.signature_constants": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.constants": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.utils": {},
        "tensorflow_core._api.v1.compat.v1.saved_model.experimental": {},
        "tensorflow_core._api.v1.compat.v1.signal": {},
        "tensorflow_core._api.v1.compat.v1.spectral": {},
        "tensorflow_core._api.v1.compat.v1.io": {},
        "tensorflow_core._api.v1.compat.v1.io.gfile": {},
        "tensorflow_core._api.v1.compat.v1.python_io": {},
        "tensorflow_core._api.v1.compat.v1.lite": {},
        "tensorflow_core._api.v1.compat.v1.lite.constants": {},
        "tensorflow_core._api.v1.compat.v1.lite.experimental": {},
        "tensorflow_core._api.v1.compat.v1.lite.experimental.microfrontend": {},
        "tensorflow_core._api.v1.compat.v1.lite.experimental.microfrontend.python": {},
        "tensorflow_core._api.v1.compat.v1.lite.experimental.microfrontend.python.ops": {},
        "tensorflow_core._api.v1.compat.v1.lite.experimental.nn": {},
        "tensorflow_core._api.v1.compat.v1.config": {},
        "tensorflow_core._api.v1.compat.v1.config.optimizer": {},
        "tensorflow_core._api.v1.compat.v1.config.threading": {},
        "tensorflow_core._api.v1.compat.v1.config.experimental": {},
        "tensorflow_core._api.v1.compat.v1.gfile": {},
        "tensorflow_core._api.v1.compat.v1.nn": {},
        "tensorflow_core._api.v1.compat.v1.nn.rnn_cell": {},
        "tensorflow_core._api.v1.compat.v1.sparse": {},
        "tensorflow_core._api.v1.compat.v1.user_ops": {},
        "tensorflow_core._api.v1.compat.v1.dtypes": {},
        "tensorflow_core._api.v1.compat.v1.sets": {},
        "tensorflow_core._api.v1.compat.v1.manip": {},
        "tensorflow_core._api.v1.compat.v1.resource_loader": {},
        "tensorflow_core._api.v1.compat.v1.data": {},
        "tensorflow_core._api.v1.compat.v1.data.experimental": {},
        "tensorflow_core._api.v1.compat.v1.ragged": {},
        "tensorflow_core._api.v1.compat.v1.version": {},
        "tensorflow_core._api.v1.compat.v1.layers": {},
        "tensorflow_core._api.v1.compat.v1.layers.experimental": {},
        "tensorflow_core._api.v1.compat.v1.strings": {},
        "tensorflow_core._api.v1.compat.v1.profiler": {},
        "tensorflow_core._api.v1.compat.v1.app": {},
        "tensorflow_core._api.v1.compat.v1.compat": {},
        "tensorflow_core._api.v1.compat.v1.feature_column": {},
        "tensorflow_core._api.v1.compat.v1.debugging": {},
        "tensorflow_core._api.v1.compat.v1.errors": {},
        "tensorflow_core._api.v1.compat.v1.nest": {},
        "tensorflow_core._api.v1.compat.v1.experimental": {},
        "tensorflow_core._api.v1.feature_column": {},
        "tensorflow_core._api.v1.debugging": {},
        "tensorflow_core._api.v1.errors": {},
        "tensorflow_core._api.v1.nest": {},
        "tensorflow_core._api.v1.experimental": {},
        "tensorflow_core.examples": {},
        "tensorflow_core.examples.tutorials": {},
        "tensorflow_core.examples.tutorials.mnist.input_data": {},
        "tensorflow_core.examples.tutorials.mnist.mnist": {
            "inference": [
                "images",
                "hidden1_units",
                "hidden2_units"
            ],
            "loss": [
                "logits",
                "labels"
            ],
            "training": [
                "loss",
                "learning_rate"
            ],
            "evaluation": [
                "logits",
                "labels"
            ]
        },
        "tensorflow_core.examples.tutorials.mnist": {},
        "tensorflow_core.examples.saved_model": {},
        "tensorflow_core.examples.saved_model.integration_tests.mnist_util": {
            "_load_random_data": [
                "num_train_and_test"
            ],
            "load_reshaped_data": [
                "use_fashion_mnist",
                "fake_tiny_data"
            ],
            "_prepare_image": [
                "x"
            ],
            "_prepare_label": [
                "y"
            ]
        },
        "tensorflow_core.examples.saved_model.integration_tests": {},
        "tensorflow_core.python.pywrap_tensorflow_internal": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "static"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "TF_NewStatus": [],
            "TF_DeleteStatus": [
                "arg1"
            ],
            "TF_SetStatus": [
                "s",
                "code",
                "msg"
            ],
            "TF_GetCode": [
                "s"
            ],
            "TF_Message": [
                "s"
            ],
            "TF_DataTypeSize": [
                "dt"
            ],
            "TF_ListPhysicalDevices": [],
            "TFE_ClearScalarCache": [],
            "TFE_NewContextOptions": [],
            "TFE_ContextOptionsSetConfig": [
                "options",
                "proto"
            ],
            "TFE_ContextOptionsSetAsync": [
                "arg1",
                "enable"
            ],
            "TFE_ContextOptionsSetDevicePlacementPolicy": [
                "arg1",
                "arg2"
            ],
            "TFE_DeleteContextOptions": [
                "arg1"
            ],
            "TFE_NewContext": [
                "opts"
            ],
            "TFE_DeleteContext": [
                "ctx"
            ],
            "TFE_ContextListDevices": [
                "ctx"
            ],
            "TFE_ContextClearCaches": [
                "ctx"
            ],
            "TFE_ContextSetThreadLocalDevicePlacementPolicy": [
                "ctx",
                "policy"
            ],
            "TFE_ContextGetDevicePlacementPolicy": [
                "ctx"
            ],
            "TFE_ContextSetServerDef": [
                "ctx",
                "keep_alive_secs",
                "proto"
            ],
            "TFE_OpNameGetAttrType": [
                "ctx",
                "op_or_function_name",
                "attr_name"
            ],
            "TFE_ContextAddFunctionDef": [
                "ctx",
                "serialized_function_def",
                "size"
            ],
            "TFE_ContextAddFunction": [
                "ctx",
                "function"
            ],
            "TFE_ContextRemoveFunction": [
                "ctx",
                "name"
            ],
            "TFE_ContextHasFunction": [
                "ctx",
                "name"
            ],
            "TFE_ContextEnableRunMetadata": [
                "ctx"
            ],
            "TFE_ContextDisableRunMetadata": [
                "ctx"
            ],
            "TFE_ContextExportRunMetadata": [
                "ctx",
                "buf"
            ],
            "TFE_ContextStartStep": [
                "ctx"
            ],
            "TFE_ContextEndStep": [
                "ctx"
            ],
            "TFE_Py_Execute": [
                "ctx",
                "device_name",
                "op_name",
                "inputs",
                "attrs",
                "outputs"
            ],
            "TFE_Py_ExecuteCancelable": [
                "ctx",
                "device_name",
                "op_name",
                "inputs",
                "attrs",
                "cancellation_manager",
                "outputs"
            ],
            "TFE_Py_RegisterExceptionClass": [
                "e"
            ],
            "TFE_Py_RegisterVSpace": [
                "e"
            ],
            "TFE_Py_RegisterFallbackExceptionClass": [
                "e"
            ],
            "TFE_Py_RegisterGradientFunction": [
                "e"
            ],
            "TFE_Py_RegisterForwardGradientFunction": [
                "e"
            ],
            "TFE_Py_UID": [],
            "TFE_Py_InitEagerTensor": [
                "base_class"
            ],
            "TFE_Py_SetEagerTensorProfiler": [
                "profiler"
            ],
            "TFE_Py_TapeSetNew": [
                "persistent",
                "watch_accessed_variables"
            ],
            "TFE_Py_TapeSetRemove": [
                "tape"
            ],
            "TFE_Py_TapeSetAdd": [
                "tape"
            ],
            "TFE_Py_TapeSetIsEmpty": [],
            "TFE_Py_TapeSetShouldRecord": [
                "tensors"
            ],
            "TFE_Py_TapeSetPossibleGradientTypes": [
                "tensors"
            ],
            "TFE_Py_TapeWatch": [
                "tape",
                "tensor"
            ],
            "TFE_Py_TapeSetDeleteTrace": [
                "tensor_id"
            ],
            "TFE_Py_TapeSetStopOnThread": [],
            "TFE_Py_TapeSetRestartOnThread": [],
            "TFE_Py_TapeSetIsStopped": [],
            "TFE_Py_TapeSetRecordOperation": [
                "op_type",
                "output_tensors",
                "input_tensor_ids",
                "backward_function"
            ],
            "TFE_Py_TapeVariableAccessed": [
                "variable"
            ],
            "TFE_Py_TapeWatchVariable": [
                "tape",
                "variable"
            ],
            "TFE_Py_TapeGradient": [
                "tape",
                "target",
                "sources",
                "output_gradients",
                "sources_raw",
                "unconnected_gradients"
            ],
            "TFE_Py_RecordGradient": [
                "op_name",
                "inputs",
                "attrs",
                "results",
                "name"
            ],
            "TFE_Py_TapeWatchedVariables": [
                "tape"
            ],
            "TFE_Py_ForwardAccumulatorNew": [],
            "TFE_Py_ForwardAccumulatorSetRemove": [
                "accumulator"
            ],
            "TFE_Py_ForwardAccumulatorWatch": [
                "accumulator",
                "tensor",
                "tangent"
            ],
            "TFE_Py_ForwardAccumulatorJVP": [
                "accumulator",
                "tensor"
            ],
            "TFE_Py_TensorShapeSlice": [
                "tensors",
                "slice_dim"
            ],
            "TFE_Py_TensorShapeOnDevice": [
                "tensor"
            ],
            "TFE_Py_EncodeArg": [
                "arg1",
                "include_tensor_ranks_only"
            ],
            "TFE_Py_EnableInteractivePythonLogging": [],
            "TFE_Py_SetEagerContext": [
                "python_context"
            ],
            "TF_SetXlaEnableLazyCompilation": [
                "enable"
            ],
            "TF_SetXlaAutoJitMode": [
                "mode"
            ],
            "TF_SetXlaMinClusterSize": [
                "size"
            ],
            "TF_GetXlaConstantFoldingDisabled": [],
            "TF_SetXlaConstantFoldingDisabled": [
                "should_enable"
            ],
            "TF_PickUnusedPortOrDie": [],
            "TFE_EnableCollectiveOps": [
                "ctx",
                "proto"
            ],
            "TF_ImportGraphDefOptionsSetValidateColocationConstraints": [
                "opts",
                "enable"
            ],
            "TFE_NewProfiler": [],
            "TFE_ProfilerIsOk": [
                "profiler"
            ],
            "TFE_DeleteProfiler": [
                "profiler"
            ],
            "TFE_ProfilerSerializeToString": [
                "profiler",
                "buf"
            ],
            "TFE_StartProfilerServer": [
                "port"
            ],
            "TFE_ContextEnableGraphCollection": [
                "ctx"
            ],
            "TFE_ContextDisableGraphCollection": [
                "ctx"
            ],
            "TFE_ProfilerClientStartTracing": [
                "service_addr",
                "logdir",
                "worker_list",
                "include_dataset_ops",
                "duration_ms",
                "num_tracing_attempts"
            ],
            "TFE_ProfilerClientMonitor": [
                "service_addr",
                "duration_ms",
                "monitoring_level",
                "display_timestamp",
                "result"
            ],
            "TFE_MonitoringCounterCellIncrementBy": [
                "cell",
                "value"
            ],
            "TFE_MonitoringCounterCellValue": [
                "cell"
            ],
            "TFE_MonitoringNewCounter0": [
                "name",
                "description"
            ],
            "TFE_MonitoringDeleteCounter0": [
                "counter"
            ],
            "TFE_MonitoringGetCellCounter0": [
                "counter"
            ],
            "TFE_MonitoringNewCounter1": [
                "name",
                "description",
                "label1"
            ],
            "TFE_MonitoringDeleteCounter1": [
                "counter"
            ],
            "TFE_MonitoringGetCellCounter1": [
                "counter",
                "label1"
            ],
            "TFE_MonitoringNewCounter2": [
                "name",
                "description",
                "label1",
                "label2"
            ],
            "TFE_MonitoringDeleteCounter2": [
                "counter"
            ],
            "TFE_MonitoringGetCellCounter2": [
                "counter",
                "label1",
                "label2"
            ],
            "TFE_MonitoringIntGaugeCellSet": [
                "cell",
                "value"
            ],
            "TFE_MonitoringIntGaugeCellValue": [
                "cell"
            ],
            "TFE_MonitoringNewIntGauge0": [
                "name",
                "description"
            ],
            "TFE_MonitoringDeleteIntGauge0": [
                "gauge"
            ],
            "TFE_MonitoringGetCellIntGauge0": [
                "gauge"
            ],
            "TFE_MonitoringNewIntGauge1": [
                "name",
                "description",
                "label1"
            ],
            "TFE_MonitoringDeleteIntGauge1": [
                "gauge"
            ],
            "TFE_MonitoringGetCellIntGauge1": [
                "gauge",
                "label1"
            ],
            "TFE_MonitoringNewIntGauge2": [
                "name",
                "description",
                "label1",
                "label2"
            ],
            "TFE_MonitoringDeleteIntGauge2": [
                "gauge"
            ],
            "TFE_MonitoringGetCellIntGauge2": [
                "gauge",
                "label1",
                "label2"
            ],
            "TFE_MonitoringStringGaugeCellSet": [
                "cell",
                "value"
            ],
            "TFE_MonitoringStringGaugeCellValue": [
                "cell",
                "buf"
            ],
            "TFE_MonitoringNewStringGauge0": [
                "name",
                "description"
            ],
            "TFE_MonitoringDeleteStringGauge0": [
                "gauge"
            ],
            "TFE_MonitoringGetCellStringGauge0": [
                "gauge"
            ],
            "TFE_MonitoringNewStringGauge1": [
                "name",
                "description",
                "label1"
            ],
            "TFE_MonitoringDeleteStringGauge1": [
                "gauge"
            ],
            "TFE_MonitoringGetCellStringGauge1": [
                "gauge",
                "label1"
            ],
            "TFE_MonitoringNewStringGauge2": [
                "name",
                "description",
                "label1",
                "label2"
            ],
            "TFE_MonitoringDeleteStringGauge2": [
                "gauge"
            ],
            "TFE_MonitoringGetCellStringGauge2": [
                "gauge",
                "label1",
                "label2"
            ],
            "TFE_MonitoringBoolGaugeCellSet": [
                "cell",
                "value"
            ],
            "TFE_MonitoringBoolGaugeCellValue": [
                "cell"
            ],
            "TFE_MonitoringNewBoolGauge0": [
                "name",
                "description"
            ],
            "TFE_MonitoringDeleteBoolGauge0": [
                "gauge"
            ],
            "TFE_MonitoringGetCellBoolGauge0": [
                "gauge"
            ],
            "TFE_MonitoringNewBoolGauge1": [
                "name",
                "description",
                "label1"
            ],
            "TFE_MonitoringDeleteBoolGauge1": [
                "gauge"
            ],
            "TFE_MonitoringGetCellBoolGauge1": [
                "gauge",
                "label1"
            ],
            "TFE_MonitoringNewBoolGauge2": [
                "name",
                "description",
                "label1",
                "label2"
            ],
            "TFE_MonitoringDeleteBoolGauge2": [
                "gauge"
            ],
            "TFE_MonitoringGetCellBoolGauge2": [
                "gauge",
                "label1",
                "label2"
            ],
            "TFE_MonitoringSamplerCellAdd": [
                "cell",
                "value"
            ],
            "TFE_MonitoringSamplerCellValue": [
                "cell",
                "buf"
            ],
            "TFE_MonitoringNewExponentialBuckets": [
                "scale",
                "growth_factor",
                "bucket_count"
            ],
            "TFE_MonitoringDeleteBuckets": [
                "buckets"
            ],
            "TFE_MonitoringNewSampler0": [
                "name",
                "buckets",
                "description"
            ],
            "TFE_MonitoringDeleteSampler0": [
                "sampler"
            ],
            "TFE_MonitoringGetCellSampler0": [
                "sampler"
            ],
            "TFE_MonitoringNewSampler1": [
                "name",
                "buckets",
                "description",
                "label1"
            ],
            "TFE_MonitoringDeleteSampler1": [
                "sampler"
            ],
            "TFE_MonitoringGetCellSampler1": [
                "sampler",
                "label1"
            ],
            "TFE_MonitoringNewSampler2": [
                "name",
                "buckets",
                "description",
                "label1",
                "label2"
            ],
            "TFE_MonitoringDeleteSampler2": [
                "sampler"
            ],
            "TFE_MonitoringGetCellSampler2": [
                "sampler",
                "label1",
                "label2"
            ],
            "TFE_ContextOptionsSetMirroringPolicy": [
                "arg1",
                "arg2"
            ],
            "TFE_ContextSetThreadLocalMirroringPolicy": [
                "arg1",
                "arg2"
            ],
            "TFE_ContextGetMirroringPolicy": [
                "arg1"
            ],
            "TFE_NewCancellationManager": [],
            "TFE_CancellationManagerIsCancelled": [
                "arg1"
            ],
            "TFE_CancellationManagerStartCancel": [
                "arg1"
            ],
            "TFE_DeleteCancellationManager": [
                "arg1"
            ],
            "TFE_NewExecutor": [
                "is_async"
            ],
            "TFE_DeleteExecutor": [
                "arg1"
            ],
            "TFE_ExecutorIsAsync": [
                "arg1"
            ],
            "TFE_ExecutorWaitForAllPendingNodes": [
                "arg1"
            ],
            "TFE_ExecutorClearError": [
                "arg1"
            ],
            "TFE_ContextSetExecutorForThread": [
                "arg1",
                "arg2"
            ],
            "TFE_ContextGetExecutorForThread": [
                "arg1"
            ],
            "IsGoogleCudaEnabled": [],
            "IsBuiltWithROCm": [],
            "GpuSupportsHalfMatMulAndConv": [],
            "IsMklEnabled": [],
            "CheckpointReader_GetTensor": [
                "reader",
                "name"
            ],
            "NewCheckpointReader": [
                "filepattern"
            ],
            "NewStatSummarizer": [
                "unused"
            ],
            "DeleteStatSummarizer": [
                "ss"
            ],
            "NewProfiler": [
                "graph",
                "op_log"
            ],
            "DeleteProfiler": [],
            "AddStep": [
                "step",
                "graph",
                "run_meta",
                "op_log"
            ],
            "WriteProfile": [
                "filename"
            ],
            "ProfilerFromFile": [
                "filename"
            ],
            "SerializeToString": [],
            "Profile": [
                "command",
                "options"
            ],
            "PrintModelAnalysis": [
                "graph",
                "run_meta",
                "op_log",
                "command",
                "options"
            ],
            "InitializePyTrampoline": [
                "trampoline"
            ],
            "PyExceptionRegistry_Init": [
                "code_to_exc_type_map"
            ],
            "PyRecordReader_New": [
                "filename",
                "start_offset",
                "compression_type_string",
                "out_status"
            ],
            "RecordWriterOptions_CreateRecordWriterOptions": [
                "compression_type"
            ],
            "PyRecordWriter_New": [
                "filename",
                "compression_options",
                "out_status"
            ],
            "Status_OK": [],
            "StatusGroup_MakeDerived": [
                "s"
            ],
            "StatusGroup_IsDerived": [
                "s"
            ],
            "StatusGroup_ConfigureLogHistory": [],
            "__lshift__": [
                "os",
                "x"
            ],
            "TfCheckOpHelperOutOfLine": [
                "v",
                "msg"
            ],
            "TfCheckOpHelper": [
                "v",
                "msg"
            ],
            "TF_Version": [],
            "TF_NewBufferFromString": [
                "proto"
            ],
            "TF_NewBuffer": [],
            "TF_DeleteBuffer": [
                "arg1"
            ],
            "TF_GetBuffer": [
                "buffer"
            ],
            "_TF_NewSessionOptions": [],
            "_TF_SetTarget": [
                "options",
                "target"
            ],
            "_TF_SetConfig": [
                "options",
                "proto"
            ],
            "TF_DeleteSessionOptions": [
                "arg1"
            ],
            "TF_NewGraph": [],
            "TF_DeleteGraph": [
                "arg1"
            ],
            "TF_GraphSetTensorShape": [
                "graph",
                "output",
                "dims",
                "num_dims"
            ],
            "TF_GraphGetTensorNumDims": [
                "graph",
                "output"
            ],
            "TF_GraphGetTensorShape": [
                "graph",
                "output",
                "dims",
                "num_dims"
            ],
            "TF_NewOperation": [
                "graph",
                "op_type",
                "oper_name"
            ],
            "TF_SetDevice": [
                "desc",
                "device"
            ],
            "TF_AddInput": [
                "desc",
                "input"
            ],
            "TF_AddInputList": [
                "desc",
                "inputs"
            ],
            "TF_AddControlInput": [
                "desc",
                "input"
            ],
            "TF_ColocateWith": [
                "desc",
                "op"
            ],
            "TF_SetAttrString": [
                "desc",
                "attr_name",
                "value",
                "length"
            ],
            "TF_SetAttrStringList": [
                "desc",
                "attr_name",
                "values",
                "lengths",
                "num_values"
            ],
            "TF_SetAttrInt": [
                "desc",
                "attr_name",
                "value"
            ],
            "TF_SetAttrIntList": [
                "desc",
                "attr_name",
                "values",
                "num_values"
            ],
            "TF_SetAttrFloat": [
                "desc",
                "attr_name",
                "value"
            ],
            "TF_SetAttrFloatList": [
                "desc",
                "attr_name",
                "values",
                "num_values"
            ],
            "TF_SetAttrBool": [
                "desc",
                "attr_name",
                "value"
            ],
            "TF_SetAttrBoolList": [
                "desc",
                "attr_name",
                "values",
                "num_values"
            ],
            "TF_SetAttrType": [
                "desc",
                "attr_name",
                "value"
            ],
            "TF_SetAttrTypeList": [
                "desc",
                "attr_name",
                "values",
                "num_values"
            ],
            "TF_SetAttrPlaceholder": [
                "desc",
                "attr_name",
                "placeholder"
            ],
            "TF_SetAttrFuncName": [
                "desc",
                "attr_name",
                "value",
                "length"
            ],
            "TF_SetAttrShape": [
                "desc",
                "attr_name",
                "dims",
                "num_dims"
            ],
            "TF_SetAttrShapeList": [
                "desc",
                "attr_name",
                "dims",
                "num_dims",
                "num_shapes"
            ],
            "TF_SetAttrTensorShapeProto": [
                "desc",
                "attr_name",
                "proto"
            ],
            "TF_SetAttrTensorShapeProtoList": [
                "desc",
                "attr_name",
                "protos",
                "proto_lens",
                "num_shapes"
            ],
            "TF_SetAttrTensor": [
                "desc",
                "attr_name",
                "value"
            ],
            "TF_SetAttrTensorList": [
                "desc",
                "attr_name",
                "values",
                "num_values"
            ],
            "TF_SetAttrValueProto": [
                "desc",
                "attr_name",
                "proto"
            ],
            "TF_FinishOperation": [
                "desc"
            ],
            "TF_OperationName": [
                "oper"
            ],
            "TF_OperationOpType": [
                "oper"
            ],
            "TF_OperationDevice": [
                "oper"
            ],
            "TF_OperationNumOutputs": [
                "oper"
            ],
            "TF_OperationOutputType": [
                "oper_out"
            ],
            "TF_OperationOutputListLength": [
                "oper",
                "arg_name"
            ],
            "TF_OperationNumInputs": [
                "oper"
            ],
            "TF_OperationInputType": [
                "oper_in"
            ],
            "TF_OperationInputListLength": [
                "oper",
                "arg_name"
            ],
            "TF_OperationInput": [
                "oper_in"
            ],
            "TF_OperationOutputNumConsumers": [
                "oper_out"
            ],
            "TF_OperationNumControlInputs": [
                "oper"
            ],
            "TF_OperationNumControlOutputs": [
                "oper"
            ],
            "TF_OperationGetAttrMetadata": [
                "oper",
                "attr_name"
            ],
            "TF_OperationGetAttrString": [
                "oper",
                "attr_name",
                "value",
                "max_length"
            ],
            "TF_OperationGetAttrStringList": [
                "oper",
                "attr_name",
                "values",
                "lengths",
                "max_values",
                "storage",
                "storage_size"
            ],
            "TF_OperationGetAttrInt": [
                "oper",
                "attr_name",
                "value"
            ],
            "TF_OperationGetAttrIntList": [
                "oper",
                "attr_name",
                "values",
                "max_values"
            ],
            "TF_OperationGetAttrFloat": [
                "oper",
                "attr_name",
                "value"
            ],
            "TF_OperationGetAttrFloatList": [
                "oper",
                "attr_name",
                "values",
                "max_values"
            ],
            "TF_OperationGetAttrBool": [
                "oper",
                "attr_name",
                "value"
            ],
            "TF_OperationGetAttrBoolList": [
                "oper",
                "attr_name",
                "values",
                "max_values"
            ],
            "TF_OperationGetAttrType": [
                "oper",
                "attr_name"
            ],
            "TF_OperationGetAttrTypeList": [
                "oper",
                "attr_name",
                "values",
                "max_values"
            ],
            "TF_OperationGetAttrShape": [
                "oper",
                "attr_name",
                "value",
                "num_dims"
            ],
            "TF_OperationGetAttrShapeList": [
                "oper",
                "attr_name",
                "dims",
                "num_dims",
                "num_shapes",
                "storage",
                "storage_size"
            ],
            "TF_OperationGetAttrTensorShapeProto": [
                "oper",
                "attr_name",
                "value"
            ],
            "TF_OperationGetAttrTensorShapeProtoList": [
                "oper",
                "attr_name",
                "values",
                "max_values"
            ],
            "TF_OperationGetAttrTensor": [
                "oper",
                "attr_name",
                "value"
            ],
            "TF_OperationGetAttrTensorList": [
                "oper",
                "attr_name",
                "values",
                "max_values"
            ],
            "TF_OperationGetAttrValueProto": [
                "oper",
                "attr_name",
                "output_attr_value"
            ],
            "TF_GraphOperationByName": [
                "graph",
                "oper_name"
            ],
            "TF_GraphNextOperation": [
                "graph",
                "pos"
            ],
            "TF_GraphToGraphDef": [
                "graph",
                "output_graph_def"
            ],
            "TF_GraphGetOpDef": [
                "graph",
                "op_name",
                "output_op_def"
            ],
            "TF_GraphVersions": [
                "graph",
                "output_version_def"
            ],
            "TF_NewImportGraphDefOptions": [],
            "TF_DeleteImportGraphDefOptions": [
                "opts"
            ],
            "TF_ImportGraphDefOptionsSetPrefix": [
                "opts",
                "prefix"
            ],
            "TF_ImportGraphDefOptionsSetDefaultDevice": [
                "opts",
                "device"
            ],
            "TF_ImportGraphDefOptionsSetUniquifyNames": [
                "opts",
                "uniquify_names"
            ],
            "TF_ImportGraphDefOptionsSetUniquifyPrefix": [
                "opts",
                "uniquify_prefix"
            ],
            "TF_ImportGraphDefOptionsAddInputMapping": [
                "opts",
                "src_name",
                "src_index",
                "dst"
            ],
            "TF_ImportGraphDefOptionsRemapControlDependency": [
                "opts",
                "src_name",
                "dst"
            ],
            "TF_ImportGraphDefOptionsAddControlDependency": [
                "opts",
                "oper"
            ],
            "TF_ImportGraphDefOptionsAddReturnOutput": [
                "opts",
                "oper_name",
                "index"
            ],
            "TF_ImportGraphDefOptionsNumReturnOutputs": [
                "opts"
            ],
            "TF_ImportGraphDefOptionsAddReturnOperation": [
                "opts",
                "oper_name"
            ],
            "TF_ImportGraphDefOptionsNumReturnOperations": [
                "opts"
            ],
            "TF_ImportGraphDefResultsReturnOutputs": [
                "results"
            ],
            "TF_ImportGraphDefResultsReturnOperations": [
                "results"
            ],
            "TF_DeleteImportGraphDefResults": [
                "results"
            ],
            "TF_GraphImportGraphDefWithResults": [
                "graph",
                "graph_def",
                "options"
            ],
            "TF_GraphImportGraphDefWithReturnOutputs": [
                "graph",
                "graph_def",
                "options",
                "return_outputs",
                "num_return_outputs"
            ],
            "TF_GraphImportGraphDef": [
                "graph",
                "graph_def",
                "options"
            ],
            "TF_GraphCopyFunction": [
                "g",
                "func",
                "grad"
            ],
            "TF_GraphNumFunctions": [
                "g"
            ],
            "TF_GraphGetFunctions": [
                "g",
                "funcs",
                "max_func"
            ],
            "TF_OperationToNodeDef": [
                "oper",
                "output_node_def"
            ],
            "TF_AddGradients": [
                "g",
                "y",
                "ny",
                "x",
                "nx",
                "dx",
                "dy"
            ],
            "TF_AddGradientsWithPrefix": [
                "g",
                "prefix",
                "y",
                "ny",
                "x",
                "nx",
                "dx",
                "dy"
            ],
            "TF_GraphToFunction": [
                "fn_body",
                "fn_name",
                "append_hash_to_fn_name",
                "num_opers",
                "opers",
                "ninputs",
                "inputs",
                "noutputs",
                "outputs",
                "output_names",
                "opts",
                "description"
            ],
            "TF_GraphToFunctionWithControlOutputs": [
                "fn_body",
                "fn_name",
                "append_hash_to_fn_name",
                "num_opers",
                "opers",
                "ninputs",
                "inputs",
                "noutputs",
                "outputs",
                "output_names",
                "ncontrol_outputs",
                "control_outputs",
                "control_output_names",
                "opts",
                "description"
            ],
            "TF_FunctionName": [
                "func"
            ],
            "TF_FunctionToFunctionDef": [
                "func",
                "output_func_def"
            ],
            "TF_FunctionImportFunctionDef": [
                "proto"
            ],
            "TF_FunctionSetAttrValueProto": [
                "func",
                "attr_name",
                "proto"
            ],
            "TF_FunctionGetAttrValueProto": [
                "func",
                "attr_name",
                "output_attr_value"
            ],
            "TF_DeleteFunction": [
                "func"
            ],
            "TF_TryEvaluateConstant": [
                "graph",
                "output",
                "result"
            ],
            "TF_NewSession": [
                "graph",
                "opts"
            ],
            "TF_LoadSessionFromSavedModel": [
                "session_options",
                "run_options",
                "export_dir",
                "tags",
                "tags_len",
                "graph",
                "meta_graph_def"
            ],
            "TF_CloseSession": [
                "arg1"
            ],
            "TF_DeleteSession": [
                "arg1"
            ],
            "TF_DeletePRunHandle": [
                "handle"
            ],
            "TF_NewDeprecatedSession": [
                "arg1"
            ],
            "TF_CloseDeprecatedSession": [
                "arg1"
            ],
            "TF_DeleteDeprecatedSession": [
                "arg1"
            ],
            "TF_Reset": [
                "target",
                "containers",
                "config"
            ],
            "TF_ExtendGraph": [
                "arg1",
                "proto",
                "arg3"
            ],
            "TF_SessionListDevices": [
                "session"
            ],
            "TF_DeprecatedSessionListDevices": [
                "session"
            ],
            "TF_DeleteDeviceList": [
                "list"
            ],
            "TF_DeviceListCount": [
                "list"
            ],
            "TF_DeviceListName": [
                "list",
                "index"
            ],
            "TF_DeviceListType": [
                "list",
                "index"
            ],
            "TF_DeviceListMemoryBytes": [
                "list",
                "index"
            ],
            "TF_DeviceListIncarnation": [
                "list",
                "index"
            ],
            "TF_LoadLibrary": [
                "library_filename"
            ],
            "TF_GetOpList": [
                "lib_handle"
            ],
            "TF_DeleteLibraryHandle": [
                "lib_handle"
            ],
            "TF_GetAllOpList": [],
            "TF_NewApiDefMap": [
                "op_list_buffer"
            ],
            "TF_DeleteApiDefMap": [
                "apimap"
            ],
            "TF_ApiDefMapPut": [
                "api_def_map",
                "text",
                "text_len"
            ],
            "TF_ApiDefMapGet": [
                "api_def_map",
                "name",
                "name_len"
            ],
            "TF_GetAllRegisteredKernels": [],
            "TF_GetRegisteredKernelsForOp": [
                "name"
            ],
            "TF_NewServer": [
                "proto"
            ],
            "TF_ServerStart": [
                "server"
            ],
            "TF_ServerStop": [
                "server"
            ],
            "TF_ServerJoin": [
                "server"
            ],
            "TF_ServerTarget": [
                "server"
            ],
            "TF_DeleteServer": [
                "server"
            ],
            "TF_RegisterLogListener": [
                "listener"
            ],
            "AddControlInput": [
                "graph",
                "op",
                "input"
            ],
            "SetAttr": [
                "graph",
                "op",
                "attr_name",
                "attr_value_proto"
            ],
            "ClearAttr": [
                "graph",
                "op",
                "attr_name"
            ],
            "SetRequestedDevice": [
                "graph",
                "op",
                "device"
            ],
            "UpdateEdge": [
                "graph",
                "new_src",
                "dst"
            ],
            "RemoveAllControlInputs": [
                "graph",
                "op"
            ],
            "SetRequireShapeInferenceFns": [
                "graph",
                "require"
            ],
            "ExtendSession": [
                "session"
            ],
            "GetHandleShapeAndType": [
                "graph",
                "output"
            ],
            "SetHandleShapeAndType": [
                "graph",
                "output",
                "proto"
            ],
            "AddWhileInputHack": [
                "graph",
                "new_src",
                "dst"
            ],
            "TF_NewSessionOptions": [
                "target",
                "config"
            ],
            "TF_NewSessionRef": [
                "graph",
                "opts"
            ],
            "TF_Run": [
                "session",
                "run_options",
                "feed_dict",
                "output_names",
                "target_nodes",
                "out_status",
                "run_outputs"
            ],
            "TF_DeprecatedSessionMakeCallable": [
                "session",
                "callable_options"
            ],
            "TF_SessionMakeCallable": [
                "session",
                "callable_options"
            ],
            "TF_DeprecatedSessionRunCallable": [
                "session",
                "handle",
                "feed_values",
                "run_metadata"
            ],
            "TF_SessionRunCallable": [
                "session",
                "handle",
                "feed_values",
                "run_metadata"
            ],
            "TF_DeprecatedSessionReleaseCallable": [
                "session",
                "handle"
            ],
            "TF_SessionReleaseCallable": [
                "session",
                "handle"
            ],
            "TF_PRunSetup": [
                "session",
                "input_names",
                "output_names",
                "target_nodes",
                "out_status"
            ],
            "TF_PRun": [
                "session",
                "handle",
                "feed_dict",
                "output_names",
                "out_status"
            ],
            "TF_Reset_wrapper": [
                "opt",
                "containers"
            ],
            "EqualGraphDefWrapper": [
                "actual",
                "expected"
            ],
            "EqualAttrValueWrapper": [
                "actual",
                "expected"
            ],
            "TF_GraphGetTensorShapeHelper": [
                "graph",
                "output"
            ],
            "TF_SessionRun_wrapper": [
                "session",
                "run_options",
                "inputs",
                "outputs",
                "targets",
                "run_metadata"
            ],
            "TF_SessionPRunSetup_wrapper": [
                "session",
                "inputs",
                "outputs",
                "targets"
            ],
            "TF_SessionPRun_wrapper": [
                "session",
                "handle",
                "inputs",
                "outputs"
            ],
            "GetOperationInputs": [
                "oper"
            ],
            "TF_OperationGetControlInputs_wrapper": [
                "oper"
            ],
            "TF_OperationGetControlOutputs_wrapper": [
                "oper"
            ],
            "TF_OperationOutputConsumers_wrapper": [
                "oper_out"
            ],
            "TF_GraphToFunction_wrapper": [
                "fn_body",
                "fn_name",
                "append_hash_to_fn_name",
                "opers",
                "inputs",
                "outputs",
                "output_names",
                "control_outputs",
                "control_output_names",
                "opts",
                "description"
            ],
            "TF_GraphSetOutputHandleShapesAndTypes_wrapper": [
                "graph",
                "output",
                "shapes",
                "ranks",
                "types"
            ],
            "TF_GraphSetTensorShape_wrapper": [
                "graph",
                "output",
                "dims",
                "unknown_shape"
            ],
            "TF_ImportGraphDefResultsMissingUnusedInputMappings_wrapper": [
                "results"
            ],
            "TF_TryEvaluateConstant_wrapper": [
                "graph",
                "output"
            ],
            "ListDevices": [],
            "ListDevicesWithSessionConfig": [
                "config"
            ],
            "list_devices": [
                "session_config"
            ],
            "TF_bfloat16_type": [],
            "TocoConvert": [
                "model_flags_proto_txt_raw",
                "toco_flags_proto_txt_raw",
                "input_contents_txt_raw",
                "extended_return",
                "debug_info_txt_raw",
                "enable_mlir_converter"
            ],
            "TocoGetPotentiallySupportedOps": [],
            "FileExists": [
                "filename"
            ],
            "DeleteFile": [
                "filename"
            ],
            "ReadFileToString": [
                "filename"
            ],
            "WriteStringToFile": [
                "filename",
                "file_content"
            ],
            "GetChildren": [
                "dir"
            ],
            "GetMatchingFiles": [
                "filename"
            ],
            "CreateDir": [
                "dirname"
            ],
            "RecursivelyCreateDir": [
                "dirname"
            ],
            "CopyFile": [
                "oldpath",
                "newpath",
                "overwrite"
            ],
            "RenameFile": [
                "oldname",
                "newname",
                "overwrite"
            ],
            "DeleteRecursively": [
                "dirname"
            ],
            "IsDirectory": [
                "dirname",
                "out_status"
            ],
            "Stat": [
                "filename",
                "stats"
            ],
            "CreateBufferedInputStream": [
                "filename",
                "buffer_size"
            ],
            "CreateWritableFile": [
                "filename",
                "mode"
            ],
            "AppendToFile": [
                "file_content",
                "file"
            ],
            "TellFile": [
                "file"
            ],
            "ReadFromStream": [
                "stream",
                "bytes"
            ],
            "Set_TF_Status_from_Status": [
                "tf_status",
                "status"
            ],
            "StatusFromTF_Status": [
                "tf_status"
            ],
            "IsAbsolutePath": [
                "path"
            ],
            "Dirname": [
                "path"
            ],
            "Basename": [
                "path"
            ],
            "Extension": [
                "path"
            ],
            "CleanPath": [
                "path"
            ],
            "ParseURI": [
                "uri",
                "scheme",
                "host",
                "path"
            ],
            "CreateURI": [
                "scheme",
                "host",
                "path"
            ],
            "GetTempFilename": [
                "extension"
            ],
            "DoQuantizeTrainingOnGraphDefHelper": [
                "input_graph",
                "num_bits"
            ],
            "do_quantize_training_on_graphdef": [
                "input_graph",
                "num_bits"
            ],
            "GetPythonWrappers": [
                "op_list_buf"
            ],
            "RunCppShapeInference": [
                "graph_def_version",
                "serialized_node_def",
                "input_serialized_shapes",
                "input_constant_tensor_values",
                "input_constant_tensor_as_shape_values"
            ],
            "InstallStacktraceHandler": [],
            "TryFindKernelClass": [
                "serialized_node_def"
            ],
            "TransformGraphWithStringInputs": [
                "graph_def_string",
                "inputs_string",
                "outputs_string",
                "transforms_string",
                "out_status"
            ],
            "IsSequence": [
                "o"
            ],
            "IsSequenceOrComposite": [
                "o"
            ],
            "IsCompositeTensor": [
                "o"
            ],
            "IsTypeSpec": [
                "o"
            ],
            "IsNamedtuple": [
                "o",
                "strict"
            ],
            "IsMapping": [
                "o"
            ],
            "IsMappingView": [
                "o"
            ],
            "IsAttrs": [
                "o"
            ],
            "IsTensor": [
                "o"
            ],
            "IsResourceVariable": [
                "o"
            ],
            "IsVariable": [
                "o"
            ],
            "SameNamedtuples": [
                "o1",
                "o2"
            ],
            "AssertSameStructure": [
                "o1",
                "o2",
                "check_types",
                "expand_composites"
            ],
            "Flatten": [
                "nested",
                "expand_composites"
            ],
            "IsSequenceForData": [
                "o"
            ],
            "FlattenForData": [
                "nested"
            ],
            "AssertSameStructureForData": [
                "o1",
                "o2",
                "check_types"
            ],
            "RegisterType": [
                "type_name",
                "type"
            ],
            "TF_NewItem": [
                "meta_graph",
                "ignore_colocation",
                "ignore_user_placement"
            ],
            "TF_IdentifyImportantOps": [
                "item",
                "sort_topologically"
            ],
            "TF_GetOpProperties": [
                "item"
            ],
            "TF_GetColocationGroups": [
                "item"
            ],
            "TF_NewCluster": [
                "allow_soft_placement",
                "disable_detailed_stats"
            ],
            "TF_NewVirtualCluster": [
                "named_devices"
            ],
            "TF_ShutdownCluster": [
                "cluster"
            ],
            "TF_ListDevices": [
                "cluster"
            ],
            "TF_ListAvailableOps": [],
            "TF_GetSupportedDevices": [
                "cluster",
                "item"
            ],
            "TF_EstimatePerformance": [
                "device"
            ],
            "TF_MeasureCosts": [
                "item",
                "cluster",
                "generate_timeline"
            ],
            "TF_DeterminePeakMemoryUsage": [
                "item",
                "cluster"
            ],
            "TF_OptimizeGraph": [
                "cluster",
                "config_proto",
                "metagraph",
                "verbose",
                "graph_id"
            ],
            "GenerateCostReport": [
                "metagraph",
                "per_node_report",
                "verbose",
                "cluster"
            ],
            "GraphAnalyzer": [
                "file_path",
                "n"
            ],
            "GenerateModelReport": [
                "metagraph",
                "assume_valid_feeds",
                "debug"
            ],
            "PythonTraceMe_IsEnabled": [],
            "PythonScopedAnnotation_IsEnabled": [],
            "CheckpointReader": {
                "__init__": [
                    "self",
                    "filename"
                ],
                "_HasTensor": [
                    "self",
                    "name"
                ],
                "debug_string": [
                    "self"
                ],
                "get_variable_to_shape_map": [
                    "self"
                ],
                "_GetVariableToDataTypeMap": [
                    "self"
                ],
                "get_variable_to_dtype_map": [
                    "self"
                ],
                "has_tensor": [
                    "self",
                    "tensor_str"
                ],
                "get_tensor": [
                    "self",
                    "tensor_str"
                ]
            },
            "StatSummarizer": {
                "ProcessStepStats": [
                    "self",
                    "step_stats"
                ],
                "GetOutputString": [
                    "self"
                ],
                "PrintStepStats": [
                    "self"
                ],
                "ProcessStepStatsStr": [
                    "self",
                    "step_stats_str"
                ],
                "__init__": [
                    "self"
                ]
            },
            "PyExceptionRegistry": {
                "__init__": [
                    "self"
                ]
            },
            "PyRecordReader": {
                "__init__": [
                    "self"
                ],
                "GetNext": [
                    "self"
                ],
                "record": [
                    "self"
                ],
                "offset": [
                    "self"
                ],
                "Close": [
                    "self"
                ]
            },
            "RecordWriterOptions": {
                "__init__": [
                    "self"
                ]
            },
            "ZlibCompressionOptions": {
                "__init__": [
                    "self"
                ]
            },
            "PyRecordWriter": {
                "__init__": [
                    "self"
                ],
                "WriteRecord": [
                    "self",
                    "record",
                    "out_status"
                ],
                "Flush": [
                    "self",
                    "out_status"
                ],
                "Close": [
                    "self",
                    "out_status"
                ]
            },
            "Status": {
                "__init__": [
                    "self"
                ],
                "ok": [
                    "self"
                ],
                "code": [
                    "self"
                ],
                "error_message": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "x"
                ],
                "__ne__": [
                    "self",
                    "x"
                ],
                "Update": [
                    "self",
                    "new_status"
                ],
                "ToString": [
                    "self"
                ],
                "IgnoreError": [
                    "self"
                ]
            },
            "StatusGroup": {
                "as_summary_status": [
                    "self"
                ],
                "as_concatenated_status": [
                    "self"
                ],
                "ok": [
                    "self"
                ],
                "Update": [
                    "self",
                    "status"
                ],
                "AttachLogMessages": [
                    "self"
                ],
                "HasLogMessages": [
                    "self"
                ],
                "__init__": [
                    "self"
                ]
            },
            "EventsWriter": {
                "__init__": [
                    "self",
                    "file_prefix"
                ],
                "InitWithSuffix": [
                    "self",
                    "suffix"
                ],
                "FileName": [
                    "self"
                ],
                "_WriteSerializedEvent": [
                    "self",
                    "event_str"
                ],
                "Flush": [
                    "self"
                ],
                "Close": [
                    "self"
                ],
                "WriteEvent": [
                    "self",
                    "event"
                ]
            },
            "TF_Buffer": {
                "__init__": [
                    "self"
                ]
            },
            "TF_Input": {
                "__init__": [
                    "self"
                ]
            },
            "TF_Output": {
                "__init__": [
                    "self"
                ]
            },
            "TF_AttrMetadata": {
                "__init__": [
                    "self"
                ]
            },
            "WritableFile": {
                "__init__": [
                    "self"
                ],
                "Close": [
                    "self"
                ],
                "Flush": [
                    "self"
                ]
            },
            "BufferedInputStream": {
                "__init__": [
                    "self"
                ],
                "Tell": [
                    "self"
                ],
                "Seek": [
                    "self",
                    "position"
                ],
                "ReadLineAsString": [
                    "self"
                ]
            },
            "FileStatistics": {
                "__init__": [
                    "self"
                ]
            },
            "GItem": {
                "__init__": [
                    "self"
                ]
            },
            "GCluster": {
                "__init__": [
                    "self"
                ]
            },
            "PythonTraceMe": {
                "__init__": [
                    "self",
                    "name"
                ],
                "Enter": [
                    "self"
                ],
                "Exit": [
                    "self"
                ]
            },
            "PythonScopedAnnotation": {
                "__init__": [
                    "self",
                    "name"
                ],
                "Enter": [
                    "self"
                ],
                "Exit": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.pywrap_tensorflow": {},
        "tensorflow_core.python.pywrap_dlopen_global_flags": {
            "set_dlopen_flags": [],
            "reset_dlopen_flags": []
        },
        "tensorflow_core.python.tf2": {
            "enable": [],
            "disable": [],
            "enabled": []
        },
        "tensorflow_core.python": {},
        "tensorflow_core.python.lib": {},
        "tensorflow_core.python.lib.io.python_io": {},
        "tensorflow_core.python.lib.io.tf_record": {
            "tf_record_iterator": [
                "path",
                "options"
            ],
            "TFRecordCompressionType": {},
            "TFRecordOptions": {
                "__init__": [
                    "self",
                    "compression_type",
                    "flush_mode",
                    "input_buffer_size",
                    "output_buffer_size",
                    "window_bits",
                    "compression_level",
                    "compression_method",
                    "mem_level",
                    "compression_strategy"
                ],
                "get_compression_type_string": [
                    "cls",
                    "options"
                ],
                "_as_record_writer_options": [
                    "self"
                ]
            },
            "TFRecordWriter": {
                "__init__": [
                    "self",
                    "path",
                    "options"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "write": [
                    "self",
                    "record"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.lib.io.file_io": {
            "file_exists": [
                "filename"
            ],
            "file_exists_v2": [
                "path"
            ],
            "delete_file": [
                "filename"
            ],
            "delete_file_v2": [
                "path"
            ],
            "read_file_to_string": [
                "filename",
                "binary_mode"
            ],
            "write_string_to_file": [
                "filename",
                "file_content"
            ],
            "get_matching_files": [
                "filename"
            ],
            "get_matching_files_v2": [
                "pattern"
            ],
            "create_dir": [
                "dirname"
            ],
            "create_dir_v2": [
                "path"
            ],
            "recursive_create_dir": [
                "dirname"
            ],
            "recursive_create_dir_v2": [
                "path"
            ],
            "copy": [
                "oldpath",
                "newpath",
                "overwrite"
            ],
            "copy_v2": [
                "src",
                "dst",
                "overwrite"
            ],
            "rename": [
                "oldname",
                "newname",
                "overwrite"
            ],
            "rename_v2": [
                "src",
                "dst",
                "overwrite"
            ],
            "atomic_write_string_to_file": [
                "filename",
                "contents",
                "overwrite"
            ],
            "delete_recursively": [
                "dirname"
            ],
            "delete_recursively_v2": [
                "path"
            ],
            "is_directory": [
                "dirname"
            ],
            "is_directory_v2": [
                "path"
            ],
            "list_directory": [
                "dirname"
            ],
            "list_directory_v2": [
                "path"
            ],
            "walk": [
                "top",
                "in_order"
            ],
            "walk_v2": [
                "top",
                "topdown",
                "onerror"
            ],
            "stat": [
                "filename"
            ],
            "stat_v2": [
                "path"
            ],
            "filecmp": [
                "filename_a",
                "filename_b"
            ],
            "file_crc32": [
                "filename",
                "block_size"
            ],
            "FileIO": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ],
                "name": [
                    "self"
                ],
                "mode": [
                    "self"
                ],
                "_preread_check": [
                    "self"
                ],
                "_prewrite_check": [
                    "self"
                ],
                "_prepare_value": [
                    "self",
                    "val"
                ],
                "size": [
                    "self"
                ],
                "write": [
                    "self",
                    "file_content"
                ],
                "read": [
                    "self",
                    "n"
                ],
                "seek": [
                    "self",
                    "offset",
                    "whence",
                    "position"
                ],
                "readline": [
                    "self"
                ],
                "readlines": [
                    "self"
                ],
                "tell": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "__iter__": [
                    "self"
                ],
                "next": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "seekable": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.lib.io": {},
        "tensorflow_core.python.platform.tf_logging": {
            "_get_caller": [
                "offset"
            ],
            "get_logger": [],
            "log": [
                "level",
                "msg"
            ],
            "debug": [
                "msg"
            ],
            "error": [
                "msg"
            ],
            "fatal": [
                "msg"
            ],
            "info": [
                "msg"
            ],
            "warn": [
                "msg"
            ],
            "warning": [
                "msg"
            ],
            "TaskLevelStatusMessage": [
                "msg"
            ],
            "flush": [],
            "vlog": [
                "level",
                "msg"
            ],
            "_GetNextLogCountPerToken": [
                "token"
            ],
            "log_every_n": [
                "level",
                "msg",
                "n"
            ],
            "log_first_n": [
                "level",
                "msg",
                "n"
            ],
            "log_if": [
                "level",
                "msg",
                "condition"
            ],
            "_GetFileAndLine": [],
            "google2_log_prefix": [
                "level",
                "timestamp",
                "file_and_line"
            ],
            "get_verbosity": [],
            "set_verbosity": [
                "v"
            ],
            "_get_thread_id": []
        },
        "tensorflow_core.python.platform.gfile": {
            "GFile": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ]
            },
            "FastGFile": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ]
            }
        },
        "tensorflow_core.python.platform.build_info": {},
        "tensorflow_core.python.platform.remote_utils": {
            "get_default_communication_protocol": []
        },
        "tensorflow_core.python.platform.status_bar": {
            "SetupStatusBarInsideGoogle": [
                "unused_link_text",
                "unused_port"
            ]
        },
        "tensorflow_core.python.platform.app": {
            "_parse_flags_tolerate_undef": [
                "argv"
            ],
            "run": [
                "main",
                "argv"
            ]
        },
        "tensorflow_core.python.platform.control_imports": {},
        "tensorflow_core.python.platform.sysconfig": {
            "get_include": [],
            "get_lib": [],
            "get_compile_flags": [],
            "get_link_flags": []
        },
        "tensorflow_core.python.platform.test": {
            "main": [
                "argv"
            ],
            "get_temp_dir": [],
            "test_src_dir_path": [
                "relative_path"
            ],
            "is_built_with_cuda": [],
            "is_built_with_rocm": [],
            "is_built_with_gpu_support": []
        },
        "tensorflow_core.python.platform.googletest": {
            "g_main": [
                "argv"
            ],
            "main": [
                "argv"
            ],
            "GetTempDir": [],
            "test_src_dir_path": [
                "relative_path"
            ],
            "StatefulSessionAvailable": [],
            "StubOutForTesting": {
                "__init__": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_exc_type",
                    "unused_exc_value",
                    "unused_tb"
                ],
                "CleanUp": [
                    "self"
                ],
                "SmartSet": [
                    "self",
                    "obj",
                    "attr_name",
                    "new_attr"
                ],
                "SmartUnsetAll": [
                    "self"
                ],
                "Set": [
                    "self",
                    "parent",
                    "child_name",
                    "new_child"
                ],
                "UnsetAll": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.platform.resource_loader": {
            "load_resource": [
                "path"
            ],
            "get_data_files_path": [],
            "get_root_dir_with_all_resources": [],
            "get_path_to_datafile": [
                "path"
            ],
            "readahead_file_path": [
                "path",
                "readahead"
            ]
        },
        "tensorflow_core.python.platform.self_check": {
            "preload_check": []
        },
        "tensorflow_core.python.platform.parameterized": {},
        "tensorflow_core.python.platform": {},
        "tensorflow_core.python.platform.flags": {
            "_wrap_define_function": [
                "original_function"
            ],
            "_FlagValuesWrapper": {
                "__init__": [
                    "self",
                    "flags_object"
                ],
                "__getattribute__": [
                    "self",
                    "name"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "__delattr__": [
                    "self",
                    "name"
                ],
                "__dir__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__setitem__": [
                    "self",
                    "name",
                    "flag"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.platform.benchmark": {
            "_global_report_benchmark": [
                "name",
                "iters",
                "cpu_time",
                "wall_time",
                "throughput",
                "extras",
                "metrics"
            ],
            "benchmark_config": [],
            "_run_benchmarks": [
                "regex"
            ],
            "benchmarks_main": [
                "true_main",
                "argv"
            ],
            "_BenchmarkRegistrar": {
                "__new__": [
                    "mcs",
                    "clsname",
                    "base",
                    "attrs"
                ]
            },
            "Benchmark": {
                "is_abstract": [
                    "cls"
                ],
                "_get_name": [
                    "self",
                    "overwrite_name"
                ],
                "report_benchmark": [
                    "self",
                    "iters",
                    "cpu_time",
                    "wall_time",
                    "throughput",
                    "extras",
                    "name",
                    "metrics"
                ]
            },
            "TensorFlowBenchmark": {
                "__init__": [
                    "self"
                ],
                "is_abstract": [
                    "cls"
                ],
                "run_op_benchmark": [
                    "self",
                    "sess",
                    "op_or_tensor",
                    "feed_dict",
                    "burn_iters",
                    "min_iters",
                    "store_trace",
                    "store_memory_usage",
                    "name",
                    "extras",
                    "mbs"
                ],
                "evaluate": [
                    "self",
                    "tensors"
                ]
            }
        },
        "tensorflow_core.python.tpu.topology": {
            "_tpu_device_name": [
                "job",
                "task",
                "device"
            ],
            "_tpu_host_device_name": [
                "job",
                "task"
            ],
            "Topology": {
                "__init__": [
                    "self",
                    "serialized",
                    "mesh_shape",
                    "device_coordinates"
                ],
                "_parse_topology": [
                    "self",
                    "serialized"
                ],
                "_invert_topology": [
                    "self"
                ],
                "mesh_shape": [
                    "self"
                ],
                "mesh_rank": [
                    "self"
                ],
                "device_coordinates": [
                    "self"
                ],
                "task_ordinal_at_coordinates": [
                    "self",
                    "device_coordinates"
                ],
                "tpu_device_ordinal_at_coordinates": [
                    "self",
                    "device_coordinates"
                ],
                "cpu_device_name_at_coordinates": [
                    "self",
                    "device_coordinates",
                    "job"
                ],
                "tpu_device_name_at_coordinates": [
                    "self",
                    "device_coordinates",
                    "job"
                ],
                "num_tasks": [
                    "self"
                ],
                "num_tpus_per_task": [
                    "self"
                ],
                "serialized": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu_feed": {
            "partition_or_replicate_on_host": [
                "tensor",
                "dims"
            ],
            "_tag_sharding_attribute_for_dequeued_tensor": [
                "tensor",
                "dims"
            ],
            "tag_sharding_attribute_for_dequeued_tensors": [
                "dequeues",
                "dims"
            ],
            "InfeedQueue": {
                "__init__": [
                    "self",
                    "number_of_tuple_elements",
                    "tuple_types",
                    "tuple_shapes",
                    "shard_dimensions",
                    "name"
                ],
                "_validate": [
                    "self"
                ],
                "number_of_tuple_elements": [
                    "self"
                ],
                "tuple_types": [
                    "self"
                ],
                "set_tuple_types": [
                    "self",
                    "tuple_types"
                ],
                "tuple_shapes": [
                    "self"
                ],
                "set_tuple_shapes": [
                    "self",
                    "tuple_shapes"
                ],
                "sharding_policies": [
                    "self"
                ],
                "shard_dimensions": [
                    "self"
                ],
                "set_shard_dimensions": [
                    "self",
                    "shard_dimensions"
                ],
                "number_of_shards": [
                    "self"
                ],
                "set_number_of_shards": [
                    "self",
                    "number_of_shards"
                ],
                "set_configuration_from_input_tensors": [
                    "self",
                    "input_tensors"
                ],
                "set_configuration_from_sharded_input_tensors": [
                    "self",
                    "input_tensors"
                ],
                "freeze": [
                    "self"
                ],
                "generate_dequeue_op": [
                    "self",
                    "tpu_device"
                ],
                "_generate_enqueue_op": [
                    "self",
                    "inputs",
                    "name_prefix",
                    "index",
                    "device",
                    "tpu_ordinal"
                ],
                "generate_enqueue_ops": [
                    "self",
                    "sharded_inputs",
                    "tpu_ordinal_function",
                    "placement_function"
                ],
                "_default_placement_function": [
                    "self",
                    "index"
                ],
                "_default_ordinal_function": [
                    "self",
                    "index"
                ],
                "split_inputs_and_generate_enqueue_ops": [
                    "self",
                    "inputs",
                    "device_assignment",
                    "placement_function",
                    "tpu_ordinal_function"
                ]
            },
            "_PartitionedInfeedQueue": {
                "__init__": [
                    "self",
                    "number_of_tuple_elements",
                    "device_assignment",
                    "host_id",
                    "input_partition_dims",
                    "tuple_types",
                    "tuple_shapes",
                    "name"
                ],
                "generate_dequeue_op": [
                    "self",
                    "tpu_device"
                ],
                "generate_enqueue_ops": [
                    "self",
                    "sharded_inputs"
                ],
                "_check_input_partition_dims": [
                    "self",
                    "tensor",
                    "dims"
                ],
                "_check_dims_and_partition_or_replicate_on_host": [
                    "self",
                    "tensor",
                    "dims"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu_sharding": {
            "ShardingPolicy": {
                "__init__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_fill_default_values": [
                    "self"
                ],
                "freeze": [
                    "self"
                ],
                "number_of_shards": [
                    "self"
                ],
                "set_number_of_shards": [
                    "self",
                    "number_of_shards"
                ],
                "shard_dimension": [
                    "self"
                ],
                "set_shard_dimension": [
                    "self",
                    "shard_dimension"
                ],
                "merge": [
                    "self",
                    "other"
                ],
                "get_sharded_shape": [
                    "self",
                    "shape",
                    "shard_index"
                ],
                "_unshard_shape": [
                    "self",
                    "shape"
                ],
                "get_unsharded_shape": [
                    "self",
                    "shapes"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu": {
            "_tpu_system_device_name": [
                "job"
            ],
            "initialize_system": [
                "embedding_config",
                "job"
            ],
            "initialize_system_for_tpu_embedding": [
                "embedding_config",
                "job"
            ],
            "shutdown_system": [
                "job"
            ],
            "core": [
                "num"
            ],
            "_enclosing_tpu_context_and_graph": [],
            "outside_compilation": [
                "computation"
            ],
            "replicate": [
                "computation",
                "inputs",
                "infeed_queue",
                "device_assignment",
                "name",
                "maximum_shapes"
            ],
            "_pad_all_input": [
                "inputs",
                "padded_shapes"
            ],
            "split_compile_and_replicate": [
                "computation",
                "inputs",
                "infeed_queue",
                "device_assignment",
                "name",
                "use_tpu",
                "maximum_shapes"
            ],
            "_postprocess_flat_outputs": [
                "outputs"
            ],
            "_postprocess_non_flat_outputs": [
                "outputs"
            ],
            "split_compile_and_shard": [
                "computation",
                "inputs",
                "num_shards",
                "input_shard_axes",
                "outputs_from_all_shards",
                "output_shard_axes",
                "infeed_queue",
                "device_assignment",
                "name"
            ],
            "shard": [
                "computation",
                "inputs",
                "num_shards",
                "input_shard_axes",
                "outputs_from_all_shards",
                "output_shard_axes",
                "infeed_queue",
                "device_assignment",
                "name"
            ],
            "batch_parallel": [
                "computation",
                "inputs",
                "num_shards",
                "infeed_queue",
                "device_assignment",
                "name"
            ],
            "rewrite": [
                "computation",
                "inputs",
                "infeed_queue",
                "device_assignment",
                "name"
            ],
            "under_tpu_inference_context": [],
            "validate_inference_rewrite_for_variables": [
                "graph"
            ],
            "rewrite_for_inference": [
                "computation",
                "inputs",
                "infeed_queue",
                "device_assignment",
                "name"
            ],
            "prune_unconnected_ops_from_xla": [
                "prune_graph"
            ],
            "TPUReplicateContext": {
                "__init__": [
                    "self",
                    "name",
                    "num_replicas",
                    "pivot"
                ],
                "get_replicated_var_handle": [
                    "self",
                    "name",
                    "vars_"
                ],
                "report_unsupported_operations": [
                    "self"
                ],
                "EnterGradientColocation": [
                    "self",
                    "op",
                    "gradient_uid"
                ],
                "ExitGradientColocation": [
                    "self",
                    "op",
                    "gradient_uid"
                ],
                "_EnterOutsideCompilationScope": [
                    "self",
                    "cluster"
                ],
                "_ExitOutsideCompilationScope": [
                    "self"
                ],
                "Enter": [
                    "self"
                ],
                "HostComputeCore": [
                    "self"
                ],
                "_RemoveExternalControlEdges": [
                    "self",
                    "op"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddInnerOp": [
                    "self",
                    "op"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "GetControlPivot": [
                    "self"
                ]
            },
            "_TPUInferenceContext": {
                "__init__": [
                    "self",
                    "name"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "_AddOpInternal": [
                    "self",
                    "op"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddInnerOp": [
                    "self",
                    "op"
                ],
                "grad_state": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.tpu.tensor_tracer_report": {
            "topological_sort": [
                "g"
            ],
            "sort_tensors_and_ops": [
                "graph"
            ],
            "TensorTracerConfig": {
                "__init__": [
                    "self"
                ]
            },
            "TensorTraceOrder": {
                "__init__": [
                    "self",
                    "graph_order",
                    "traced_tensors"
                ],
                "_create_tensor_maps": [
                    "self"
                ]
            },
            "OpenReportFile": {
                "__init__": [
                    "self",
                    "tt_parameters"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ]
            },
            "TTReportHandle": {
                "__init__": [
                    "self"
                ],
                "instrument": [
                    "self",
                    "name",
                    "explanation"
                ],
                "instrument_op": [
                    "self",
                    "op",
                    "explanation"
                ],
                "instrument_tensor": [
                    "self",
                    "tensor",
                    "explanation"
                ],
                "create_report_proto": [
                    "self",
                    "tt_config",
                    "tt_parameters",
                    "tensor_trace_order",
                    "tensor_trace_points",
                    "collected_signature_types"
                ],
                "write_report_proto": [
                    "self",
                    "report_proto",
                    "tt_parameters"
                ],
                "create_report": [
                    "self",
                    "tt_config",
                    "tt_parameters",
                    "tensor_trace_order",
                    "tensor_trace_points"
                ],
                "_write_trace_points": [
                    "self",
                    "tensor_trace_points"
                ],
                "_write_report": [
                    "self",
                    "content"
                ],
                "_write_config_section": [
                    "self",
                    "tt_config",
                    "tt_parameters"
                ],
                "_write_reason_section": [
                    "self"
                ],
                "_write_op_list_section": [
                    "self",
                    "graph_order"
                ],
                "_write_tensor_list_section": [
                    "self",
                    "graph_order"
                ],
                "_write_cache_index_map_section": [
                    "self",
                    "tensor_trace_order"
                ],
                "_write_graph_section": [
                    "self",
                    "graph_order"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu_strategy_util": {
            "initialize_tpu_system": [
                "cluster_resolver"
            ]
        },
        "tensorflow_core.python.tpu.tpu_function": {
            "tpu_shard_context": [
                "number_of_shards"
            ],
            "get_tpu_context": [],
            "on_device_training_loop": [
                "func"
            ],
            "TpuContext": {
                "__init__": [
                    "self"
                ],
                "number_of_shards": [
                    "self"
                ],
                "set_number_of_shards": [
                    "self",
                    "number_of_shards"
                ]
            }
        },
        "tensorflow_core.python.tpu.feature_column": {
            "embedding_column": [
                "categorical_column",
                "dimension",
                "combiner",
                "initializer",
                "max_sequence_length",
                "learning_rate_fn"
            ],
            "shared_embedding_columns": [
                "categorical_columns",
                "dimension",
                "combiner",
                "initializer",
                "shared_embedding_collection_name",
                "max_sequence_lengths",
                "learning_rate_fn"
            ],
            "_record_variable_scope_and_name": [
                "embedding_var_name",
                "embedding_var_name_in_fc",
                "is_shared_embedding"
            ],
            "_is_running_on_cpu": [],
            "get_sequence_length_feature_key_name_from_feature_key_name": [
                "feature_name"
            ],
            "split_sequence_columns": [
                "feature_columns"
            ],
            "_TPUBaseEmbeddingColumn": {
                "__init__": [
                    "self",
                    "categorical_column",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "get_combiner": [
                    "self"
                ],
                "get_embedding_table_size": [
                    "self"
                ],
                "get_feature_key_name": [
                    "self"
                ],
                "get_weight_key_name": [
                    "self"
                ],
                "get_embedding_var_name": [
                    "self"
                ],
                "get_initializer": [
                    "self"
                ],
                "is_categorical_column_weighted": [
                    "self"
                ],
                "is_sequence_column": [
                    "self"
                ],
                "get_max_sequence_length": [
                    "self"
                ],
                "get_learning_rate_fn": [
                    "self"
                ],
                "get_sequence_length_feature_key_name": [
                    "self"
                ]
            },
            "_TPUEmbeddingColumn": {
                "__new__": [
                    "cls",
                    "categorical_column",
                    "dimension",
                    "combiner",
                    "layer_creator",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "max_norm",
                    "trainable",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "__init__": [
                    "self",
                    "categorical_column",
                    "dimension",
                    "combiner",
                    "layer_creator",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "max_norm",
                    "trainable",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "get_combiner": [
                    "self"
                ],
                "get_embedding_table_size": [
                    "self"
                ],
                "get_feature_key_name": [
                    "self"
                ],
                "get_weight_key_name": [
                    "self"
                ],
                "get_embedding_var_name": [
                    "self"
                ],
                "get_initializer": [
                    "self"
                ],
                "is_categorical_column_weighted": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_TPUSharedEmbeddingColumn": {
                "__new__": [
                    "cls",
                    "categorical_column",
                    "dimension",
                    "combiner",
                    "initializer",
                    "shared_embedding_collection_name",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "max_norm",
                    "trainable",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "__init__": [
                    "self",
                    "categorical_column",
                    "dimension",
                    "combiner",
                    "initializer",
                    "shared_embedding_collection_name",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "max_norm",
                    "trainable",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "get_combiner": [
                    "self"
                ],
                "get_embedding_table_size": [
                    "self"
                ],
                "get_feature_key_name": [
                    "self"
                ],
                "get_weight_key_name": [
                    "self"
                ],
                "get_embedding_var_name": [
                    "self"
                ],
                "get_initializer": [
                    "self"
                ],
                "is_categorical_column_weighted": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu_system_metadata": {
            "_query_tpu_system_metadata": [
                "master_address",
                "cluster_def",
                "query_topology"
            ],
            "_obtain_topology": [
                "master_address",
                "cluster_def"
            ],
            "get_session_config_with_timeout": [
                "timeout_in_secs",
                "cluster_def"
            ],
            "master_job": [
                "master",
                "cluster_def"
            ]
        },
        "tensorflow_core.python.tpu.tensor_tracer_flags": {
            "TTParameters": {
                "__init__": [
                    "self",
                    "env"
                ],
                "_is_conditional_trace_mode": [
                    "self"
                ],
                "_get_report_filepath": [
                    "self"
                ],
                "_get_op_range": [
                    "self"
                ],
                "_get_trace_dir": [
                    "self"
                ],
                "_get_trace_mode": [
                    "self"
                ],
                "is_brief_mode": [
                    "self"
                ],
                "_get_submode": [
                    "self"
                ],
                "match_next_flag": [
                    "flags",
                    "pos"
                ],
                "_validate_flag_names": [
                    "self"
                ],
                "_flag_value_as_int_list": [
                    "self",
                    "wanted_flag_name"
                ],
                "_get_flag_int_value": [
                    "self",
                    "wanted_flag_name",
                    "default_value"
                ],
                "get_flag_value": [
                    "self",
                    "wanted_flag_name"
                ],
                "_flag_value_to_re_list": [
                    "self",
                    "flag_name"
                ],
                "is_flag_on": [
                    "self",
                    "flag_name"
                ],
                "is_enabled": [
                    "self"
                ],
                "use_test_undeclared_outputs_dir": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.tpu.tensor_tracer_pb2": {},
        "tensorflow_core.python.tpu.error_handling": {},
        "tensorflow_core.python.tpu.bfloat16": {
            "_get_custom_getter": [],
            "bfloat16_scope": []
        },
        "tensorflow_core.python.tpu.feature_column_v2": {
            "embedding_column_v2": [
                "categorical_column",
                "dimension",
                "combiner",
                "initializer",
                "max_sequence_length",
                "learning_rate_fn"
            ],
            "shared_embedding_columns_v2": [
                "categorical_columns",
                "dimension",
                "combiner",
                "initializer",
                "shared_embedding_collection_name",
                "max_sequence_lengths",
                "learning_rate_fn"
            ],
            "split_sequence_columns_v2": [
                "feature_columns"
            ],
            "_TPUEmbeddingColumnV2": {
                "__new__": [
                    "cls",
                    "categorical_column",
                    "dimension",
                    "combiner",
                    "initializer",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "__init__": [
                    "self",
                    "categorical_column",
                    "dimension",
                    "combiner",
                    "initializer",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "get_combiner": [
                    "self"
                ],
                "get_embedding_table_size": [
                    "self"
                ],
                "get_feature_key_name": [
                    "self"
                ],
                "get_weight_key_name": [
                    "self"
                ],
                "get_embedding_var_name": [
                    "self"
                ],
                "get_initializer": [
                    "self"
                ],
                "is_categorical_column_weighted": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "create_state": [
                    "self",
                    "state_manager"
                ],
                "get_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "get_sequence_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ]
            },
            "_TPUSharedEmbeddingColumnV2": {
                "__new__": [
                    "cls",
                    "categorical_column",
                    "shared_embedding_column_creator",
                    "combiner",
                    "initializer",
                    "shared_embedding_collection_name",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "__init__": [
                    "self",
                    "categorical_column",
                    "shared_embedding_column_creator",
                    "combiner",
                    "initializer",
                    "shared_embedding_collection_name",
                    "max_sequence_length",
                    "learning_rate_fn"
                ],
                "get_combiner": [
                    "self"
                ],
                "get_embedding_table_size": [
                    "self"
                ],
                "get_feature_key_name": [
                    "self"
                ],
                "get_weight_key_name": [
                    "self"
                ],
                "get_embedding_var_name": [
                    "self"
                ],
                "get_initializer": [
                    "self"
                ],
                "is_categorical_column_weighted": [
                    "self"
                ],
                "_get_dense_tensor_internal": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "get_sequence_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ]
            }
        },
        "tensorflow_core.python.tpu.preempted_hook": {
            "CloudTPUPreemptedHook": {
                "__init__": [
                    "self",
                    "cluster"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "_TPUPollingThread": {
                "__init__": [
                    "self",
                    "cluster",
                    "session"
                ],
                "stop": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu_config": {},
        "tensorflow_core.python.tpu.tpu_estimator": {},
        "tensorflow_core.python.tpu.training_loop": {
            "while_loop": [
                "condition",
                "body",
                "inputs",
                "infeed_queue",
                "name"
            ],
            "repeat": [
                "n",
                "body",
                "inputs",
                "infeed_queue",
                "name"
            ]
        },
        "tensorflow_core.python.tpu.util": {},
        "tensorflow_core.python.tpu._tpu_estimator_embedding": {},
        "tensorflow_core.python.tpu.tpu_embedding_gradient": {
            "get_gradients_through_compute_gradients": [
                "optimizer",
                "loss",
                "activations"
            ],
            "create_dummy_table_variables": [
                "tpu_embedding"
            ],
            "hook_dummy_table_variables_to_activations": [
                "tpu_embedding",
                "activations",
                "dummy_table_variables"
            ],
            "get_gradients_through_dummy_table_variables": [
                "tpu_embedding"
            ]
        },
        "tensorflow_core.python.tpu.async_checkpoint": {
            "AsyncCheckpointSaverHook": {
                "__init__": [
                    "self",
                    "checkpoint_dir",
                    "save_secs",
                    "save_steps",
                    "saver",
                    "checkpoint_basename",
                    "scaffold",
                    "listeners"
                ],
                "_set_steps_per_run": [
                    "self",
                    "steps_per_run"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_save": [
                    "self",
                    "session",
                    "step",
                    "asynchronous"
                ],
                "_get_saver": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.tpu.tensor_tracer": {
            "read_tensor_tracer_event_file": [
                "event_file"
            ],
            "tensor_tracepoint": [
                "tensor",
                "checkpoint_name"
            ],
            "keras_layer_tracepoint": [
                "layer",
                "checkpoint_name"
            ],
            "_trace_files_need_precreated": [
                "output_dir"
            ],
            "TensorTracer": {
                "is_enabled": [],
                "check_device_type": [
                    "device_type"
                ],
                "check_trace_mode": [
                    "device_type",
                    "trace_mode"
                ],
                "loop_cond_op": [
                    "op"
                ],
                "while_loop_op": [
                    "op"
                ],
                "unsafe_op": [
                    "op"
                ],
                "device_mismatch": [
                    "device_type",
                    "op"
                ],
                "unsafe_scalar_trace": [
                    "op"
                ],
                "_less_interesting_op": [
                    "self",
                    "op"
                ],
                "reason": [
                    "op_idx",
                    "details"
                ],
                "__init__": [
                    "self"
                ],
                "_get_all_cache_variables": [
                    "self"
                ],
                "_create_or_get_tensor_values_cache": [
                    "self",
                    "cache_name",
                    "graph",
                    "shape",
                    "dtype",
                    "num_signatures"
                ],
                "_add_replica_id_to_graph": [
                    "self"
                ],
                "_inside_op_range": [
                    "self",
                    "idx"
                ],
                "_is_user_included_op": [
                    "self",
                    "op"
                ],
                "_is_user_excluded_op": [
                    "self",
                    "op"
                ],
                "_signature_types": [
                    "self"
                ],
                "_num_signature_dimensions": [
                    "self"
                ],
                "_use_tensor_values_cache": [
                    "self"
                ],
                "_use_tensor_buffer": [
                    "self"
                ],
                "_save_tensor_value_to_cache_op": [
                    "self",
                    "cache_idx",
                    "updates"
                ],
                "_snapshot_tensor": [
                    "self",
                    "tensor"
                ],
                "_preprocess_traced_tensor": [
                    "self",
                    "tensor"
                ],
                "_make_tensor_trace_fun": [
                    "self",
                    "tensor_name",
                    "tensor_trace_order"
                ],
                "_skip_op": [
                    "self",
                    "op_id",
                    "op",
                    "ops_in_exec_path",
                    "report_handler"
                ],
                "_skip_tensor": [
                    "self",
                    "op_id",
                    "out_tensor",
                    "report_handler"
                ],
                "_filter_execution_path_operations": [
                    "self",
                    "operations",
                    "fetches"
                ],
                "_determine_and_instrument_traced_tensors": [
                    "self",
                    "graph_order",
                    "ops_in_exec_path",
                    "tensor_trace_points",
                    "report_handler"
                ],
                "_check_trace_files": [
                    "self"
                ],
                "_determine_trace_and_create_report": [
                    "self",
                    "graph",
                    "ops_in_exec_path"
                ],
                "_create_host_call": [
                    "self"
                ],
                "_generate_flush_cache_op": [
                    "self",
                    "num_replicas",
                    "on_tpu"
                ],
                "_flush_tensor_values_cache": [
                    "self",
                    "tensor_fetches",
                    "op_fetches",
                    "on_tpu"
                ],
                "_process_tensor_fetches": [
                    "self",
                    "tensor_fetches"
                ],
                "_process_op_fetches": [
                    "self",
                    "op_fetches"
                ],
                "_convert_fetches_to_input_format": [
                    "self",
                    "input_fetches",
                    "current_fetches"
                ],
                "_get_op_control_flow_context": [
                    "self",
                    "op"
                ],
                "_prepare_host_call_fn": [
                    "self",
                    "processed_t_fetches",
                    "op_fetches"
                ],
                "host_call_deps_and_fn": [
                    "self"
                ],
                "_trace_execution": [
                    "self",
                    "graph",
                    "tensor_fetches",
                    "op_fetches",
                    "on_tpu"
                ],
                "trace_tpu": [
                    "self",
                    "graph",
                    "tensor_fetches",
                    "op_fetches",
                    "num_replicas",
                    "num_replicas_per_host",
                    "num_hosts"
                ],
                "trace_cpu": [
                    "self",
                    "graph",
                    "tensor_fetches",
                    "op_fetches"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu_embedding": {
            "get_enqueue_datas_list_from_sparse_tensors_list": [
                "sp_tensors_list"
            ],
            "_validate_table_to_config_dict": [
                "table_to_config_dict"
            ],
            "_validate_feature_to_config_dict": [
                "table_to_config_dict",
                "feature_to_config_dict"
            ],
            "_validate_batch_size": [
                "batch_size",
                "num_cores"
            ],
            "_validate_optimization_parameters": [
                "optimization_parameters"
            ],
            "_get_optimization_handler": [
                "optimization_parameters"
            ],
            "_create_ordered_dict": [
                "d"
            ],
            "_create_combiners": [
                "table_to_config_dict",
                "table_to_features_dict"
            ],
            "_create_table_to_features_and_num_features_dicts": [
                "feature_to_config_dict"
            ],
            "_create_device_fn": [
                "hosts"
            ],
            "_create_partitioned_variables": [
                "name",
                "num_hosts",
                "vocabulary_size",
                "embedding_dimension",
                "initializer",
                "collections"
            ],
            "TableConfig": {
                "__new__": [
                    "cls",
                    "vocabulary_size",
                    "dimension",
                    "initializer",
                    "combiner",
                    "hot_id_replication",
                    "learning_rate",
                    "learning_rate_key"
                ]
            },
            "FeatureConfig": {
                "__new__": [
                    "cls",
                    "table_id",
                    "max_sequence_length",
                    "weight_key"
                ]
            },
            "EnqueueData": {
                "__new__": [
                    "cls",
                    "embedding_indices",
                    "sample_indices",
                    "aggregation_weights"
                ],
                "from_sparse_tensor": [
                    "sp_tensor",
                    "weights"
                ]
            },
            "_OptimizationParameters": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "use_gradient_accumulation",
                    "clip_weight_min",
                    "clip_weight_max"
                ]
            },
            "AdagradParameters": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator",
                    "use_gradient_accumulation",
                    "clip_weight_min",
                    "clip_weight_max"
                ]
            },
            "AdamParameters": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "lazy_adam",
                    "sum_inside_sqrt",
                    "use_gradient_accumulation",
                    "clip_weight_min",
                    "clip_weight_max"
                ]
            },
            "StochasticGradientDescentParameters": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "clip_weight_min",
                    "clip_weight_max"
                ]
            },
            "TPUEmbedding": {
                "__init__": [
                    "self",
                    "table_to_config_dict",
                    "feature_to_config_dict",
                    "batch_size",
                    "mode",
                    "master",
                    "optimization_parameters",
                    "cluster_def",
                    "pipeline_execution_with_tensor_core",
                    "partition_strategy",
                    "device_config"
                ],
                "hosts": [
                    "self"
                ],
                "num_cores_per_host": [
                    "self"
                ],
                "num_cores": [
                    "self"
                ],
                "batch_size_per_core": [
                    "self"
                ],
                "config_proto": [
                    "self"
                ],
                "table_to_config_dict": [
                    "self"
                ],
                "feature_to_config_dict": [
                    "self"
                ],
                "table_to_features_dict": [
                    "self"
                ],
                "optimization_parameters": [
                    "self"
                ],
                "_create_config_proto": [
                    "self"
                ],
                "create_variables_and_ops": [
                    "self",
                    "embedding_variable_name_by_table",
                    "slot_variable_names_by_table"
                ],
                "generate_enqueue_ops": [
                    "self",
                    "enqueue_datas_list"
                ],
                "_validate_generate_enqueue_ops_enqueue_datas_list": [
                    "self",
                    "enqueue_datas_list"
                ],
                "_generate_enqueue_op": [
                    "self",
                    "enqueue_datas",
                    "device_ordinal"
                ],
                "_format_for_tpu_embedding_sparse_tensor_batch": [
                    "self",
                    "enqueue_datas"
                ],
                "get_activations": [
                    "self"
                ],
                "generate_send_gradients_op": [
                    "self",
                    "feature_to_gradient_dict",
                    "learning_rates"
                ]
            },
            "_OptimizerHandler": {
                "__init__": [
                    "self",
                    "optimization_parameters"
                ],
                "set_optimization_parameters": [
                    "self",
                    "table_descriptor"
                ],
                "get_default_slot_variable_names": [
                    "self",
                    "table"
                ],
                "create_variables_and_ops": [
                    "self",
                    "table",
                    "slot_variable_names",
                    "num_hosts",
                    "table_config",
                    "table_variables"
                ]
            },
            "_AdagradHandler": {
                "__init__": [
                    "self",
                    "optimization_parameters"
                ],
                "set_optimization_parameters": [
                    "self",
                    "table_descriptor"
                ],
                "get_default_slot_variable_names": [
                    "self",
                    "table"
                ],
                "create_variables_and_ops": [
                    "self",
                    "table",
                    "slot_variable_names",
                    "num_hosts",
                    "table_config",
                    "table_variables"
                ]
            },
            "_AdamHandler": {
                "__init__": [
                    "self",
                    "optimization_parameters"
                ],
                "set_optimization_parameters": [
                    "self",
                    "table_descriptor"
                ],
                "get_default_slot_variable_names": [
                    "self",
                    "table"
                ],
                "create_variables_and_ops": [
                    "self",
                    "table",
                    "slot_variable_names",
                    "num_hosts",
                    "table_config",
                    "table_variables"
                ]
            },
            "_StochasticGradientDescentHandler": {
                "set_optimization_parameters": [
                    "self",
                    "table_descriptor"
                ],
                "get_default_slot_variable_names": [
                    "self",
                    "table"
                ],
                "create_variables_and_ops": [
                    "self",
                    "table",
                    "slot_variable_names",
                    "num_hosts",
                    "table_config",
                    "table_variables"
                ]
            }
        },
        "tensorflow_core.python.tpu.api": {},
        "tensorflow_core.python.tpu.tpu_optimizer": {
            "CrossShardOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "reduction",
                    "name",
                    "group_assignment"
                ],
                "_verify_and_get_subgroup_size": [
                    "self",
                    "group_assignment",
                    "num_shards"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "variables": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.tpu.tpu_context": {},
        "tensorflow_core.python.tpu.device_assignment": {
            "_compute_task_and_cores_to_replicas": [
                "core_assignment",
                "topology"
            ],
            "_ring_2d": [
                "height",
                "width"
            ],
            "device_assignment": [
                "topology",
                "computation_shape",
                "computation_stride",
                "num_replicas"
            ],
            "DeviceAssignment": {
                "__init__": [
                    "self",
                    "topology",
                    "core_assignment"
                ],
                "topology": [
                    "self"
                ],
                "num_cores_per_replica": [
                    "self"
                ],
                "num_replicas": [
                    "self"
                ],
                "core_assignment": [
                    "self"
                ],
                "coordinates": [
                    "self",
                    "replica",
                    "logical_core"
                ],
                "lookup_replicas": [
                    "self",
                    "task_id",
                    "logical_core"
                ],
                "tpu_ordinal": [
                    "self",
                    "replica",
                    "logical_core"
                ],
                "host_device": [
                    "self",
                    "replica",
                    "logical_core",
                    "job"
                ],
                "tpu_device": [
                    "self",
                    "replica",
                    "logical_core",
                    "job"
                ],
                "build": [
                    "topology",
                    "computation_shape",
                    "computation_stride",
                    "num_replicas"
                ]
            }
        },
        "tensorflow_core.python.tpu.functional": {},
        "tensorflow_core.python.tpu.datasets": {
            "_TextLineDataset": [
                "filename"
            ],
            "_TFRecordDataset": [
                "filename"
            ],
            "StreamingFilesDataset": [
                "files",
                "filetype",
                "file_reader_job",
                "worker_job",
                "num_epochs",
                "filename_shuffle_buffer_size",
                "num_parallel_reads",
                "batch_transfer_size",
                "sloppy"
            ]
        },
        "tensorflow_core.python.tpu.session_support": {
            "_clone_session": [
                "session",
                "graph"
            ],
            "all_worker_devices": [
                "session"
            ],
            "start_worker_watchdog": [
                "session",
                "devices",
                "ping_interval",
                "shutdown_timeout"
            ],
            "CoordinatorResetError": {
                "__init__": [
                    "self"
                ]
            },
            "WorkerHeartbeatManager": {
                "__init__": [
                    "self",
                    "session",
                    "devices",
                    "heartbeat_ops",
                    "request_placeholder"
                ],
                "from_devices": [
                    "session",
                    "devices"
                ],
                "num_workers": [
                    "self"
                ],
                "configure": [
                    "self",
                    "message"
                ],
                "ping": [
                    "self",
                    "request",
                    "timeout_in_ms"
                ],
                "lame_workers": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "shutdown": [
                    "self",
                    "wait_time_in_ms"
                ]
            },
            "WatchdogManager": {
                "__init__": [
                    "self",
                    "session",
                    "devices",
                    "ping_interval",
                    "shutdown_timeout"
                ],
                "_reset_manager": [
                    "self"
                ],
                "configure_and_run": [
                    "self"
                ],
                "stop": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "run": [
                    "self"
                ]
            },
            "GracefulShutdownHook": {
                "__init__": [
                    "self",
                    "checkpoint_prefix",
                    "saver",
                    "on_shutdown_hooks"
                ],
                "after_create_session": [
                    "self",
                    "training_session",
                    "coord"
                ],
                "saver": [
                    "self"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "ResetComputation": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "run_context",
                    "all_workers",
                    "lame_workers"
                ]
            },
            "ShutdownLameWorkers": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "run_context",
                    "all_workers",
                    "lame_workers"
                ]
            },
            "ShutdownAllWorkers": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "run_context",
                    "all_workers",
                    "lame_workers"
                ]
            }
        },
        "tensorflow_core.python.tpu": {},
        "tensorflow_core.python.tpu.ops.tpu_ops": {
            "_create_default_group_assignment": [],
            "all_to_all": [
                "x",
                "concat_dimension",
                "split_dimension",
                "split_count",
                "group_assignment",
                "name"
            ],
            "_all_to_all_grad": [
                "op",
                "grad"
            ],
            "cross_replica_sum": [
                "x",
                "group_assignment",
                "name"
            ],
            "collective_permute": [
                "x",
                "source_target_pairs",
                "name"
            ],
            "_collective_permute_grad": [
                "op",
                "grad"
            ],
            "_cross_replica_sum_grad": [
                "op",
                "grad"
            ],
            "_embedding_activations_grad": [
                "activations_op",
                "grad_wrt_activations"
            ],
            "infeed_dequeue": [
                "dtype",
                "shape",
                "name"
            ],
            "infeed_dequeue_tuple": [
                "dtypes",
                "shapes",
                "name"
            ],
            "send_tpu_embedding_gradients": [
                "inputs",
                "config",
                "learning_rates",
                "name"
            ],
            "enqueue_tpu_embedding_integer_batch": [
                "batch",
                "device_ordinal",
                "mode_override",
                "name"
            ],
            "enqueue_tpu_embedding_sparse_batch": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "device_ordinal",
                "combiners",
                "mode_override",
                "name"
            ],
            "enqueue_tpu_embedding_sparse_tensor_batch": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "table_ids",
                "device_ordinal",
                "max_sequence_lengths",
                "combiners",
                "mode_override",
                "name"
            ]
        },
        "tensorflow_core.python.tpu.ops": {},
        "tensorflow_core.python.tpu.profiler.profiler_analysis_pb2_grpc": {
            "add_ProfileAnalysisServicer_to_server": [
                "servicer",
                "server"
            ],
            "ProfileAnalysisStub": {
                "__init__": [
                    "self",
                    "channel"
                ]
            },
            "ProfileAnalysisServicer": {
                "NewSession": [
                    "self",
                    "request",
                    "context"
                ],
                "EnumSessions": [
                    "self",
                    "request",
                    "context"
                ],
                "GetSessionToolData": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.python.tpu.profiler": {},
        "tensorflow_core.python.estimator.training": {},
        "tensorflow_core.python.estimator.run_config": {},
        "tensorflow_core.python.estimator.exporter": {},
        "tensorflow_core.python.estimator.estimator_lib": {},
        "tensorflow_core.python.estimator.keras": {},
        "tensorflow_core.python.estimator.util": {},
        "tensorflow_core.python.estimator.gc": {},
        "tensorflow_core.python.estimator.estimator": {},
        "tensorflow_core.python.estimator": {},
        "tensorflow_core.python.estimator.model_fn": {},
        "tensorflow_core.python.estimator.inputs.inputs": {},
        "tensorflow_core.python.estimator.inputs.numpy_io": {},
        "tensorflow_core.python.estimator.inputs.pandas_io": {},
        "tensorflow_core.python.estimator.inputs": {},
        "tensorflow_core.python.estimator.inputs.queues.feeding_functions": {},
        "tensorflow_core.python.estimator.inputs.queues": {},
        "tensorflow_core.python.estimator.inputs.queues.feeding_queue_runner": {},
        "tensorflow_core.python.estimator.canned.prediction_keys": {},
        "tensorflow_core.python.estimator.canned.boosted_trees": {},
        "tensorflow_core.python.estimator.canned.dnn_linear_combined": {},
        "tensorflow_core.python.estimator.canned.boosted_trees_utils": {},
        "tensorflow_core.python.estimator.canned.optimizers": {},
        "tensorflow_core.python.estimator.canned.metric_keys": {},
        "tensorflow_core.python.estimator.canned.head": {},
        "tensorflow_core.python.estimator.canned.dnn": {},
        "tensorflow_core.python.estimator.canned.linear": {},
        "tensorflow_core.python.estimator.canned.baseline": {},
        "tensorflow_core.python.estimator.canned.parsing_utils": {},
        "tensorflow_core.python.estimator.canned": {},
        "tensorflow_core.python.estimator.export.export_output": {},
        "tensorflow_core.python.estimator.export.export": {},
        "tensorflow_core.python.estimator.export": {},
        "tensorflow_core.python.estimator.export.export_lib": {},
        "tensorflow_core.python.kernel_tests": {},
        "tensorflow_core.python.kernel_tests.random.util": {
            "test_moment_matching": [
                "samples",
                "number_moments",
                "dist",
                "stride"
            ],
            "chi_squared": [
                "x",
                "bins"
            ],
            "normal_cdf": [
                "x"
            ],
            "anderson_darling": [
                "x"
            ],
            "test_truncated_normal": [
                "assert_equal",
                "assert_all_close",
                "n",
                "y",
                "mean_atol",
                "median_atol",
                "variance_rtol"
            ]
        },
        "tensorflow_core.python.kernel_tests.random": {},
        "tensorflow_core.python.kernel_tests.signal.test_util": {
            "grappler_optimize": [
                "graph",
                "fetches",
                "config_proto"
            ]
        },
        "tensorflow_core.python.kernel_tests.signal": {},
        "tensorflow_core.python.grappler.cluster": {
            "Provision": [
                "allow_soft_placement",
                "disable_detailed_stats",
                "disable_timeline",
                "devices"
            ],
            "Cluster": {
                "__init__": [
                    "self",
                    "allow_soft_placement",
                    "disable_detailed_stats",
                    "disable_timeline",
                    "devices"
                ],
                "Shutdown": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "tf_cluster": [
                    "self"
                ],
                "ListDevices": [
                    "self"
                ],
                "ListAvailableOps": [
                    "self"
                ],
                "GetSupportedDevices": [
                    "self",
                    "item"
                ],
                "EstimatePerformance": [
                    "self",
                    "device"
                ],
                "MeasureCosts": [
                    "self",
                    "item"
                ],
                "DeterminePeakMemoryUsage": [
                    "self",
                    "item"
                ]
            }
        },
        "tensorflow_core.python.grappler.item": {
            "Item": {
                "__init__": [
                    "self",
                    "metagraph",
                    "ignore_colocation",
                    "ignore_user_placement"
                ],
                "IdentifyImportantOps": [
                    "self",
                    "sort_topologically"
                ],
                "GetOpProperties": [
                    "self"
                ],
                "GetColocationGroups": [
                    "self"
                ],
                "metagraph": [
                    "self"
                ],
                "tf_item": [
                    "self"
                ],
                "_BuildTFItem": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.grappler.tf_optimizer": {
            "OptimizeGraph": [
                "config_proto",
                "metagraph",
                "verbose",
                "graph_id",
                "cluster"
            ]
        },
        "tensorflow_core.python.grappler": {},
        "tensorflow_core.python.compiler": {},
        "tensorflow_core.python.compiler.xla.jit": {
            "experimental_jit_scope": [
                "compile_ops",
                "separate_compiled_gradients"
            ],
            "_XlaScope": {
                "__init__": [
                    "self",
                    "count",
                    "depth"
                ]
            }
        },
        "tensorflow_core.python.compiler.xla.xla": {
            "compile": [
                "computation",
                "inputs"
            ],
            "_compile_internal": [
                "computation",
                "inputs"
            ],
            "is_flat": [
                "outputs"
            ],
            "_postprocess_flat_outputs": [
                "outputs"
            ],
            "_postprocess_non_flat_outputs": [
                "outputs"
            ],
            "_disable_summary_context": [],
            "_get_scaffold": [
                "captured_scaffold_fn"
            ],
            "check_function_argument_count": [
                "func",
                "input_arity",
                "infeed_queue"
            ],
            "XLACompileContext": {
                "__init__": [
                    "self",
                    "name",
                    "pivot"
                ],
                "report_unsupported_operations": [
                    "self"
                ],
                "_RemoveExternalControlEdges": [
                    "self",
                    "op"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddInnerOp": [
                    "self",
                    "op"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ]
            },
            "_CapturedObject": {
                "__init__": [
                    "self"
                ],
                "capture": [
                    "self",
                    "o"
                ],
                "get": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.compiler.xla": {},
        "tensorflow_core.python.autograph": {},
        "tensorflow_core.python.autograph.converters.asserts": {
            "transform": [
                "node",
                "ctx"
            ],
            "AssertTransformer": {
                "visit_Assert": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.break_statements": {
            "transform": [
                "node",
                "ctx"
            ],
            "_Break": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "BreakTransformer": {
                "visit_Break": [
                    "self",
                    "node"
                ],
                "_guard_if_present": [
                    "self",
                    "block",
                    "var_name"
                ],
                "_process_body": [
                    "self",
                    "nodes",
                    "break_var"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.return_statements": {
            "transform": [
                "node",
                "ctx",
                "default_to_null_return"
            ],
            "_RewriteBlock": {
                "__init__": [
                    "self"
                ]
            },
            "ConditionalReturnRewriter": {
                "visit_Return": [
                    "self",
                    "node"
                ],
                "_postprocess_statement": [
                    "self",
                    "node"
                ],
                "_visit_statement_block": [
                    "self",
                    "node",
                    "nodes"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_Try": [
                    "self",
                    "node"
                ],
                "visit_ExceptHandler": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ]
            },
            "_Block": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_Function": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ReturnStatementsTransformer": {
                "__init__": [
                    "self",
                    "ctx",
                    "default_to_null_return"
                ],
                "visit_Return": [
                    "self",
                    "node"
                ],
                "_postprocess_statement": [
                    "self",
                    "node"
                ],
                "_visit_statement_block": [
                    "self",
                    "node",
                    "nodes"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_Try": [
                    "self",
                    "node"
                ],
                "visit_ExceptHandler": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.list_comprehensions": {
            "transform": [
                "node",
                "ctx"
            ],
            "ListCompTransformer": {
                "visit_Assign": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.continue_statements": {
            "transform": [
                "node",
                "ctx"
            ],
            "_Continue": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_Block": {
                "__init__": [
                    "self"
                ]
            },
            "ContinueCanonicalizationTransformer": {
                "visit_Continue": [
                    "self",
                    "node"
                ],
                "_postprocess_statement": [
                    "self",
                    "node"
                ],
                "_visit_loop_body": [
                    "self",
                    "node",
                    "nodes"
                ],
                "_visit_non_loop_body": [
                    "self",
                    "nodes"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_Try": [
                    "self",
                    "node"
                ],
                "visit_ExceptHandler": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.lists": {
            "transform": [
                "node",
                "ctx"
            ],
            "ListTransformer": {
                "visit_List": [
                    "self",
                    "node"
                ],
                "_replace_append_call": [
                    "self",
                    "node"
                ],
                "_replace_pop_call": [
                    "self",
                    "node"
                ],
                "_replace_stack_call": [
                    "self",
                    "node"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ],
                "_generate_pop_operation": [
                    "self",
                    "original_call_node",
                    "pop_var_name"
                ],
                "_postprocess_statement": [
                    "self",
                    "node"
                ],
                "_visit_and_process_block": [
                    "self",
                    "block"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.logical_expressions": {
            "transform": [
                "node",
                "ctx"
            ],
            "LogicalExpressionTransformer": {
                "_overload_of": [
                    "self",
                    "operator"
                ],
                "_as_lambda": [
                    "self",
                    "expr"
                ],
                "_as_binary_function": [
                    "self",
                    "func_name",
                    "arg1",
                    "arg2"
                ],
                "_as_binary_operation": [
                    "self",
                    "op",
                    "arg1",
                    "arg2"
                ],
                "_as_unary_function": [
                    "self",
                    "func_name",
                    "arg"
                ],
                "visit_Compare": [
                    "self",
                    "node"
                ],
                "visit_UnaryOp": [
                    "self",
                    "node"
                ],
                "visit_BoolOp": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.call_trees": {
            "transform": [
                "node",
                "ctx"
            ],
            "_Function": {
                "__init__": [
                    "self"
                ]
            },
            "CallTreeTransformer": {
                "visit_Lambda": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.slices": {
            "transform": [
                "node",
                "ctx"
            ],
            "SliceTransformer": {
                "_process_single_assignment": [
                    "self",
                    "target",
                    "value"
                ],
                "visit_Assign": [
                    "self",
                    "node"
                ],
                "visit_Subscript": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.arg_defaults": {
            "transform": [
                "node",
                "ctx"
            ],
            "_Function": {},
            "ArgDefaultsTransformer": {
                "visit_Lambda": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_arguments": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.conditional_expressions": {
            "transform": [
                "node",
                "ctx"
            ],
            "ConditionalExpressionTransformer": {
                "visit_IfExp": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.directives": {
            "_map_args": [
                "call_node",
                "function"
            ],
            "transform": [
                "node",
                "ctx"
            ],
            "DirectivesTransformer": {
                "_process_symbol_directive": [
                    "self",
                    "call_node",
                    "directive"
                ],
                "_process_statement_directive": [
                    "self",
                    "call_node",
                    "directive"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Expr": [
                    "self",
                    "node"
                ],
                "_track_and_visit_loop": [
                    "self",
                    "node"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters.control_flow": {
            "transform": [
                "node",
                "ctx"
            ],
            "ControlFlowTransformer": {
                "_create_cond_branch": [
                    "self",
                    "body_name",
                    "aliased_orig_names",
                    "aliased_new_names",
                    "body",
                    "returns"
                ],
                "_create_cond_expr": [
                    "self",
                    "results",
                    "test",
                    "body_name",
                    "orelse_name",
                    "state_getter_name",
                    "state_setter_name",
                    "basic_symbol_names",
                    "composite_symbol_names"
                ],
                "_fmt_symbols": [
                    "self",
                    "symbol_set"
                ],
                "_determine_aliased_symbols": [
                    "self",
                    "scope",
                    "node_defined_in",
                    "block"
                ],
                "_create_state_functions": [
                    "self",
                    "composites",
                    "state_getter_name",
                    "state_setter_name"
                ],
                "_create_undefined_assigns": [
                    "self",
                    "undefined_symbols"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "_get_basic_loop_vars": [
                    "self",
                    "modified_symbols",
                    "live_in",
                    "live_out"
                ],
                "_get_composite_loop_vars": [
                    "self",
                    "modified_symbols",
                    "live_in"
                ],
                "_get_loop_vars": [
                    "self",
                    "node",
                    "modified_symbols"
                ],
                "_loop_var_constructs": [
                    "self",
                    "basic_loop_vars"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.converters": {},
        "tensorflow_core.python.autograph.converters.function_scopes": {
            "transform": [
                "node",
                "ctx"
            ],
            "_Function": {
                "__init__": [
                    "self"
                ]
            },
            "FunctionBodyTransformer": {
                "visit_Return": [
                    "self",
                    "node"
                ],
                "visit_Lambda": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.ag_ctx": {
            "_control_ctx": [],
            "control_status_ctx": [],
            "_default_control_status_ctx": [],
            "Status": {},
            "ControlStatusCtx": {
                "__init__": [
                    "self",
                    "status",
                    "options"
                ],
                "__enter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.config_lib": {
            "Rule": {
                "__init__": [
                    "self",
                    "module_prefix"
                ],
                "matches": [
                    "self",
                    "module_name"
                ]
            },
            "Action": {},
            "DoNotConvert": {
                "__str__": [
                    "self"
                ],
                "get_action": [
                    "self",
                    "module"
                ]
            },
            "Convert": {
                "__str__": [
                    "self"
                ],
                "get_action": [
                    "self",
                    "module"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.converter": {
            "standard_analysis": [
                "node",
                "context",
                "is_initial"
            ],
            "apply_": [
                "node",
                "context",
                "converter_module"
            ],
            "Feature": {
                "all": [
                    "cls"
                ],
                "all_but": [
                    "cls",
                    "exclude"
                ]
            },
            "ConversionOptions": {
                "__init__": [
                    "self",
                    "recursive",
                    "user_requested",
                    "internal_convert_user_code",
                    "optional_features"
                ],
                "as_tuple": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__str__": [
                    "self"
                ],
                "uses": [
                    "self",
                    "feature"
                ],
                "call_options": [
                    "self"
                ],
                "to_ast": [
                    "self"
                ]
            },
            "ProgramContext": {},
            "EntityContext": {
                "__init__": [
                    "self",
                    "namer",
                    "entity_info",
                    "program_ctx",
                    "target_name"
                ]
            },
            "Base": {
                "__init__": [
                    "self",
                    "ctx"
                ],
                "get_definition_directive": [
                    "self",
                    "node",
                    "directive",
                    "arg",
                    "default"
                ],
                "visit": [
                    "self",
                    "node"
                ]
            },
            "AnnotatedDef": {
                "__init__": [
                    "self"
                ]
            },
            "AgAnno": {
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.unsupported_features_checker": {
            "verify": [
                "node"
            ],
            "UnsupportedFeaturesChecker": {
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Yield": [
                    "self",
                    "node"
                ],
                "visit_YieldFrom": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.naming": {
            "_NamingStyle": {},
            "Namer": {
                "__init__": [
                    "self",
                    "global_namespace"
                ],
                "_as_symbol_name": [
                    "self",
                    "fqn",
                    "style"
                ],
                "class_name": [
                    "self",
                    "original_fqn"
                ],
                "function_name": [
                    "self",
                    "original_fqn"
                ],
                "new_symbol": [
                    "self",
                    "name_root",
                    "reserved_locals"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.converter_testing": {
            "TestCase": {
                "assertPrints": [
                    "self",
                    "expected_result"
                ],
                "compiled": [
                    "self",
                    "node",
                    "namespace",
                    "symbols"
                ],
                "converted": [
                    "self",
                    "entity",
                    "converter_module",
                    "namespace",
                    "tf_symbols"
                ],
                "make_fake_mod": [
                    "self",
                    "name"
                ],
                "attach_namespace": [
                    "self",
                    "module"
                ],
                "prepare": [
                    "self",
                    "test_fn",
                    "namespace",
                    "recursive"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.function_wrappers": {
            "with_function_scope": [
                "thunk",
                "scope_name",
                "options"
            ],
            "FunctionScope": {
                "__init__": [
                    "self",
                    "function_name",
                    "scope_name",
                    "options"
                ],
                "_sanitize": [
                    "self",
                    "name"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "mark_return_value": [
                    "self",
                    "value"
                ]
            }
        },
        "tensorflow_core.python.autograph.core.config": {},
        "tensorflow_core.python.autograph.core": {},
        "tensorflow_core.python.autograph.impl.conversion": {
            "_wrap_into_dynamic_factory": [
                "nodes",
                "entity_name",
                "factory_factory_name",
                "factory_name",
                "closure_vars",
                "future_features"
            ],
            "_convert_with_cache": [
                "entity",
                "program_ctx",
                "free_nonglobal_var_names"
            ],
            "_instantiate": [
                "entity",
                "converted_entity_info",
                "free_nonglobal_var_names"
            ],
            "convert": [
                "entity",
                "program_ctx"
            ],
            "is_whitelisted_for_graph": [
                "o",
                "check_call_override",
                "allow_namedtuple_subclass"
            ],
            "check_cached_unconverted": [
                "entity",
                "options"
            ],
            "cache_unconverted": [
                "entity",
                "options"
            ],
            "convert_entity_to_ast": [
                "o",
                "program_ctx"
            ],
            "convert_class_to_ast": [
                "c",
                "program_ctx"
            ],
            "_add_reserved_symbol": [
                "namespace",
                "name",
                "entity"
            ],
            "_add_self_references": [
                "namespace",
                "autograph_module"
            ],
            "convert_func_to_ast": [
                "f",
                "program_ctx",
                "do_rename"
            ],
            "node_to_graph": [
                "node",
                "context"
            ],
            "_ConvertedEntityFactoryInfo": {
                "__str__": [
                    "self"
                ],
                "get_module": [
                    "self"
                ],
                "get_factory": [
                    "self"
                ]
            },
            "_ConversionCache": {
                "__init__": [
                    "self"
                ],
                "has": [
                    "self",
                    "key",
                    "subkey"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            }
        },
        "tensorflow_core.python.autograph.impl.api": {
            "is_autograph_strict_conversion_mode": [],
            "tf_convert": [
                "f",
                "ctx",
                "convert_by_default",
                "user_requested"
            ],
            "convert": [
                "recursive",
                "optional_features",
                "user_requested"
            ],
            "call_with_unspecified_conversion_status": [
                "func"
            ],
            "do_not_convert_internal": [
                "f"
            ],
            "do_not_convert": [
                "func"
            ],
            "_attach_metadata": [
                "e",
                "f",
                "converted"
            ],
            "_call_unconverted": [
                "f",
                "args",
                "kwargs",
                "options",
                "update_cache"
            ],
            "_is_known_loaded_type": [
                "f",
                "module_name",
                "entity_name"
            ],
            "converted_call": [
                "f",
                "options",
                "args",
                "kwargs",
                "caller_fn_scope"
            ],
            "to_graph": [
                "entity",
                "recursive",
                "experimental_optional_features"
            ],
            "to_graph_v1": [
                "entity",
                "recursive",
                "arg_values",
                "arg_types",
                "experimental_optional_features"
            ],
            "to_code_v1": [
                "entity",
                "recursive",
                "arg_values",
                "arg_types",
                "indentation",
                "experimental_optional_features"
            ],
            "to_code": [
                "entity",
                "recursive",
                "experimental_optional_features"
            ],
            "AutoGraphError": {},
            "ConversionError": {},
            "StagingError": {},
            "_ErrorMetadata": {
                "create_exception": [
                    "self",
                    "source_error"
                ]
            },
            "StackTraceMapper": {
                "__init__": [
                    "self",
                    "converted_fn"
                ],
                "get_effective_source_map": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.autograph.impl": {},
        "tensorflow_core.python.autograph.operators.special_values": {
            "is_undefined": [
                "value"
            ],
            "retval": [
                "value"
            ],
            "is_undefined_return": [
                "value"
            ],
            "Undefined": {
                "__init__": [
                    "self",
                    "symbol_name"
                ]
            },
            "UndefinedReturnValue": {}
        },
        "tensorflow_core.python.autograph.operators.logical": {
            "not_": [
                "a"
            ],
            "_tf_not": [
                "a"
            ],
            "_py_not": [
                "a"
            ],
            "and_": [
                "a",
                "b"
            ],
            "_tf_lazy_and": [
                "cond",
                "b"
            ],
            "_py_lazy_and": [
                "cond",
                "b"
            ],
            "or_": [
                "a",
                "b"
            ],
            "_tf_lazy_or": [
                "cond",
                "b"
            ],
            "_py_lazy_or": [
                "cond",
                "b"
            ],
            "eq": [
                "a",
                "b"
            ],
            "_tf_equal": [
                "a",
                "b"
            ],
            "_py_equal": [
                "a",
                "b"
            ],
            "not_eq": [
                "a",
                "b"
            ]
        },
        "tensorflow_core.python.autograph.operators.symbols": {
            "Symbol": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "ValueSymbol": {
                "__init__": [
                    "self",
                    "name",
                    "value"
                ],
                "maybe_compute_value": [
                    "self"
                ]
            },
            "AttributeAccessSymbol": {
                "__init__": [
                    "self",
                    "parent_symbol",
                    "attr_name"
                ],
                "maybe_compute_value": [
                    "self"
                ]
            },
            "SubscriptSymbol": {
                "__init__": [
                    "self",
                    "parent_symbol",
                    "index_symbol"
                ],
                "maybe_compute_value": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.autograph.operators.py_builtins": {
            "overload_of": [
                "f"
            ],
            "_find_originating_frame": [
                "caller_fn_scope",
                "innermost"
            ],
            "eval_in_original_context": [
                "f",
                "args",
                "caller_fn_scope"
            ],
            "super_in_original_context": [
                "f",
                "args",
                "caller_fn_scope"
            ],
            "abs_": [
                "x"
            ],
            "_tf_abs": [
                "x"
            ],
            "_py_abs": [
                "x"
            ],
            "float_": [
                "x"
            ],
            "_tf_float": [
                "x"
            ],
            "_py_float": [
                "x"
            ],
            "int_": [
                "x",
                "base"
            ],
            "_tf_int": [
                "x",
                "base"
            ],
            "_py_int": [
                "x",
                "base"
            ],
            "len_": [
                "s"
            ],
            "_tf_tensor_array_len": [
                "s"
            ],
            "_tf_tensor_list_len": [
                "s"
            ],
            "_tf_tensor_len": [
                "s"
            ],
            "_py_len": [
                "s"
            ],
            "print_": [],
            "_py_print": [],
            "_tf_py_func_print": [
                "objects",
                "kwargs"
            ],
            "range_": [
                "start_or_stop",
                "stop",
                "step"
            ],
            "_tf_range": [
                "start_or_stop",
                "stop",
                "step"
            ],
            "_py_range": [
                "start_or_stop",
                "stop",
                "step"
            ],
            "enumerate_": [
                "s",
                "start"
            ],
            "_tf_dataset_enumerate": [
                "s",
                "start"
            ],
            "_py_enumerate": [
                "s",
                "start"
            ],
            "zip_": [],
            "_tf_dataset_zip": [],
            "_py_zip": []
        },
        "tensorflow_core.python.autograph.operators.slices": {
            "get_item": [
                "target",
                "i",
                "opts"
            ],
            "_tf_tensorarray_get_item": [
                "target",
                "i"
            ],
            "_tf_tensor_list_get_item": [
                "target",
                "i",
                "opts"
            ],
            "_tf_tensor_get_item": [
                "target",
                "i"
            ],
            "_tf_tensor_string_get_item": [
                "target",
                "i"
            ],
            "_py_get_item": [
                "target",
                "i"
            ],
            "set_item": [
                "target",
                "i",
                "x"
            ],
            "_tf_tensorarray_set_item": [
                "target",
                "i",
                "x"
            ],
            "_tf_tensor_list_set_item": [
                "target",
                "i",
                "x"
            ],
            "_tf_tensor_set_item": [
                "target",
                "i",
                "x"
            ],
            "_py_set_item": [
                "target",
                "i",
                "x"
            ],
            "GetItemOpts": {}
        },
        "tensorflow_core.python.autograph.operators.data_structures": {
            "new_list": [
                "iterable"
            ],
            "tf_tensor_array_new": [
                "elements",
                "element_dtype",
                "element_shape"
            ],
            "tf_tensor_list_new": [
                "elements",
                "element_dtype",
                "element_shape"
            ],
            "_py_list_new": [
                "elements"
            ],
            "list_append": [
                "list_",
                "x"
            ],
            "_tf_tensor_list_append": [
                "list_",
                "x"
            ],
            "_tf_tensorarray_append": [
                "list_",
                "x"
            ],
            "_py_list_append": [
                "list_",
                "x"
            ],
            "list_pop": [
                "list_",
                "i",
                "opts"
            ],
            "_tf_tensor_list_pop": [
                "list_",
                "i",
                "opts"
            ],
            "_py_list_pop": [
                "list_",
                "i"
            ],
            "list_stack": [
                "list_",
                "opts"
            ],
            "_tf_tensorarray_stack": [
                "list_"
            ],
            "_tf_tensor_list_stack": [
                "list_",
                "opts"
            ],
            "_py_list_stack": [
                "list_",
                "opts"
            ],
            "ListPopOpts": {},
            "ListStackOpts": {}
        },
        "tensorflow_core.python.autograph.operators.exceptions": {
            "assert_stmt": [
                "expression1",
                "expression2"
            ],
            "_tf_assert_stmt": [
                "expression1",
                "expression2"
            ],
            "_py_assert_stmt": [
                "expression1",
                "expression2"
            ]
        },
        "tensorflow_core.python.autograph.operators.control_flow": {
            "_disallow_undefs_into_loop": [],
            "_shape_greater_than_or_equal": [
                "shape1",
                "shape2"
            ],
            "_verify_tf_loop_vars": [
                "init_loop_vars",
                "first_iter_vars",
                "basic_symbol_names",
                "composite_symbol_names",
                "include_shapes"
            ],
            "_verify_tf_cond_vars": [
                "body_outputs",
                "orelse_outputs",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "for_stmt": [
                "iter_",
                "extra_test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "_py_for_stmt": [
                "iter_",
                "extra_test",
                "body",
                "get_state",
                "set_state",
                "init_vars"
            ],
            "_known_len_tf_for_stmt": [
                "iter_",
                "extra_test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "_tf_range_for_stmt": [
                "iter_",
                "extra_test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "_tf_iterator_for_stmt": [
                "itr",
                "extra_test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "_tf_dataset_for_stmt": [
                "ds",
                "extra_test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "_dataset_for_stmt_with_extra_test": [
                "ds",
                "extra_test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "_dataset_for_stmt_no_extra_test": [
                "ds",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "while_stmt": [
                "test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names",
                "opts"
            ],
            "_tf_while_stmt": [
                "test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "basic_symbol_names",
                "composite_symbol_names",
                "opts"
            ],
            "_py_while_stmt": [
                "test",
                "body",
                "get_state",
                "set_state",
                "init_vars",
                "opts"
            ],
            "if_stmt": [
                "cond",
                "body",
                "orelse",
                "get_state",
                "set_state",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "tf_if_stmt": [
                "cond",
                "body",
                "orelse",
                "get_state",
                "set_state",
                "basic_symbol_names",
                "composite_symbol_names"
            ],
            "_isolate_state": [
                "func",
                "get_state",
                "set_state"
            ],
            "_wrap_disallow_undefs_from_cond": [
                "func",
                "branch_name"
            ],
            "_py_if_stmt": [
                "cond",
                "body",
                "orelse"
            ],
            "_PythonLoopChecker": {
                "__init__": [
                    "self"
                ],
                "_get_ops": [
                    "self"
                ],
                "_check_unroll_limits": [
                    "self"
                ],
                "_stop_checking_inefficient_unroll": [
                    "self"
                ],
                "_verify_ineffcient_unroll": [
                    "self"
                ],
                "before_iteration": [
                    "self"
                ],
                "after_iteration": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.autograph.operators": {},
        "tensorflow_core.python.autograph.lang.special_functions": {
            "_validate_list_constructor": [
                "elements",
                "element_dtype",
                "element_shape"
            ],
            "match_staging_level": [
                "value",
                "like_value"
            ],
            "tensor_list": [
                "elements",
                "element_dtype",
                "element_shape",
                "use_tensor_array"
            ],
            "stack": [
                "list_or_tensor",
                "element_dtype",
                "strict"
            ]
        },
        "tensorflow_core.python.autograph.lang.directives": {
            "set_element_type": [
                "entity",
                "dtype",
                "shape"
            ],
            "set_loop_options": [
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "maximum_iterations"
            ]
        },
        "tensorflow_core.python.autograph.lang": {},
        "tensorflow_core.python.autograph.pyct.templates": {
            "_convert_to_ast": [
                "n"
            ],
            "replace": [
                "template"
            ],
            "replace_as_expression": [
                "template"
            ],
            "ContextAdjuster": {
                "__init__": [
                    "self",
                    "override_value"
                ],
                "visit": [
                    "self",
                    "node"
                ],
                "_apply_override": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Tuple": [
                    "self",
                    "node"
                ],
                "visit_List": [
                    "self",
                    "node"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ],
                "visit_Dict": [
                    "self",
                    "node"
                ],
                "visit_Subscript": [
                    "self",
                    "node"
                ],
                "visit_comprehension": [
                    "self",
                    "node"
                ],
                "visit_Lambda": [
                    "self",
                    "node"
                ]
            },
            "ReplaceTransformer": {
                "__init__": [
                    "self",
                    "replacements"
                ],
                "_prepare_replacement": [
                    "self",
                    "replaced",
                    "key"
                ],
                "visit_Expr": [
                    "self",
                    "node"
                ],
                "visit_keyword": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.transformer": {
            "Context": {
                "__init__": [
                    "self",
                    "info"
                ]
            },
            "EntityInfo": {},
            "_StateStack": {
                "__init__": [
                    "self",
                    "type_"
                ],
                "enter": [
                    "self"
                ],
                "exit": [
                    "self"
                ],
                "stack": [
                    "self"
                ],
                "level": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "key"
                ],
                "__setattr__": [
                    "self",
                    "key",
                    "value"
                ]
            },
            "_State": {
                "__init__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "Base": {
                "__init__": [
                    "self",
                    "ctx"
                ],
                "enclosing_entities": [
                    "self"
                ],
                "local_scope_level": [
                    "self"
                ],
                "enter_local_scope": [
                    "self",
                    "inherit"
                ],
                "exit_local_scope": [
                    "self",
                    "keep"
                ],
                "set_local": [
                    "self",
                    "name",
                    "value"
                ],
                "get_local": [
                    "self",
                    "name",
                    "default"
                ],
                "debug_print": [
                    "self",
                    "node"
                ],
                "debug_print_src": [
                    "self",
                    "node"
                ],
                "create_assignment": [
                    "self",
                    "target",
                    "expression"
                ],
                "visit_block": [
                    "self",
                    "nodes",
                    "before_visit",
                    "after_visit"
                ],
                "apply_to_single_assignments": [
                    "self",
                    "targets",
                    "values",
                    "apply_fn"
                ],
                "_get_source": [
                    "self",
                    "node"
                ],
                "visit": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.pretty_printer": {
            "fmt": [
                "node",
                "color",
                "noanno"
            ],
            "PrettyPrinter": {
                "__init__": [
                    "self",
                    "color",
                    "noanno"
                ],
                "_color": [
                    "self",
                    "string",
                    "color",
                    "attrs"
                ],
                "_type": [
                    "self",
                    "node"
                ],
                "_field": [
                    "self",
                    "name"
                ],
                "_value": [
                    "self",
                    "name"
                ],
                "_warning": [
                    "self",
                    "name"
                ],
                "_indent": [
                    "self"
                ],
                "_print": [
                    "self",
                    "s"
                ],
                "generic_visit": [
                    "self",
                    "node",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.inspect_utils": {
            "islambda": [
                "f"
            ],
            "isnamedtuple": [
                "f"
            ],
            "isbuiltin": [
                "f"
            ],
            "_fix_linecache_record": [
                "obj"
            ],
            "getimmediatesource": [
                "obj"
            ],
            "getnamespace": [
                "f"
            ],
            "getqualifiedname": [
                "namespace",
                "object_",
                "max_depth",
                "visited"
            ],
            "_get_unbound_function": [
                "m"
            ],
            "getdefiningclass": [
                "m",
                "owner_class"
            ],
            "istfmethodtarget": [
                "m"
            ],
            "getmethodself": [
                "m"
            ],
            "getmethodclass": [
                "m"
            ],
            "getfutureimports": [
                "entity"
            ]
        },
        "tensorflow_core.python.autograph.pyct.cfg": {
            "build": [
                "node"
            ],
            "Node": {
                "__init__": [
                    "self",
                    "next_",
                    "prev",
                    "ast_node"
                ],
                "freeze": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Graph": {
                "__repr__": [
                    "self"
                ],
                "as_dot": [
                    "self"
                ]
            },
            "_WalkMode": {},
            "GraphVisitor": {
                "__init__": [
                    "self",
                    "graph"
                ],
                "init_state": [
                    "self",
                    "node"
                ],
                "visit_node": [
                    "self",
                    "node"
                ],
                "reset": [
                    "self"
                ],
                "_visit_internal": [
                    "self",
                    "mode"
                ],
                "visit_forward": [
                    "self"
                ],
                "visit_reverse": [
                    "self"
                ]
            },
            "GraphBuilder": {
                "__init__": [
                    "self",
                    "parent_ast_node"
                ],
                "reset": [
                    "self"
                ],
                "_connect_nodes": [
                    "self",
                    "first",
                    "second"
                ],
                "_add_new_node": [
                    "self",
                    "ast_node"
                ],
                "begin_statement": [
                    "self",
                    "stmt"
                ],
                "end_statement": [
                    "self",
                    "stmt"
                ],
                "add_ordinary_node": [
                    "self",
                    "ast_node"
                ],
                "_add_jump_node": [
                    "self",
                    "ast_node",
                    "guards"
                ],
                "_connect_jump_to_finally_sections": [
                    "self",
                    "node"
                ],
                "add_exit_node": [
                    "self",
                    "ast_node",
                    "section_id",
                    "guards"
                ],
                "add_continue_node": [
                    "self",
                    "ast_node",
                    "section_id",
                    "guards"
                ],
                "add_error_node": [
                    "self",
                    "ast_node",
                    "guards"
                ],
                "enter_section": [
                    "self",
                    "section_id"
                ],
                "exit_section": [
                    "self",
                    "section_id"
                ],
                "enter_loop_section": [
                    "self",
                    "section_id",
                    "entry_node"
                ],
                "exit_loop_section": [
                    "self",
                    "section_id"
                ],
                "enter_cond_section": [
                    "self",
                    "section_id"
                ],
                "new_cond_branch": [
                    "self",
                    "section_id"
                ],
                "exit_cond_section": [
                    "self",
                    "section_id"
                ],
                "enter_finally_section": [
                    "self",
                    "section_id"
                ],
                "exit_finally_section": [
                    "self",
                    "section_id"
                ],
                "build": [
                    "self"
                ]
            },
            "AstToCfg": {
                "__init__": [
                    "self"
                ],
                "_enter_lexical_scope": [
                    "self",
                    "node"
                ],
                "_exit_lexical_scope": [
                    "self",
                    "node"
                ],
                "_get_enclosing_finally_scopes": [
                    "self",
                    "stop_at"
                ],
                "_process_basic_statement": [
                    "self",
                    "node"
                ],
                "_process_exit_statement": [
                    "self",
                    "node"
                ],
                "_process_continue_statement": [
                    "self",
                    "node"
                ],
                "visit_ClassDef": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_Return": [
                    "self",
                    "node"
                ],
                "visit_Expr": [
                    "self",
                    "node"
                ],
                "visit_Assign": [
                    "self",
                    "node"
                ],
                "visit_AnnAssign": [
                    "self",
                    "node"
                ],
                "visit_AugAssign": [
                    "self",
                    "node"
                ],
                "visit_Pass": [
                    "self",
                    "node"
                ],
                "visit_Global": [
                    "self",
                    "node"
                ],
                "visit_Nonlocal": [
                    "self",
                    "node"
                ],
                "visit_Print": [
                    "self",
                    "node"
                ],
                "visit_Raise": [
                    "self",
                    "node"
                ],
                "visit_Assert": [
                    "self",
                    "node"
                ],
                "visit_Delete": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_Break": [
                    "self",
                    "node"
                ],
                "visit_Continue": [
                    "self",
                    "node"
                ],
                "visit_ExceptHandler": [
                    "self",
                    "node"
                ],
                "visit_Try": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.origin_info": {
            "create_source_map": [
                "nodes",
                "code",
                "filepath"
            ],
            "resolve": [
                "node",
                "source",
                "context_filepath",
                "context_lineno",
                "context_col_offset"
            ],
            "resolve_entity": [
                "node",
                "source",
                "entity"
            ],
            "LineLocation": {},
            "Location": {
                "line_loc": [
                    "self"
                ]
            },
            "OriginInfo": {
                "as_frame": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_Function": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "OriginResolver": {
                "__init__": [
                    "self",
                    "root_node",
                    "source_lines",
                    "comments_map",
                    "context_lineno",
                    "context_col_offset",
                    "filepath"
                ],
                "_absolute_lineno": [
                    "self",
                    "node"
                ],
                "_absolute_col_offset": [
                    "self",
                    "node"
                ],
                "_attach_origin_info": [
                    "self",
                    "node"
                ],
                "visit": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.parser": {
            "parse_entity": [
                "entity",
                "future_features"
            ],
            "parse_str": [
                "src",
                "preamble_len",
                "single_node"
            ],
            "parse_expression": [
                "src"
            ]
        },
        "tensorflow_core.python.autograph.pyct.ast_util": {
            "copy_clean": [
                "node",
                "preserve_annos"
            ],
            "rename_symbols": [
                "node",
                "name_map"
            ],
            "keywords_to_dict": [
                "keywords"
            ],
            "matches": [
                "node",
                "pattern"
            ],
            "apply_to_single_assignments": [
                "targets",
                "values",
                "apply_fn"
            ],
            "parallel_walk": [
                "node",
                "other"
            ],
            "find_matching_definitions": [
                "node",
                "f"
            ],
            "CleanCopier": {
                "__init__": [
                    "self",
                    "preserve_annos"
                ],
                "copy": [
                    "self",
                    "node"
                ]
            },
            "SymbolRenamer": {
                "__init__": [
                    "self",
                    "name_map"
                ],
                "_process": [
                    "self",
                    "node"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ]
            },
            "PatternMatcher": {
                "__init__": [
                    "self",
                    "pattern"
                ],
                "compare_and_visit": [
                    "self",
                    "node",
                    "pattern"
                ],
                "no_match": [
                    "self"
                ],
                "is_wildcard": [
                    "self",
                    "p"
                ],
                "generic_visit": [
                    "self",
                    "node"
                ]
            },
            "LambdaDefinitionMatcher": {
                "__init__": [
                    "self",
                    "fn"
                ],
                "_arg_name": [
                    "self",
                    "node"
                ],
                "_argspec_matches": [
                    "self",
                    "node"
                ],
                "visit_Lambda": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.compiler": {
            "ast_to_source": [
                "node",
                "indentation",
                "include_encoding_marker"
            ],
            "source_to_entity": [
                "source",
                "delete_on_exit"
            ],
            "ast_to_object": [
                "nodes",
                "indentation",
                "include_source_map",
                "delete_on_exit"
            ]
        },
        "tensorflow_core.python.autograph.pyct.qual_names": {
            "resolve": [
                "node"
            ],
            "from_str": [
                "qn_str"
            ],
            "Symbol": {},
            "StringLiteral": {
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "NumberLiteral": {
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "QN": {
                "__init__": [
                    "self",
                    "base",
                    "attr",
                    "subscript"
                ],
                "is_symbol": [
                    "self"
                ],
                "is_simple": [
                    "self"
                ],
                "is_composite": [
                    "self"
                ],
                "has_subscript": [
                    "self"
                ],
                "has_attr": [
                    "self"
                ],
                "parent": [
                    "self"
                ],
                "owner_set": [
                    "self"
                ],
                "support_set": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "ssf": [
                    "self"
                ],
                "ast": [
                    "self"
                ]
            },
            "QnResolver": {
                "visit_Name": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Subscript": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct": {},
        "tensorflow_core.python.autograph.pyct.anno": {
            "keys": [
                "node",
                "field_name"
            ],
            "getanno": [
                "node",
                "key",
                "default",
                "field_name"
            ],
            "hasanno": [
                "node",
                "key",
                "field_name"
            ],
            "setanno": [
                "node",
                "key",
                "value",
                "field_name"
            ],
            "delanno": [
                "node",
                "key",
                "field_name"
            ],
            "copyanno": [
                "from_node",
                "to_node",
                "key",
                "field_name"
            ],
            "dup": [
                "node",
                "copy_map",
                "field_name"
            ],
            "NoValue": {
                "__repr__": [
                    "self"
                ]
            },
            "Basic": {},
            "Static": {}
        },
        "tensorflow_core.python.autograph.pyct.errors": {
            "_stack_trace_inside_mapped_code": [
                "tb",
                "source_map"
            ],
            "FrameInfo": {},
            "MultilineMessageKeyError": {
                "__init__": [
                    "self",
                    "message",
                    "original_key"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ErrorMetadataBase": {
                "__init__": [
                    "self",
                    "callsite_tb",
                    "cause_metadata",
                    "cause_message",
                    "source_map"
                ],
                "get_message": [
                    "self"
                ],
                "create_exception": [
                    "self",
                    "source_error"
                ],
                "to_exception": [
                    "self",
                    "source_error"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.testing.basic_definitions": {
            "simple_function": [
                "x"
            ],
            "nested_functions": [
                "x"
            ],
            "function_with_print": [],
            "function_with_multiline_call": [
                "x"
            ],
            "SimpleClass": {
                "simple_method": [
                    "self"
                ],
                "method_with_print": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.testing.decorators": {
            "wrapping_decorator": [
                "f"
            ],
            "standalone_decorator": [
                "f"
            ],
            "functional_decorator": []
        },
        "tensorflow_core.python.autograph.pyct.testing": {},
        "tensorflow_core.python.autograph.pyct.static_analysis.liveness": {
            "resolve": [
                "node",
                "source_info",
                "graphs"
            ],
            "Analyzer": {
                "__init__": [
                    "self",
                    "graph"
                ],
                "init_state": [
                    "self",
                    "_"
                ],
                "visit_node": [
                    "self",
                    "node"
                ]
            },
            "WholeTreeAnalyzer": {
                "__init__": [
                    "self",
                    "source_info",
                    "graphs"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ]
            },
            "Annotator": {
                "__init__": [
                    "self",
                    "source_info",
                    "cross_function_analyzer"
                ],
                "visit": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "_block_statement_live_out": [
                    "self",
                    "node"
                ],
                "_block_statement_live_in": [
                    "self",
                    "node",
                    "entry_node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_Try": [
                    "self",
                    "node"
                ],
                "visit_ExceptHandler": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_Expr": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.static_analysis.annos": {
            "NoValue": {
                "__repr__": [
                    "self"
                ]
            },
            "NodeAnno": {}
        },
        "tensorflow_core.python.autograph.pyct.static_analysis.reaching_definitions": {
            "resolve": [
                "node",
                "source_info",
                "graphs",
                "definition_factory"
            ],
            "Definition": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_NodeState": {
                "__init__": [
                    "self",
                    "init_from"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Analyzer": {
                "__init__": [
                    "self",
                    "graph",
                    "definition_factory"
                ],
                "init_state": [
                    "self",
                    "_"
                ],
                "visit_node": [
                    "self",
                    "node"
                ]
            },
            "TreeAnnotator": {
                "__init__": [
                    "self",
                    "source_info",
                    "graphs",
                    "definition_factory"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ],
                "_aggregate_predecessors_defined_in": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_Try": [
                    "self",
                    "node"
                ],
                "visit_ExceptHandler": [
                    "self",
                    "node"
                ],
                "visit": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.static_analysis.activity": {
            "resolve": [
                "node",
                "context",
                "parent_scope"
            ],
            "Scope": {
                "__init__": [
                    "self",
                    "parent",
                    "isolated",
                    "add_unknown_symbols"
                ],
                "affects_parent": [
                    "self"
                ],
                "referenced": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "copy_from": [
                    "self",
                    "other"
                ],
                "copy_of": [
                    "cls",
                    "other"
                ],
                "merge_from": [
                    "self",
                    "other"
                ],
                "mark_read": [
                    "self",
                    "name"
                ],
                "mark_modified": [
                    "self",
                    "name"
                ],
                "mark_deleted": [
                    "self",
                    "name"
                ],
                "mark_param": [
                    "self",
                    "name",
                    "owner"
                ]
            },
            "_Lambda": {
                "__init__": [
                    "self"
                ]
            },
            "_Comprehension": {
                "__init__": [
                    "self"
                ]
            },
            "ActivityAnalyzer": {
                "__init__": [
                    "self",
                    "context",
                    "parent_scope",
                    "add_unknown_symbols"
                ],
                "_in_constructor": [
                    "self"
                ],
                "_node_sets_self_attribute": [
                    "self",
                    "node"
                ],
                "_track_symbol": [
                    "self",
                    "node",
                    "composite_writes_alter_parent"
                ],
                "_enter_scope": [
                    "self",
                    "isolated"
                ],
                "_exit_scope": [
                    "self"
                ],
                "_process_statement": [
                    "self",
                    "node"
                ],
                "visit_Expr": [
                    "self",
                    "node"
                ],
                "visit_Return": [
                    "self",
                    "node"
                ],
                "visit_Assign": [
                    "self",
                    "node"
                ],
                "visit_AnnAssign": [
                    "self",
                    "node"
                ],
                "visit_AugAssign": [
                    "self",
                    "node"
                ],
                "visit_Delete": [
                    "self",
                    "node"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Subscript": [
                    "self",
                    "node"
                ],
                "visit_Print": [
                    "self",
                    "node"
                ],
                "visit_Assert": [
                    "self",
                    "node"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ],
                "_process_block_node": [
                    "self",
                    "node",
                    "block",
                    "scope_name"
                ],
                "_process_parallel_blocks": [
                    "self",
                    "parent",
                    "children"
                ],
                "visit_Lambda": [
                    "self",
                    "node"
                ],
                "_process_iterable_comprehension": [
                    "self",
                    "node"
                ],
                "visit_comprehension": [
                    "self",
                    "node"
                ],
                "visit_DictComp": [
                    "self",
                    "node"
                ],
                "visit_ListComp": [
                    "self",
                    "node"
                ],
                "visit_SetComp": [
                    "self",
                    "node"
                ],
                "visit_GeneratorExp": [
                    "self",
                    "node"
                ],
                "visit_arguments": [
                    "self",
                    "node"
                ],
                "visit_ClassDef": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_withitem": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_While": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.static_analysis": {},
        "tensorflow_core.python.autograph.pyct.common_transformers.anf": {
            "_is_py2_name_constant": [
                "node"
            ],
            "transform": [
                "node",
                "ctx",
                "config",
                "gensym_source"
            ],
            "DummyGensym": {
                "__init__": [
                    "self",
                    "ctx"
                ],
                "new_name": [
                    "self",
                    "stem"
                ]
            },
            "ASTEdgePattern": {
                "matches": [
                    "self",
                    "parent",
                    "field",
                    "child"
                ]
            },
            "AnfTransformer": {
                "__init__": [
                    "self",
                    "ctx",
                    "config",
                    "gensym_source"
                ],
                "_consume_pending_statements": [
                    "self"
                ],
                "_add_pending_statement": [
                    "self",
                    "stmt"
                ],
                "_match": [
                    "self",
                    "pattern",
                    "parent",
                    "field",
                    "child"
                ],
                "_should_transform": [
                    "self",
                    "parent",
                    "field",
                    "child"
                ],
                "_do_transform_node": [
                    "self",
                    "node"
                ],
                "_ensure_node_in_anf": [
                    "self",
                    "parent",
                    "field",
                    "node"
                ],
                "_ensure_fields_in_anf": [
                    "self",
                    "node",
                    "parent",
                    "super_field"
                ],
                "_visit_strict_statement": [
                    "self",
                    "node",
                    "children_ok_to_transform"
                ],
                "_visit_trivial_only_statement": [
                    "self",
                    "node",
                    "msg"
                ],
                "_visit_strict_expression": [
                    "self",
                    "node"
                ],
                "_visit_trivial_only_expression": [
                    "self",
                    "node",
                    "msg"
                ],
                "visit_Return": [
                    "self",
                    "node"
                ],
                "visit_Delete": [
                    "self",
                    "node"
                ],
                "visit_Assign": [
                    "self",
                    "node"
                ],
                "visit_AugAssign": [
                    "self",
                    "node"
                ],
                "visit_Print": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_AsyncFor": [
                    "self",
                    "node"
                ],
                "visit_While": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_AsyncWith": [
                    "self",
                    "node"
                ],
                "visit_Raise": [
                    "self",
                    "node"
                ],
                "visit_Assert": [
                    "self",
                    "node"
                ],
                "visit_Exec": [
                    "self",
                    "node"
                ],
                "visit_Expr": [
                    "self",
                    "node"
                ],
                "visit_BoolOp": [
                    "self",
                    "node"
                ],
                "visit_BinOp": [
                    "self",
                    "node"
                ],
                "visit_UnaryOp": [
                    "self",
                    "node"
                ],
                "visit_Lambda": [
                    "self",
                    "node"
                ],
                "visit_IfExp": [
                    "self",
                    "node"
                ],
                "visit_Dict": [
                    "self",
                    "node"
                ],
                "visit_Set": [
                    "self",
                    "node"
                ],
                "visit_ListComp": [
                    "self",
                    "node"
                ],
                "visit_SetComp": [
                    "self",
                    "node"
                ],
                "visit_DictComp": [
                    "self",
                    "node"
                ],
                "visit_GeneratorExp": [
                    "self",
                    "node"
                ],
                "visit_Await": [
                    "self",
                    "node"
                ],
                "visit_Yield": [
                    "self",
                    "node"
                ],
                "visit_YieldFrom": [
                    "self",
                    "node"
                ],
                "visit_Compare": [
                    "self",
                    "node"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ],
                "visit_Repr": [
                    "self",
                    "node"
                ],
                "visit_FormattedValue": [
                    "self",
                    "node"
                ],
                "visit_JoinedStr": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Subscript": [
                    "self",
                    "node"
                ],
                "visit_List": [
                    "self",
                    "node"
                ],
                "visit_Tuple": [
                    "self",
                    "node"
                ]
            }
        },
        "tensorflow_core.python.autograph.pyct.common_transformers": {},
        "tensorflow_core.python.autograph.utils.type_check": {
            "is_tensor": []
        },
        "tensorflow_core.python.autograph.utils.misc": {
            "alias_tensors": [],
            "capitalize_initial": [
                "s"
            ],
            "get_range_len": [
                "start",
                "limit",
                "delta"
            ]
        },
        "tensorflow_core.python.autograph.utils.testing": {
            "fake_tf": []
        },
        "tensorflow_core.python.autograph.utils.context_managers": {
            "control_dependency_on_returns": [
                "return_value"
            ]
        },
        "tensorflow_core.python.autograph.utils.ag_logging": {
            "set_verbosity": [
                "level",
                "alsologtostdout"
            ],
            "trace": [],
            "get_verbosity": [],
            "has_verbosity": [
                "level"
            ],
            "_output_to_stdout": [
                "msg"
            ],
            "error": [
                "level",
                "msg"
            ],
            "log": [
                "level",
                "msg"
            ],
            "warn": [
                "msg"
            ]
        },
        "tensorflow_core.python.autograph.utils.py_func": {
            "wrap_py_func": [
                "f",
                "return_dtypes",
                "args",
                "kwargs",
                "use_dummy_return"
            ],
            "MatchDType": {}
        },
        "tensorflow_core.python.autograph.utils.tensors": {
            "is_dense_tensor": [
                "t"
            ],
            "is_tensor_array": [
                "t"
            ],
            "is_tensor_list": [
                "t"
            ],
            "is_range_tensor": [
                "t"
            ]
        },
        "tensorflow_core.python.autograph.utils.tensor_list": {
            "dynamic_list_append": [
                "target",
                "element"
            ],
            "TensorList": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "append": [
                    "self",
                    "value"
                ],
                "pop": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "count": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ]
            }
        },
        "tensorflow_core.python.autograph.utils": {},
        "tensorflow_core.python.distribute.input_lib": {
            "get_distributed_dataset": [
                "dataset",
                "input_workers",
                "strategy",
                "split_batch_by",
                "input_context"
            ],
            "get_distributed_datasets_from_function": [
                "dataset_fn",
                "input_workers",
                "input_contexts",
                "strategy"
            ],
            "_get_next_as_optional": [
                "iterator",
                "strategy",
                "name"
            ],
            "_dummy_tensor_fn": [
                "value_structure"
            ],
            "_create_iterators_per_worker": [
                "worker_datasets",
                "input_workers"
            ],
            "_create_iterators_per_worker_with_input_context": [
                "input_contexts",
                "input_workers",
                "dataset_fn"
            ],
            "_get_batched_dataset": [
                "d"
            ],
            "_get_batched_dataset_attributes": [
                "d"
            ],
            "_get_dataset_attributes": [
                "dataset"
            ],
            "InputWorkers": {
                "__init__": [
                    "self",
                    "device_map",
                    "worker_device_pairs",
                    "logical_device"
                ],
                "device_map": [
                    "self"
                ],
                "logical_device": [
                    "self"
                ],
                "num_workers": [
                    "self"
                ],
                "worker_devices": [
                    "self"
                ],
                "compute_devices_for_worker": [
                    "self",
                    "worker_index"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "DistributedIterator": {
                "__init__": [
                    "self",
                    "input_workers",
                    "iterators",
                    "strategy"
                ],
                "next": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "get_next": [
                    "self",
                    "name"
                ],
                "_initializer": [
                    "self"
                ]
            },
            "DistributedIteratorV1": {
                "initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "output_classes": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "output_types": [
                    "self"
                ],
                "get_iterator": [
                    "self",
                    "worker"
                ]
            },
            "_IterableInput": {
                "__init__": [
                    "self",
                    "input_workers"
                ],
                "__iter__": [
                    "self"
                ],
                "_autograph_for_loop": [
                    "self",
                    "extra_test",
                    "body",
                    "init_state"
                ],
                "reduce": [
                    "self",
                    "initial_state",
                    "reduce_fn"
                ]
            },
            "DistributedDataset": {
                "__init__": [
                    "self",
                    "dataset",
                    "input_workers",
                    "strategy",
                    "split_batch_by",
                    "input_context"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "DistributedDatasetV1": {
                "__init__": [
                    "self",
                    "dataset",
                    "input_workers",
                    "strategy",
                    "split_batch_by",
                    "input_context"
                ],
                "make_one_shot_iterator": [
                    "self"
                ],
                "_make_one_shot_iterator": [
                    "self"
                ],
                "make_initializable_iterator": [
                    "self"
                ],
                "_make_initializable_iterator": [
                    "self",
                    "shared_name"
                ],
                "_get_iterator": [
                    "self"
                ]
            },
            "DistributedDatasetsFromFunction": {
                "__init__": [
                    "self",
                    "dataset_fn",
                    "input_workers",
                    "input_contexts",
                    "strategy"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "DistributedDatasetsFromFunctionV1": {
                "_make_initializable_iterator": [
                    "self",
                    "shared_name"
                ],
                "_make_one_shot_iterator": [
                    "self"
                ],
                "_get_iterator": [
                    "self"
                ]
            },
            "InputFunctionIterator": {
                "__init__": [
                    "self",
                    "input_fn",
                    "input_workers",
                    "input_contexts",
                    "strategy"
                ]
            },
            "DatasetIterator": {
                "__init__": [
                    "self",
                    "dataset",
                    "input_workers",
                    "strategy",
                    "split_batch_by",
                    "input_context"
                ]
            },
            "_SingleWorkerDatasetIterator": {
                "__init__": [
                    "self",
                    "dataset",
                    "worker",
                    "devices"
                ],
                "_make_iterator": [
                    "self"
                ],
                "get_next": [
                    "self",
                    "device",
                    "name"
                ],
                "get_next_as_list_deprecated": [
                    "self",
                    "name"
                ],
                "get_next_as_list": [
                    "self",
                    "name"
                ],
                "initialize": [
                    "self"
                ],
                "output_classes": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "output_types": [
                    "self"
                ]
            },
            "_SingleWorkerCallableIterator": {
                "__init__": [
                    "self",
                    "fn",
                    "worker",
                    "devices"
                ],
                "get_next": [
                    "self",
                    "device",
                    "name"
                ],
                "get_next_as_list_deprecated": [
                    "self",
                    "name"
                ],
                "get_next_as_list": [
                    "self",
                    "name"
                ],
                "initialize": [
                    "self"
                ]
            },
            "MultiStepContext": {
                "__init__": [
                    "self"
                ],
                "last_step_outputs": [
                    "self"
                ],
                "_set_last_step_outputs": [
                    "self",
                    "outputs"
                ],
                "set_last_step_output": [
                    "self",
                    "name",
                    "output",
                    "reduce_op"
                ],
                "non_tensor_outputs": [
                    "self"
                ],
                "set_non_tensor_output": [
                    "self",
                    "name",
                    "output"
                ]
            }
        },
        "tensorflow_core.python.distribute.multi_worker_util": {
            "normalize_cluster_spec": [
                "cluster_spec"
            ],
            "_validate_cluster_spec": [
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "is_chief": [
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "collective_leader": [
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "worker_count": [
                "cluster_spec",
                "task_type"
            ],
            "id_in_cluster": [
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "should_save_checkpoint": [],
            "should_load_checkpoint": [],
            "wait_for_other_workers": [],
            "has_worker_context": []
        },
        "tensorflow_core.python.distribute.summary_op_util": {
            "skip_summary": []
        },
        "tensorflow_core.python.distribute.saved_model_test_base": {
            "is_tpu_strategy": [
                "distribution"
            ],
            "get_tolerance": [
                "save_distribution",
                "restore_distribution"
            ],
            "simple_models_with_strategies": [],
            "simple_models_with_strategy_pairs": [],
            "tfmodule_models_with_strategies": [],
            "tfmodule_models_with_strategy_pairs": [],
            "load_and_run_with_saved_model_api": [
                "distribution",
                "saved_dir",
                "predict_dataset",
                "output_name"
            ],
            "TestSavedModelBase": {
                "setUp": [
                    "self"
                ],
                "_save_model": [
                    "self",
                    "model",
                    "saved_dir"
                ],
                "_load_and_run_model": [
                    "self",
                    "distribution",
                    "saved_dir",
                    "predict_dataset",
                    "output_name",
                    "experimental_run_tf_function"
                ],
                "_train_model": [
                    "self",
                    "model",
                    "x_train",
                    "y_train",
                    "batch_size"
                ],
                "_predict_with_model": [
                    "self",
                    "distribution",
                    "model",
                    "predict_dataset"
                ],
                "_get_predict_dataset": [
                    "self",
                    "x_predict",
                    "batch_size"
                ],
                "run_test_save_no_strategy_restore_strategy": [
                    "self",
                    "model_and_input",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "run_test_save_strategy_restore_no_strategy": [
                    "self",
                    "model_and_input",
                    "distribution",
                    "save_in_scope",
                    "experimental_run_tf_function"
                ],
                "run_test_save_strategy_restore_strategy": [
                    "self",
                    "model_and_input",
                    "distribution_for_saving",
                    "distribution_for_restoring",
                    "save_in_scope",
                    "experimental_run_tf_function"
                ]
            }
        },
        "tensorflow_core.python.distribute.all_reduce": {
            "_flatten_tensors": [
                "tensors"
            ],
            "_reshape_tensors": [
                "tensors",
                "shape"
            ],
            "_padded_split": [
                "tensor",
                "pieces"
            ],
            "_strip_padding": [
                "tensors",
                "pad_len"
            ],
            "_ragged_split": [
                "tensor",
                "pieces"
            ],
            "_ring_permutations": [
                "num_workers",
                "num_subchunks",
                "gpu_perm"
            ],
            "build_ring_all_reduce": [
                "input_tensors",
                "num_workers",
                "num_subchunks",
                "gpu_perm",
                "red_op",
                "un_op"
            ],
            "_build_ring_gather": [
                "input_tensors",
                "devices",
                "num_subchunks",
                "pred_by_s_d",
                "rank_by_s_d",
                "red_op"
            ],
            "_apply_unary_to_chunks": [
                "f",
                "chunks_by_dev"
            ],
            "_build_ring_scatter": [
                "pred_by_s_d",
                "rank_by_s_d",
                "chunks_by_dev"
            ],
            "build_recursive_hd_all_reduce": [
                "input_tensors",
                "red_op",
                "un_op"
            ],
            "_build_recursive_hd_gather": [
                "input_tensors",
                "devices",
                "red_op"
            ],
            "_build_recursive_hd_scatter": [
                "input_tensors",
                "devices"
            ],
            "build_shuffle_all_reduce": [
                "input_tensors",
                "gather_devices",
                "red_op",
                "un_op"
            ],
            "_build_shuffle_gather": [
                "input_tensors",
                "gather_devices",
                "red_op",
                "un_op"
            ],
            "_build_shuffle_scatter": [
                "reduced_shards",
                "dst_devices"
            ],
            "_split_by_task": [
                "devices",
                "values"
            ],
            "build_nccl_all_reduce": [
                "input_tensors",
                "red_op",
                "un_op"
            ],
            "_build_nccl_hybrid": [
                "input_tensors",
                "red_op",
                "upper_level_f"
            ],
            "_reduce_non_singleton": [
                "input_tensors",
                "red_f",
                "un_op"
            ],
            "build_nccl_then_ring": [
                "input_tensors",
                "subdiv",
                "red_op",
                "un_op"
            ],
            "build_nccl_then_recursive_hd": [
                "input_tensors",
                "red_op",
                "un_op"
            ],
            "build_nccl_then_shuffle": [
                "input_tensors",
                "gather_devices",
                "nccl_red_op",
                "shuffle_red_op",
                "un_op"
            ],
            "_build_shuffle_hybrid": [
                "input_tensors",
                "gather_devices",
                "red_op",
                "upper_level_f"
            ],
            "build_shuffle_then_ring": [
                "input_tensors",
                "gather_devices",
                "subdiv",
                "red_n_op",
                "red_op",
                "un_op"
            ],
            "build_shuffle_then_shuffle": [
                "input_tensors",
                "first_gather_devices",
                "second_gather_devices",
                "red_op",
                "un_op"
            ]
        },
        "tensorflow_core.python.distribute.single_loss_example": {
            "single_loss_example": [
                "optimizer_fn",
                "distribution",
                "use_bias",
                "iterations_per_step"
            ],
            "minimize_loss_example": [
                "optimizer",
                "use_bias",
                "use_callable_loss"
            ],
            "batchnorm_example": [
                "optimizer_fn",
                "batch_per_epoch",
                "momentum",
                "renorm",
                "update_ops_in_replica_mode"
            ]
        },
        "tensorflow_core.python.distribute.distribute_coordinator_context": {
            "get_current_worker_context": []
        },
        "tensorflow_core.python.distribute.tpu_strategy": {
            "get_tpu_system_metadata": [
                "tpu_cluster_resolver"
            ],
            "maybe_init_scope": [],
            "_set_last_step_outputs": [
                "ctx",
                "last_step_tensor_outputs"
            ],
            "TPUStrategy": {
                "__init__": [
                    "self",
                    "tpu_cluster_resolver",
                    "device_assignment"
                ],
                "experimental_run_v2": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ]
            },
            "TPUStrategyV1": {
                "__init__": [
                    "self",
                    "tpu_cluster_resolver",
                    "steps_per_run",
                    "device_assignment"
                ],
                "steps_per_run": [
                    "self"
                ],
                "experimental_run_v2": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ]
            },
            "TPUExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "tpu_cluster_resolver",
                    "steps_per_run",
                    "device_assignment"
                ],
                "_validate_colocate_with_variable": [
                    "self",
                    "colocate_with_variable"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "_experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "_experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "_experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "_experimental_run_steps_on_iterator": [
                    "self",
                    "fn",
                    "multi_worker_iterator",
                    "iterations",
                    "initial_loop_values"
                ],
                "_call_for_each_replica": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "_experimental_initialize_system": [
                    "self"
                ],
                "_create_variable": [
                    "self",
                    "next_creator"
                ],
                "_reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "_update": [
                    "self",
                    "var",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "read_var": [
                    "self",
                    "var"
                ],
                "_local_results": [
                    "self",
                    "val"
                ],
                "value_container": [
                    "self",
                    "value"
                ],
                "_broadcast_to": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "num_hosts": [
                    "self"
                ],
                "num_replicas_per_host": [
                    "self"
                ],
                "_num_replicas_in_sync": [
                    "self"
                ],
                "experimental_between_graph": [
                    "self"
                ],
                "experimental_should_init": [
                    "self"
                ],
                "should_checkpoint": [
                    "self"
                ],
                "should_save_summary": [
                    "self"
                ],
                "worker_devices": [
                    "self"
                ],
                "parameter_devices": [
                    "self"
                ],
                "non_slot_devices": [
                    "self",
                    "var_list"
                ],
                "_update_non_slot": [
                    "self",
                    "colocate_with",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_configure": [
                    "self",
                    "session_config",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "_update_config_proto": [
                    "self",
                    "config_proto"
                ],
                "_global_batch_size": [
                    "self"
                ],
                "tpu_run": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "_tpu_function_creator": [
                    "self",
                    "fn"
                ]
            },
            "_TPUReplicaContext": {
                "__init__": [
                    "self",
                    "strategy",
                    "replica_id_in_sync_group"
                ],
                "devices": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.mirrored_strategy": {
            "_enter_graph": [
                "g",
                "eager",
                "creator_stack"
            ],
            "_cpu_device": [
                "device"
            ],
            "_call_for_each_replica": [
                "distribution",
                "device_map",
                "fn",
                "args",
                "kwargs"
            ],
            "_is_device_list_local": [
                "devices"
            ],
            "_cluster_spec_to_device_list": [
                "cluster_spec",
                "num_gpus_per_worker"
            ],
            "_group_device_list": [
                "devices"
            ],
            "_is_gpu_device": [
                "device"
            ],
            "_infer_num_gpus_per_worker": [
                "devices"
            ],
            "all_local_devices": [
                "num_gpus"
            ],
            "all_devices": [],
            "_RequestedStop": {},
            "MirroredStrategy": {
                "__init__": [
                    "self",
                    "devices",
                    "cross_device_ops"
                ]
            },
            "MirroredStrategyV1": {
                "__init__": [
                    "self",
                    "devices",
                    "cross_device_ops"
                ]
            },
            "MirroredExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "devices",
                    "cross_device_ops"
                ],
                "_initialize_strategy": [
                    "self",
                    "devices"
                ],
                "_initialize_local": [
                    "self",
                    "devices"
                ],
                "_initialize_multi_worker": [
                    "self",
                    "devices"
                ],
                "_get_variable_creator_initial_value": [
                    "self",
                    "replica_id",
                    "device",
                    "primary_var"
                ],
                "_create_variable": [
                    "self",
                    "next_creator"
                ],
                "_validate_colocate_with_variable": [
                    "self",
                    "colocate_with_variable"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "_experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "_experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "_experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "_experimental_run_steps_on_iterator": [
                    "self",
                    "fn",
                    "iterator",
                    "iterations",
                    "initial_loop_values"
                ],
                "_broadcast_to": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "_call_for_each_replica": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "_configure": [
                    "self",
                    "session_config",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "_update_config_proto": [
                    "self",
                    "config_proto"
                ],
                "_get_cross_device_ops": [
                    "self"
                ],
                "_reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "_batch_reduce_to": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "_update": [
                    "self",
                    "var",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_update_non_slot": [
                    "self",
                    "colocate_with",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "read_var": [
                    "self",
                    "replica_local_var"
                ],
                "_local_results": [
                    "self",
                    "val"
                ],
                "value_container": [
                    "self",
                    "val"
                ],
                "_num_replicas_in_sync": [
                    "self"
                ],
                "worker_devices": [
                    "self"
                ],
                "worker_devices_by_replica": [
                    "self"
                ],
                "parameter_devices": [
                    "self"
                ],
                "experimental_between_graph": [
                    "self"
                ],
                "experimental_should_init": [
                    "self"
                ],
                "should_checkpoint": [
                    "self"
                ],
                "should_save_summary": [
                    "self"
                ],
                "non_slot_devices": [
                    "self",
                    "var_list"
                ],
                "_global_batch_size": [
                    "self"
                ]
            },
            "_MirroredReplicaThread": {
                "__init__": [
                    "self",
                    "dist",
                    "coord",
                    "replica_id",
                    "device_map",
                    "variable_creator_fn",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "run": [
                    "self"
                ],
                "record_thread_local_context_fields": [
                    "self"
                ],
                "restore_thread_local_context_fields": [
                    "self"
                ]
            },
            "MirroredReplicaContext": {
                "_merge_call": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "devices": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.cross_device_ops": {
            "check_destinations": [
                "destinations"
            ],
            "validate_destinations": [
                "destinations"
            ],
            "reduce_non_distributed_value": [
                "reduce_op",
                "device_map",
                "value",
                "destinations"
            ],
            "_make_tensor_into_per_replica": [
                "input_tensor"
            ],
            "_normalize_value_destination_pairs": [
                "value_destination_pairs"
            ],
            "_validate_value_destination_pairs": [
                "value_destination_pairs"
            ],
            "get_devices_from": [
                "destinations"
            ],
            "get_device_map_from": [
                "destinations"
            ],
            "_devices_match": [
                "left",
                "right"
            ],
            "_all_devices_match": [
                "value_destination_pairs"
            ],
            "simple_broadcast": [
                "value",
                "destinations",
                "always_mirrored"
            ],
            "_simple_reduce": [
                "per_replica_value",
                "reduce_to_device",
                "accumulation_fn",
                "reduce_op"
            ],
            "_group_value_by_device": [
                "per_replica_values"
            ],
            "_ungroup_and_make_mirrored": [
                "grouped_reduced",
                "destinations",
                "reduce_op",
                "num_between_graph_workers"
            ],
            "_pack_tensors": [
                "device_grads",
                "num_packs",
                "agg_small_grads_max_bytes",
                "agg_small_grads_max_group"
            ],
            "_unpack_tensors": [
                "reduced",
                "tensor_packer"
            ],
            "choose_the_best": [
                "devices",
                "session_config"
            ],
            "CrossDeviceOps": {
                "__init__": [
                    "self"
                ],
                "_num_between_graph_workers": [
                    "self"
                ],
                "reduce": [
                    "self",
                    "reduce_op",
                    "per_replica_value",
                    "destinations"
                ],
                "batch_reduce": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "broadcast": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "reduce_implementation": [
                    "self",
                    "reduce_op",
                    "per_replica_value",
                    "destinations"
                ],
                "batch_reduce_implementation": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "broadcast_implementation": [
                    "self",
                    "tensor",
                    "destinations"
                ]
            },
            "ReductionToOneDevice": {
                "__init__": [
                    "self",
                    "reduce_to_device",
                    "accumulation_fn"
                ],
                "reduce_implementation": [
                    "self",
                    "reduce_op",
                    "per_replica_value",
                    "destinations"
                ],
                "batch_reduce_implementation": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ]
            },
            "_ConcatAndSplitPacker": {
                "__init__": [
                    "self",
                    "num_packs"
                ],
                "pack": [
                    "self",
                    "grouped_grads_and_vars"
                ],
                "unpack": [
                    "self",
                    "summed_device_grad_packs"
                ]
            },
            "_AggregateSmallTensorPacker": {
                "__init__": [
                    "self",
                    "agg_small_grads_max_bytes",
                    "agg_small_grads_max_group"
                ],
                "pack": [
                    "self",
                    "grouped_grads_and_vars"
                ],
                "unpack": [
                    "self",
                    "summed_device_grad_packs"
                ]
            },
            "AllReduceCrossDeviceOps": {
                "__init__": [
                    "self",
                    "all_reduce_alg",
                    "num_packs",
                    "agg_small_grads_max_bytes",
                    "agg_small_grads_max_group"
                ],
                "reduce_implementation": [
                    "self",
                    "reduce_op",
                    "per_replica_value",
                    "destinations"
                ],
                "batch_reduce_implementation": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "_batch_all_reduce": [
                    "self",
                    "reduce_op",
                    "per_replica_values"
                ],
                "_do_batch_all_reduce": [
                    "self",
                    "reduce_op",
                    "dense_values"
                ],
                "_do_batch_all_reduce_sparse": [
                    "self",
                    "reduce_op",
                    "sparse_values"
                ]
            },
            "NcclAllReduce": {
                "__init__": [
                    "self",
                    "num_packs"
                ]
            },
            "HierarchicalCopyAllReduce": {
                "__init__": [
                    "self",
                    "num_packs"
                ]
            },
            "MultiWorkerAllReduce": {
                "__init__": [
                    "self",
                    "worker_devices",
                    "num_gpus_per_worker",
                    "all_reduce_spec",
                    "num_packs",
                    "agg_small_grads_max_bytes",
                    "agg_small_grads_max_group"
                ],
                "_batch_all_reduce": [
                    "self",
                    "reduce_op",
                    "per_replica_values"
                ]
            },
            "CollectiveCommunication": {},
            "CollectiveAllReduce": {
                "__init__": [
                    "self",
                    "num_workers",
                    "num_gpus_per_worker",
                    "all_reduce_merge_scope",
                    "collective_keys"
                ],
                "_num_between_graph_workers": [
                    "self"
                ],
                "reduce_implementation": [
                    "self",
                    "reduce_op",
                    "per_replica_value",
                    "destinations"
                ],
                "batch_reduce_implementation": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "_make_gradient_chunks": [
                    "self",
                    "per_replica_values",
                    "all_reduce_merge_scope"
                ],
                "_batch_all_reduce": [
                    "self",
                    "reduce_op",
                    "per_replica_values"
                ],
                "_do_batch_all_reduce_dense": [
                    "self",
                    "reduce_op",
                    "per_replica_values"
                ],
                "_do_batch_all_reduce_sparse": [
                    "self",
                    "reduce_op",
                    "per_replica_values"
                ]
            }
        },
        "tensorflow_core.python.distribute.step_fn": {
            "Step": {
                "__init__": [
                    "self",
                    "distribution"
                ],
                "distribution": [
                    "self"
                ],
                "initialize": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            },
            "StandardInputStep": {
                "__init__": [
                    "self",
                    "dataset_fn",
                    "distribution"
                ],
                "initialize": [
                    "self"
                ]
            },
            "StandardSingleLossStep": {
                "__init__": [
                    "self",
                    "dataset_fn",
                    "loss_fn",
                    "optimizer",
                    "distribution",
                    "iterations_per_step"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.device_util": {
            "canonicalize": [
                "d",
                "default"
            ],
            "resolve": [
                "d"
            ],
            "current": [],
            "get_host_for_device": [
                "device"
            ],
            "local_devices_from_num_gpus": [
                "num_gpus"
            ],
            "_FakeNodeDef": {
                "__init__": [
                    "self"
                ]
            },
            "_FakeOperation": {
                "__init__": [
                    "self"
                ],
                "_set_device": [
                    "self",
                    "device"
                ],
                "_set_device_from_string": [
                    "self",
                    "device_str"
                ]
            }
        },
        "tensorflow_core.python.distribute.shared_variable_creator": {
            "_canonicalize_variable_name": [
                "name"
            ],
            "make_fn": [
                "shared_variable_store",
                "device_id"
            ]
        },
        "tensorflow_core.python.distribute.cross_device_utils": {
            "aggregate_gradients_using_nccl": [
                "replica_grads"
            ],
            "aggregate_gradients_using_hierarchical_copy": [
                "avail_devices",
                "replica_grads"
            ],
            "aggregate_single_gradient_using_copy": [
                "grad_and_vars",
                "use_mean",
                "check_inf_nan"
            ],
            "group_device_names": [
                "devices",
                "group_size"
            ],
            "split_grads_by_size": [
                "threshold_size",
                "device_grads"
            ],
            "build_collective_reduce": [
                "input_tensors",
                "num_workers",
                "collective_keys",
                "reduction_op",
                "unary_op"
            ],
            "build_collective_gather": [
                "input_tensors",
                "num_workers",
                "collective_keys"
            ],
            "sum_grad_and_var_all_reduce": [
                "grad_and_vars",
                "num_workers",
                "alg",
                "gpu_indices",
                "aux_devices",
                "num_shards"
            ],
            "sum_gradients_all_reduce": [
                "dev_prefixes",
                "replica_grads",
                "num_workers",
                "alg",
                "num_shards",
                "gpu_indices"
            ],
            "extract_ranges": [
                "index_list",
                "range_size_limit"
            ],
            "pack_range": [
                "key",
                "packing",
                "grad_vars",
                "rng"
            ],
            "unpack_grad_tuple": [
                "gv",
                "gpt"
            ],
            "pack_small_tensors": [
                "replica_grads",
                "max_bytes",
                "max_group"
            ],
            "unpack_small_tensors": [
                "replica_grads",
                "packing"
            ],
            "aggregate_tensors_or_indexed_slices": [
                "values",
                "accumulation_fn"
            ],
            "divide_by_n_tensors_or_indexed_slices": [
                "value",
                "n"
            ],
            "copy_tensor_or_indexed_slices_to_device": [
                "value",
                "device"
            ],
            "contains_indexed_slices": [
                "value"
            ],
            "is_indexed_slices": [
                "value"
            ],
            "split_by_sparsity": [
                "values"
            ],
            "stitch_values": [
                "values_and_indices_list"
            ],
            "CollectiveKeys": {
                "__init__": [
                    "self",
                    "group_key_start",
                    "op_instance_key_start",
                    "variable_instance_key_start"
                ],
                "_get_thread_local_object": [
                    "self"
                ],
                "get_group_key": [
                    "self",
                    "devices"
                ],
                "get_op_instance_key": [
                    "self"
                ],
                "get_variable_instance_key": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.estimator_training": {
            "_count_ps": [
                "cluster_spec"
            ],
            "_count_worker": [
                "cluster_spec",
                "chief_task_type"
            ],
            "_get_global_id": [
                "cluster_spec",
                "task_type",
                "task_id",
                "chief_task_type"
            ],
            "_init_run_config_from_worker_context": [
                "config",
                "worker_context"
            ],
            "init_run_config": [
                "config",
                "tf_config"
            ],
            "should_run_distribute_coordinator": [
                "config"
            ],
            "train_and_evaluate": [
                "estimator",
                "train_spec",
                "eval_spec",
                "executor_cls"
            ],
            "estimator_train": [
                "estimator",
                "train_distributed_fn",
                "hooks"
            ],
            "estimator_evaluate": [
                "estimator",
                "evaluate_distributed_fn",
                "hooks"
            ]
        },
        "tensorflow_core.python.distribute.distribute_config": {
            "DistributeConfig": {
                "__new__": [
                    "cls",
                    "train_distribute",
                    "eval_distribute",
                    "remote_cluster"
                ]
            }
        },
        "tensorflow_core.python.distribute.one_device_strategy": {
            "OneDeviceStrategy": {
                "__init__": [
                    "self",
                    "device"
                ],
                "experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "experimental_local_results": [
                    "self",
                    "value"
                ],
                "experimental_run_v2": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "reduce": [
                    "self",
                    "reduce_op",
                    "value",
                    "axis"
                ],
                "scope": [
                    "self"
                ]
            },
            "OneDeviceStrategyV1": {
                "__init__": [
                    "self",
                    "device"
                ]
            },
            "OneDeviceExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "device"
                ],
                "_create_variable": [
                    "self",
                    "next_creator"
                ],
                "_validate_colocate_with_variable": [
                    "self",
                    "colocate_with_variable"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "_experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "_broadcast_to": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "_experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "_experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "_experimental_run_steps_on_iterator": [
                    "self",
                    "fn",
                    "iterator",
                    "iterations",
                    "initial_loop_values"
                ],
                "_call_for_each_replica": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "_reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "_update": [
                    "self",
                    "var",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_update_non_slot": [
                    "self",
                    "colocate_with",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "read_var": [
                    "self",
                    "replica_local_var"
                ],
                "_local_results": [
                    "self",
                    "value"
                ],
                "value_container": [
                    "self",
                    "value"
                ],
                "_num_replicas_in_sync": [
                    "self"
                ],
                "worker_devices": [
                    "self"
                ],
                "parameter_devices": [
                    "self"
                ],
                "non_slot_devices": [
                    "self",
                    "var_list"
                ],
                "experimental_should_init": [
                    "self"
                ],
                "experimental_between_graph": [
                    "self"
                ],
                "should_checkpoint": [
                    "self"
                ],
                "should_save_summary": [
                    "self"
                ],
                "_global_batch_size": [
                    "self"
                ],
                "_support_per_replica_values": [
                    "self"
                ]
            },
            "_OneDeviceReplicaContext": {
                "__init__": [
                    "self",
                    "strategy"
                ],
                "devices": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.input_ops": {
            "auto_shard_dataset": [
                "dataset",
                "num_shards",
                "index"
            ],
            "_clone_dataset": [
                "dataset"
            ],
            "_get_op_def": [
                "op"
            ],
            "_clone_helper": [
                "op_to_clone",
                "variant_tensor_ops"
            ]
        },
        "tensorflow_core.python.distribute.distribution_strategy_context": {
            "_push_per_thread_mode": [
                "context"
            ],
            "_pop_per_thread_mode": [],
            "_get_per_thread_mode": [],
            "get_replica_context": [],
            "get_cross_replica_context": [],
            "in_cross_replica_context": [],
            "get_strategy": [],
            "has_strategy": [],
            "get_strategy_and_replica_context": [],
            "experimental_set_strategy": [
                "strategy"
            ],
            "_get_default_strategy": [],
            "_get_default_replica_context": [],
            "_get_default_replica_mode": [],
            "_ThreadMode": {
                "__init__": [
                    "self",
                    "dist",
                    "cross",
                    "replica"
                ]
            },
            "_CrossReplicaThreadMode": {
                "__init__": [
                    "self",
                    "strategy"
                ]
            },
            "_InReplicaThreadMode": {
                "__init__": [
                    "self",
                    "replica_ctx"
                ]
            },
            "_DefaultReplicaThreadMode": {
                "__init__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.distribute_lib": {
            "get_update_device": [],
            "get_loss_reduction": [],
            "_require_cross_replica_or_default_context_extended": [
                "extended"
            ],
            "_wrong_strategy_scope": [
                "strategy",
                "context"
            ],
            "require_replica_context": [
                "replica_ctx"
            ],
            "_require_strategy_scope_strategy": [
                "strategy"
            ],
            "_require_strategy_scope_extended": [
                "extended"
            ],
            "_batch_reduce_destination": [
                "x"
            ],
            "_from_proto_fn": [
                "v",
                "import_scope"
            ],
            "create_mirrored_variable": [
                "strategy",
                "device_map",
                "logical_device",
                "real_mirrored_creator",
                "mirrored_cls",
                "sync_on_read_cls"
            ],
            "UpdateContext": {
                "__init__": [
                    "self",
                    "device"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exception_type",
                    "exception_value",
                    "traceback"
                ]
            },
            "_CurrentDistributionContext": {
                "__init__": [
                    "self",
                    "strategy",
                    "var_creator_scope",
                    "var_scope",
                    "default_device"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exception_type",
                    "exception_value",
                    "traceback"
                ]
            },
            "InputReplicationMode": {},
            "InputContext": {
                "__init__": [
                    "self",
                    "num_input_pipelines",
                    "input_pipeline_id",
                    "num_replicas_in_sync"
                ],
                "num_replicas_in_sync": [
                    "self"
                ],
                "input_pipeline_id": [
                    "self"
                ],
                "num_input_pipelines": [
                    "self"
                ],
                "get_per_replica_batch_size": [
                    "self",
                    "global_batch_size"
                ]
            },
            "Strategy": {
                "__init__": [
                    "self",
                    "extended"
                ],
                "extended": [
                    "self"
                ],
                "_scale_loss_for_estimator_enabled": [
                    "self"
                ],
                "scope": [
                    "self"
                ],
                "colocate_vars_with": [
                    "self",
                    "colocate_with_variable"
                ],
                "make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input"
                ],
                "experimental_run": [
                    "self",
                    "fn",
                    "input_iterator"
                ],
                "experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "experimental_run_v2": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "reduce": [
                    "self",
                    "reduce_op",
                    "value",
                    "axis"
                ],
                "unwrap": [
                    "self",
                    "value"
                ],
                "experimental_local_results": [
                    "self",
                    "value"
                ],
                "group": [
                    "self",
                    "value",
                    "name"
                ],
                "num_replicas_in_sync": [
                    "self"
                ],
                "configure": [
                    "self",
                    "session_config",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "update_config_proto": [
                    "self",
                    "config_proto"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "__copy__": [
                    "self"
                ],
                "_in_multi_worker_mode": [
                    "self"
                ]
            },
            "StrategyV1": {
                "make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "experimental_run": [
                    "self",
                    "fn",
                    "input_iterator"
                ],
                "reduce": [
                    "self",
                    "reduce_op",
                    "value",
                    "axis"
                ],
                "update_config_proto": [
                    "self",
                    "config_proto"
                ]
            },
            "StrategyExtendedV2": {
                "__init__": [
                    "self",
                    "container_strategy"
                ],
                "_container_strategy": [
                    "self"
                ],
                "_scope": [
                    "self",
                    "strategy"
                ],
                "_allow_variable_partition": [
                    "self"
                ],
                "_create_variable": [
                    "self",
                    "next_creator"
                ],
                "variable_created_in_scope": [
                    "self",
                    "v"
                ],
                "colocate_vars_with": [
                    "self",
                    "colocate_with_variable"
                ],
                "_validate_colocate_with_variable": [
                    "self",
                    "colocate_with_variable"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "_experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "_experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "_reduce": [
                    "self",
                    "reduce_op",
                    "value"
                ],
                "reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "_reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "batch_reduce_to": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "_batch_reduce_to": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "update": [
                    "self",
                    "var",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_update": [
                    "self",
                    "var",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "update_non_slot": [
                    "self",
                    "colocate_with",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_update_non_slot": [
                    "self",
                    "colocate_with",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_local_results": [
                    "self",
                    "distributed_value"
                ],
                "value_container": [
                    "self",
                    "value"
                ],
                "_group": [
                    "self",
                    "value",
                    "name"
                ],
                "experimental_require_static_shapes": [
                    "self"
                ],
                "_num_replicas_in_sync": [
                    "self"
                ],
                "worker_devices": [
                    "self"
                ],
                "parameter_devices": [
                    "self"
                ],
                "non_slot_devices": [
                    "self",
                    "var_list"
                ],
                "_configure": [
                    "self",
                    "session_config",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "_update_config_proto": [
                    "self",
                    "config_proto"
                ]
            },
            "StrategyExtendedV1": {
                "experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "_experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "broadcast_to": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "_broadcast_to": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "experimental_run_steps_on_iterator": [
                    "self",
                    "fn",
                    "iterator",
                    "iterations",
                    "initial_loop_values"
                ],
                "_experimental_run_steps_on_iterator": [
                    "self",
                    "fn",
                    "iterator",
                    "iterations",
                    "initial_loop_values"
                ],
                "call_for_each_replica": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "_call_for_each_replica": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "read_var": [
                    "self",
                    "v"
                ],
                "experimental_between_graph": [
                    "self"
                ],
                "experimental_should_init": [
                    "self"
                ],
                "should_checkpoint": [
                    "self"
                ],
                "should_save_summary": [
                    "self"
                ]
            },
            "ReplicaContext": {
                "__init__": [
                    "self",
                    "strategy",
                    "replica_id_in_sync_group"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exception_type",
                    "exception_value",
                    "traceback"
                ],
                "merge_call": [
                    "self",
                    "merge_fn",
                    "args",
                    "kwargs"
                ],
                "_merge_call": [
                    "self",
                    "merge_fn",
                    "args",
                    "kwargs"
                ],
                "num_replicas_in_sync": [
                    "self"
                ],
                "replica_id_in_sync_group": [
                    "self"
                ],
                "strategy": [
                    "self"
                ],
                "devices": [
                    "self"
                ],
                "all_reduce": [
                    "self",
                    "reduce_op",
                    "value"
                ]
            },
            "_DefaultDistributionStrategy": {
                "__init__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ]
            },
            "_DefaultDistributionContext": {
                "__init__": [
                    "self",
                    "strategy"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exception_type",
                    "exception_value",
                    "traceback"
                ]
            },
            "_DefaultDistributionExtended": {
                "__init__": [
                    "self",
                    "container_strategy"
                ],
                "_scope": [
                    "self",
                    "strategy"
                ],
                "colocate_vars_with": [
                    "self",
                    "colocate_with_variable"
                ],
                "variable_created_in_scope": [
                    "self",
                    "v"
                ],
                "_experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "_experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "_experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "_broadcast_to": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "_call_for_each_replica": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "_reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "_update": [
                    "self",
                    "var",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_update_non_slot": [
                    "self",
                    "colocate_with",
                    "fn",
                    "args",
                    "kwargs",
                    "should_group"
                ],
                "read_var": [
                    "self",
                    "replica_local_var"
                ],
                "_local_results": [
                    "self",
                    "distributed_value"
                ],
                "value_container": [
                    "self",
                    "value"
                ],
                "_num_replicas_in_sync": [
                    "self"
                ],
                "worker_devices": [
                    "self"
                ],
                "parameter_devices": [
                    "self"
                ],
                "non_slot_devices": [
                    "self",
                    "var_list"
                ],
                "_global_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.multi_worker_test_base": {
            "pick_unused_port": [],
            "_create_cluster": [
                "num_workers",
                "num_ps",
                "has_chief",
                "has_eval",
                "protocol",
                "worker_config",
                "ps_config",
                "eval_config"
            ],
            "create_in_process_cluster": [
                "num_workers",
                "num_ps",
                "has_chief",
                "has_eval",
                "rpc_layer"
            ],
            "create_cluster_spec": [
                "has_chief",
                "num_workers",
                "num_ps",
                "has_eval",
                "test_obj"
            ],
            "skip_if_grpc_server_cant_be_started": [
                "test_obj"
            ],
            "get_tf_config_task": [],
            "get_tf_config_cluster_spec": [],
            "get_task_type": [],
            "get_task_index": [],
            "is_chief": [],
            "MultiWorkerTestBase": {
                "setUpClass": [
                    "cls"
                ],
                "setUp": [
                    "self"
                ],
                "session": [
                    "self",
                    "graph",
                    "config",
                    "target"
                ],
                "cached_session": [
                    "self",
                    "graph",
                    "config",
                    "target"
                ],
                "_create_config": [
                    "self",
                    "config"
                ],
                "_run_client": [
                    "self",
                    "client_fn",
                    "task_type",
                    "task_id",
                    "num_gpus",
                    "eager_mode"
                ],
                "_run_between_graph_clients": [
                    "self",
                    "client_fn",
                    "cluster_spec",
                    "num_gpus"
                ]
            },
            "MockOsEnv": {
                "__init__": [
                    "self"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ]
            },
            "IndependentWorkerTestBase": {
                "_make_mock_run_std_server": [
                    "self"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_task_thread": [
                    "self",
                    "task_fn",
                    "tf_config",
                    "executing_eagerly"
                ],
                "_run_task_in_thread": [
                    "self",
                    "task_fn",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "run_multiple_tasks_in_threads": [
                    "self",
                    "task_fn",
                    "cluster_spec"
                ],
                "join_independent_workers": [
                    "self",
                    "worker_threads"
                ]
            },
            "MultiWorkerMultiProcessTest": {
                "_run_task_in_process": [
                    "self",
                    "cmd_args",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "run_multiple_tasks_in_processes": [
                    "self",
                    "cmd_args",
                    "cluster_spec"
                ],
                "join_independent_workers": [
                    "self",
                    "worker_processes"
                ],
                "stream_stderr": [
                    "self",
                    "processes",
                    "print_only_first"
                ]
            }
        },
        "tensorflow_core.python.distribute.central_storage_strategy": {
            "CentralStorageStrategy": {
                "__init__": [
                    "self",
                    "compute_devices",
                    "parameter_device"
                ],
                "_from_num_gpus": [
                    "cls",
                    "num_gpus"
                ],
                "experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "experimental_local_results": [
                    "self",
                    "value"
                ],
                "experimental_run_v2": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "reduce": [
                    "self",
                    "reduce_op",
                    "value",
                    "axis"
                ]
            },
            "CentralStorageStrategyV1": {
                "__init__": [
                    "self",
                    "compute_devices",
                    "parameter_device"
                ]
            }
        },
        "tensorflow_core.python.distribute.distribute_coordinator": {
            "_get_num_workers": [
                "cluster_spec"
            ],
            "_run_single_worker": [
                "worker_fn",
                "strategy",
                "cluster_spec",
                "task_type",
                "task_id",
                "session_config",
                "rpc_layer",
                "worker_barrier",
                "coord"
            ],
            "_split_cluster_for_evaluator": [
                "cluster_spec",
                "task_type"
            ],
            "_run_std_server": [
                "cluster_spec",
                "task_type",
                "task_id",
                "session_config",
                "rpc_layer",
                "environment"
            ],
            "_run_between_graph_client": [
                "worker_fn",
                "strategy",
                "eval_fn",
                "eval_strategy",
                "cluster_spec",
                "session_config",
                "rpc_layer"
            ],
            "_run_in_graph_client": [
                "worker_fn",
                "strategy",
                "eval_fn",
                "eval_strategy",
                "cluster_spec",
                "session_config",
                "rpc_layer"
            ],
            "_configure_session_config_for_std_servers": [
                "strategy",
                "eval_strategy",
                "session_config",
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "run_standard_tensorflow_server": [
                "session_config"
            ],
            "run_distribute_coordinator": [
                "worker_fn",
                "strategy",
                "eval_fn",
                "eval_strategy",
                "mode",
                "cluster_spec",
                "task_type",
                "task_id",
                "session_config",
                "rpc_layer"
            ],
            "_TaskType": {},
            "CoordinatorMode": {},
            "_Barrier": {
                "__init__": [
                    "self",
                    "num_participants"
                ],
                "wait": [
                    "self"
                ]
            },
            "_WorkerContext": {
                "__init__": [
                    "self",
                    "strategy",
                    "cluster_spec",
                    "task_type",
                    "task_id",
                    "session_config",
                    "rpc_layer",
                    "worker_barrier"
                ],
                "_debug_message": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_exception_type",
                    "unused_exception_value",
                    "unused_traceback"
                ],
                "_get_master_target": [
                    "self"
                ],
                "_is_chief": [
                    "self"
                ],
                "wait_for_other_workers": [
                    "self"
                ],
                "session_creator": [
                    "self",
                    "scaffold",
                    "config",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path",
                    "max_wait_secs"
                ],
                "session_config": [
                    "self"
                ],
                "has_barrier": [
                    "self"
                ],
                "distributed_mode": [
                    "self"
                ],
                "cluster_spec": [
                    "self"
                ],
                "task_type": [
                    "self"
                ],
                "task_id": [
                    "self"
                ],
                "master_target": [
                    "self"
                ],
                "is_chief": [
                    "self"
                ],
                "num_workers": [
                    "self"
                ],
                "experimental_should_init": [
                    "self"
                ],
                "should_checkpoint": [
                    "self"
                ],
                "should_save_summary": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.values": {
            "_devices_match": [
                "d1",
                "d2"
            ],
            "_assign_on_device": [
                "device",
                "variable",
                "tensor"
            ],
            "_assign_add_on_device": [
                "device",
                "variable",
                "tensor"
            ],
            "_assign_sub_on_device": [
                "device",
                "variable",
                "tensor"
            ],
            "_assert_strategy": [
                "strategy"
            ],
            "_enter_or_assert_strategy": [
                "strategy"
            ],
            "_maybe_enter_graph": [
                "tensor"
            ],
            "_make_raw_assign_fn": [
                "raw_assign_fn"
            ],
            "_validate_colocate_extended": [
                "v",
                "extended"
            ],
            "validate_colocate_distributed_variable": [
                "v",
                "extended"
            ],
            "validate_colocate": [
                "v",
                "extended"
            ],
            "_apply_aggregation": [
                "strategy",
                "value",
                "aggregation",
                "destinations"
            ],
            "_tensor_conversion_mirrored": [
                "var",
                "dtype",
                "name",
                "as_ref"
            ],
            "_enclosing_tpu_context": [],
            "is_distributed_variable": [
                "v"
            ],
            "_assert_replica_context": [
                "strategy"
            ],
            "_tensor_conversion_sync_on_read": [
                "var",
                "dtype",
                "name",
                "as_ref"
            ],
            "regroup": [
                "device_map",
                "values",
                "wrap_class"
            ],
            "select_replica": [
                "replica_id",
                "structured"
            ],
            "select_device_mirrored": [
                "device",
                "structured"
            ],
            "update_regroup": [
                "extended",
                "device_map",
                "updates",
                "group"
            ],
            "value_container": [
                "val"
            ],
            "_tensor_conversion_aggregate": [
                "var",
                "dtype",
                "name",
                "as_ref"
            ],
            "DeviceMap": {
                "all_devices": [
                    "self"
                ],
                "devices_by_replica": [
                    "self"
                ],
                "num_logical_devices": [
                    "self"
                ],
                "num_replicas_in_graph": [
                    "self"
                ],
                "logical_device_from_values": [
                    "self",
                    "values"
                ],
                "logical_to_actual_devices": [
                    "self",
                    "logical_device_id"
                ],
                "select_for_current_replica": [
                    "self",
                    "values",
                    "replica_context"
                ],
                "replica_for_device": [
                    "self",
                    "device"
                ],
                "select_for_device": [
                    "self",
                    "values",
                    "device"
                ],
                "is_device_in_replica": [
                    "self",
                    "device",
                    "replica_id"
                ]
            },
            "SingleDeviceMap": {
                "__init__": [
                    "self",
                    "device"
                ],
                "all_devices": [
                    "self"
                ],
                "devices_by_replica": [
                    "self"
                ],
                "num_logical_devices": [
                    "self"
                ],
                "num_replicas_in_graph": [
                    "self"
                ],
                "logical_device_from_values": [
                    "self",
                    "values"
                ],
                "logical_to_actual_devices": [
                    "self",
                    "logical_device_id"
                ],
                "select_for_current_replica": [
                    "self",
                    "values",
                    "replica_context"
                ],
                "replica_for_device": [
                    "self",
                    "device"
                ],
                "select_for_device": [
                    "self",
                    "values",
                    "device"
                ],
                "is_device_in_replica": [
                    "self",
                    "device",
                    "replica_id"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ReplicaDeviceMap": {
                "__init__": [
                    "self",
                    "devices"
                ],
                "all_devices": [
                    "self"
                ],
                "devices_by_replica": [
                    "self"
                ],
                "num_logical_devices": [
                    "self"
                ],
                "num_replicas_in_graph": [
                    "self"
                ],
                "logical_device_from_values": [
                    "self",
                    "values"
                ],
                "logical_to_actual_devices": [
                    "self",
                    "logical_device_id"
                ],
                "select_for_current_replica": [
                    "self",
                    "values",
                    "replica_context"
                ],
                "replica_for_device": [
                    "self",
                    "device"
                ],
                "select_for_device": [
                    "self",
                    "values",
                    "device"
                ],
                "is_device_in_replica": [
                    "self",
                    "device",
                    "replica_id"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "WorkerDeviceMap": {
                "__init__": [
                    "self",
                    "devices",
                    "num_replicas_per_worker"
                ],
                "all_devices": [
                    "self"
                ],
                "devices_by_replica": [
                    "self"
                ],
                "num_logical_devices": [
                    "self"
                ],
                "num_replicas_in_graph": [
                    "self"
                ],
                "logical_device_from_values": [
                    "self",
                    "values"
                ],
                "logical_to_actual_devices": [
                    "self",
                    "logical_device_id"
                ],
                "select_for_current_replica": [
                    "self",
                    "values",
                    "replica_context"
                ],
                "replica_for_device": [
                    "self",
                    "device"
                ],
                "select_for_device": [
                    "self",
                    "values",
                    "device"
                ],
                "is_device_in_replica": [
                    "self",
                    "device",
                    "replica_id"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "DistributedValues": {
                "__init__": [
                    "self",
                    "device_map",
                    "values",
                    "logical_device"
                ],
                "get": [
                    "self",
                    "device"
                ],
                "primary": [
                    "self"
                ],
                "devices": [
                    "self"
                ],
                "logical_device": [
                    "self"
                ],
                "device_map": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "is_tensor_like": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "DistributedDelegate": {
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_get_as_operand": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "o"
                ],
                "__radd__": [
                    "self",
                    "o"
                ],
                "__sub__": [
                    "self",
                    "o"
                ],
                "__rsub__": [
                    "self",
                    "o"
                ],
                "__mul__": [
                    "self",
                    "o"
                ],
                "__rmul__": [
                    "self",
                    "o"
                ],
                "__truediv__": [
                    "self",
                    "o"
                ],
                "__rtruediv__": [
                    "self",
                    "o"
                ],
                "__floordiv__": [
                    "self",
                    "o"
                ],
                "__rfloordiv__": [
                    "self",
                    "o"
                ],
                "__mod__": [
                    "self",
                    "o"
                ],
                "__rmod__": [
                    "self",
                    "o"
                ],
                "__lt__": [
                    "self",
                    "o"
                ],
                "__le__": [
                    "self",
                    "o"
                ],
                "__gt__": [
                    "self",
                    "o"
                ],
                "__ge__": [
                    "self",
                    "o"
                ],
                "__and__": [
                    "self",
                    "o"
                ],
                "__rand__": [
                    "self",
                    "o"
                ],
                "__or__": [
                    "self",
                    "o"
                ],
                "__ror__": [
                    "self",
                    "o"
                ],
                "__xor__": [
                    "self",
                    "o"
                ],
                "__rxor__": [
                    "self",
                    "o"
                ],
                "__getitem__": [
                    "self",
                    "o"
                ],
                "__pow__": [
                    "self",
                    "o",
                    "modulo"
                ],
                "__rpow__": [
                    "self",
                    "o"
                ],
                "__invert__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__abs__": [
                    "self"
                ],
                "__div__": [
                    "self",
                    "o"
                ],
                "__rdiv__": [
                    "self",
                    "o"
                ],
                "__matmul__": [
                    "self",
                    "o"
                ],
                "__rmatmul__": [
                    "self",
                    "o"
                ]
            },
            "PerReplica": {
                "_type_spec": [
                    "self"
                ]
            },
            "PerReplicaSpec": {
                "__init__": [
                    "self",
                    "value_specs",
                    "device_map",
                    "logical_device"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "tensor_list"
                ],
                "_serialize_device_map": [
                    "device_map"
                ],
                "_deserialize_device_map": [
                    "device_map_info"
                ]
            },
            "Mirrored": {
                "_get_cross_replica": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ]
            },
            "DistributedVariable": {
                "__init__": [
                    "self",
                    "strategy",
                    "device_map",
                    "values",
                    "logical_device"
                ],
                "is_initialized": [
                    "self",
                    "name"
                ],
                "initializer": [
                    "self"
                ],
                "_get_closest": [
                    "self"
                ],
                "initialized_value": [
                    "self"
                ],
                "initial_value": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "_shared_name": [
                    "self"
                ],
                "_unique_id": [
                    "self"
                ],
                "_graph_key": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "synchronization": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "_save_slice_info": [
                    "self"
                ],
                "_get_save_slice_info": [
                    "self"
                ],
                "_set_save_slice_info": [
                    "self",
                    "save_slice_info"
                ],
                "device": [
                    "self"
                ],
                "trainable": [
                    "self"
                ],
                "distribute_strategy": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "op": [
                    "self"
                ],
                "_in_graph_mode": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "_should_act_as_resource_variable": [
                    "self"
                ],
                "_clone_with_new_values": [
                    "self",
                    "new_values"
                ]
            },
            "TPUVariableMixin": {
                "__init__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "get": [
                    "self",
                    "device"
                ],
                "_get_as_operand": [
                    "self"
                ],
                "_get_closest": [
                    "self"
                ],
                "numpy": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "_read_variable_op": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "constraint": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "_dense_var_to_tensor": [
                    "self",
                    "dtype",
                    "name",
                    "as_ref"
                ]
            },
            "_MirroredSaveable": {
                "__init__": [
                    "self",
                    "mirrored_variable",
                    "primary_variable",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            },
            "MirroredVariable": {
                "__init__": [
                    "self",
                    "strategy",
                    "device_map",
                    "values",
                    "aggregation",
                    "logical_device"
                ],
                "_assign_func": [
                    "self"
                ],
                "assign_sub": [
                    "self"
                ],
                "assign_add": [
                    "self"
                ],
                "assign": [
                    "self"
                ],
                "aggregation": [
                    "self"
                ],
                "_get_cross_replica": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "_dense_var_to_tensor": [
                    "self",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "_clone_with_new_values": [
                    "self",
                    "new_values"
                ]
            },
            "TPUMirroredVariable": {
                "_assign_func": [
                    "self"
                ],
                "assign_sub": [
                    "self"
                ],
                "assign_add": [
                    "self"
                ],
                "assign": [
                    "self"
                ]
            },
            "_SyncOnReadSaveable": {
                "__init__": [
                    "self",
                    "sync_on_read_variable",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            },
            "SyncOnReadVariable": {
                "__init__": [
                    "self",
                    "strategy",
                    "device_map",
                    "values",
                    "aggregation",
                    "logical_device"
                ],
                "assign_sub": [
                    "self"
                ],
                "assign_add": [
                    "self"
                ],
                "assign": [
                    "self"
                ],
                "aggregation": [
                    "self"
                ],
                "_get_cross_replica": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "_dense_var_to_tensor": [
                    "self",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "_clone_with_new_values": [
                    "self",
                    "new_values"
                ]
            },
            "TPUSyncOnReadVariable": {
                "assign_sub": [
                    "self"
                ],
                "assign_add": [
                    "self"
                ],
                "assign": [
                    "self"
                ]
            },
            "AggregatingVariable": {
                "__init__": [
                    "self",
                    "strategy",
                    "v",
                    "aggregation"
                ],
                "get": [
                    "self"
                ],
                "distribute_strategy": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_assign_func": [
                    "self"
                ],
                "assign_sub": [
                    "self"
                ],
                "assign_add": [
                    "self"
                ],
                "assign": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "initialized_value": [
                    "self"
                ],
                "initial_value": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "graph": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "aggregation": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "o"
                ],
                "__radd__": [
                    "self",
                    "o"
                ],
                "__sub__": [
                    "self",
                    "o"
                ],
                "__rsub__": [
                    "self",
                    "o"
                ],
                "__mul__": [
                    "self",
                    "o"
                ],
                "__rmul__": [
                    "self",
                    "o"
                ],
                "__truediv__": [
                    "self",
                    "o"
                ],
                "__rtruediv__": [
                    "self",
                    "o"
                ],
                "__floordiv__": [
                    "self",
                    "o"
                ],
                "__rfloordiv__": [
                    "self",
                    "o"
                ],
                "__mod__": [
                    "self",
                    "o"
                ],
                "__rmod__": [
                    "self",
                    "o"
                ],
                "__lt__": [
                    "self",
                    "o"
                ],
                "__le__": [
                    "self",
                    "o"
                ],
                "__gt__": [
                    "self",
                    "o"
                ],
                "__ge__": [
                    "self",
                    "o"
                ],
                "__and__": [
                    "self",
                    "o"
                ],
                "__rand__": [
                    "self",
                    "o"
                ],
                "__or__": [
                    "self",
                    "o"
                ],
                "__ror__": [
                    "self",
                    "o"
                ],
                "__xor__": [
                    "self",
                    "o"
                ],
                "__rxor__": [
                    "self",
                    "o"
                ],
                "__getitem__": [
                    "self",
                    "o"
                ],
                "__pow__": [
                    "self",
                    "o",
                    "modulo"
                ],
                "__rpow__": [
                    "self",
                    "o"
                ],
                "__invert__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__abs__": [
                    "self"
                ],
                "__div__": [
                    "self",
                    "o"
                ],
                "__rdiv__": [
                    "self",
                    "o"
                ],
                "__matmul__": [
                    "self",
                    "o"
                ],
                "__rmatmul__": [
                    "self",
                    "o"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_should_act_as_resource_variable": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.strategy_combinations": {
            "_get_tpu_strategy_creator": [
                "steps_per_run",
                "use_single_core"
            ],
            "set_virtual_cpus_to_at_least": [
                "num_virtual_cpus"
            ],
            "distributions_and_v1_optimizers": [],
            "distributions_and_v2_optimizers": [],
            "distributions_and_v1_and_v2_optimizers": [],
            "strategy_minus_tpu_combinations": [],
            "tpu_strategy_combinations": [],
            "all_strategy_combinations": [],
            "all_strategy_minus_default_and_tpu_combinations": [],
            "all_strategy_combinations_minus_default": []
        },
        "tensorflow_core.python.distribute.combinations": {
            "DistributionParameter": {
                "modified_arguments": [
                    "self",
                    "kwargs",
                    "requested_parameters"
                ]
            },
            "NamedGPUCombination": {
                "should_execute_combination": [
                    "self",
                    "kwargs"
                ],
                "parameter_modifiers": [
                    "self"
                ]
            },
            "GPUCombination": {
                "parameter_modifiers": [
                    "self"
                ]
            },
            "NamedTPUCombination": {
                "should_execute_combination": [
                    "self",
                    "kwargs"
                ],
                "parameter_modifiers": [
                    "self"
                ]
            },
            "TPUCombination": {
                "parameter_modifiers": [
                    "self"
                ]
            },
            "NamedDistribution": {
                "__init__": [
                    "self",
                    "name",
                    "distribution_fn",
                    "required_gpus",
                    "required_tpu"
                ],
                "strategy": [
                    "self"
                ],
                "required_gpus": [
                    "self"
                ],
                "required_tpu": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.collective_all_reduce_strategy": {
            "CollectiveAllReduceStrategy": {
                "__init__": [
                    "self",
                    "communication"
                ],
                "_from_local_devices": [
                    "cls",
                    "devices"
                ],
                "scope": [
                    "self"
                ]
            },
            "CollectiveAllReduceStrategyV1": {
                "__init__": [
                    "self",
                    "communication"
                ]
            },
            "CollectiveAllReduceExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "communication",
                    "cluster_resolver"
                ],
                "_initialize_strategy": [
                    "self",
                    "cluster_resolver"
                ],
                "_initialize_local": [
                    "self",
                    "cluster_resolver",
                    "devices"
                ],
                "_initialize_multi_worker": [
                    "self",
                    "cluster_resolver"
                ],
                "_get_variable_creator_initial_value": [
                    "self",
                    "replica_id",
                    "device",
                    "primary_var"
                ],
                "_make_input_context": [
                    "self"
                ],
                "_experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "_configure": [
                    "self",
                    "session_config",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "_update_config_proto": [
                    "self",
                    "config_proto"
                ],
                "_reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "_warn_nccl_no_gpu": [
                    "self"
                ],
                "experimental_between_graph": [
                    "self"
                ],
                "experimental_should_init": [
                    "self"
                ],
                "should_checkpoint": [
                    "self"
                ],
                "should_save_summary": [
                    "self"
                ],
                "_num_replicas_in_sync": [
                    "self"
                ],
                "_global_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.numpy_dataset": {
            "init_var_from_numpy": [
                "input_var",
                "numpy_input",
                "session"
            ],
            "one_host_numpy_dataset": [
                "numpy_input",
                "colocate_with",
                "session"
            ],
            "SingleDevice": {
                "__init__": [
                    "self",
                    "device"
                ]
            }
        },
        "tensorflow_core.python.distribute.reduce_util": {
            "ReduceOp": {
                "from_variable_aggregation": [
                    "aggregation"
                ]
            }
        },
        "tensorflow_core.python.distribute.model_combinations": {},
        "tensorflow_core.python.distribute.strategy_test_lib": {
            "_raise_exception_fn": [
                "_"
            ],
            "_merge_raises_fn": [],
            "_call_raises_fn": [
                "dist"
            ],
            "_merge_call_raises_fn": [],
            "_call_merge_raises_fn": [
                "dist"
            ],
            "_merge_call_merge_raises_fn": [],
            "_events_from_logdir": [
                "test_case",
                "logdir"
            ],
            "_all_sum": [
                "value"
            ],
            "_all_mean": [
                "value"
            ],
            "_TestException": {},
            "DistributionTestBase": {
                "_test_minimize_loss_eager": [
                    "self",
                    "d"
                ],
                "_test_minimize_loss_graph": [
                    "self",
                    "d",
                    "soft_placement",
                    "learning_rate"
                ],
                "_test_summary_for_replica_zero_only": [
                    "self",
                    "d"
                ],
                "_test_replica_id": [
                    "self",
                    "d"
                ],
                "_test_call_and_merge_exceptions": [
                    "self",
                    "dist"
                ],
                "_input_fn_to_test_input_context": [
                    "self",
                    "dataset_or_callable_fn",
                    "expected_num_replicas_in_sync",
                    "expected_num_input_pipelines",
                    "expected_input_pipeline_id"
                ],
                "_test_input_fn_iterable": [
                    "self",
                    "strategy",
                    "input_fn",
                    "expected_values",
                    "ignore_order"
                ],
                "_test_input_fn_iterator": [
                    "self",
                    "iterator",
                    "devices",
                    "expected_values",
                    "sess",
                    "test_reinitialize",
                    "ignore_order"
                ],
                "_test_global_step_update": [
                    "self",
                    "strategy"
                ],
                "_test_numpy_dataset": [
                    "self",
                    "strategy"
                ],
                "_test_trainable_variable": [
                    "self",
                    "strategy"
                ]
            },
            "OneDeviceDistributionTestBase": {
                "_test_run": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_sum": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_sum_gradients": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_sum_gradient_tape": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_mean": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_mean_gradients": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_mean_gradient_tape": [
                    "self",
                    "strategy"
                ],
                "_test_collective_comms": [
                    "self",
                    "strategy",
                    "comm_fn",
                    "inputs",
                    "expected"
                ],
                "_test_collective_comms_gradients": [
                    "self",
                    "strategy",
                    "comm_fn",
                    "inputs",
                    "expected_grads"
                ],
                "_test_collective_comms_gradient_tape": [
                    "self",
                    "strategy",
                    "comm_fn",
                    "inputs",
                    "expected_grads"
                ],
                "_test_device_and_input_device_are_colocated": [
                    "self",
                    "strategy"
                ],
                "_test_device_and_input_device_are_colocated_with_function": [
                    "self",
                    "strategy"
                ]
            },
            "TwoDeviceDistributionTestBase": {
                "_test_run": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_sum": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_sum_gradients": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_sum_gradient_tape": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_mean": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_mean_gradients": [
                    "self",
                    "strategy"
                ],
                "_test_all_reduce_mean_gradient_tape": [
                    "self",
                    "strategy"
                ],
                "_test_collective_comms": [
                    "self",
                    "strategy",
                    "comm_fn",
                    "inputs",
                    "expected"
                ],
                "_test_collective_comms_gradients": [
                    "self",
                    "strategy",
                    "comm_fn",
                    "inputs",
                    "expected_grads"
                ],
                "_test_collective_comms_gradient_tape": [
                    "self",
                    "strategy",
                    "comm_fn",
                    "inputs",
                    "expected_grads"
                ]
            }
        },
        "tensorflow_core.python.distribute": {},
        "tensorflow_core.python.distribute.parameter_server_strategy": {
            "ParameterServerStrategy": {
                "__init__": [
                    "self",
                    "cluster_resolver"
                ]
            },
            "ParameterServerStrategyV1": {
                "__init__": [
                    "self",
                    "cluster_resolver"
                ]
            },
            "ParameterServerStrategyExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "cluster_resolver",
                    "compute_devices",
                    "parameter_device"
                ],
                "_initialize_strategy": [
                    "self",
                    "cluster_resolver",
                    "compute_devices",
                    "parameter_device"
                ],
                "_initialize_multi_worker": [
                    "self",
                    "cluster_resolver"
                ],
                "_initialize_local": [
                    "self",
                    "compute_devices",
                    "parameter_device",
                    "cluster_resolver"
                ],
                "_validate_colocate_with_variable": [
                    "self",
                    "colocate_with_variable"
                ],
                "_experimental_distribute_dataset": [
                    "self",
                    "dataset"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_make_input_fn_iterator": [
                    "self",
                    "input_fn",
                    "replication_mode"
                ],
                "_experimental_make_numpy_dataset": [
                    "self",
                    "numpy_input",
                    "session"
                ],
                "_experimental_distribute_datasets_from_function": [
                    "self",
                    "dataset_fn"
                ],
                "_broadcast_to": [
                    "self",
                    "tensor",
                    "destinations"
                ],
                "_allow_variable_partition": [
                    "self"
                ],
                "_create_variable": [
                    "self",
                    "next_creator"
                ],
                "_call_for_each_replica": [
                    "self",
                    "fn",
                    "args",
                    "kwargs"
                ],
                "_verify_destinations_not_different_worker": [
                    "self",
                    "destinations"
                ],
                "_reduce_to": [
                    "self",
                    "reduce_op",
                    "value",
                    "destinations"
                ],
                "_batch_reduce_to": [
                    "self",
                    "reduce_op",
                    "value_destination_pairs"
                ],
                "_select_single_value": [
                    "self",
                    "structured"
                ],
                "_update": [
                    "self",
                    "var",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_update_non_slot": [
                    "self",
                    "colocate_with",
                    "fn",
                    "args",
                    "kwargs",
                    "group"
                ],
                "_local_results": [
                    "self",
                    "val"
                ],
                "value_container": [
                    "self",
                    "val"
                ],
                "read_var": [
                    "self",
                    "var"
                ],
                "_configure": [
                    "self",
                    "session_config",
                    "cluster_spec",
                    "task_type",
                    "task_id"
                ],
                "_update_config_proto": [
                    "self",
                    "config_proto"
                ],
                "_num_replicas_in_sync": [
                    "self"
                ],
                "worker_devices": [
                    "self"
                ],
                "worker_devices_by_replica": [
                    "self"
                ],
                "parameter_devices": [
                    "self"
                ],
                "non_slot_devices": [
                    "self",
                    "var_list"
                ],
                "experimental_between_graph": [
                    "self"
                ],
                "experimental_should_init": [
                    "self"
                ],
                "should_checkpoint": [
                    "self"
                ],
                "should_save_summary": [
                    "self"
                ],
                "_global_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.cluster_resolver.cluster_resolver": {
            "format_master_url": [
                "master",
                "rpc_layer"
            ],
            "get_accelerator_devices": [
                "master",
                "config_proto"
            ],
            "ClusterResolver": {
                "cluster_spec": [
                    "self"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ],
                "num_accelerators": [
                    "self",
                    "task_type",
                    "task_id",
                    "config_proto"
                ],
                "environment": [
                    "self"
                ]
            },
            "SimpleClusterResolver": {
                "__init__": [
                    "self",
                    "cluster_spec",
                    "master",
                    "task_type",
                    "task_id",
                    "environment",
                    "num_accelerators",
                    "rpc_layer"
                ],
                "cluster_spec": [
                    "self"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ],
                "task_type": [
                    "self",
                    "task_type"
                ],
                "task_id": [
                    "self",
                    "task_id"
                ],
                "environment": [
                    "self"
                ],
                "num_accelerators": [
                    "self",
                    "task_type",
                    "task_id",
                    "config_proto"
                ],
                "rpc_layer": [
                    "self",
                    "rpc_layer"
                ]
            },
            "UnionClusterResolver": {
                "__init__": [
                    "self"
                ],
                "cluster_spec": [
                    "self"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ],
                "task_type": [
                    "self",
                    "task_type"
                ],
                "task_id": [
                    "self",
                    "task_id"
                ],
                "environment": [
                    "self"
                ],
                "num_accelerators": [
                    "self",
                    "task_type",
                    "task_id",
                    "config_proto"
                ],
                "rpc_layer": [
                    "self",
                    "rpc_layer"
                ]
            }
        },
        "tensorflow_core.python.distribute.cluster_resolver.tfconfig_cluster_resolver": {
            "format_master_url": [
                "master",
                "rpc_layer"
            ],
            "_load_tf_config": [],
            "_get_value_in_tfconfig": [
                "key",
                "default"
            ],
            "TFConfigClusterResolver": {
                "__init__": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer",
                    "environment"
                ],
                "task_type": [
                    "self",
                    "task_type"
                ],
                "task_id": [
                    "self",
                    "task_id"
                ],
                "environment": [
                    "self"
                ],
                "rpc_layer": [
                    "self",
                    "rpc_layer"
                ],
                "num_accelerators": [
                    "self",
                    "task_type",
                    "task_id",
                    "config_proto"
                ],
                "cluster_spec": [
                    "self"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ]
            }
        },
        "tensorflow_core.python.distribute.cluster_resolver.kubernetes_cluster_resolver": {
            "KubernetesClusterResolver": {
                "__init__": [
                    "self",
                    "job_to_label_mapping",
                    "tf_server_port",
                    "rpc_layer",
                    "override_client"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ],
                "cluster_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.cluster_resolver.slurm_cluster_resolver": {
            "SlurmClusterResolver": {
                "_resolve_hostnames": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "jobs",
                    "port_base",
                    "gpus_per_node",
                    "gpus_per_task",
                    "tasks_per_node",
                    "auto_set_gpu",
                    "rpc_layer"
                ],
                "cluster_spec": [
                    "self"
                ],
                "get_task_info": [
                    "self"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ],
                "num_accelerators": [
                    "self",
                    "task_type",
                    "task_id",
                    "config_proto"
                ]
            }
        },
        "tensorflow_core.python.distribute.cluster_resolver.tpu_cluster_resolver": {
            "is_running_in_gce": [],
            "TPUClusterResolver": {
                "_tpu_service": [
                    "self"
                ],
                "_request_compute_metadata": [
                    "self",
                    "path"
                ],
                "_is_google_environment": [
                    "self"
                ],
                "_should_resolve": [
                    "self"
                ],
                "_get_device_dict_and_cores": [
                    "devices"
                ],
                "_verify_and_return_same_core_count": [
                    "device_dict"
                ],
                "_in_gke": [],
                "_gke_endpoints": [],
                "_env_var_fallback": [],
                "_environment_discovery_url": [],
                "__init__": [
                    "self",
                    "tpu",
                    "zone",
                    "project",
                    "job_name",
                    "coordinator_name",
                    "coordinator_address",
                    "credentials",
                    "service",
                    "discovery_url"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ],
                "get_master": [
                    "self"
                ],
                "get_job_name": [
                    "self"
                ],
                "cluster_spec": [
                    "self"
                ],
                "_fetch_cloud_tpu_metadata": [
                    "self"
                ],
                "num_accelerators": [
                    "self",
                    "task_type",
                    "task_id",
                    "config_proto"
                ],
                "environment": [
                    "self"
                ],
                "_start_local_server": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ]
            }
        },
        "tensorflow_core.python.distribute.cluster_resolver": {},
        "tensorflow_core.python.distribute.cluster_resolver.gce_cluster_resolver": {
            "GCEClusterResolver": {
                "__init__": [
                    "self",
                    "project",
                    "zone",
                    "instance_group",
                    "port",
                    "task_type",
                    "task_id",
                    "rpc_layer",
                    "credentials",
                    "service"
                ],
                "cluster_spec": [
                    "self"
                ],
                "master": [
                    "self",
                    "task_type",
                    "task_id",
                    "rpc_layer"
                ],
                "task_type": [
                    "self",
                    "task_type"
                ],
                "task_id": [
                    "self",
                    "task_id"
                ],
                "rpc_layer": [
                    "self",
                    "rpc_layer"
                ]
            }
        },
        "tensorflow_core.python.distribute.model_collection.model_collection_base": {
            "ModelAndInput": {
                "get_model": [
                    "self"
                ],
                "get_data": [
                    "self"
                ],
                "get_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.model_collection.simple_models": {
            "_get_data_for_simple_models": [],
            "SimpleFunctionalModel": {
                "get_model": [
                    "self"
                ],
                "get_data": [
                    "self"
                ],
                "get_batch_size": [
                    "self"
                ]
            },
            "SimpleSequentialModel": {
                "get_model": [
                    "self"
                ],
                "get_data": [
                    "self"
                ],
                "get_batch_size": [
                    "self"
                ]
            },
            "_SimpleModel": {
                "__init__": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "SimpleSubclassModel": {
                "get_model": [
                    "self"
                ],
                "get_data": [
                    "self"
                ],
                "get_batch_size": [
                    "self"
                ]
            },
            "_SimpleModule": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "SimpleTFModuleModel": {
                "get_model": [
                    "self"
                ],
                "get_data": [
                    "self"
                ],
                "get_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.distribute.model_collection": {},
        "tensorflow_core.python.distribute.experimental": {},
        "tensorflow_core.python.keras.testing_utils": {
            "get_test_data": [
                "train_samples",
                "test_samples",
                "input_shape",
                "num_classes",
                "random_seed"
            ],
            "layer_test": [
                "layer_cls",
                "kwargs",
                "input_shape",
                "input_dtype",
                "input_data",
                "expected_output",
                "expected_output_dtype",
                "expected_output_shape",
                "validate_training",
                "adapt_data"
            ],
            "model_type_scope": [
                "value"
            ],
            "run_eagerly_scope": [
                "value"
            ],
            "should_run_eagerly": [],
            "experimental_run_tf_function_scope": [
                "value"
            ],
            "should_run_tf_function": [],
            "get_model_type": [],
            "get_small_sequential_mlp": [
                "num_hidden",
                "num_classes",
                "input_dim"
            ],
            "get_small_functional_mlp": [
                "num_hidden",
                "num_classes",
                "input_dim"
            ],
            "get_small_subclass_mlp": [
                "num_hidden",
                "num_classes"
            ],
            "get_small_subclass_mlp_with_custom_build": [
                "num_hidden",
                "num_classes"
            ],
            "get_small_mlp": [
                "num_hidden",
                "num_classes",
                "input_dim"
            ],
            "get_model_from_layers": [
                "layers",
                "input_shape",
                "input_dtype",
                "name",
                "input_ragged",
                "input_sparse"
            ],
            "get_multi_io_model": [
                "branch_a",
                "branch_b",
                "shared_input_branch",
                "shared_output_branch"
            ],
            "get_v2_optimizer": [
                "name"
            ],
            "get_expected_metric_variable_names": [
                "var_names",
                "name_suffix"
            ],
            "enable_v2_dtype_behavior": [
                "fn"
            ],
            "disable_v2_dtype_behavior": [
                "fn"
            ],
            "_set_v2_dtype_behavior": [
                "fn",
                "enabled"
            ],
            "_SmallSubclassMLP": {
                "__init__": [
                    "self",
                    "num_hidden",
                    "num_classes"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "_SmallSubclassMLPCustomBuild": {
                "__init__": [
                    "self",
                    "num_hidden",
                    "num_classes"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "_SubclassModel": {
                "__init__": [
                    "self",
                    "layers"
                ],
                "_layer_name_for_i": [
                    "self",
                    "i"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "_SubclassModelCustomBuild": {
                "__init__": [
                    "self",
                    "layer_generating_func"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "_MultiIOSubclassModel": {
                "__init__": [
                    "self",
                    "branch_a",
                    "branch_b",
                    "shared_input_branch",
                    "shared_output_branch"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "_MultiIOSubclassModelCustomBuild": {
                "__init__": [
                    "self",
                    "branch_a_func",
                    "branch_b_func",
                    "shared_input_branch_func",
                    "shared_output_branch_func"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            }
        },
        "tensorflow_core.python.keras.keras_parameterized": {
            "run_with_all_model_types": [
                "test_or_class",
                "exclude_models"
            ],
            "_test_functional_model_type": [
                "f",
                "test_or_class"
            ],
            "_test_subclass_model_type": [
                "f",
                "test_or_class"
            ],
            "_test_sequential_model_type": [
                "f",
                "test_or_class"
            ],
            "run_all_keras_modes": [
                "test_or_class",
                "config",
                "always_skip_v1",
                "always_skip_eager"
            ],
            "_v1_session_test": [
                "f",
                "test_or_class",
                "config"
            ],
            "_v2_graph_functions_test": [
                "f",
                "test_or_class"
            ],
            "_v2_eager_test": [
                "f",
                "test_or_class"
            ],
            "_v2_function_test": [
                "f",
                "test_or_class"
            ],
            "_test_or_class_decorator": [
                "test_or_class",
                "single_method_decorator"
            ],
            "TestCase": {
                "tearDown": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.models": {
            "share_weights": [
                "layer"
            ],
            "_clone_layer": [
                "layer"
            ],
            "_insert_ancillary_layers": [
                "model",
                "ancillary_layers",
                "metrics_names",
                "new_nodes"
            ],
            "_make_new_nodes": [
                "nodes_by_depth",
                "layer_fn",
                "layer_map",
                "tensor_map"
            ],
            "_clone_functional_model": [
                "model",
                "input_tensors",
                "layer_fn"
            ],
            "_remove_ancillary_layers": [
                "model",
                "layer_map",
                "layers"
            ],
            "_clone_sequential_model": [
                "model",
                "input_tensors",
                "layer_fn"
            ],
            "clone_model": [
                "model",
                "input_tensors",
                "clone_function"
            ],
            "_in_place_subclassed_model_reset": [
                "model"
            ],
            "_reset_build_compile_trackers": [
                "model"
            ],
            "in_place_subclassed_model_state_restoration": [
                "model"
            ],
            "clone_and_build_model": [
                "model",
                "input_tensors",
                "target_tensors",
                "custom_objects",
                "compile_clone",
                "in_place_reset",
                "optimizer_iterations",
                "optimizer_config"
            ]
        },
        "tensorflow_core.python.keras.initializers": {
            "serialize": [
                "initializer"
            ],
            "deserialize": [
                "config",
                "custom_objects"
            ],
            "get": [
                "identifier"
            ],
            "TruncatedNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed",
                    "dtype"
                ]
            },
            "RandomUniform": {
                "__init__": [
                    "self",
                    "minval",
                    "maxval",
                    "seed",
                    "dtype"
                ]
            },
            "RandomNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed",
                    "dtype"
                ]
            }
        },
        "tensorflow_core.python.keras.activations": {
            "softmax": [
                "x",
                "axis"
            ],
            "elu": [
                "x",
                "alpha"
            ],
            "selu": [
                "x"
            ],
            "softplus": [
                "x"
            ],
            "softsign": [
                "x"
            ],
            "relu": [
                "x",
                "alpha",
                "max_value",
                "threshold"
            ],
            "tanh": [
                "x"
            ],
            "sigmoid": [
                "x"
            ],
            "exponential": [
                "x"
            ],
            "hard_sigmoid": [
                "x"
            ],
            "linear": [
                "x"
            ],
            "serialize": [
                "activation"
            ],
            "deserialize": [
                "name",
                "custom_objects"
            ],
            "get": [
                "identifier"
            ]
        },
        "tensorflow_core.python.keras.optimizers": {
            "serialize": [
                "optimizer"
            ],
            "deserialize": [
                "config",
                "custom_objects"
            ],
            "get": [
                "identifier"
            ],
            "Optimizer": {
                "__init__": [
                    "self"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_gradients": [
                    "self",
                    "loss",
                    "params"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "get_weights": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "SGD": {
                "__init__": [
                    "self",
                    "lr",
                    "momentum",
                    "decay",
                    "nesterov"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RMSprop": {
                "__init__": [
                    "self",
                    "lr",
                    "rho",
                    "epsilon",
                    "decay"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Adagrad": {
                "__init__": [
                    "self",
                    "lr",
                    "epsilon",
                    "decay"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Adadelta": {
                "__init__": [
                    "self",
                    "lr",
                    "rho",
                    "epsilon",
                    "decay"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Adam": {
                "__init__": [
                    "self",
                    "lr",
                    "beta_1",
                    "beta_2",
                    "epsilon",
                    "decay",
                    "amsgrad"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Adamax": {
                "__init__": [
                    "self",
                    "lr",
                    "beta_1",
                    "beta_2",
                    "epsilon",
                    "decay"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Nadam": {
                "__init__": [
                    "self",
                    "lr",
                    "beta_1",
                    "beta_2",
                    "epsilon",
                    "schedule_decay"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_config": [
                    "self"
                ]
            },
            "TFOptimizer": {
                "__init__": [
                    "self",
                    "optimizer",
                    "iterations"
                ],
                "apply_gradients": [
                    "self",
                    "grads"
                ],
                "get_grads": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "weights": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "self",
                    "config"
                ]
            }
        },
        "tensorflow_core.python.keras.regularizers": {
            "l1": [
                "l"
            ],
            "l2": [
                "l"
            ],
            "l1_l2": [
                "l1",
                "l2"
            ],
            "serialize": [
                "regularizer"
            ],
            "deserialize": [
                "config",
                "custom_objects"
            ],
            "get": [
                "identifier"
            ],
            "Regularizer": {
                "__call__": [
                    "self",
                    "x"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "L1L2": {
                "__init__": [
                    "self",
                    "l1",
                    "l2"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.model_subclassing_test_util": {
            "get_nested_model_3": [
                "input_dim",
                "num_classes"
            ],
            "SimpleTestModel": {
                "__init__": [
                    "self",
                    "use_bn",
                    "use_dp",
                    "num_classes"
                ],
                "call": [
                    "self",
                    "x"
                ]
            },
            "SimpleConvTestModel": {
                "__init__": [
                    "self",
                    "num_classes"
                ],
                "call": [
                    "self",
                    "x"
                ]
            },
            "MultiIOTestModel": {
                "__init__": [
                    "self",
                    "use_bn",
                    "use_dp",
                    "num_classes"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "NestedTestModel1": {
                "__init__": [
                    "self",
                    "num_classes"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "NestedTestModel2": {
                "__init__": [
                    "self",
                    "num_classes"
                ],
                "get_functional_graph_model": [
                    "input_dim",
                    "num_classes"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "CustomCallModel": {
                "__init__": [
                    "self"
                ],
                "call": [
                    "self",
                    "first",
                    "second",
                    "fiddle_with_output",
                    "training"
                ]
            },
            "TrainingNoDefaultModel": {
                "__init__": [
                    "self"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            },
            "TrainingMaskingModel": {
                "__init__": [
                    "self"
                ],
                "call": [
                    "self",
                    "x",
                    "training",
                    "mask"
                ]
            }
        },
        "tensorflow_core.python.keras.metrics": {
            "accuracy": [
                "y_true",
                "y_pred"
            ],
            "binary_accuracy": [
                "y_true",
                "y_pred",
                "threshold"
            ],
            "categorical_accuracy": [
                "y_true",
                "y_pred"
            ],
            "sparse_categorical_accuracy": [
                "y_true",
                "y_pred"
            ],
            "top_k_categorical_accuracy": [
                "y_true",
                "y_pred",
                "k"
            ],
            "sparse_top_k_categorical_accuracy": [
                "y_true",
                "y_pred",
                "k"
            ],
            "clone_metric": [
                "metric"
            ],
            "clone_metrics": [
                "metrics"
            ],
            "serialize": [
                "metric"
            ],
            "deserialize": [
                "config",
                "custom_objects"
            ],
            "get": [
                "identifier"
            ],
            "Metric": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "__new__": [
                    "cls"
                ],
                "__call__": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ],
                "update_state": [
                    "self"
                ],
                "result": [
                    "self"
                ],
                "add_weight": [
                    "self",
                    "name",
                    "shape",
                    "aggregation",
                    "synchronization",
                    "initializer",
                    "dtype"
                ]
            },
            "Reduce": {
                "__init__": [
                    "self",
                    "reduction",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "values",
                    "sample_weight"
                ],
                "result": [
                    "self"
                ]
            },
            "Sum": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "Mean": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "MeanRelativeError": {
                "__init__": [
                    "self",
                    "normalizer",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MeanMetricWrapper": {
                "__init__": [
                    "self",
                    "fn",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Accuracy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "BinaryAccuracy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "threshold"
                ]
            },
            "CategoricalAccuracy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "SparseCategoricalAccuracy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "TopKCategoricalAccuracy": {
                "__init__": [
                    "self",
                    "k",
                    "name",
                    "dtype"
                ]
            },
            "SparseTopKCategoricalAccuracy": {
                "__init__": [
                    "self",
                    "k",
                    "name",
                    "dtype"
                ]
            },
            "_ConfusionMatrixConditionCount": {
                "__init__": [
                    "self",
                    "confusion_matrix_cond",
                    "thresholds",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "result": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "FalsePositives": {
                "__init__": [
                    "self",
                    "thresholds",
                    "name",
                    "dtype"
                ]
            },
            "FalseNegatives": {
                "__init__": [
                    "self",
                    "thresholds",
                    "name",
                    "dtype"
                ]
            },
            "TrueNegatives": {
                "__init__": [
                    "self",
                    "thresholds",
                    "name",
                    "dtype"
                ]
            },
            "TruePositives": {
                "__init__": [
                    "self",
                    "thresholds",
                    "name",
                    "dtype"
                ]
            },
            "Precision": {
                "__init__": [
                    "self",
                    "thresholds",
                    "top_k",
                    "class_id",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "result": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Recall": {
                "__init__": [
                    "self",
                    "thresholds",
                    "top_k",
                    "class_id",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "result": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "SensitivitySpecificityBase": {
                "__init__": [
                    "self",
                    "value",
                    "num_thresholds",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "reset_states": [
                    "self"
                ]
            },
            "SensitivityAtSpecificity": {
                "__init__": [
                    "self",
                    "specificity",
                    "num_thresholds",
                    "name",
                    "dtype"
                ],
                "result": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "SpecificityAtSensitivity": {
                "__init__": [
                    "self",
                    "sensitivity",
                    "num_thresholds",
                    "name",
                    "dtype"
                ],
                "result": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "AUC": {
                "__init__": [
                    "self",
                    "num_thresholds",
                    "curve",
                    "summation_method",
                    "name",
                    "dtype",
                    "thresholds"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "interpolate_pr_auc": [
                    "self"
                ],
                "result": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "CosineSimilarity": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "axis"
                ]
            },
            "MeanAbsoluteError": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "MeanAbsolutePercentageError": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "MeanSquaredError": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "MeanSquaredLogarithmicError": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "Hinge": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "SquaredHinge": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "CategoricalHinge": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "RootMeanSquaredError": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "result": [
                    "self"
                ]
            },
            "LogCoshError": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "Poisson": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "KLDivergence": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "MeanIoU": {
                "__init__": [
                    "self",
                    "num_classes",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "result": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MeanTensor": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "_build": [
                    "self",
                    "shape"
                ],
                "total": [
                    "self"
                ],
                "count": [
                    "self"
                ],
                "update_state": [
                    "self",
                    "values",
                    "sample_weight"
                ],
                "result": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ]
            },
            "BinaryCrossentropy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "from_logits",
                    "label_smoothing"
                ]
            },
            "CategoricalCrossentropy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "from_logits",
                    "label_smoothing"
                ]
            },
            "SparseCategoricalCrossentropy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "from_logits",
                    "axis"
                ]
            },
            "SumOverBatchSize": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "SumOverBatchSizeMetricWrapper": {
                "__init__": [
                    "self",
                    "fn",
                    "name",
                    "dtype"
                ],
                "update_state": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.ops": {},
        "tensorflow_core.python.keras.constraints": {
            "serialize": [
                "constraint"
            ],
            "deserialize": [
                "config",
                "custom_objects"
            ],
            "get": [
                "identifier"
            ],
            "Constraint": {
                "__call__": [
                    "self",
                    "w"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MaxNorm": {
                "__init__": [
                    "self",
                    "max_value",
                    "axis"
                ],
                "__call__": [
                    "self",
                    "w"
                ],
                "get_config": [
                    "self"
                ]
            },
            "NonNeg": {
                "__call__": [
                    "self",
                    "w"
                ]
            },
            "UnitNorm": {
                "__init__": [
                    "self",
                    "axis"
                ],
                "__call__": [
                    "self",
                    "w"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MinMaxNorm": {
                "__init__": [
                    "self",
                    "min_value",
                    "max_value",
                    "rate",
                    "axis"
                ],
                "__call__": [
                    "self",
                    "w"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RadialConstraint": {
                "__call__": [
                    "self",
                    "w"
                ],
                "_kernel_constraint": [
                    "self",
                    "kernel"
                ]
            }
        },
        "tensorflow_core.python.keras.losses": {
            "mean_squared_error": [
                "y_true",
                "y_pred"
            ],
            "mean_absolute_error": [
                "y_true",
                "y_pred"
            ],
            "mean_absolute_percentage_error": [
                "y_true",
                "y_pred"
            ],
            "mean_squared_logarithmic_error": [
                "y_true",
                "y_pred"
            ],
            "_maybe_convert_labels": [
                "y_true"
            ],
            "squared_hinge": [
                "y_true",
                "y_pred"
            ],
            "hinge": [
                "y_true",
                "y_pred"
            ],
            "categorical_hinge": [
                "y_true",
                "y_pred"
            ],
            "huber_loss": [
                "y_true",
                "y_pred",
                "delta"
            ],
            "logcosh": [
                "y_true",
                "y_pred"
            ],
            "categorical_crossentropy": [
                "y_true",
                "y_pred",
                "from_logits",
                "label_smoothing"
            ],
            "sparse_categorical_crossentropy": [
                "y_true",
                "y_pred",
                "from_logits",
                "axis"
            ],
            "binary_crossentropy": [
                "y_true",
                "y_pred",
                "from_logits",
                "label_smoothing"
            ],
            "kullback_leibler_divergence": [
                "y_true",
                "y_pred"
            ],
            "poisson": [
                "y_true",
                "y_pred"
            ],
            "cosine_proximity": [
                "y_true",
                "y_pred",
                "axis"
            ],
            "is_categorical_crossentropy": [
                "loss"
            ],
            "serialize": [
                "loss"
            ],
            "deserialize": [
                "name",
                "custom_objects"
            ],
            "get": [
                "identifier"
            ],
            "Loss": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ],
                "__call__": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "from_config": [
                    "cls",
                    "config"
                ],
                "get_config": [
                    "self"
                ],
                "call": [
                    "self",
                    "y_true",
                    "y_pred"
                ],
                "_get_reduction": [
                    "self"
                ]
            },
            "LossFunctionWrapper": {
                "__init__": [
                    "self",
                    "fn",
                    "reduction",
                    "name"
                ],
                "call": [
                    "self",
                    "y_true",
                    "y_pred"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MeanSquaredError": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "MeanAbsoluteError": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "MeanAbsolutePercentageError": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "MeanSquaredLogarithmicError": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "BinaryCrossentropy": {
                "__init__": [
                    "self",
                    "from_logits",
                    "label_smoothing",
                    "reduction",
                    "name"
                ]
            },
            "CategoricalCrossentropy": {
                "__init__": [
                    "self",
                    "from_logits",
                    "label_smoothing",
                    "reduction",
                    "name"
                ]
            },
            "SparseCategoricalCrossentropy": {
                "__init__": [
                    "self",
                    "from_logits",
                    "reduction",
                    "name"
                ]
            },
            "Hinge": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "SquaredHinge": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "CategoricalHinge": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "Poisson": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "LogCosh": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "KLDivergence": {
                "__init__": [
                    "self",
                    "reduction",
                    "name"
                ]
            },
            "Huber": {
                "__init__": [
                    "self",
                    "delta",
                    "reduction",
                    "name"
                ]
            },
            "CosineSimilarity": {
                "__init__": [
                    "self",
                    "axis",
                    "reduction",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.keras.callbacks": {
            "configure_callbacks": [
                "callbacks",
                "model",
                "do_validation",
                "batch_size",
                "epochs",
                "steps_per_epoch",
                "samples",
                "verbose",
                "count_mode",
                "mode"
            ],
            "set_callback_parameters": [
                "callback_list",
                "model",
                "do_validation",
                "batch_size",
                "epochs",
                "steps_per_epoch",
                "samples",
                "verbose",
                "mode"
            ],
            "_is_generator_like": [
                "data"
            ],
            "make_logs": [
                "model",
                "logs",
                "outputs",
                "mode",
                "prefix"
            ],
            "CallbackList": {
                "__init__": [
                    "self",
                    "callbacks",
                    "queue_length"
                ],
                "_reset_batch_timing": [
                    "self"
                ],
                "append": [
                    "self",
                    "callback"
                ],
                "set_params": [
                    "self",
                    "params"
                ],
                "set_model": [
                    "self",
                    "model"
                ],
                "_call_batch_hook": [
                    "self",
                    "mode",
                    "hook",
                    "batch",
                    "logs"
                ],
                "_call_begin_hook": [
                    "self",
                    "mode"
                ],
                "_call_end_hook": [
                    "self",
                    "mode"
                ],
                "on_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_train_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_train_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_test_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_test_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_predict_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_predict_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_train_end": [
                    "self",
                    "logs"
                ],
                "on_test_begin": [
                    "self",
                    "logs"
                ],
                "on_test_end": [
                    "self",
                    "logs"
                ],
                "on_predict_begin": [
                    "self",
                    "logs"
                ],
                "on_predict_end": [
                    "self",
                    "logs"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "Callback": {
                "__init__": [
                    "self"
                ],
                "set_params": [
                    "self",
                    "params"
                ],
                "set_model": [
                    "self",
                    "model"
                ],
                "on_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_train_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_train_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_test_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_test_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_predict_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_predict_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_train_end": [
                    "self",
                    "logs"
                ],
                "on_test_begin": [
                    "self",
                    "logs"
                ],
                "on_test_end": [
                    "self",
                    "logs"
                ],
                "on_predict_begin": [
                    "self",
                    "logs"
                ],
                "on_predict_end": [
                    "self",
                    "logs"
                ]
            },
            "BaseLogger": {
                "__init__": [
                    "self",
                    "stateful_metrics"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ]
            },
            "TerminateOnNaN": {
                "on_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ]
            },
            "ProgbarLogger": {
                "__init__": [
                    "self",
                    "count_mode",
                    "stateful_metrics"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ]
            },
            "History": {
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ]
            },
            "ModelCheckpoint": {
                "__init__": [
                    "self",
                    "filepath",
                    "monitor",
                    "verbose",
                    "save_best_only",
                    "save_weights_only",
                    "mode",
                    "save_freq"
                ],
                "set_model": [
                    "self",
                    "model"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_train_end": [
                    "self",
                    "logs"
                ],
                "on_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "_save_model": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "_get_file_path": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "_maybe_remove_file": [
                    "self"
                ],
                "_get_most_recently_modified_file_matching_pattern": [
                    "self",
                    "pattern"
                ]
            },
            "EarlyStopping": {
                "__init__": [
                    "self",
                    "monitor",
                    "min_delta",
                    "patience",
                    "verbose",
                    "mode",
                    "baseline",
                    "restore_best_weights"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_train_end": [
                    "self",
                    "logs"
                ],
                "get_monitor_value": [
                    "self",
                    "logs"
                ]
            },
            "RemoteMonitor": {
                "__init__": [
                    "self",
                    "root",
                    "path",
                    "field",
                    "headers",
                    "send_as_json"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ]
            },
            "LearningRateScheduler": {
                "__init__": [
                    "self",
                    "schedule",
                    "verbose"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ]
            },
            "TensorBoard": {
                "__init__": [
                    "self",
                    "log_dir",
                    "histogram_freq",
                    "write_graph",
                    "write_images",
                    "update_freq",
                    "profile_batch",
                    "embeddings_freq",
                    "embeddings_metadata"
                ],
                "_validate_kwargs": [
                    "self",
                    "kwargs"
                ],
                "set_model": [
                    "self",
                    "model"
                ],
                "_configure_embeddings": [
                    "self"
                ],
                "_close_writers": [
                    "self"
                ],
                "_get_writer": [
                    "self",
                    "writer_name"
                ],
                "_set_default_writer": [
                    "self",
                    "writer_name"
                ],
                "_init_batch_steps": [
                    "self"
                ],
                "_increment_step": [
                    "self",
                    "writer_name"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_test_begin": [
                    "self",
                    "logs"
                ],
                "on_train_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_test_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_train_end": [
                    "self",
                    "logs"
                ],
                "_enable_trace": [
                    "self"
                ],
                "_log_trace": [
                    "self"
                ],
                "_log_metrics": [
                    "self",
                    "logs",
                    "prefix",
                    "step"
                ],
                "_log_weights": [
                    "self",
                    "epoch"
                ],
                "_log_weight_as_image": [
                    "self",
                    "weight",
                    "weight_name",
                    "epoch"
                ],
                "_log_embeddings": [
                    "self",
                    "epoch"
                ]
            },
            "ReduceLROnPlateau": {
                "__init__": [
                    "self",
                    "monitor",
                    "factor",
                    "patience",
                    "verbose",
                    "mode",
                    "min_delta",
                    "cooldown",
                    "min_lr"
                ],
                "_reset": [
                    "self"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "in_cooldown": [
                    "self"
                ]
            },
            "CSVLogger": {
                "__init__": [
                    "self",
                    "filename",
                    "separator",
                    "append"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_train_end": [
                    "self",
                    "logs"
                ]
            },
            "LambdaCallback": {
                "__init__": [
                    "self",
                    "on_epoch_begin",
                    "on_epoch_end",
                    "on_batch_begin",
                    "on_batch_end",
                    "on_train_begin",
                    "on_train_end"
                ]
            }
        },
        "tensorflow_core.python.keras.backend": {
            "backend": [],
            "cast_to_floatx": [
                "x"
            ],
            "get_uid": [
                "prefix"
            ],
            "reset_uids": [],
            "clear_session": [],
            "manual_variable_initialization": [
                "value"
            ],
            "learning_phase": [],
            "global_learning_phase_is_set": [],
            "_mark_func_graph_as_unsaveable": [
                "graph",
                "learning_phase"
            ],
            "symbolic_learning_phase": [],
            "set_learning_phase": [
                "value"
            ],
            "learning_phase_scope": [
                "value"
            ],
            "eager_learning_phase_scope": [
                "value"
            ],
            "_current_graph": [
                "op_input_list"
            ],
            "_get_session": [
                "op_input_list"
            ],
            "get_session": [
                "op_input_list"
            ],
            "get_graph": [],
            "_scratch_graph": [
                "graph"
            ],
            "set_session": [
                "session"
            ],
            "get_default_session_config": [],
            "get_default_graph_uid_map": [],
            "_get_current_tf_device": [],
            "_is_current_explicit_device": [
                "device_type"
            ],
            "_get_available_gpus": [],
            "_has_nchw_support": [],
            "_constant_to_tensor": [
                "x",
                "dtype"
            ],
            "_to_tensor": [
                "x",
                "dtype"
            ],
            "is_sparse": [
                "tensor"
            ],
            "to_dense": [
                "tensor"
            ],
            "name_scope": [
                "name"
            ],
            "variable": [
                "value",
                "dtype",
                "name",
                "constraint"
            ],
            "track_tf_optimizer": [
                "tf_optimizer"
            ],
            "track_variable": [
                "v"
            ],
            "unique_object_name": [
                "name",
                "name_uid_map",
                "avoid_names",
                "namespace",
                "zero_based"
            ],
            "_get_variables": [
                "graph"
            ],
            "_initialize_variables": [
                "session"
            ],
            "constant": [
                "value",
                "dtype",
                "shape",
                "name"
            ],
            "is_keras_tensor": [
                "x"
            ],
            "placeholder": [
                "shape",
                "ndim",
                "dtype",
                "sparse",
                "name",
                "ragged"
            ],
            "is_placeholder": [
                "x"
            ],
            "freezable_variable": [
                "value",
                "shape",
                "name"
            ],
            "shape": [
                "x"
            ],
            "int_shape": [
                "x"
            ],
            "ndim": [
                "x"
            ],
            "dtype": [
                "x"
            ],
            "eval": [
                "x"
            ],
            "zeros": [
                "shape",
                "dtype",
                "name"
            ],
            "ones": [
                "shape",
                "dtype",
                "name"
            ],
            "eye": [
                "size",
                "dtype",
                "name"
            ],
            "zeros_like": [
                "x",
                "dtype",
                "name"
            ],
            "ones_like": [
                "x",
                "dtype",
                "name"
            ],
            "identity": [
                "x",
                "name"
            ],
            "random_uniform_variable": [
                "shape",
                "low",
                "high",
                "dtype",
                "name",
                "seed"
            ],
            "random_normal_variable": [
                "shape",
                "mean",
                "scale",
                "dtype",
                "name",
                "seed"
            ],
            "count_params": [
                "x"
            ],
            "cast": [
                "x",
                "dtype"
            ],
            "update": [
                "x",
                "new_x"
            ],
            "update_add": [
                "x",
                "increment"
            ],
            "update_sub": [
                "x",
                "decrement"
            ],
            "moving_average_update": [
                "x",
                "value",
                "momentum"
            ],
            "dot": [
                "x",
                "y"
            ],
            "batch_dot": [
                "x",
                "y",
                "axes"
            ],
            "transpose": [
                "x"
            ],
            "gather": [
                "reference",
                "indices"
            ],
            "max": [
                "x",
                "axis",
                "keepdims"
            ],
            "min": [
                "x",
                "axis",
                "keepdims"
            ],
            "sum": [
                "x",
                "axis",
                "keepdims"
            ],
            "prod": [
                "x",
                "axis",
                "keepdims"
            ],
            "cumsum": [
                "x",
                "axis"
            ],
            "cumprod": [
                "x",
                "axis"
            ],
            "var": [
                "x",
                "axis",
                "keepdims"
            ],
            "std": [
                "x",
                "axis",
                "keepdims"
            ],
            "mean": [
                "x",
                "axis",
                "keepdims"
            ],
            "any": [
                "x",
                "axis",
                "keepdims"
            ],
            "all": [
                "x",
                "axis",
                "keepdims"
            ],
            "argmax": [
                "x",
                "axis"
            ],
            "argmin": [
                "x",
                "axis"
            ],
            "square": [
                "x"
            ],
            "abs": [
                "x"
            ],
            "sqrt": [
                "x"
            ],
            "exp": [
                "x"
            ],
            "log": [
                "x"
            ],
            "logsumexp": [
                "x",
                "axis",
                "keepdims"
            ],
            "round": [
                "x"
            ],
            "sign": [
                "x"
            ],
            "pow": [
                "x",
                "a"
            ],
            "clip": [
                "x",
                "min_value",
                "max_value"
            ],
            "equal": [
                "x",
                "y"
            ],
            "not_equal": [
                "x",
                "y"
            ],
            "greater": [
                "x",
                "y"
            ],
            "greater_equal": [
                "x",
                "y"
            ],
            "less": [
                "x",
                "y"
            ],
            "less_equal": [
                "x",
                "y"
            ],
            "maximum": [
                "x",
                "y"
            ],
            "minimum": [
                "x",
                "y"
            ],
            "sin": [
                "x"
            ],
            "cos": [
                "x"
            ],
            "_regular_normalize_batch_in_training": [
                "x",
                "gamma",
                "beta",
                "reduction_axes",
                "epsilon"
            ],
            "_broadcast_normalize_batch_in_training": [
                "x",
                "gamma",
                "beta",
                "reduction_axes",
                "epsilon"
            ],
            "_fused_normalize_batch_in_training": [
                "x",
                "gamma",
                "beta",
                "reduction_axes",
                "epsilon"
            ],
            "normalize_batch_in_training": [
                "x",
                "gamma",
                "beta",
                "reduction_axes",
                "epsilon"
            ],
            "batch_normalization": [
                "x",
                "mean",
                "var",
                "beta",
                "gamma",
                "axis",
                "epsilon"
            ],
            "concatenate": [
                "tensors",
                "axis"
            ],
            "reshape": [
                "x",
                "shape"
            ],
            "permute_dimensions": [
                "x",
                "pattern"
            ],
            "resize_images": [
                "x",
                "height_factor",
                "width_factor",
                "data_format",
                "interpolation"
            ],
            "resize_volumes": [
                "x",
                "depth_factor",
                "height_factor",
                "width_factor",
                "data_format"
            ],
            "repeat_elements": [
                "x",
                "rep",
                "axis"
            ],
            "repeat": [
                "x",
                "n"
            ],
            "arange": [
                "start",
                "stop",
                "step",
                "dtype"
            ],
            "tile": [
                "x",
                "n"
            ],
            "flatten": [
                "x"
            ],
            "batch_flatten": [
                "x"
            ],
            "expand_dims": [
                "x",
                "axis"
            ],
            "squeeze": [
                "x",
                "axis"
            ],
            "temporal_padding": [
                "x",
                "padding"
            ],
            "spatial_2d_padding": [
                "x",
                "padding",
                "data_format"
            ],
            "spatial_3d_padding": [
                "x",
                "padding",
                "data_format"
            ],
            "stack": [
                "x",
                "axis"
            ],
            "one_hot": [
                "indices",
                "num_classes"
            ],
            "reverse": [
                "x",
                "axes"
            ],
            "get_value": [
                "x"
            ],
            "batch_get_value": [
                "tensors"
            ],
            "set_value": [
                "x",
                "value"
            ],
            "batch_set_value": [
                "tuples"
            ],
            "print_tensor": [
                "x",
                "message"
            ],
            "function": [
                "inputs",
                "outputs",
                "updates",
                "name"
            ],
            "gradients": [
                "loss",
                "variables"
            ],
            "stop_gradient": [
                "variables"
            ],
            "rnn": [
                "step_function",
                "inputs",
                "initial_states",
                "go_backwards",
                "mask",
                "constants",
                "unroll",
                "input_length",
                "time_major",
                "zero_output_for_mask"
            ],
            "switch": [
                "condition",
                "then_expression",
                "else_expression"
            ],
            "in_train_phase": [
                "x",
                "alt",
                "training"
            ],
            "in_test_phase": [
                "x",
                "alt",
                "training"
            ],
            "relu": [
                "x",
                "alpha",
                "max_value",
                "threshold"
            ],
            "elu": [
                "x",
                "alpha"
            ],
            "softmax": [
                "x",
                "axis"
            ],
            "softplus": [
                "x"
            ],
            "softsign": [
                "x"
            ],
            "categorical_crossentropy": [
                "target",
                "output",
                "from_logits",
                "axis"
            ],
            "sparse_categorical_crossentropy": [
                "target",
                "output",
                "from_logits",
                "axis"
            ],
            "binary_crossentropy": [
                "target",
                "output",
                "from_logits"
            ],
            "sigmoid": [
                "x"
            ],
            "hard_sigmoid": [
                "x"
            ],
            "tanh": [
                "x"
            ],
            "dropout": [
                "x",
                "level",
                "noise_shape",
                "seed"
            ],
            "l2_normalize": [
                "x",
                "axis"
            ],
            "in_top_k": [
                "predictions",
                "targets",
                "k"
            ],
            "_preprocess_conv1d_input": [
                "x",
                "data_format"
            ],
            "_preprocess_conv2d_input": [
                "x",
                "data_format",
                "force_transpose"
            ],
            "_preprocess_conv3d_input": [
                "x",
                "data_format"
            ],
            "_preprocess_padding": [
                "padding"
            ],
            "conv1d": [
                "x",
                "kernel",
                "strides",
                "padding",
                "data_format",
                "dilation_rate"
            ],
            "conv2d": [
                "x",
                "kernel",
                "strides",
                "padding",
                "data_format",
                "dilation_rate"
            ],
            "conv2d_transpose": [
                "x",
                "kernel",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "dilation_rate"
            ],
            "separable_conv1d": [
                "x",
                "depthwise_kernel",
                "pointwise_kernel",
                "strides",
                "padding",
                "data_format",
                "dilation_rate"
            ],
            "separable_conv2d": [
                "x",
                "depthwise_kernel",
                "pointwise_kernel",
                "strides",
                "padding",
                "data_format",
                "dilation_rate"
            ],
            "depthwise_conv2d": [
                "x",
                "depthwise_kernel",
                "strides",
                "padding",
                "data_format",
                "dilation_rate"
            ],
            "conv3d": [
                "x",
                "kernel",
                "strides",
                "padding",
                "data_format",
                "dilation_rate"
            ],
            "conv3d_transpose": [
                "x",
                "kernel",
                "output_shape",
                "strides",
                "padding",
                "data_format"
            ],
            "pool2d": [
                "x",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "pool_mode"
            ],
            "pool3d": [
                "x",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "pool_mode"
            ],
            "local_conv": [
                "inputs",
                "kernel",
                "kernel_size",
                "strides",
                "output_shape",
                "data_format"
            ],
            "local_conv1d": [
                "inputs",
                "kernel",
                "kernel_size",
                "strides",
                "data_format"
            ],
            "local_conv2d": [
                "inputs",
                "kernel",
                "kernel_size",
                "strides",
                "output_shape",
                "data_format"
            ],
            "bias_add": [
                "x",
                "bias",
                "data_format"
            ],
            "random_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed"
            ],
            "random_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed"
            ],
            "random_binomial": [
                "shape",
                "p",
                "dtype",
                "seed"
            ],
            "truncated_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed"
            ],
            "ctc_label_dense_to_sparse": [
                "labels",
                "label_lengths"
            ],
            "ctc_batch_cost": [
                "y_true",
                "y_pred",
                "input_length",
                "label_length"
            ],
            "ctc_decode": [
                "y_pred",
                "input_length",
                "greedy",
                "beam_width",
                "top_paths"
            ],
            "map_fn": [
                "fn",
                "elems",
                "name",
                "dtype"
            ],
            "foldl": [
                "fn",
                "elems",
                "initializer",
                "name"
            ],
            "foldr": [
                "fn",
                "elems",
                "initializer",
                "name"
            ],
            "configure_and_create_distributed_session": [
                "distribution_strategy"
            ],
            "is_tpu_strategy": [
                "strategy"
            ],
            "cast_variables_to_tensor": [
                "tensors"
            ],
            "_is_symbolic_tensor": [
                "x"
            ],
            "_TfDeviceCaptureOp": {
                "__init__": [
                    "self"
                ],
                "_set_device": [
                    "self",
                    "device"
                ],
                "_set_device_from_string": [
                    "self",
                    "device_str"
                ]
            },
            "GraphExecutionFunction": {
                "__init__": [
                    "self",
                    "inputs",
                    "outputs",
                    "updates",
                    "name"
                ],
                "_make_callable": [
                    "self",
                    "feed_arrays",
                    "feed_symbols",
                    "symbol_vals",
                    "session"
                ],
                "_call_fetch_callbacks": [
                    "self",
                    "fetches_output"
                ],
                "_eval_if_composite": [
                    "self",
                    "tensor"
                ],
                "__call__": [
                    "self",
                    "inputs"
                ]
            },
            "EagerExecutionFunction": {
                "__init__": [
                    "self",
                    "inputs",
                    "outputs",
                    "updates",
                    "name"
                ],
                "__call__": [
                    "self",
                    "inputs"
                ]
            }
        },
        "tensorflow_core.python.keras.backend_config": {
            "epsilon": [],
            "set_epsilon": [
                "value"
            ],
            "floatx": [],
            "set_floatx": [
                "value"
            ],
            "image_data_format": [],
            "set_image_data_format": [
                "data_format"
            ]
        },
        "tensorflow_core.python.keras": {},
        "tensorflow_core.python.keras.callbacks_v1": {
            "TensorBoard": {
                "__init__": [
                    "self",
                    "log_dir",
                    "histogram_freq",
                    "batch_size",
                    "write_graph",
                    "write_grads",
                    "write_images",
                    "embeddings_freq",
                    "embeddings_layer_names",
                    "embeddings_metadata",
                    "embeddings_data",
                    "update_freq",
                    "profile_batch"
                ],
                "_init_writer": [
                    "self",
                    "model"
                ],
                "_make_histogram_ops": [
                    "self",
                    "model"
                ],
                "set_model": [
                    "self",
                    "model"
                ],
                "_fetch_callback": [
                    "self",
                    "summary"
                ],
                "_write_custom_summaries": [
                    "self",
                    "step",
                    "logs"
                ],
                "on_batch_end": [
                    "self",
                    "batch",
                    "logs"
                ],
                "on_train_begin": [
                    "self",
                    "logs"
                ],
                "on_epoch_begin": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_epoch_end": [
                    "self",
                    "epoch",
                    "logs"
                ],
                "on_train_end": [
                    "self",
                    "logs"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.training": {
            "_is_symbolic_tensor": [
                "x"
            ],
            "_convert_scipy_sparse_tensor": [
                "value",
                "expected_input"
            ],
            "_get_metrics_from_layers": [
                "layers"
            ],
            "Model": {
                "__init__": [
                    "self"
                ],
                "get_weights": [
                    "self"
                ],
                "load_weights": [
                    "self",
                    "filepath",
                    "by_name"
                ],
                "compile": [
                    "self",
                    "optimizer",
                    "loss",
                    "metrics",
                    "loss_weights",
                    "sample_weight_mode",
                    "weighted_metrics",
                    "target_tensors",
                    "distribute"
                ],
                "_init_distributed_function_cache_if_not_compiled": [
                    "self"
                ],
                "metrics": [
                    "self"
                ],
                "metrics_names": [
                    "self"
                ],
                "run_eagerly": [
                    "self",
                    "value"
                ],
                "_select_training_loop": [
                    "self",
                    "inputs"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "reset_metrics": [
                    "self"
                ],
                "train_on_batch": [
                    "self",
                    "x",
                    "y",
                    "sample_weight",
                    "class_weight",
                    "reset_metrics"
                ],
                "test_on_batch": [
                    "self",
                    "x",
                    "y",
                    "sample_weight",
                    "reset_metrics"
                ],
                "predict_on_batch": [
                    "self",
                    "x"
                ],
                "fit_generator": [
                    "self",
                    "generator",
                    "steps_per_epoch",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_data",
                    "validation_steps",
                    "validation_freq",
                    "class_weight",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing",
                    "shuffle",
                    "initial_epoch"
                ],
                "evaluate_generator": [
                    "self",
                    "generator",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing",
                    "verbose"
                ],
                "predict_generator": [
                    "self",
                    "generator",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing",
                    "verbose"
                ],
                "_check_call_args": [
                    "self",
                    "method_name"
                ],
                "_set_optimizer": [
                    "self",
                    "optimizer"
                ],
                "_prepare_validation_data": [
                    "self",
                    "validation_data",
                    "batch_size",
                    "validation_steps"
                ],
                "_validate_compile_param_for_distribution_strategy": [
                    "self",
                    "run_eagerly",
                    "sample_weight_mode",
                    "target_tensors",
                    "weighted_metrics"
                ],
                "_process_target_tensor_for_compile": [
                    "self",
                    "target_tensors"
                ],
                "_compile_eagerly": [
                    "self",
                    "metrics",
                    "weighted_metrics",
                    "sample_weight_mode"
                ],
                "_update_sample_weight_modes": [
                    "self",
                    "sample_weights"
                ],
                "_recompile_weights_loss_and_weighted_metrics": [
                    "self"
                ],
                "_compile_weights_loss_and_weighted_metrics": [
                    "self",
                    "sample_weights"
                ],
                "_prepare_skip_target_masks": [
                    "self"
                ],
                "_prepare_output_masks": [
                    "self"
                ],
                "_prepare_total_loss": [
                    "self",
                    "masks"
                ],
                "_get_callback_model": [
                    "self"
                ],
                "_make_callback_model": [
                    "self",
                    "grouped_model"
                ],
                "_validate_or_infer_batch_size": [
                    "self",
                    "batch_size",
                    "steps",
                    "x"
                ],
                "_prepare_sample_weights": [
                    "self",
                    "sample_weights"
                ],
                "_cache_output_metric_attributes": [
                    "self",
                    "metrics",
                    "weighted_metrics"
                ],
                "_add_unique_metric_name": [
                    "self",
                    "metric_name",
                    "output_index"
                ],
                "_init_metric_attributes": [
                    "self"
                ],
                "_set_per_output_metric_attributes": [
                    "self",
                    "metrics_dict",
                    "output_index"
                ],
                "_set_metric_attributes": [
                    "self"
                ],
                "_handle_per_output_metrics": [
                    "self",
                    "metrics_dict",
                    "y_true",
                    "y_pred",
                    "mask",
                    "weights"
                ],
                "_handle_metrics": [
                    "self",
                    "outputs",
                    "targets",
                    "skip_target_masks",
                    "sample_weights",
                    "masks",
                    "return_weighted_metrics",
                    "return_weighted_and_unweighted_metrics"
                ],
                "_check_trainable_weights_consistency": [
                    "self"
                ],
                "_make_train_function": [
                    "self"
                ],
                "_make_test_function": [
                    "self"
                ],
                "_make_predict_function": [
                    "self"
                ],
                "_make_execution_function": [
                    "self",
                    "mode"
                ],
                "_distribution_standardize_user_data": [
                    "self",
                    "x",
                    "y",
                    "sample_weight",
                    "class_weight",
                    "batch_size",
                    "validation_split",
                    "shuffle",
                    "epochs",
                    "allow_partial_batch"
                ],
                "_standardize_user_data": [
                    "self",
                    "x",
                    "y",
                    "sample_weight",
                    "class_weight",
                    "batch_size",
                    "check_steps",
                    "steps_name",
                    "steps",
                    "validation_split",
                    "shuffle",
                    "extract_tensors_from_dataset"
                ],
                "_build_model_with_inputs": [
                    "self",
                    "inputs",
                    "targets"
                ],
                "_compile_from_inputs": [
                    "self",
                    "all_inputs",
                    "target",
                    "orig_inputs",
                    "orig_target"
                ],
                "_set_inputs": [
                    "self",
                    "inputs",
                    "outputs",
                    "training"
                ],
                "_set_input_attrs": [
                    "self",
                    "inputs"
                ],
                "_set_output_attrs": [
                    "self",
                    "outputs"
                ],
                "_targets": [
                    "self"
                ],
                "_feed_targets": [
                    "self"
                ],
                "_feed_output_names": [
                    "self"
                ],
                "_feed_output_shapes": [
                    "self"
                ],
                "_feed_loss_fns": [
                    "self"
                ],
                "_loss_weights_list": [
                    "self"
                ],
                "_output_loss_metrics": [
                    "self"
                ],
                "sample_weights": [
                    "self"
                ],
                "_sample_weight_modes": [
                    "self"
                ],
                "_feed_sample_weights": [
                    "self"
                ],
                "_maybe_load_initial_epoch_from_ckpt": [
                    "self",
                    "initial_epoch",
                    "mode"
                ],
                "_get_training_eval_metrics": [
                    "self"
                ],
                "_object_identifier": [
                    "self"
                ],
                "_tracking_metadata": [
                    "self"
                ],
                "_assert_compile_was_called": [
                    "self"
                ],
                "_in_multi_worker_mode": [
                    "self"
                ]
            },
            "DistributedCallbackModel": {
                "__init__": [
                    "self",
                    "model"
                ],
                "set_original_model": [
                    "self",
                    "orig_model"
                ],
                "save_weights": [
                    "self",
                    "filepath",
                    "overwrite",
                    "save_format"
                ],
                "save": [
                    "self",
                    "filepath",
                    "overwrite",
                    "include_optimizer"
                ],
                "load_weights": [
                    "self",
                    "filepath",
                    "by_name"
                ],
                "__getattr__": [
                    "self",
                    "item"
                ]
            },
            "_TrainingEndpoint": {
                "__init__": [
                    "self",
                    "output",
                    "output_name",
                    "loss_fn",
                    "loss_weight",
                    "training_target",
                    "output_loss_metric",
                    "sample_weight",
                    "sample_weight_mode"
                ],
                "output": [
                    "self"
                ],
                "output_name": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "loss_fn": [
                    "self"
                ],
                "loss_weight": [
                    "self",
                    "value"
                ],
                "training_target": [
                    "self",
                    "value"
                ],
                "create_training_target": [
                    "self",
                    "target",
                    "run_eagerly"
                ],
                "output_loss_metric": [
                    "self",
                    "value"
                ],
                "sample_weight": [
                    "self",
                    "value"
                ],
                "sample_weight_mode": [
                    "self",
                    "value"
                ],
                "should_skip_target": [
                    "self"
                ],
                "should_skip_target_weights": [
                    "self"
                ],
                "has_training_target": [
                    "self"
                ],
                "has_feedable_training_target": [
                    "self"
                ],
                "loss_name": [
                    "self"
                ],
                "feed_output_shape": [
                    "self"
                ],
                "sample_weights_mismatch": [
                    "self"
                ],
                "populate_sample_weight": [
                    "self",
                    "sample_weight",
                    "sample_weight_mode"
                ]
            },
            "_TrainingTarget": {
                "__init__": [
                    "self",
                    "target",
                    "feedable",
                    "skip_target_weights"
                ],
                "target": [
                    "self"
                ],
                "feedable": [
                    "self"
                ],
                "skip_target_weights": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.training_eager": {
            "_eager_loss_fn": [
                "outputs",
                "targets",
                "loss_fn",
                "output_name"
            ],
            "_eager_metrics_fn": [
                "model",
                "outputs",
                "targets",
                "sample_weights",
                "masks"
            ],
            "_model_loss": [
                "model",
                "inputs",
                "targets",
                "output_loss_metrics",
                "sample_weights",
                "training"
            ],
            "_process_single_batch": [
                "model",
                "inputs",
                "targets",
                "output_loss_metrics",
                "sample_weights",
                "training"
            ],
            "train_on_batch": [
                "model",
                "inputs",
                "targets",
                "sample_weights",
                "output_loss_metrics"
            ],
            "test_on_batch": [
                "model",
                "inputs",
                "targets",
                "sample_weights",
                "output_loss_metrics"
            ]
        },
        "tensorflow_core.python.keras.engine.base_layer": {
            "Layer": {
                "__init__": [
                    "self",
                    "trainable",
                    "name",
                    "dtype",
                    "dynamic"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "add_weight": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "constraint",
                    "partitioner",
                    "use_resource",
                    "synchronization",
                    "aggregation"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "compute_output_signature": [
                    "self",
                    "input_signature"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "__call__": [
                    "self",
                    "inputs"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dynamic": [
                    "self"
                ],
                "trainable": [
                    "self",
                    "value"
                ],
                "activity_regularizer": [
                    "self",
                    "regularizer"
                ],
                "input_spec": [
                    "self",
                    "value"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "weights": [
                    "self"
                ],
                "updates": [
                    "self"
                ],
                "losses": [
                    "self"
                ],
                "add_loss": [
                    "self",
                    "losses",
                    "inputs"
                ],
                "_clear_losses": [
                    "self"
                ],
                "metrics": [
                    "self"
                ],
                "add_metric": [
                    "self",
                    "value",
                    "aggregation",
                    "name"
                ],
                "add_update": [
                    "self",
                    "updates",
                    "inputs"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "get_weights": [
                    "self"
                ],
                "get_updates_for": [
                    "self",
                    "inputs"
                ],
                "get_losses_for": [
                    "self",
                    "inputs"
                ],
                "get_input_mask_at": [
                    "self",
                    "node_index"
                ],
                "get_output_mask_at": [
                    "self",
                    "node_index"
                ],
                "input_mask": [
                    "self"
                ],
                "output_mask": [
                    "self"
                ],
                "get_input_shape_at": [
                    "self",
                    "node_index"
                ],
                "get_output_shape_at": [
                    "self",
                    "node_index"
                ],
                "get_input_at": [
                    "self",
                    "node_index"
                ],
                "get_output_at": [
                    "self",
                    "node_index"
                ],
                "input": [
                    "self"
                ],
                "output": [
                    "self"
                ],
                "input_shape": [
                    "self"
                ],
                "count_params": [
                    "self"
                ],
                "output_shape": [
                    "self"
                ],
                "inbound_nodes": [
                    "self"
                ],
                "outbound_nodes": [
                    "self"
                ],
                "apply": [
                    "self",
                    "inputs"
                ],
                "add_variable": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ],
                "_set_dtype_policy": [
                    "self",
                    "dtype"
                ],
                "_compute_dtype": [
                    "self"
                ],
                "_maybe_cast_inputs": [
                    "self",
                    "inputs"
                ],
                "_warn_about_input_casting": [
                    "self",
                    "input_dtype"
                ],
                "_dtype": [
                    "self",
                    "value"
                ],
                "_name_scope": [
                    "self"
                ],
                "_init_set_name": [
                    "self",
                    "name",
                    "zero_based"
                ],
                "_get_existing_metric": [
                    "self",
                    "name"
                ],
                "_eager_add_metric": [
                    "self",
                    "value",
                    "aggregation",
                    "name"
                ],
                "_symbolic_add_metric": [
                    "self",
                    "value",
                    "aggregation",
                    "name"
                ],
                "_handle_weight_regularization": [
                    "self",
                    "name",
                    "variable",
                    "regularizer"
                ],
                "_handle_activity_regularization": [
                    "self",
                    "inputs",
                    "outputs"
                ],
                "_set_mask_metadata": [
                    "self",
                    "inputs",
                    "outputs",
                    "previous_mask"
                ],
                "_collect_input_masks": [
                    "self",
                    "inputs",
                    "args",
                    "kwargs"
                ],
                "_call_arg_was_passed": [
                    "self",
                    "arg_name",
                    "args",
                    "kwargs",
                    "inputs_in_args"
                ],
                "_get_call_arg_value": [
                    "self",
                    "arg_name",
                    "args",
                    "kwargs",
                    "inputs_in_args"
                ],
                "_set_connectivity_metadata_": [
                    "self",
                    "inputs",
                    "outputs",
                    "args",
                    "kwargs"
                ],
                "_add_inbound_node": [
                    "self",
                    "input_tensors",
                    "output_tensors",
                    "arguments"
                ],
                "_get_node_attribute_at_index": [
                    "self",
                    "node_index",
                    "attr",
                    "attr_name"
                ],
                "_maybe_build": [
                    "self",
                    "inputs"
                ],
                "_symbolic_call": [
                    "self",
                    "inputs"
                ],
                "_get_trainable_state": [
                    "self"
                ],
                "_set_trainable_state": [
                    "self",
                    "trainable_state"
                ],
                "_obj_reference_counts": [
                    "self"
                ],
                "_maybe_create_attribute": [
                    "self",
                    "name",
                    "default_value"
                ],
                "__delattr__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "_gather_children_attribute": [
                    "self",
                    "attribute"
                ],
                "_is_layer": [
                    "self"
                ],
                "_init_call_fn_args": [
                    "self"
                ],
                "_call_fn_args": [
                    "self"
                ],
                "_call_accepts_kwargs": [
                    "self"
                ],
                "_should_compute_mask": [
                    "self"
                ],
                "_object_identifier": [
                    "self"
                ],
                "_eager_losses": [
                    "self",
                    "losses"
                ],
                "_tracking_metadata": [
                    "self"
                ],
                "_list_extra_dependencies_for_serialization": [
                    "self",
                    "serialization_cache"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "serialization_cache"
                ],
                "_unique_trainable_weights": [
                    "self"
                ]
            },
            "TensorFlowOpLayer": {
                "__init__": [
                    "self",
                    "node_def",
                    "name",
                    "constants",
                    "trainable",
                    "dtype"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "_make_node_def": [
                    "self",
                    "graph"
                ],
                "_make_op": [
                    "self",
                    "inputs"
                ],
                "_defun_call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "AddLoss": {
                "__init__": [
                    "self",
                    "unconditional"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "AddMetric": {
                "__init__": [
                    "self",
                    "aggregation",
                    "metric_name"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "KerasHistory": {}
        },
        "tensorflow_core.python.keras.engine.training_v2_utils": {
            "_get_or_make_execution_function": [
                "model",
                "mode"
            ],
            "_make_execution_function": [
                "model",
                "mode"
            ],
            "_non_none_constant_value": [
                "v"
            ],
            "_prepare_feed_values": [
                "model",
                "inputs",
                "mode"
            ],
            "_get_input_from_iterator": [
                "iterator"
            ],
            "_make_replica_execution_function": [
                "model",
                "mode"
            ],
            "_prepare_model_with_inputs": [
                "model",
                "dataset"
            ],
            "train_on_batch": [
                "model",
                "x",
                "y",
                "sample_weight",
                "class_weight",
                "reset_metrics"
            ],
            "test_on_batch": [
                "model",
                "x",
                "y",
                "sample_weight",
                "reset_metrics"
            ],
            "predict_on_batch": [
                "model",
                "x"
            ]
        },
        "tensorflow_core.python.keras.engine.input_layer": {
            "Input": [
                "shape",
                "batch_size",
                "name",
                "dtype",
                "sparse",
                "tensor",
                "ragged"
            ],
            "InputLayer": {
                "__init__": [
                    "self",
                    "input_shape",
                    "batch_size",
                    "dtype",
                    "input_tensor",
                    "sparse",
                    "name",
                    "ragged"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.base_preprocessing_layer": {
            "PreprocessingLayer": {
                "adapt": [
                    "self",
                    "data",
                    "reset_state"
                ]
            },
            "CombinerPreprocessingLayer": {
                "__init__": [
                    "self",
                    "combiner"
                ],
                "_add_state_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "partitioner",
                    "use_resource"
                ],
                "_restore_updates": [
                    "self"
                ],
                "_dataset_is_infinite": [
                    "self",
                    "dataset"
                ],
                "_get_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "adapt": [
                    "self",
                    "data",
                    "reset_state"
                ],
                "_set_state_variables": [
                    "self",
                    "updates"
                ]
            },
            "Combiner": {
                "__repr__": [
                    "self"
                ],
                "compute": [
                    "self",
                    "batch_values",
                    "accumulator"
                ],
                "merge": [
                    "self",
                    "accumulators"
                ],
                "extract": [
                    "self",
                    "accumulator"
                ],
                "restore": [
                    "self",
                    "output"
                ],
                "serialize": [
                    "self",
                    "accumulator"
                ],
                "deserialize": [
                    "self",
                    "encoded_accumulator"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.data_adapter": {
            "select_data_adapter": [
                "x",
                "y"
            ],
            "_type_name": [
                "x"
            ],
            "_process_numpy_inputs": [
                "inputs"
            ],
            "is_none_or_empty": [
                "inputs"
            ],
            "DataAdapter": {
                "can_handle": [
                    "x",
                    "y"
                ],
                "__init__": [
                    "self",
                    "x",
                    "y"
                ],
                "get_dataset": [
                    "self"
                ],
                "get_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "has_partial_batch": [
                    "self"
                ],
                "partial_batch_size": [
                    "self"
                ],
                "should_recreate_iterator": [
                    "self",
                    "steps_per_epoch"
                ]
            },
            "TensorLikeDataAdapter": {
                "can_handle": [
                    "x",
                    "y"
                ],
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sample_weights",
                    "batch_size",
                    "epochs",
                    "steps",
                    "shuffle"
                ],
                "get_dataset": [
                    "self"
                ],
                "get_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "has_partial_batch": [
                    "self"
                ],
                "partial_batch_size": [
                    "self"
                ],
                "should_recreate_iterator": [
                    "self",
                    "_"
                ]
            },
            "CompositeTensorDataAdapter": {
                "can_handle": [
                    "x",
                    "y"
                ],
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sample_weights",
                    "batch_size",
                    "steps",
                    "shuffle"
                ],
                "get_dataset": [
                    "self"
                ],
                "get_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "has_partial_batch": [
                    "self"
                ],
                "partial_batch_size": [
                    "self"
                ]
            },
            "ListsOfScalarsDataAdapter": {
                "can_handle": [
                    "x",
                    "y"
                ],
                "_is_list_of_scalars": [
                    "inp"
                ],
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sample_weights",
                    "batch_size",
                    "shuffle"
                ],
                "get_dataset": [
                    "self"
                ],
                "get_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "has_partial_batch": [
                    "self"
                ],
                "partial_batch_size": [
                    "self"
                ]
            },
            "DatasetAdapter": {
                "can_handle": [
                    "x",
                    "y"
                ],
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sample_weights"
                ],
                "get_dataset": [
                    "self"
                ],
                "get_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "has_partial_batch": [
                    "self"
                ],
                "partial_batch_size": [
                    "self"
                ]
            },
            "GeneratorDataAdapter": {
                "can_handle": [
                    "x",
                    "y"
                ],
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sample_weights",
                    "workers",
                    "use_multiprocessing",
                    "max_queue_size"
                ],
                "get_dataset": [
                    "self"
                ],
                "get_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "has_partial_batch": [
                    "self"
                ],
                "partial_batch_size": [
                    "self"
                ]
            },
            "KerasSequenceAdapter": {
                "can_handle": [
                    "x",
                    "y"
                ],
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sample_weights",
                    "shuffle",
                    "workers",
                    "use_multiprocessing",
                    "max_queue_size"
                ],
                "get_dataset": [
                    "self"
                ],
                "get_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "has_partial_batch": [
                    "self"
                ],
                "partial_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.training_arrays": {
            "model_iteration": [
                "model",
                "inputs",
                "targets",
                "sample_weights",
                "batch_size",
                "epochs",
                "verbose",
                "callbacks",
                "val_inputs",
                "val_targets",
                "val_sample_weights",
                "shuffle",
                "initial_epoch",
                "steps_per_epoch",
                "validation_steps",
                "validation_freq",
                "mode",
                "validation_in_fit",
                "prepared_feed_values_from_dataset",
                "steps_name"
            ],
            "_get_model_feed": [
                "model",
                "mode"
            ],
            "_print_train_info": [
                "num_samples_or_steps",
                "val_samples_or_steps",
                "is_dataset"
            ],
            "_get_num_samples_or_steps": [
                "ins",
                "batch_size",
                "steps_per_epoch"
            ],
            "_prepare_feed_values": [
                "model",
                "inputs",
                "targets",
                "sample_weights",
                "mode"
            ],
            "_get_iterator": [
                "inputs",
                "distribution_strategy"
            ],
            "_reinitialize_iterator": [
                "iterator",
                "distribution_strategy"
            ],
            "_make_execution_function": [
                "model",
                "mode"
            ],
            "_update_sample_weight_mode": [
                "model",
                "mode",
                "inputs"
            ],
            "ArrayLikeTrainingLoop": {
                "fit": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq"
                ],
                "evaluate": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks"
                ],
                "predict": [
                    "self",
                    "model",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.training_utils": {
            "get_copy_pool": [],
            "get_progbar": [
                "model",
                "count_mode"
            ],
            "slice_arrays": [
                "arrays",
                "indices",
                "contiguous"
            ],
            "check_num_samples": [
                "ins",
                "batch_size",
                "steps",
                "steps_name"
            ],
            "standardize_single_array": [
                "x",
                "expected_shape"
            ],
            "standardize_input_data": [
                "data",
                "names",
                "shapes",
                "check_batch_axis",
                "exception_prefix"
            ],
            "standardize_sample_or_class_weights": [
                "x_weight",
                "output_names",
                "weight_type"
            ],
            "standardize_class_weights": [
                "class_weight",
                "output_names"
            ],
            "standardize_sample_weights": [
                "sample_weight",
                "output_names"
            ],
            "check_array_lengths": [
                "inputs",
                "targets",
                "weights"
            ],
            "check_loss_and_target_compatibility": [
                "targets",
                "loss_fns",
                "output_shapes"
            ],
            "collect_per_output_metric_info": [
                "metrics",
                "output_names",
                "output_shapes",
                "loss_fns",
                "is_weighted"
            ],
            "batch_shuffle": [
                "index_array",
                "batch_size"
            ],
            "standardize_weights": [
                "y",
                "sample_weight",
                "class_weight",
                "sample_weight_mode"
            ],
            "has_symbolic_tensors": [
                "ls"
            ],
            "has_tensors": [
                "ls"
            ],
            "get_metric_name": [
                "metric",
                "weighted"
            ],
            "get_metric_function": [
                "metric",
                "output_shape",
                "loss_fn"
            ],
            "call_metric_function": [
                "metric_fn",
                "y_true",
                "y_pred",
                "weights",
                "mask"
            ],
            "get_loss_function": [
                "loss"
            ],
            "validate_dataset_input": [
                "x",
                "y",
                "sample_weight",
                "validation_split"
            ],
            "validate_input_types": [
                "inp",
                "orig_inp",
                "allow_dict",
                "field_name"
            ],
            "check_generator_arguments": [
                "y",
                "sample_weight",
                "validation_split"
            ],
            "check_steps_argument": [
                "input_data",
                "steps",
                "steps_name"
            ],
            "cast_single_tensor": [
                "x",
                "dtype"
            ],
            "cast_if_floating_dtype_and_mismatch": [
                "targets",
                "outputs"
            ],
            "cast_if_floating_dtype": [
                "x"
            ],
            "cast_to_model_input_dtypes": [
                "x",
                "model"
            ],
            "prepare_sample_weight_modes": [
                "training_endpoints",
                "sample_weight_mode"
            ],
            "prepare_loss_functions": [
                "loss",
                "output_names"
            ],
            "prepare_loss_weights": [
                "training_endpoints",
                "loss_weights"
            ],
            "is_feature_layer": [
                "layer"
            ],
            "is_eager_dataset_or_iterator": [
                "data"
            ],
            "assert_not_batched": [
                "dataset"
            ],
            "assert_not_shuffled": [
                "dataset"
            ],
            "verify_dataset_shuffled": [
                "x"
            ],
            "is_dataset_or_iterator": [
                "data"
            ],
            "get_iterator": [
                "dataset"
            ],
            "initialize_iterator": [
                "iterator"
            ],
            "extract_tensors_from_dataset": [
                "dataset"
            ],
            "unpack_iterator_input": [
                "iterator"
            ],
            "infer_steps_for_dataset": [
                "model",
                "dataset",
                "steps",
                "epochs",
                "steps_name"
            ],
            "get_input_shape_and_dtype": [
                "layer"
            ],
            "get_static_batch_size": [
                "layer"
            ],
            "generic_output_names": [
                "outputs_list"
            ],
            "convert_eager_tensors_to_numpy": [
                "structure"
            ],
            "list_to_tuple": [
                "maybe_list"
            ],
            "should_run_validation": [
                "validation_freq",
                "epoch"
            ],
            "split_training_and_validation_data": [
                "x",
                "y",
                "sample_weights",
                "validation_split"
            ],
            "unpack_validation_data": [
                "validation_data"
            ],
            "Aggregator": {
                "__init__": [
                    "self",
                    "use_steps",
                    "num_samples",
                    "steps",
                    "batch_size"
                ],
                "create": [
                    "self",
                    "batch_outs"
                ],
                "aggregate": [
                    "self",
                    "batch_outs",
                    "batch_start",
                    "batch_end"
                ],
                "finalize": [
                    "self"
                ]
            },
            "MetricsAggregator": {
                "__init__": [
                    "self",
                    "use_steps",
                    "num_samples",
                    "steps"
                ],
                "create": [
                    "self",
                    "batch_outs"
                ],
                "aggregate": [
                    "self",
                    "batch_outs",
                    "batch_start",
                    "batch_end"
                ],
                "finalize": [
                    "self"
                ]
            },
            "ConcatAggregator": {
                "__init__": [
                    "self",
                    "batch_size"
                ],
                "create": [
                    "self",
                    "batch_element"
                ],
                "aggregate": [
                    "self",
                    "batch_element",
                    "batch_start",
                    "batch_end"
                ],
                "finalize": [
                    "self"
                ]
            },
            "SliceAggregator": {
                "__init__": [
                    "self",
                    "num_samples",
                    "batch_size"
                ],
                "create": [
                    "self",
                    "batch_element"
                ],
                "aggregate": [
                    "self",
                    "batch_element",
                    "batch_start",
                    "batch_end"
                ],
                "_slice_assign": [
                    "self",
                    "batch_element",
                    "batch_start",
                    "batch_end",
                    "is_finished"
                ],
                "finalize": [
                    "self"
                ]
            },
            "OutputsAggregator": {
                "create": [
                    "self",
                    "batch_outs"
                ],
                "aggregate": [
                    "self",
                    "batch_outs",
                    "batch_start",
                    "batch_end"
                ],
                "finalize": [
                    "self"
                ]
            },
            "ModelInputs": {
                "__init__": [
                    "self",
                    "inputs"
                ],
                "get_input_names": [
                    "self"
                ],
                "get_symbolic_inputs": [
                    "self",
                    "return_single_as_list"
                ],
                "as_dict": [
                    "self"
                ],
                "as_list": [
                    "self"
                ]
            },
            "TrainingLoop": {
                "fit": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq"
                ],
                "evaluate": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks"
                ],
                "predict": [
                    "self",
                    "model",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.training_distributed": {
            "_per_replica_execution_function": [
                "model",
                "mode"
            ],
            "_build_model": [
                "strategy",
                "model",
                "mode",
                "inputs",
                "targets"
            ],
            "_make_train_step_fn": [
                "model",
                "mode",
                "strategy",
                "output_labels"
            ],
            "experimental_tpu_fit_loop": [
                "model",
                "dataset",
                "epochs",
                "verbose",
                "callbacks",
                "initial_epoch",
                "steps_per_epoch",
                "val_dataset",
                "validation_steps",
                "validation_freq"
            ],
            "experimental_tpu_test_loop": [
                "model",
                "dataset",
                "verbose",
                "steps",
                "callbacks"
            ],
            "experimental_tpu_predict_loop": [
                "model",
                "dataset",
                "verbose",
                "steps",
                "callbacks"
            ],
            "train_with_multi_worker": [
                "method"
            ],
            "DistributionSingleWorkerTrainingLoop": {
                "fit": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq"
                ],
                "evaluate": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks"
                ],
                "predict": [
                    "self",
                    "model",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks"
                ]
            },
            "DistributionMultiWorkerTrainingLoop": {
                "__init__": [
                    "self",
                    "single_worker_loop"
                ],
                "fit": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ],
                "predict": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.network": {
            "_is_hdf5_filepath": [
                "filepath"
            ],
            "_make_node_key": [
                "layer_name",
                "node_index"
            ],
            "_map_graph_network": [
                "inputs",
                "outputs"
            ],
            "_map_subgraph_network": [
                "inputs",
                "outputs"
            ],
            "_should_skip_first_node": [
                "layer"
            ],
            "_serialize_tensors": [
                "kwargs"
            ],
            "_deserialize_keras_tensors": [
                "kwargs",
                "layer_map"
            ],
            "Network": {
                "__init__": [
                    "self"
                ],
                "_base_init": [
                    "self",
                    "name"
                ],
                "_init_graph_network": [
                    "self",
                    "inputs",
                    "outputs",
                    "name"
                ],
                "_set_output_names": [
                    "self"
                ],
                "_init_subclassed_network": [
                    "self",
                    "name"
                ],
                "dynamic": [
                    "self"
                ],
                "_track_layers": [
                    "self",
                    "layers"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "stateful": [
                    "self"
                ],
                "reset_states": [
                    "self"
                ],
                "state_updates": [
                    "self"
                ],
                "weights": [
                    "self"
                ],
                "_should_compute_mask": [
                    "self"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "layers": [
                    "self"
                ],
                "get_layer": [
                    "self",
                    "name",
                    "index"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "input_spec": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training",
                    "mask"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "_run_internal_graph": [
                    "self",
                    "inputs",
                    "training",
                    "mask"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ],
                "save": [
                    "self",
                    "filepath",
                    "overwrite",
                    "include_optimizer",
                    "save_format",
                    "signatures"
                ],
                "save_weights": [
                    "self",
                    "filepath",
                    "overwrite",
                    "save_format"
                ],
                "load_weights": [
                    "self",
                    "filepath",
                    "by_name"
                ],
                "_updated_config": [
                    "self"
                ],
                "to_json": [
                    "self"
                ],
                "to_yaml": [
                    "self"
                ],
                "summary": [
                    "self",
                    "line_length",
                    "positions",
                    "print_fn"
                ],
                "_validate_graph_inputs_and_outputs": [
                    "self"
                ],
                "_insert_layers": [
                    "self",
                    "layers",
                    "relevant_nodes"
                ],
                "_assert_weights_created": [
                    "self"
                ],
                "_object_identifier": [
                    "self"
                ],
                "_graph_network_add_loss": [
                    "self",
                    "symbolic_loss"
                ],
                "_graph_network_add_metric": [
                    "self",
                    "value",
                    "aggregation",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.node": {
            "Node": {
                "__init__": [
                    "self",
                    "outbound_layer",
                    "inbound_layers",
                    "node_indices",
                    "tensor_indices",
                    "input_tensors",
                    "output_tensors",
                    "arguments"
                ],
                "iterate_inbound": [
                    "self",
                    "include_arguments"
                ],
                "_get_all_node_dependencies": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.sequential": {
            "Sequential": {
                "__init__": [
                    "self",
                    "layers",
                    "name"
                ],
                "layers": [
                    "self"
                ],
                "dynamic": [
                    "self"
                ],
                "add": [
                    "self",
                    "layer"
                ],
                "pop": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training",
                    "mask"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "batch_size",
                    "verbose"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "batch_size",
                    "verbose"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ],
                "input_spec": [
                    "self"
                ],
                "_object_identifier": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.training_v2": {
            "run_one_epoch": [
                "model",
                "iterator",
                "execution_function",
                "dataset_size",
                "batch_size",
                "strategy",
                "steps_per_epoch",
                "num_samples",
                "mode",
                "training_context",
                "total_epochs"
            ],
            "_get_distribution_strategy": [
                "model"
            ],
            "_process_training_inputs": [
                "model",
                "x",
                "y",
                "batch_size",
                "epochs",
                "sample_weights",
                "class_weights",
                "steps_per_epoch",
                "validation_split",
                "validation_data",
                "validation_steps",
                "shuffle",
                "distribution_strategy",
                "max_queue_size",
                "workers",
                "use_multiprocessing"
            ],
            "_process_inputs": [
                "model",
                "x",
                "y",
                "batch_size",
                "epochs",
                "sample_weights",
                "class_weights",
                "shuffle",
                "steps",
                "distribution_strategy",
                "max_queue_size",
                "workers",
                "use_multiprocessing"
            ],
            "_get_total_number_of_samples": [
                "adapter"
            ],
            "_aggregate_predict_results": [
                "strategy",
                "batch_outs",
                "model"
            ],
            "_print_train_info": [
                "total_samples",
                "steps",
                "val_total_samples",
                "val_steps"
            ],
            "Loop": {
                "fit": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "_model_iteration": [
                    "self",
                    "model",
                    "mode",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "evaluate": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "predict": [
                    "self",
                    "model",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ]
            },
            "TrainingContext": {
                "on_start": [
                    "self",
                    "model",
                    "callbacks",
                    "use_samples",
                    "verbose",
                    "mode"
                ],
                "on_epoch": [
                    "self",
                    "epoch",
                    "mode"
                ],
                "on_batch": [
                    "self",
                    "step",
                    "mode",
                    "size"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.base_preprocessing_layer_v1": {
            "CombinerPreprocessingLayer": {
                "_restore_updates": [
                    "self"
                ],
                "_dataset_is_infinite": [
                    "self",
                    "dataset"
                ],
                "_get_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_set_state_variables": [
                    "self",
                    "updates"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.base_layer_utils": {
            "create_mean_metric": [
                "value",
                "name"
            ],
            "make_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "trainable",
                "caching_device",
                "validate_shape",
                "constraint",
                "use_resource",
                "collections",
                "synchronization",
                "aggregation",
                "partitioner"
            ],
            "collect_previous_mask": [
                "input_tensors"
            ],
            "have_all_keras_metadata": [
                "tensors"
            ],
            "generate_placeholders_from_shape": [
                "shape"
            ],
            "create_keras_history": [
                "tensors"
            ],
            "_create_keras_history_helper": [
                "tensors",
                "processed_ops",
                "created_layers"
            ],
            "needs_keras_history": [
                "tensors",
                "ignore_call_context"
            ],
            "is_in_keras_graph": [],
            "is_in_eager_or_tf_function": [],
            "is_in_tf_function": [],
            "uses_keras_history": [
                "tensors"
            ],
            "mark_checked": [
                "tensors"
            ],
            "call_context": [],
            "training_arg_passed_to_call": [
                "argspec",
                "args",
                "kwargs"
            ],
            "autocast_context_manager": [
                "dtype"
            ],
            "is_subclassed": [
                "layer"
            ],
            "from_saved_model": [
                "layer"
            ],
            "check_graph_consistency": [
                "tensor",
                "method",
                "force_raise"
            ],
            "mark_as_return": [
                "outputs",
                "acd"
            ],
            "default": [
                "method"
            ],
            "enable_v2_dtype_behavior": [],
            "disable_v2_dtype_behavior": [],
            "v2_dtype_behavior_enabled": [],
            "CallContext": {
                "__init__": [
                    "self"
                ],
                "enter": [
                    "self",
                    "layer",
                    "inputs",
                    "build_graph",
                    "training"
                ],
                "in_keras_graph": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.saving": {},
        "tensorflow_core.python.keras.engine.training_generator": {
            "model_iteration": [
                "model",
                "data",
                "steps_per_epoch",
                "epochs",
                "verbose",
                "callbacks",
                "validation_data",
                "validation_steps",
                "validation_freq",
                "class_weight",
                "max_queue_size",
                "workers",
                "use_multiprocessing",
                "shuffle",
                "initial_epoch",
                "mode",
                "batch_size",
                "steps_name"
            ],
            "_get_next_batch": [
                "generator"
            ],
            "_validate_arguments": [
                "is_sequence",
                "is_dataset",
                "use_multiprocessing",
                "workers",
                "steps_per_epoch",
                "validation_data",
                "validation_steps",
                "mode",
                "kwargs"
            ],
            "convert_to_generator_like": [
                "data",
                "batch_size",
                "steps_per_epoch",
                "epochs",
                "shuffle"
            ],
            "_make_enqueued_generator": [
                "generator",
                "workers",
                "use_multiprocessing",
                "max_queue_size",
                "shuffle"
            ],
            "_make_execution_function": [
                "model",
                "mode",
                "class_weight"
            ],
            "_get_num_samples_or_steps": [
                "data",
                "steps_per_epoch"
            ],
            "GeneratorOrSequenceTrainingLoop": {
                "fit": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "evaluate": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "predict": [
                    "self",
                    "model",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ]
            },
            "EagerDatasetOrIteratorTrainingLoop": {
                "fit": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq"
                ],
                "evaluate": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks"
                ],
                "predict": [
                    "self",
                    "model",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks"
                ]
            },
            "GeneratorLikeTrainingLoop": {
                "fit": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps",
                    "validation_freq"
                ],
                "evaluate": [
                    "self",
                    "model",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps",
                    "callbacks"
                ],
                "predict": [
                    "self",
                    "model",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "callbacks"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.input_spec": {
            "to_tensor_shape": [
                "spec"
            ],
            "assert_input_compatibility": [
                "input_spec",
                "inputs",
                "layer_name"
            ],
            "to_tensor_spec": [
                "input_spec",
                "default_dtype"
            ],
            "InputSpec": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "ndim",
                    "max_ndim",
                    "min_ndim",
                    "axes"
                ],
                "__repr__": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            }
        },
        "tensorflow_core.python.keras.engine.partial_batch_padding_handler": {
            "PartialBatchPaddingHandler": {
                "__init__": [
                    "self",
                    "output_shape"
                ],
                "get_real_batch_size": [
                    "self",
                    "dataset_batch"
                ],
                "update_mask": [
                    "self",
                    "padding_mask",
                    "dataset_batch"
                ],
                "pad_batch": [
                    "self"
                ],
                "apply_mask": [
                    "self",
                    "prediction_result"
                ]
            }
        },
        "tensorflow_core.python.keras.engine": {},
        "tensorflow_core.python.keras.saving.model_config": {
            "model_from_config": [
                "config",
                "custom_objects"
            ],
            "model_from_yaml": [
                "yaml_string",
                "custom_objects"
            ],
            "model_from_json": [
                "json_string",
                "custom_objects"
            ]
        },
        "tensorflow_core.python.keras.saving.save": {
            "save_model": [
                "model",
                "filepath",
                "overwrite",
                "include_optimizer",
                "save_format",
                "signatures"
            ],
            "load_model": [
                "filepath",
                "custom_objects",
                "compile"
            ]
        },
        "tensorflow_core.python.keras.saving.hdf5_format": {
            "save_model_to_hdf5": [
                "model",
                "filepath",
                "overwrite",
                "include_optimizer"
            ],
            "load_model_from_hdf5": [
                "filepath",
                "custom_objects",
                "compile"
            ],
            "preprocess_weights_for_loading": [
                "layer",
                "weights",
                "original_keras_version",
                "original_backend"
            ],
            "_convert_rnn_weights": [
                "layer",
                "weights"
            ],
            "save_optimizer_weights_to_hdf5_group": [
                "hdf5_group",
                "optimizer"
            ],
            "load_optimizer_weights_from_hdf5_group": [
                "hdf5_group"
            ],
            "save_weights_to_hdf5_group": [
                "f",
                "layers"
            ],
            "load_weights_from_hdf5_group": [
                "f",
                "layers"
            ],
            "load_weights_from_hdf5_group_by_name": [
                "f",
                "layers"
            ],
            "save_attributes_to_hdf5_group": [
                "group",
                "name",
                "data"
            ],
            "load_attributes_from_hdf5_group": [
                "group",
                "name"
            ],
            "_legacy_weights": [
                "model"
            ]
        },
        "tensorflow_core.python.keras.saving.saving_utils": {
            "extract_model_metrics": [
                "model"
            ],
            "model_input_signature": [
                "model"
            ],
            "raise_model_input_error": [
                "model"
            ],
            "trace_model_call": [
                "model",
                "input_signature"
            ],
            "model_metadata": [
                "model",
                "include_optimizer",
                "require_config"
            ],
            "should_overwrite": [
                "filepath",
                "overwrite"
            ],
            "compile_args_from_training_config": [
                "training_config",
                "custom_objects"
            ]
        },
        "tensorflow_core.python.keras.saving.saved_model_experimental": {
            "export_saved_model": [
                "model",
                "saved_model_path",
                "custom_objects",
                "as_text",
                "input_signature",
                "serving_only"
            ],
            "_export_model_json": [
                "model",
                "saved_model_path"
            ],
            "_export_model_variables": [
                "model",
                "saved_model_path"
            ],
            "_save_v1_format": [
                "model",
                "path",
                "custom_objects",
                "as_text",
                "input_signature"
            ],
            "_get_var_list": [
                "model"
            ],
            "create_placeholder": [
                "spec"
            ],
            "_export_mode": [
                "mode",
                "has_saved_vars",
                "builder",
                "model",
                "custom_objects",
                "checkpoint_path",
                "input_signature"
            ],
            "_create_signature_def_map": [
                "model",
                "mode"
            ],
            "_assert_same_non_optimizer_objects": [
                "model",
                "model_graph",
                "clone",
                "clone_graph"
            ],
            "load_from_saved_model": [
                "saved_model_path",
                "custom_objects"
            ]
        },
        "tensorflow_core.python.keras.saving": {},
        "tensorflow_core.python.keras.saving.saved_model.utils": {
            "use_wrapped_call": [
                "layer",
                "call_fn",
                "default_training_value",
                "return_method"
            ],
            "maybe_add_training_arg": [
                "original_call",
                "wrapped_call",
                "expects_training_arg",
                "default_training_value"
            ],
            "get_training_arg_index": [
                "call_fn"
            ],
            "set_training_arg": [
                "training",
                "index",
                "args",
                "kwargs"
            ],
            "get_training_arg": [
                "index",
                "args",
                "kwargs"
            ],
            "remove_training_arg": [
                "index",
                "args",
                "kwargs"
            ]
        },
        "tensorflow_core.python.keras.saving.saved_model.serialized_attributes": {
            "SerializedAttributes": {
                "with_attributes": [
                    "name",
                    "checkpointable_objects",
                    "functions",
                    "copy_from"
                ],
                "new": [
                    "obj"
                ],
                "__init__": [
                    "self"
                ],
                "functions": [
                    "self"
                ],
                "checkpointable_objects": [
                    "self"
                ],
                "functions_to_serialize": [
                    "self"
                ],
                "objects_to_serialize": [
                    "self"
                ],
                "set_and_validate_functions": [
                    "self",
                    "function_dict"
                ],
                "set_and_validate_objects": [
                    "self",
                    "object_dict"
                ]
            },
            "CommonEndpoints": {},
            "LayerAttributes": {},
            "ModelAttributes": {}
        },
        "tensorflow_core.python.keras.saving.saved_model.save": {
            "save": [
                "model",
                "filepath",
                "overwrite",
                "include_optimizer",
                "signatures"
            ],
            "serialize_all_attributes": [
                "layer",
                "serialization_cache"
            ],
            "_should_skip_serialization": [
                "layer"
            ],
            "_wrap_layer_objects": [
                "layer",
                "serialization_cache"
            ],
            "_wrap_layer_functions": [
                "layer",
                "serialization_cache"
            ],
            "_default_save_signature": [
                "layer"
            ],
            "_list_all_layers": [
                "obj"
            ],
            "_replace_child_layer_functions": [
                "layer",
                "serialization_cache"
            ],
            "_restore_child_layer_functions": [
                "original_fns"
            ],
            "_reset_layer_losses": [
                "parent_layer"
            ],
            "_restore_layer_losses": [
                "losses_dict"
            ],
            "layer_uses_training_bool": [
                "layer"
            ],
            "layer_call_wrapper": [
                "call_collection",
                "method"
            ],
            "_wrap_call_and_conditional_losses": [
                "layer"
            ],
            "_extract_outputs_from_fn": [
                "layer",
                "call_and_return_conditional_losses"
            ],
            "_append_activity_regularizer_loss": [
                "layer",
                "call_fn_with_losses",
                "activity_regularizer_fn"
            ],
            "_create_call_fn_decorator": [
                "layer",
                "wrapped_call"
            ],
            "_wrap_unconditional_loss": [
                "loss_fn",
                "index"
            ],
            "_wrap_activity_regularizer": [
                "layer"
            ],
            "LayerCallCollection": {
                "__init__": [
                    "self",
                    "layer"
                ],
                "_generate_input_signature": [
                    "self",
                    "layer"
                ],
                "add_trace": [
                    "self"
                ],
                "fn_input_signature": [
                    "self"
                ],
                "training_arg_was_passed": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "get_training_arg_value": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "_maybe_wrap_with_training_arg": [
                    "self",
                    "call_fn"
                ],
                "add_function": [
                    "self",
                    "call_fn",
                    "name"
                ]
            },
            "LayerCall": {
                "__init__": [
                    "self",
                    "call_collection",
                    "python_function"
                ],
                "__call__": [
                    "self"
                ],
                "get_concrete_function": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.saving.saved_model.constants": {},
        "tensorflow_core.python.keras.saving.saved_model": {},
        "tensorflow_core.python.keras.saving.saved_model.load": {
            "load": [
                "path",
                "compile"
            ],
            "recursively_deserialize_keras_object": [
                "config",
                "module_objects"
            ],
            "infer_inputs_from_restored_call_function": [
                "fn"
            ],
            "KerasObjectLoader": {
                "__init__": [
                    "self"
                ],
                "_finalize": [
                    "self"
                ],
                "_recreate_base_user_object": [
                    "self",
                    "proto"
                ]
            },
            "RevivedLayer": {
                "_init_from_metadata": [
                    "cls",
                    "metadata"
                ],
                "_revive_setter": [
                    "self",
                    "name",
                    "value"
                ],
                "keras_api": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RevivedNetwork": {
                "_init_from_metadata": [
                    "cls",
                    "metadata"
                ]
            },
            "RevivedModel": {
                "_init_from_metadata": [
                    "cls",
                    "metadata"
                ]
            },
            "RevivedSequential": {
                "_init_from_metadata": [
                    "cls",
                    "metadata"
                ]
            }
        },
        "tensorflow_core.python.keras.estimator": {
            "model_to_estimator": [
                "keras_model",
                "keras_model_path",
                "custom_objects",
                "model_dir",
                "config",
                "checkpoint_format"
            ],
            "model_to_estimator_v2": [
                "keras_model",
                "keras_model_path",
                "custom_objects",
                "model_dir",
                "config",
                "checkpoint_format"
            ]
        },
        "tensorflow_core.python.keras.premade.wide_deep": {
            "WideDeepModel": {
                "__init__": [
                    "self",
                    "linear_model",
                    "dnn_model",
                    "activation"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "_get_optimizers": [
                    "self"
                ],
                "_backwards": [
                    "self",
                    "tape",
                    "loss"
                ],
                "_make_train_function": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            }
        },
        "tensorflow_core.python.keras.premade.linear": {
            "LinearModel": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            }
        },
        "tensorflow_core.python.keras.premade": {},
        "tensorflow_core.python.keras.mixed_precision": {},
        "tensorflow_core.python.keras.mixed_precision.experimental.test_util": {
            "create_identity_with_grad_check_fn": [
                "expected_gradient",
                "expected_dtype"
            ],
            "create_identity_with_nan_gradients_fn": [
                "have_nan_gradients"
            ]
        },
        "tensorflow_core.python.keras.mixed_precision.experimental.policy": {
            "with_input_dtype": [
                "policy",
                "dtype"
            ],
            "global_policy": [],
            "policy_defaults_to_floatx": [],
            "_check_if_mixed_precision_graph_rewrite_is_enabled": [],
            "set_policy": [
                "policy"
            ],
            "policy_scope": [
                "policy"
            ],
            "Policy": {
                "__init__": [
                    "self",
                    "name",
                    "loss_scale"
                ],
                "_parse_name": [
                    "self",
                    "name"
                ],
                "variable_dtype": [
                    "self"
                ],
                "compute_dtype": [
                    "self"
                ],
                "should_cast_variables": [
                    "self"
                ],
                "loss_scale": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.mixed_precision.experimental.loss_scale_optimizer": {
            "_UnwrapPreventer": {
                "__init__": [
                    "self",
                    "value"
                ]
            },
            "LossScaleOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "loss_scale"
                ],
                "loss_scale": [
                    "self"
                ],
                "get_scaled_loss": [
                    "self",
                    "loss"
                ],
                "get_unscaled_gradients": [
                    "self",
                    "grads"
                ],
                "_compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "grad_loss"
                ],
                "get_gradients": [
                    "self",
                    "loss",
                    "params"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "name"
                ],
                "_apply_gradients_cross_replica": [
                    "self",
                    "distribution",
                    "grads_and_vars",
                    "name"
                ],
                "_apply_gradients": [
                    "self",
                    "grads",
                    "wrapped_vars",
                    "name"
                ],
                "iterations": [
                    "self",
                    "variable"
                ],
                "learning_rate": [
                    "self",
                    "lr"
                ],
                "lr": [
                    "self",
                    "lr"
                ],
                "get_slot_names": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            }
        },
        "tensorflow_core.python.keras.mixed_precision.experimental.autocast_variable": {
            "AutoCastVariable": {
                "__init__": [
                    "self",
                    "variable"
                ],
                "name": [
                    "self"
                ],
                "_should_cast": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "true_dtype": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "sparse_read": [
                    "self",
                    "indices",
                    "name"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_add": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_sub": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_dense_var_to_tensor": [
                    "self",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "_should_act_as_resource_variable": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "o"
                ],
                "__radd__": [
                    "self",
                    "o"
                ],
                "__sub__": [
                    "self",
                    "o"
                ],
                "__rsub__": [
                    "self",
                    "o"
                ],
                "__mul__": [
                    "self",
                    "o"
                ],
                "__rmul__": [
                    "self",
                    "o"
                ],
                "__truediv__": [
                    "self",
                    "o"
                ],
                "__rtruediv__": [
                    "self",
                    "o"
                ],
                "__floordiv__": [
                    "self",
                    "o"
                ],
                "__rfloordiv__": [
                    "self",
                    "o"
                ],
                "__mod__": [
                    "self",
                    "o"
                ],
                "__rmod__": [
                    "self",
                    "o"
                ],
                "__lt__": [
                    "self",
                    "o"
                ],
                "__le__": [
                    "self",
                    "o"
                ],
                "__gt__": [
                    "self",
                    "o"
                ],
                "__ge__": [
                    "self",
                    "o"
                ],
                "__getitem__": [
                    "self",
                    "o"
                ],
                "__pow__": [
                    "self",
                    "o",
                    "modulo"
                ],
                "__rpow__": [
                    "self",
                    "o"
                ],
                "__neg__": [
                    "self"
                ],
                "__abs__": [
                    "self"
                ],
                "__div__": [
                    "self",
                    "o"
                ],
                "__rdiv__": [
                    "self",
                    "o"
                ],
                "__matmul__": [
                    "self",
                    "o"
                ],
                "__rmatmul__": [
                    "self",
                    "o"
                ]
            },
            "AutoCastDistributedVariable": {
                "__init__": [
                    "self",
                    "variable"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.mixed_precision.experimental": {},
        "tensorflow_core.python.keras.distribute.multi_worker_testing_utils": {
            "mnist_synthetic_dataset": [
                "batch_size",
                "steps_per_epoch"
            ],
            "get_mnist_model": [
                "input_shape"
            ]
        },
        "tensorflow_core.python.keras.distribute.keras_stateful_lstm_model_correctness_test": {
            "strategies_for_stateful_embedding_model": [],
            "test_combinations_for_stateful_embedding_model": [],
            "DistributionStrategyStatefulLstmModelCorrectnessTest": {
                "get_model": [
                    "self",
                    "max_words",
                    "initial_weights",
                    "distribution",
                    "experimental_run_tf_function",
                    "input_shapes"
                ],
                "disabled_test_stateful_lstm_model_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ],
                "test_incorrectly_use_multiple_cores_for_stateful_lstm_model": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute.keras_correctness_test_base": {
            "eager_mode_test_configuration": [],
            "graph_mode_test_configuration": [],
            "all_strategy_and_input_config_combinations": [],
            "strategy_minus_tpu_and_input_config_combinations_eager": [],
            "strategies_for_embedding_models": [],
            "test_combinations_for_embedding_model": [],
            "test_combinations_with_tpu_strategies": [],
            "batch_wrapper": [
                "dataset",
                "batch_size",
                "repeat"
            ],
            "get_batch_size": [
                "global_batch_size",
                "distribution"
            ],
            "get_data_size": [
                "data"
            ],
            "get_shapes": [
                "data"
            ],
            "get_correctness_test_inputs": [
                "use_numpy",
                "use_validation_data",
                "with_distribution",
                "x_train",
                "y_train",
                "x_eval",
                "y_eval",
                "x_predict",
                "training_epochs"
            ],
            "fit_eval_and_predict": [
                "initial_weights",
                "input_fn",
                "model_fn",
                "experimental_run_tf_function",
                "distribution",
                "is_stateful_model"
            ],
            "compare_results": [
                "results_with_ds",
                "results_without_ds",
                "distribution",
                "testcase",
                "partial_last_batch"
            ],
            "should_skip_tpu_with_eager": [
                "distribution"
            ],
            "MaybeDistributionScope": {
                "__init__": [
                    "self",
                    "distribution"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "value",
                    "traceback"
                ]
            },
            "LearningRateBatchScheduler": {
                "__init__": [
                    "self",
                    "update_freq"
                ],
                "on_batch_begin": [
                    "self",
                    "batch",
                    "logs"
                ]
            },
            "TestDistributionStrategyCorrectnessBase": {
                "set_up_test_config": [
                    "self",
                    "use_numpy",
                    "use_validation_data",
                    "with_batch_norm"
                ],
                "get_data": [
                    "self"
                ],
                "get_data_with_partial_last_batch": [
                    "self"
                ],
                "get_data_with_partial_last_batch_eval": [
                    "self"
                ],
                "get_input_for_correctness_test": [
                    "self"
                ],
                "get_model": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function",
                    "input_shapes"
                ],
                "run_correctness_test": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function",
                    "with_batch_norm",
                    "is_stateful_model",
                    "partial_last_batch",
                    "training_epochs"
                ],
                "get_input_for_dynamic_lr_test": [
                    "self"
                ],
                "run_dynamic_lr_test": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyEmbeddingModelCorrectnessBase": {
                "get_data": [
                    "self",
                    "count",
                    "min_words",
                    "max_words",
                    "max_word_id",
                    "num_classes"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute.multi_worker_training_state": {
            "checkpoint_exists": [
                "filepath"
            ],
            "remove_checkpoint_if_exists": [
                "ckpt_dir",
                "filepath"
            ],
            "_remove_dir": [
                "dir_to_remove"
            ],
            "MultiWorkerTrainingState": {
                "__init__": [
                    "self",
                    "model",
                    "original_filepath"
                ],
                "back_up": [
                    "self",
                    "epoch"
                ],
                "restore": [
                    "self"
                ],
                "delete_backup": [
                    "self"
                ],
                "maybe_load_initial_epoch_from_ckpt": [
                    "self",
                    "initial_epoch",
                    "mode"
                ],
                "untrack_vars": [
                    "self"
                ],
                "_get_backup_filepath": [
                    "self",
                    "original_filepath"
                ],
                "_get_temp_filepath": [
                    "self",
                    "original_filepath"
                ],
                "_assert_in_multi_worker_mode": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute.keras_dnn_correctness_test": {
            "all_strategy_combinations_with_eager_and_graph_modes": [],
            "all_strategy_combinations_with_graph_mode": [],
            "is_default_strategy": [
                "strategy"
            ],
            "TestDistributionStrategyDnnCorrectness": {
                "get_model": [
                    "self",
                    "experimental_run_tf_function",
                    "initial_weights",
                    "distribution",
                    "input_shapes"
                ],
                "get_data": [
                    "self"
                ],
                "get_data_with_partial_last_batch": [
                    "self"
                ],
                "get_data_with_partial_last_batch_eval": [
                    "self"
                ],
                "test_dnn_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ],
                "test_dnn_correctness_with_partial_last_batch_eval": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data"
                ],
                "test_dnn_correctness_with_partial_last_batch": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data"
                ],
                "test_dnn_with_dynamic_learning_rate": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyDnnMetricCorrectness": {
                "get_model": [
                    "self",
                    "experimental_run_tf_function",
                    "distribution",
                    "input_shapes"
                ],
                "run_metric_correctness_test": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_simple_dnn_metric_correctness": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyDnnMetricEvalCorrectness": {
                "get_model": [
                    "self",
                    "experimental_run_tf_function",
                    "distribution",
                    "input_shapes"
                ],
                "run_eval_metrics_correctness_test": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_identity_model_metric_eval_correctness": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "SubclassedModel": {
                "__init__": [
                    "self",
                    "initial_weights",
                    "input_shapes"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "TestDistributionStrategyDnnCorrectnessWithSubclassedModel": {
                "get_model": [
                    "self",
                    "experimental_run_tf_function",
                    "initial_weights",
                    "distribution",
                    "input_shapes"
                ],
                "test_dnn_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ],
                "test_dnn_with_dynamic_learning_rate": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_dnn_correctness_with_partial_last_batch_eval": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute.keras_utils_test": {
            "Counter": {
                "__init__": [
                    "self"
                ],
                "wrap_with_counts": [
                    "self",
                    "method_name",
                    "method"
                ]
            },
            "TestDistributionStrategyWithCallbacks": {
                "test_callbacks_in_fit": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_callbacks_in_eval": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_callbacks_in_predict": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyErrorCases": {
                "test_validating_dataset_input_tensors_with_shape_mismatch": [
                    "self",
                    "distribution"
                ],
                "test_validating_dataset_input_tensors_with_dtype_mismatch": [
                    "self",
                    "distribution"
                ],
                "test_unsupported_features": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function",
                    "mode"
                ],
                "test_calling_with_unsupported_predefined_callbacks": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_with_run_eagerly": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_on_subclassed_model": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_on_deferred_sequential_model": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_standalone_loss_without_loss_reduction": [
                    "self",
                    "distribution"
                ]
            },
            "TestDistributionStrategyWithLossMasking": {
                "test_masking": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function",
                    "optimizer"
                ]
            },
            "TestDistributionStrategyWithNormalizationLayer": {
                "test_batchnorm_correctness": [
                    "self",
                    "distribution",
                    "fused",
                    "optimizer",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategySaveLoadWeights": {
                "test_save_load_h5": [
                    "self",
                    "distribution",
                    "optimizer",
                    "experimental_run_tf_function"
                ],
                "test_save_load_trackable": [
                    "self",
                    "distribution",
                    "optimizer",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyValidation": {
                "test_layer_outside_scope": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_model_outside_scope": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyWithStaticShapes": {
                "test_input_batch_size_not_divisible_by_num_replicas": [
                    "self",
                    "distribution"
                ],
                "test_static_input_batch_size": [
                    "self",
                    "distribution"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute.distributed_training_utils": {
            "set_weights": [
                "distribution_strategy",
                "dist_model",
                "weights"
            ],
            "unwrap_values": [
                "distribution_strategy",
                "grouped_inputs",
                "grouped_outputs",
                "grouped_updates",
                "grouped_session_args",
                "with_loss_tensor"
            ],
            "unwrap_output_dict": [
                "strategy",
                "grouped_outputs",
                "mode"
            ],
            "unwrap_outputs": [
                "distribution_strategy",
                "grouped_outputs",
                "with_loss_tensor"
            ],
            "flatten_per_replica_values": [
                "distribution_strategy",
                "per_replica_values"
            ],
            "validate_callbacks": [
                "input_callbacks",
                "optimizer"
            ],
            "validate_distributed_dataset_inputs": [
                "distribution_strategy",
                "x",
                "y",
                "sample_weights"
            ],
            "validate_per_replica_inputs": [
                "distribution_strategy",
                "x"
            ],
            "validate_all_tensor_types": [
                "x",
                "x_values"
            ],
            "validate_all_tensor_shapes": [
                "x",
                "x_values"
            ],
            "_wait_for_variable_initialization": [
                "session"
            ],
            "init_restore_or_wait_for_variables": [],
            "validate_inputs": [
                "x",
                "y"
            ],
            "global_batch_size_supported": [
                "distribution_strategy"
            ],
            "is_tpu_strategy": [
                "strategy"
            ],
            "is_dataset_shape_fully_defined": [
                "dataset"
            ],
            "process_batch_and_step_size": [
                "strategy",
                "inputs",
                "batch_size",
                "steps_per_epoch",
                "mode",
                "validation_split"
            ],
            "get_input_params": [
                "distribution_strategy",
                "num_samples",
                "steps",
                "batch_size",
                "mode"
            ],
            "get_batch_dimension": [
                "iterator"
            ],
            "get_iterator": [
                "dataset",
                "distribution_strategy"
            ],
            "initialize_iterator": [
                "iterator",
                "distribution_strategy"
            ],
            "_get_input_from_iterator": [
                "iterator",
                "model"
            ],
            "_prepare_feed_values": [
                "model",
                "inputs",
                "targets",
                "sample_weights",
                "mode"
            ],
            "is_distributing_by_cloning": [
                "model"
            ],
            "_custom_compile_for_predict": [
                "model"
            ],
            "_build_network_on_replica": [
                "model",
                "mode",
                "inputs",
                "targets"
            ],
            "_build_distributed_network": [
                "model",
                "strategy",
                "mode",
                "inputs",
                "targets"
            ],
            "_clone_and_build_model": [
                "model",
                "mode",
                "inputs",
                "targets"
            ],
            "clone_model_on_replicas": [
                "model",
                "strategy",
                "mode",
                "inputs",
                "targets"
            ],
            "_make_execution_function": [
                "model",
                "mode"
            ],
            "_make_execution_function_without_cloning": [
                "model",
                "mode"
            ],
            "_make_replica_execution_function": [
                "model",
                "mode"
            ],
            "_make_replicated_models_with_cloning": [
                "model",
                "mode"
            ],
            "_make_execution_function_with_cloning": [
                "model",
                "mode"
            ],
            "_make_graph_execution_function": [
                "model",
                "mode"
            ],
            "_make_eager_execution_function": [
                "model",
                "mode"
            ],
            "_copy_weights_to_distributed_model": [
                "original_model",
                "mode"
            ],
            "_copy_weights_to_original_model": [
                "model",
                "mode"
            ],
            "_per_replica_aggregate_batch": [
                "strategy",
                "batch_outs",
                "model",
                "mode"
            ],
            "_reset_metrics": [
                "model"
            ],
            "get_distributed_model": [
                "model",
                "mode"
            ],
            "set_distributed_model": [
                "model",
                "mode",
                "distributed_model"
            ],
            "get_distributed_function": [
                "model",
                "mode"
            ],
            "set_distributed_function": [
                "model",
                "mode",
                "distributed_function"
            ],
            "_generate_cache_key": [
                "mode"
            ],
            "distributed_scope": [
                "strategy",
                "learning_phase"
            ],
            "call_replica_local_fn": [
                "fn"
            ],
            "is_current_worker_chief": [],
            "filter_distributed_callbacks": [
                "callbacks_list",
                "model"
            ],
            "_update_sample_weight_modes": [
                "model",
                "mode",
                "sample_weights"
            ],
            "concat_along_batch_dimension": [
                "outputs"
            ]
        },
        "tensorflow_core.python.keras.distribute.distribute_strategy_test": {
            "simple_sequential_model": [],
            "simple_subclassed_model": [
                "num_labels"
            ],
            "simple_multi_inputs_multi_outputs_model": [],
            "get_multi_inputs_multi_outputs_data": [],
            "batch_wrapper": [
                "dataset",
                "batch_size",
                "distribution",
                "repeat"
            ],
            "get_model": [],
            "get_sample_weights_model": [],
            "get_dataset": [
                "distribution"
            ],
            "get_predict_dataset": [
                "distribution"
            ],
            "convert_numpy_to_dataset_with_unknown_cardinality": [
                "inputs",
                "targets"
            ],
            "multi_input_output_model": [],
            "strategy_minus_tpu_combinations": [],
            "tpu_strategy_combinations": [],
            "tpu_strategy_combinations_graph_only": [],
            "all_strategy_combinations": [],
            "all_strategy_combinations_plus_run_distributed": [],
            "all_strategy_minus_default_and_tpu_combinations": [],
            "all_strategy_combinations_minus_default": [],
            "strategy_and_optimizer_combinations": [],
            "_functional_with_add_loss_and_metric": [
                "input_shape",
                "num_classes",
                "l1",
                "l2"
            ],
            "_sequential_with_add_loss_and_metric": [
                "input_shape",
                "num_classes",
                "l1",
                "l2"
            ],
            "_functional_with_layer_reuse": [
                "input_shape",
                "num_classes",
                "l1",
                "l2"
            ],
            "TestDistributionStrategyWithNumpyArrays": {
                "test_calculating_input_params_no_steps_no_batch_size": [
                    "self",
                    "distribution"
                ],
                "test_calculating_input_params_with_steps_no_batch_size": [
                    "self",
                    "distribution"
                ],
                "test_calculating_input_params_no_steps_with_batch_size": [
                    "self",
                    "distribution"
                ],
                "test_calculating_input_params_with_steps_with_batch_size": [
                    "self",
                    "distribution"
                ],
                "test_calling_model_with_numpy_arrays": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_calling_model_with_nested_numpy_arrays": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_numpy_with_sample_weights": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_flatten_predict_outputs": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_evaluate_with_partial_batch": [
                    "self",
                    "distribution",
                    "batch_size"
                ],
                "test_predict_with_partial_batch": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_no_target_model": [
                    "self",
                    "distribution"
                ],
                "test_predict_multi_output_model_with_partial_batch": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyWithDatasets": {
                "test_calling_model_on_same_dataset": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_model_interleaved_eval_same_as_direct_eval": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_fit_with_tuple_and_dict_dataset_inputs": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_fit_with_dictionary_in_the_dataset_b135161171": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_fit_eval_and_predict_methods_on_dataset_without_steps": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_on_dataset_with_unknown_cardinality_without_steps": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function",
                    "mode"
                ],
                "test_on_dataset_with_unknown_cardinality": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_fit_eval_and_predict_methods_on_dataset": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_fit_eval_and_predict_with_optimizer": [
                    "self",
                    "distribution",
                    "optimizer",
                    "experimental_run_tf_function"
                ],
                "test_dataset_wrong_input_shape": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function",
                    "mode"
                ],
                "test_dataset_external_batch_input_validation": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_learning_phase_value": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "testOptimizerWithCallbacks": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_evaluate_with_dataset_with_partial_batch": [
                    "self",
                    "distribution",
                    "batch_size"
                ],
                "test_predict_with_dataset_with_partial_batch": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_predict_multi_output_model_with_dataset_with_partial_batch": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_match_model_input_matches_with_dataset_tensors": [
                    "self",
                    "distribution"
                ],
                "test_dataset_with_sample_weights": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestRegularizerLoss": {
                "loss_fn": [
                    "_",
                    "y_pred"
                ],
                "test_regularizer_loss": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ]
            },
            "TestDistributionStrategyWithKerasModels": {
                "test_distribution_strategy_on_sequential_model": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_on_functional_model": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_one_dimensional": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_with_loss_reduction_types": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function",
                    "reduction"
                ],
                "test_distribution_strategy_with_symbolic_add_loss": [
                    "self",
                    "mode",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "DISABLED_test_distribution_strategy_with_callable_add_loss": [
                    "self",
                    "distribution"
                ],
                "test_distribution_strategy_with_add_metric_in_call": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_with_add_metric_object": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_distribution_strategy_with_add_metric_outside_call": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_sparse_tensor_outputs": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_ragged_tensor_outputs": [
                    "self",
                    "distribution",
                    "experimental_run_tf_function"
                ],
                "test_correctness_of_add_loss_with_merge_call": [
                    "self",
                    "distribution"
                ]
            },
            "TestDistributionStrategyWithMultipleAddLossAndMetricCalls": {
                "test_fit_and_evaluate": [
                    "self",
                    "distribution",
                    "model_fn",
                    "l1",
                    "l2"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute.keras_image_model_correctness_test": {
            "DistributionStrategyCnnCorrectnessTest": {
                "get_model": [
                    "self",
                    "initial_weights",
                    "distribution",
                    "experimental_run_tf_function",
                    "input_shapes"
                ],
                "_get_data": [
                    "self",
                    "count",
                    "shape",
                    "num_classes"
                ],
                "get_data": [
                    "self"
                ],
                "get_data_with_partial_last_batch_eval": [
                    "self"
                ],
                "test_cnn_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ],
                "test_cnn_with_batch_norm_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ],
                "test_cnn_correctness_with_partial_last_batch_eval": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data"
                ],
                "test_cnn_with_batch_norm_correctness_and_partial_last_batch_eval": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute.keras_embedding_model_correctness_test": {
            "DistributionStrategyEmbeddingModelCorrectnessTest": {
                "get_model": [
                    "self",
                    "max_words",
                    "initial_weights",
                    "distribution",
                    "experimental_run_tf_function",
                    "input_shapes"
                ],
                "test_embedding_model_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ],
                "test_embedding_time_distributed_model_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ]
            },
            "DistributionStrategySiameseEmbeddingModelCorrectnessTest": {
                "get_model": [
                    "self",
                    "max_words",
                    "initial_weights",
                    "distribution",
                    "experimental_run_tf_function",
                    "input_shapes"
                ],
                "get_data": [
                    "self",
                    "count",
                    "min_words",
                    "max_words",
                    "max_word_id",
                    "num_classes"
                ],
                "test_siamese_embedding_model_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ]
            }
        },
        "tensorflow_core.python.keras.distribute": {},
        "tensorflow_core.python.keras.distribute.keras_lstm_model_correctness_test": {
            "DistributionStrategyLstmModelCorrectnessTest": {
                "get_model": [
                    "self",
                    "max_words",
                    "initial_weights",
                    "distribution",
                    "experimental_run_tf_function",
                    "input_shapes"
                ],
                "test_lstm_model_correctness": [
                    "self",
                    "distribution",
                    "use_numpy",
                    "use_validation_data",
                    "experimental_run_tf_function"
                ]
            }
        },
        "tensorflow_core.python.keras.api": {},
        "tensorflow_core.python.keras.api._v2": {},
        "tensorflow_core.python.keras.api._v2.keras": {},
        "tensorflow_core.python.keras.api._v2.keras.metrics": {},
        "tensorflow_core.python.keras.api._v2.keras.losses": {},
        "tensorflow_core.python.keras.api._v2.keras.initializers": {},
        "tensorflow_core.python.keras.api._v2.keras.models": {},
        "tensorflow_core.python.keras.api._v2.keras.estimator": {},
        "tensorflow_core.python.keras.api._v2.keras.premade": {},
        "tensorflow_core.python.keras.api._v2.keras.mixed_precision": {},
        "tensorflow_core.python.keras.api._v2.keras.mixed_precision.experimental": {},
        "tensorflow_core.python.keras.api._v2.keras.callbacks": {},
        "tensorflow_core.python.keras.api._v2.keras.constraints": {},
        "tensorflow_core.python.keras.api._v2.keras.optimizers": {},
        "tensorflow_core.python.keras.api._v2.keras.optimizers.schedules": {},
        "tensorflow_core.python.keras.api._v2.keras.applications": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.imagenet_utils": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.vgg19": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.nasnet": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.inception_v3": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.inception_resnet_v2": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.xception": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.densenet": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.vgg16": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.resnet50": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.mobilenet_v2": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.resnet": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.mobilenet": {},
        "tensorflow_core.python.keras.api._v2.keras.applications.resnet_v2": {},
        "tensorflow_core.python.keras.api._v2.keras.regularizers": {},
        "tensorflow_core.python.keras.api._v2.keras.preprocessing": {},
        "tensorflow_core.python.keras.api._v2.keras.preprocessing.sequence": {},
        "tensorflow_core.python.keras.api._v2.keras.preprocessing.image": {},
        "tensorflow_core.python.keras.api._v2.keras.preprocessing.text": {},
        "tensorflow_core.python.keras.api._v2.keras.wrappers": {},
        "tensorflow_core.python.keras.api._v2.keras.wrappers.scikit_learn": {},
        "tensorflow_core.python.keras.api._v2.keras.backend": {},
        "tensorflow_core.python.keras.api._v2.keras.layers": {},
        "tensorflow_core.python.keras.api._v2.keras.layers.experimental": {},
        "tensorflow_core.python.keras.api._v2.keras.activations": {},
        "tensorflow_core.python.keras.api._v2.keras.utils": {},
        "tensorflow_core.python.keras.api._v2.keras.experimental": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets.imdb": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets.cifar10": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets.boston_housing": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets.cifar100": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets.fashion_mnist": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets.reuters": {},
        "tensorflow_core.python.keras.api._v2.keras.datasets.mnist": {},
        "tensorflow_core.python.keras.api.keras": {},
        "tensorflow_core.python.keras.api.keras.metrics": {},
        "tensorflow_core.python.keras.api.keras.losses": {},
        "tensorflow_core.python.keras.api.keras.initializers": {},
        "tensorflow_core.python.keras.api.keras.models": {},
        "tensorflow_core.python.keras.api.keras.estimator": {},
        "tensorflow_core.python.keras.api.keras.premade": {},
        "tensorflow_core.python.keras.api.keras.mixed_precision": {},
        "tensorflow_core.python.keras.api.keras.mixed_precision.experimental": {},
        "tensorflow_core.python.keras.api.keras.callbacks": {},
        "tensorflow_core.python.keras.api.keras.constraints": {},
        "tensorflow_core.python.keras.api.keras.optimizers": {},
        "tensorflow_core.python.keras.api.keras.optimizers.schedules": {},
        "tensorflow_core.python.keras.api.keras.applications": {},
        "tensorflow_core.python.keras.api.keras.applications.imagenet_utils": {},
        "tensorflow_core.python.keras.api.keras.applications.vgg19": {},
        "tensorflow_core.python.keras.api.keras.applications.nasnet": {},
        "tensorflow_core.python.keras.api.keras.applications.inception_v3": {},
        "tensorflow_core.python.keras.api.keras.applications.inception_resnet_v2": {},
        "tensorflow_core.python.keras.api.keras.applications.xception": {},
        "tensorflow_core.python.keras.api.keras.applications.densenet": {},
        "tensorflow_core.python.keras.api.keras.applications.vgg16": {},
        "tensorflow_core.python.keras.api.keras.applications.resnet50": {},
        "tensorflow_core.python.keras.api.keras.applications.mobilenet_v2": {},
        "tensorflow_core.python.keras.api.keras.applications.resnet": {},
        "tensorflow_core.python.keras.api.keras.applications.mobilenet": {},
        "tensorflow_core.python.keras.api.keras.applications.resnet_v2": {},
        "tensorflow_core.python.keras.api.keras.regularizers": {},
        "tensorflow_core.python.keras.api.keras.preprocessing": {},
        "tensorflow_core.python.keras.api.keras.preprocessing.sequence": {},
        "tensorflow_core.python.keras.api.keras.preprocessing.image": {},
        "tensorflow_core.python.keras.api.keras.preprocessing.text": {},
        "tensorflow_core.python.keras.api.keras.wrappers": {},
        "tensorflow_core.python.keras.api.keras.wrappers.scikit_learn": {},
        "tensorflow_core.python.keras.api.keras.backend": {},
        "tensorflow_core.python.keras.api.keras.layers": {},
        "tensorflow_core.python.keras.api.keras.layers.experimental": {},
        "tensorflow_core.python.keras.api.keras.activations": {},
        "tensorflow_core.python.keras.api.keras.utils": {},
        "tensorflow_core.python.keras.api.keras.experimental": {},
        "tensorflow_core.python.keras.api.keras.datasets": {},
        "tensorflow_core.python.keras.api.keras.datasets.imdb": {},
        "tensorflow_core.python.keras.api.keras.datasets.cifar10": {},
        "tensorflow_core.python.keras.api.keras.datasets.boston_housing": {},
        "tensorflow_core.python.keras.api.keras.datasets.cifar100": {},
        "tensorflow_core.python.keras.api.keras.datasets.fashion_mnist": {},
        "tensorflow_core.python.keras.api.keras.datasets.reuters": {},
        "tensorflow_core.python.keras.api.keras.datasets.mnist": {},
        "tensorflow_core.python.keras.api._v1": {},
        "tensorflow_core.python.keras.api._v1.keras": {},
        "tensorflow_core.python.keras.api._v1.keras.metrics": {},
        "tensorflow_core.python.keras.api._v1.keras.losses": {},
        "tensorflow_core.python.keras.api._v1.keras.initializers": {},
        "tensorflow_core.python.keras.api._v1.keras.models": {},
        "tensorflow_core.python.keras.api._v1.keras.estimator": {},
        "tensorflow_core.python.keras.api._v1.keras.premade": {},
        "tensorflow_core.python.keras.api._v1.keras.mixed_precision": {},
        "tensorflow_core.python.keras.api._v1.keras.mixed_precision.experimental": {},
        "tensorflow_core.python.keras.api._v1.keras.callbacks": {},
        "tensorflow_core.python.keras.api._v1.keras.constraints": {},
        "tensorflow_core.python.keras.api._v1.keras.optimizers": {},
        "tensorflow_core.python.keras.api._v1.keras.optimizers.schedules": {},
        "tensorflow_core.python.keras.api._v1.keras.applications": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.imagenet_utils": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.vgg19": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.nasnet": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.inception_v3": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.inception_resnet_v2": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.xception": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.densenet": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.vgg16": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.resnet50": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.mobilenet_v2": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.resnet": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.mobilenet": {},
        "tensorflow_core.python.keras.api._v1.keras.applications.resnet_v2": {},
        "tensorflow_core.python.keras.api._v1.keras.regularizers": {},
        "tensorflow_core.python.keras.api._v1.keras.preprocessing": {},
        "tensorflow_core.python.keras.api._v1.keras.preprocessing.sequence": {},
        "tensorflow_core.python.keras.api._v1.keras.preprocessing.image": {},
        "tensorflow_core.python.keras.api._v1.keras.preprocessing.text": {},
        "tensorflow_core.python.keras.api._v1.keras.wrappers": {},
        "tensorflow_core.python.keras.api._v1.keras.wrappers.scikit_learn": {},
        "tensorflow_core.python.keras.api._v1.keras.backend": {},
        "tensorflow_core.python.keras.api._v1.keras.layers": {},
        "tensorflow_core.python.keras.api._v1.keras.layers.experimental": {},
        "tensorflow_core.python.keras.api._v1.keras.activations": {},
        "tensorflow_core.python.keras.api._v1.keras.utils": {},
        "tensorflow_core.python.keras.api._v1.keras.experimental": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets.imdb": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets.cifar10": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets.boston_housing": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets.cifar100": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets.fashion_mnist": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets.reuters": {},
        "tensorflow_core.python.keras.api._v1.keras.datasets.mnist": {},
        "tensorflow_core.python.keras.applications.mobilenet_v2": {
            "MobileNetV2": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.mobilenet": {
            "MobileNet": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.resnet": {
            "ResNet50": [],
            "ResNet101": [],
            "ResNet152": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.vgg19": {
            "VGG19": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.nasnet": {
            "NASNetMobile": [],
            "NASNetLarge": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.vgg16": {
            "VGG16": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.inception_resnet_v2": {
            "InceptionResNetV2": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.xception": {
            "Xception": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.imagenet_utils": {
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.densenet": {
            "DenseNet121": [],
            "DenseNet169": [],
            "DenseNet201": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.inception_v3": {
            "InceptionV3": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications.resnet_v2": {
            "ResNet50V2": [],
            "ResNet101V2": [],
            "ResNet152V2": [],
            "decode_predictions": [],
            "preprocess_input": []
        },
        "tensorflow_core.python.keras.applications": {
            "keras_modules_injection": [
                "base_fun"
            ]
        },
        "tensorflow_core.python.keras.preprocessing.image": {
            "array_to_img": [
                "x",
                "data_format",
                "scale",
                "dtype"
            ],
            "img_to_array": [
                "img",
                "data_format",
                "dtype"
            ],
            "save_img": [
                "path",
                "x",
                "data_format",
                "file_format",
                "scale"
            ],
            "Iterator": {},
            "DirectoryIterator": {
                "__init__": [
                    "self",
                    "directory",
                    "image_data_generator",
                    "target_size",
                    "color_mode",
                    "classes",
                    "class_mode",
                    "batch_size",
                    "shuffle",
                    "seed",
                    "data_format",
                    "save_to_dir",
                    "save_prefix",
                    "save_format",
                    "follow_links",
                    "subset",
                    "interpolation",
                    "dtype"
                ]
            },
            "NumpyArrayIterator": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "image_data_generator",
                    "batch_size",
                    "shuffle",
                    "sample_weight",
                    "seed",
                    "data_format",
                    "save_to_dir",
                    "save_prefix",
                    "save_format",
                    "subset",
                    "dtype"
                ]
            },
            "ImageDataGenerator": {
                "__init__": [
                    "self",
                    "featurewise_center",
                    "samplewise_center",
                    "featurewise_std_normalization",
                    "samplewise_std_normalization",
                    "zca_whitening",
                    "zca_epsilon",
                    "rotation_range",
                    "width_shift_range",
                    "height_shift_range",
                    "brightness_range",
                    "shear_range",
                    "zoom_range",
                    "channel_shift_range",
                    "fill_mode",
                    "cval",
                    "horizontal_flip",
                    "vertical_flip",
                    "rescale",
                    "preprocessing_function",
                    "data_format",
                    "validation_split",
                    "dtype"
                ]
            }
        },
        "tensorflow_core.python.keras.preprocessing.sequence": {
            "TimeseriesGenerator": {}
        },
        "tensorflow_core.python.keras.preprocessing.text": {},
        "tensorflow_core.python.keras.preprocessing": {},
        "tensorflow_core.python.keras.wrappers.scikit_learn": {
            "BaseWrapper": {
                "__init__": [
                    "self",
                    "build_fn"
                ],
                "check_params": [
                    "self",
                    "params"
                ],
                "get_params": [
                    "self"
                ],
                "set_params": [
                    "self"
                ],
                "fit": [
                    "self",
                    "x",
                    "y"
                ],
                "filter_sk_params": [
                    "self",
                    "fn",
                    "override"
                ]
            },
            "KerasClassifier": {
                "fit": [
                    "self",
                    "x",
                    "y"
                ],
                "predict": [
                    "self",
                    "x"
                ],
                "predict_proba": [
                    "self",
                    "x"
                ],
                "score": [
                    "self",
                    "x",
                    "y"
                ]
            },
            "KerasRegressor": {
                "predict": [
                    "self",
                    "x"
                ],
                "score": [
                    "self",
                    "x",
                    "y"
                ]
            }
        },
        "tensorflow_core.python.keras.wrappers": {},
        "tensorflow_core.python.keras.optimizer_v2.gradient_descent": {
            "SGD": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "momentum",
                    "nesterov",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.adam": {
            "Adam": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta_1",
                    "beta_2",
                    "epsilon",
                    "amsgrad",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.learning_rate_schedule": {
            "serialize": [
                "learning_rate_schedule"
            ],
            "deserialize": [
                "config",
                "custom_objects"
            ],
            "LearningRateSchedule": {
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "ExponentialDecay": {
                "__init__": [
                    "self",
                    "initial_learning_rate",
                    "decay_steps",
                    "decay_rate",
                    "staircase",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            },
            "PiecewiseConstantDecay": {
                "__init__": [
                    "self",
                    "boundaries",
                    "values",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            },
            "PolynomialDecay": {
                "__init__": [
                    "self",
                    "initial_learning_rate",
                    "decay_steps",
                    "end_learning_rate",
                    "power",
                    "cycle",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            },
            "InverseTimeDecay": {
                "__init__": [
                    "self",
                    "initial_learning_rate",
                    "decay_steps",
                    "decay_rate",
                    "staircase",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            },
            "CosineDecay": {
                "__init__": [
                    "self",
                    "initial_learning_rate",
                    "decay_steps",
                    "alpha",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            },
            "CosineDecayRestarts": {
                "__init__": [
                    "self",
                    "initial_learning_rate",
                    "first_decay_steps",
                    "t_mul",
                    "m_mul",
                    "alpha",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            },
            "LinearCosineDecay": {
                "__init__": [
                    "self",
                    "initial_learning_rate",
                    "decay_steps",
                    "num_periods",
                    "alpha",
                    "beta",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            },
            "NoisyLinearCosineDecay": {
                "__init__": [
                    "self",
                    "initial_learning_rate",
                    "decay_steps",
                    "initial_variance",
                    "variance_decay",
                    "num_periods",
                    "alpha",
                    "beta",
                    "name"
                ],
                "__call__": [
                    "self",
                    "step"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.adadelta": {
            "Adadelta": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "rho",
                    "epsilon",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.adagrad": {
            "Adagrad": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "epsilon",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.optimizer_v2": {
            "_deduplicate_indexed_slices": [
                "values",
                "indices"
            ],
            "_filter_grads": [
                "grads_and_vars"
            ],
            "_var_key": [
                "var"
            ],
            "_get_slot_key_from_var": [
                "var",
                "slot_name"
            ],
            "OptimizerV2": {
                "__init__": [
                    "self",
                    "name"
                ],
                "minimize": [
                    "self",
                    "loss",
                    "var_list",
                    "grad_loss",
                    "name"
                ],
                "_compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "grad_loss"
                ],
                "get_gradients": [
                    "self",
                    "loss",
                    "params"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "name"
                ],
                "_distributed_apply": [
                    "self",
                    "distribution",
                    "grads_and_vars",
                    "name",
                    "apply_state"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "_set_hyper": [
                    "self",
                    "name",
                    "value"
                ],
                "_get_hyper": [
                    "self",
                    "name",
                    "dtype"
                ],
                "__getattribute__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "get_slot_names": [
                    "self"
                ],
                "add_slot": [
                    "self",
                    "var",
                    "slot_name",
                    "initializer"
                ],
                "get_slot": [
                    "self",
                    "var",
                    "slot_name"
                ],
                "_prepare": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "_fallback_apply_state": [
                    "self",
                    "var_device",
                    "var_dtype"
                ],
                "_create_hypers": [
                    "self"
                ],
                "iterations": [
                    "self",
                    "variable"
                ],
                "_decayed_lr": [
                    "self",
                    "var_dtype"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ],
                "_serialize_hyperparameter": [
                    "self",
                    "hyperparameter_name"
                ],
                "variables": [
                    "self"
                ],
                "weights": [
                    "self"
                ],
                "get_weights": [
                    "self"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "add_weight": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "trainable",
                    "synchronization",
                    "aggregation"
                ],
                "_init_set_name": [
                    "self",
                    "name",
                    "zero_based"
                ],
                "_assert_valid_dtypes": [
                    "self",
                    "tensors"
                ],
                "_valid_dtypes": [
                    "self"
                ],
                "_call_if_callable": [
                    "self",
                    "param"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle",
                    "apply_state"
                ],
                "_resource_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "handle",
                    "indices"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "handle",
                    "indices",
                    "apply_state"
                ],
                "_resource_scatter_add": [
                    "self",
                    "x",
                    "i",
                    "v"
                ],
                "_resource_scatter_update": [
                    "self",
                    "x",
                    "i",
                    "v"
                ],
                "_dense_apply_args": [
                    "self"
                ],
                "_sparse_apply_args": [
                    "self"
                ],
                "_restore_slot_variable": [
                    "self",
                    "slot_name",
                    "variable",
                    "slot_variable"
                ],
                "_create_or_restore_slot_variable": [
                    "self",
                    "slot_variable_position",
                    "slot_name",
                    "variable"
                ]
            },
            "RestoredOptimizer": {
                "__init__": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.rmsprop": {
            "RMSprop": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "rho",
                    "momentum",
                    "epsilon",
                    "centered",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.ftrl": {
            "Ftrl": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "learning_rate_power",
                    "initial_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "name",
                    "l2_shrinkage_regularization_strength"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2.nadam": {
            "Nadam": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta_1",
                    "beta_2",
                    "epsilon",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "_prepare": [
                    "self",
                    "var_list"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.optimizer_v2": {},
        "tensorflow_core.python.keras.optimizer_v2.adamax": {
            "Adamax": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta_1",
                    "beta_2",
                    "epsilon",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare_local": [
                    "self",
                    "var_device",
                    "var_dtype",
                    "apply_state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "apply_state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "apply_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.core": {
            "Masking": {
                "__init__": [
                    "self",
                    "mask_value"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Dropout": {
                "__init__": [
                    "self",
                    "rate",
                    "noise_shape",
                    "seed"
                ],
                "_get_noise_shape": [
                    "self",
                    "inputs"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "SpatialDropout1D": {
                "__init__": [
                    "self",
                    "rate"
                ],
                "_get_noise_shape": [
                    "self",
                    "inputs"
                ]
            },
            "SpatialDropout2D": {
                "__init__": [
                    "self",
                    "rate",
                    "data_format"
                ],
                "_get_noise_shape": [
                    "self",
                    "inputs"
                ]
            },
            "SpatialDropout3D": {
                "__init__": [
                    "self",
                    "rate",
                    "data_format"
                ],
                "_get_noise_shape": [
                    "self",
                    "inputs"
                ]
            },
            "Activation": {
                "__init__": [
                    "self",
                    "activation"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Reshape": {
                "__init__": [
                    "self",
                    "target_shape"
                ],
                "_fix_unknown_dimension": [
                    "self",
                    "input_shape",
                    "output_shape"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Permute": {
                "__init__": [
                    "self",
                    "dims"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Flatten": {
                "__init__": [
                    "self",
                    "data_format"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RepeatVector": {
                "__init__": [
                    "self",
                    "n"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Lambda": {
                "__init__": [
                    "self",
                    "function",
                    "output_shape",
                    "mask",
                    "arguments"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training"
                ],
                "_variable_creator": [
                    "self",
                    "next_creator"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "get_config": [
                    "self"
                ],
                "_serialize_function_to_config": [
                    "self",
                    "inputs",
                    "allow_raw"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ],
                "_parse_function_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "func_attr_name",
                    "module_attr_name",
                    "func_type_attr_name"
                ]
            },
            "Dense": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "ActivityRegularization": {
                "__init__": [
                    "self",
                    "l1",
                    "l2"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.noise": {
            "GaussianNoise": {
                "__init__": [
                    "self",
                    "stddev"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "GaussianDropout": {
                "__init__": [
                    "self",
                    "rate"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "AlphaDropout": {
                "__init__": [
                    "self",
                    "rate",
                    "noise_shape",
                    "seed"
                ],
                "_get_noise_shape": [
                    "self",
                    "inputs"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.kernelized": {
            "_get_random_features_initializer": [
                "initializer",
                "shape"
            ],
            "_get_default_scale": [
                "initializer",
                "input_dim"
            ],
            "RandomFourierFeatures": {
                "__init__": [
                    "self",
                    "output_dim",
                    "kernel_initializer",
                    "scale",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.normalization": {
            "replace_in_base_docstring": [
                "replacements"
            ],
            "BatchNormalizationBase": {
                "__init__": [
                    "self",
                    "axis",
                    "momentum",
                    "epsilon",
                    "center",
                    "scale",
                    "beta_initializer",
                    "gamma_initializer",
                    "moving_mean_initializer",
                    "moving_variance_initializer",
                    "beta_regularizer",
                    "gamma_regularizer",
                    "beta_constraint",
                    "gamma_constraint",
                    "renorm",
                    "renorm_clipping",
                    "renorm_momentum",
                    "fused",
                    "trainable",
                    "virtual_batch_size",
                    "adjustment",
                    "name"
                ],
                "_raise_if_fused_cannot_be_used": [
                    "self"
                ],
                "_fused_can_be_used": [
                    "self"
                ],
                "trainable": [
                    "self",
                    "value"
                ],
                "_get_trainable_var": [
                    "self"
                ],
                "_param_dtype": [
                    "self"
                ],
                "_support_zero_size_input": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_assign_moving_average": [
                    "self",
                    "variable",
                    "value",
                    "momentum",
                    "inputs_size"
                ],
                "_assign_new_value": [
                    "self",
                    "variable",
                    "value"
                ],
                "_fused_batch_norm": [
                    "self",
                    "inputs",
                    "training"
                ],
                "_renorm_correction_and_moments": [
                    "self",
                    "mean",
                    "variance",
                    "training",
                    "inputs_size"
                ],
                "_moments": [
                    "self",
                    "inputs",
                    "reduction_axes",
                    "keep_dims"
                ],
                "_get_training_value": [
                    "self",
                    "training"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "BatchNormalization": {},
            "LayerNormalization": {
                "__init__": [
                    "self",
                    "axis",
                    "epsilon",
                    "center",
                    "scale",
                    "beta_initializer",
                    "gamma_initializer",
                    "beta_regularizer",
                    "gamma_regularizer",
                    "beta_constraint",
                    "gamma_constraint",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.dense_attention": {
            "_lower_triangular_mask": [
                "shape"
            ],
            "_merge_masks": [
                "x",
                "y"
            ],
            "BaseDenseAttention": {
                "__init__": [
                    "self",
                    "causal"
                ],
                "_calculate_scores": [
                    "self",
                    "query",
                    "key"
                ],
                "_apply_scores": [
                    "self",
                    "scores",
                    "value",
                    "scores_mask"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "_validate_call_args": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Attention": {
                "__init__": [
                    "self",
                    "use_scale"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_calculate_scores": [
                    "self",
                    "query",
                    "key"
                ],
                "get_config": [
                    "self"
                ]
            },
            "AdditiveAttention": {
                "__init__": [
                    "self",
                    "use_scale"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_calculate_scores": [
                    "self",
                    "query",
                    "key"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.normalization_v2": {
            "BatchNormalization": {}
        },
        "tensorflow_core.python.keras.layers.merge": {
            "add": [
                "inputs"
            ],
            "subtract": [
                "inputs"
            ],
            "multiply": [
                "inputs"
            ],
            "average": [
                "inputs"
            ],
            "maximum": [
                "inputs"
            ],
            "minimum": [
                "inputs"
            ],
            "concatenate": [
                "inputs",
                "axis"
            ],
            "dot": [
                "inputs",
                "axes",
                "normalize"
            ],
            "_Merge": {
                "__init__": [
                    "self"
                ],
                "_merge_function": [
                    "self",
                    "inputs"
                ],
                "_compute_elemwise_op_output_shape": [
                    "self",
                    "shape1",
                    "shape2"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ]
            },
            "Add": {
                "_merge_function": [
                    "self",
                    "inputs"
                ]
            },
            "Subtract": {
                "build": [
                    "self",
                    "input_shape"
                ],
                "_merge_function": [
                    "self",
                    "inputs"
                ]
            },
            "Multiply": {
                "_merge_function": [
                    "self",
                    "inputs"
                ]
            },
            "Average": {
                "_merge_function": [
                    "self",
                    "inputs"
                ]
            },
            "Maximum": {
                "_merge_function": [
                    "self",
                    "inputs"
                ]
            },
            "Minimum": {
                "_merge_function": [
                    "self",
                    "inputs"
                ]
            },
            "Concatenate": {
                "__init__": [
                    "self",
                    "axis"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_merge_function": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Dot": {
                "__init__": [
                    "self",
                    "axes",
                    "normalize"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_merge_function": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.recurrent": {
            "_generate_dropout_mask": [
                "ones",
                "rate",
                "training",
                "count"
            ],
            "_standardize_args": [
                "inputs",
                "initial_state",
                "constants",
                "num_constants"
            ],
            "_is_multiple_state": [
                "state_size"
            ],
            "_generate_zero_filled_state_for_cell": [
                "cell",
                "inputs",
                "batch_size",
                "dtype"
            ],
            "_generate_zero_filled_state": [
                "batch_size_tensor",
                "state_size",
                "dtype"
            ],
            "StackedRNNCells": {
                "__init__": [
                    "self",
                    "cells"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "get_initial_state": [
                    "self",
                    "inputs",
                    "batch_size",
                    "dtype"
                ],
                "call": [
                    "self",
                    "inputs",
                    "states",
                    "constants"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "RNN": {
                "__init__": [
                    "self",
                    "cell",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "unroll",
                    "time_major"
                ],
                "states": [
                    "self",
                    "states"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_validate_state_spec": [
                    "cell_state_sizes",
                    "init_state_specs"
                ],
                "get_initial_state": [
                    "self",
                    "inputs"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "constants"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state",
                    "constants"
                ],
                "_process_inputs": [
                    "self",
                    "inputs",
                    "initial_state",
                    "constants"
                ],
                "reset_states": [
                    "self",
                    "states"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "AbstractRNNCell": {
                "call": [
                    "self",
                    "inputs",
                    "states"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "get_initial_state": [
                    "self",
                    "inputs",
                    "batch_size",
                    "dtype"
                ]
            },
            "DropoutRNNCellMixin": {
                "__init__": [
                    "self"
                ],
                "reset_dropout_mask": [
                    "self"
                ],
                "reset_recurrent_dropout_mask": [
                    "self"
                ],
                "get_dropout_mask_for_cell": [
                    "self",
                    "inputs",
                    "training",
                    "count"
                ],
                "get_recurrent_dropout_mask_for_cell": [
                    "self",
                    "inputs",
                    "training",
                    "count"
                ]
            },
            "SimpleRNNCell": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "states",
                    "training"
                ],
                "get_initial_state": [
                    "self",
                    "inputs",
                    "batch_size",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "SimpleRNN": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "unroll"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state"
                ],
                "units": [
                    "self"
                ],
                "activation": [
                    "self"
                ],
                "use_bias": [
                    "self"
                ],
                "kernel_initializer": [
                    "self"
                ],
                "recurrent_initializer": [
                    "self"
                ],
                "bias_initializer": [
                    "self"
                ],
                "kernel_regularizer": [
                    "self"
                ],
                "recurrent_regularizer": [
                    "self"
                ],
                "bias_regularizer": [
                    "self"
                ],
                "kernel_constraint": [
                    "self"
                ],
                "recurrent_constraint": [
                    "self"
                ],
                "bias_constraint": [
                    "self"
                ],
                "dropout": [
                    "self"
                ],
                "recurrent_dropout": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "GRUCell": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation",
                    "reset_after"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "states",
                    "training"
                ],
                "get_config": [
                    "self"
                ],
                "get_initial_state": [
                    "self",
                    "inputs",
                    "batch_size",
                    "dtype"
                ]
            },
            "GRU": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "unroll",
                    "reset_after"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state"
                ],
                "units": [
                    "self"
                ],
                "activation": [
                    "self"
                ],
                "recurrent_activation": [
                    "self"
                ],
                "use_bias": [
                    "self"
                ],
                "kernel_initializer": [
                    "self"
                ],
                "recurrent_initializer": [
                    "self"
                ],
                "bias_initializer": [
                    "self"
                ],
                "kernel_regularizer": [
                    "self"
                ],
                "recurrent_regularizer": [
                    "self"
                ],
                "bias_regularizer": [
                    "self"
                ],
                "kernel_constraint": [
                    "self"
                ],
                "recurrent_constraint": [
                    "self"
                ],
                "bias_constraint": [
                    "self"
                ],
                "dropout": [
                    "self"
                ],
                "recurrent_dropout": [
                    "self"
                ],
                "implementation": [
                    "self"
                ],
                "reset_after": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "LSTMCell": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "unit_forget_bias",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_compute_carry_and_output": [
                    "self",
                    "x",
                    "h_tm1",
                    "c_tm1"
                ],
                "_compute_carry_and_output_fused": [
                    "self",
                    "z",
                    "c_tm1"
                ],
                "call": [
                    "self",
                    "inputs",
                    "states",
                    "training"
                ],
                "get_config": [
                    "self"
                ],
                "get_initial_state": [
                    "self",
                    "inputs",
                    "batch_size",
                    "dtype"
                ]
            },
            "PeepholeLSTMCell": {
                "build": [
                    "self",
                    "input_shape"
                ],
                "_compute_carry_and_output": [
                    "self",
                    "x",
                    "h_tm1",
                    "c_tm1"
                ],
                "_compute_carry_and_output_fused": [
                    "self",
                    "z",
                    "c_tm1"
                ]
            },
            "LSTM": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "unit_forget_bias",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "unroll"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state"
                ],
                "units": [
                    "self"
                ],
                "activation": [
                    "self"
                ],
                "recurrent_activation": [
                    "self"
                ],
                "use_bias": [
                    "self"
                ],
                "kernel_initializer": [
                    "self"
                ],
                "recurrent_initializer": [
                    "self"
                ],
                "bias_initializer": [
                    "self"
                ],
                "unit_forget_bias": [
                    "self"
                ],
                "kernel_regularizer": [
                    "self"
                ],
                "recurrent_regularizer": [
                    "self"
                ],
                "bias_regularizer": [
                    "self"
                ],
                "kernel_constraint": [
                    "self"
                ],
                "recurrent_constraint": [
                    "self"
                ],
                "bias_constraint": [
                    "self"
                ],
                "dropout": [
                    "self"
                ],
                "recurrent_dropout": [
                    "self"
                ],
                "implementation": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.local": {
            "get_locallyconnected_mask": [
                "input_shape",
                "kernel_shape",
                "strides",
                "padding",
                "data_format"
            ],
            "local_conv_matmul": [
                "inputs",
                "kernel",
                "kernel_mask",
                "output_shape"
            ],
            "local_conv_sparse_matmul": [
                "inputs",
                "kernel",
                "kernel_idxs",
                "kernel_shape",
                "output_shape"
            ],
            "make_2d": [
                "tensor",
                "split_dim"
            ],
            "LocallyConnected1D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "implementation"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "LocallyConnected2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "implementation"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.wrappers": {
            "Wrapper": {
                "__init__": [
                    "self",
                    "layer"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "activity_regularizer": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "TimeDistributed": {
                "__init__": [
                    "self",
                    "layer"
                ],
                "_get_shape_tuple": [
                    "self",
                    "init_tuple",
                    "tensor",
                    "start_idx",
                    "int_shape"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training",
                    "mask"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ]
            },
            "Bidirectional": {
                "__init__": [
                    "self",
                    "layer",
                    "merge_mode",
                    "weights",
                    "backward_layer"
                ],
                "_verify_layer_config": [
                    "self"
                ],
                "_recreate_layer_from_config": [
                    "self",
                    "layer",
                    "go_backwards"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "constants"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training",
                    "mask",
                    "initial_state",
                    "constants"
                ],
                "reset_states": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "constraints": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.pooling": {
            "Pooling1D": {
                "__init__": [
                    "self",
                    "pool_function",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MaxPooling1D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format"
                ]
            },
            "AveragePooling1D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format"
                ]
            },
            "Pooling2D": {
                "__init__": [
                    "self",
                    "pool_function",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MaxPooling2D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format"
                ]
            },
            "AveragePooling2D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format"
                ]
            },
            "Pooling3D": {
                "__init__": [
                    "self",
                    "pool_function",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "MaxPooling3D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format"
                ]
            },
            "AveragePooling3D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format"
                ]
            },
            "GlobalPooling1D": {
                "__init__": [
                    "self",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GlobalAveragePooling1D": {
                "__init__": [
                    "self",
                    "data_format"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ]
            },
            "GlobalMaxPooling1D": {
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "GlobalPooling2D": {
                "__init__": [
                    "self",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GlobalAveragePooling2D": {
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "GlobalMaxPooling2D": {
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "GlobalPooling3D": {
                "__init__": [
                    "self",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GlobalAveragePooling3D": {
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "GlobalMaxPooling3D": {
                "call": [
                    "self",
                    "inputs"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.advanced_activations": {
            "LeakyReLU": {
                "__init__": [
                    "self",
                    "alpha"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "PReLU": {
                "__init__": [
                    "self",
                    "alpha_initializer",
                    "alpha_regularizer",
                    "alpha_constraint",
                    "shared_axes"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "ELU": {
                "__init__": [
                    "self",
                    "alpha"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "ThresholdedReLU": {
                "__init__": [
                    "self",
                    "theta"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "Softmax": {
                "__init__": [
                    "self",
                    "axis"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "ReLU": {
                "__init__": [
                    "self",
                    "max_value",
                    "negative_slope",
                    "threshold"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.serialization": {
            "serialize": [
                "layer"
            ],
            "deserialize": [
                "config",
                "custom_objects"
            ]
        },
        "tensorflow_core.python.keras.layers.embeddings": {
            "Embedding": {
                "__init__": [
                    "self",
                    "input_dim",
                    "output_dim",
                    "embeddings_initializer",
                    "embeddings_regularizer",
                    "activity_regularizer",
                    "embeddings_constraint",
                    "mask_zero",
                    "input_length"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.convolutional": {
            "Conv": {
                "__init__": [
                    "self",
                    "rank",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ],
                "_compute_causal_padding": [
                    "self"
                ]
            },
            "Conv1D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "Conv2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint"
                ]
            },
            "Conv3D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint"
                ]
            },
            "Conv2DTranspose": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "output_padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Conv3DTranspose": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "output_padding",
                    "data_format",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "SeparableConv": {
                "__init__": [
                    "self",
                    "rank",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "depth_multiplier",
                    "activation",
                    "use_bias",
                    "depthwise_initializer",
                    "pointwise_initializer",
                    "bias_initializer",
                    "depthwise_regularizer",
                    "pointwise_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "depthwise_constraint",
                    "pointwise_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "SeparableConv1D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "depth_multiplier",
                    "activation",
                    "use_bias",
                    "depthwise_initializer",
                    "pointwise_initializer",
                    "bias_initializer",
                    "depthwise_regularizer",
                    "pointwise_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "depthwise_constraint",
                    "pointwise_constraint",
                    "bias_constraint"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "SeparableConv2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "depth_multiplier",
                    "activation",
                    "use_bias",
                    "depthwise_initializer",
                    "pointwise_initializer",
                    "bias_initializer",
                    "depthwise_regularizer",
                    "pointwise_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "depthwise_constraint",
                    "pointwise_constraint",
                    "bias_constraint"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "DepthwiseConv2D": {
                "__init__": [
                    "self",
                    "kernel_size",
                    "strides",
                    "padding",
                    "depth_multiplier",
                    "data_format",
                    "activation",
                    "use_bias",
                    "depthwise_initializer",
                    "bias_initializer",
                    "depthwise_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "depthwise_constraint",
                    "bias_constraint"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "UpSampling1D": {
                "__init__": [
                    "self",
                    "size"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "UpSampling2D": {
                "__init__": [
                    "self",
                    "size",
                    "data_format",
                    "interpolation"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "UpSampling3D": {
                "__init__": [
                    "self",
                    "size",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "ZeroPadding1D": {
                "__init__": [
                    "self",
                    "padding"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "ZeroPadding2D": {
                "__init__": [
                    "self",
                    "padding",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "ZeroPadding3D": {
                "__init__": [
                    "self",
                    "padding",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Cropping1D": {
                "__init__": [
                    "self",
                    "cropping"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Cropping2D": {
                "__init__": [
                    "self",
                    "cropping",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Cropping3D": {
                "__init__": [
                    "self",
                    "cropping",
                    "data_format"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.rnn_cell_wrapper_v2": {
            "_RNNCellWrapperV2": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "DropoutWrapper": {
                "__init__": [
                    "self"
                ]
            },
            "ResidualWrapper": {
                "__init__": [
                    "self"
                ]
            },
            "DeviceWrapper": {
                "__init__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.recurrent_v2": {
            "standard_gru": [
                "inputs",
                "init_h",
                "kernel",
                "recurrent_kernel",
                "bias",
                "activation",
                "recurrent_activation",
                "mask",
                "time_major",
                "go_backwards"
            ],
            "cudnn_gru": [
                "inputs",
                "init_h",
                "kernel",
                "recurrent_kernel",
                "bias",
                "mask",
                "time_major",
                "go_backwards"
            ],
            "gru_with_backend_selection": [
                "inputs",
                "init_h",
                "kernel",
                "recurrent_kernel",
                "bias",
                "mask",
                "time_major",
                "go_backwards",
                "activation",
                "recurrent_activation"
            ],
            "_canonical_to_params": [
                "weights",
                "biases",
                "shape",
                "transpose_weights"
            ],
            "standard_lstm": [
                "inputs",
                "init_h",
                "init_c",
                "kernel",
                "recurrent_kernel",
                "bias",
                "activation",
                "recurrent_activation",
                "mask",
                "time_major",
                "go_backwards"
            ],
            "cudnn_lstm": [
                "inputs",
                "init_h",
                "init_c",
                "kernel",
                "recurrent_kernel",
                "bias",
                "mask",
                "time_major",
                "go_backwards"
            ],
            "lstm_with_backend_selection": [
                "inputs",
                "init_h",
                "init_c",
                "kernel",
                "recurrent_kernel",
                "bias",
                "mask",
                "time_major",
                "go_backwards",
                "activation",
                "recurrent_activation"
            ],
            "is_sequence_right_padded": [
                "mask",
                "time_major"
            ],
            "calculate_sequence_by_mask": [
                "mask",
                "time_major"
            ],
            "_generate_defun_backend": [
                "unique_api_name",
                "preferred_device",
                "func"
            ],
            "_get_context_device_type": [],
            "_runtime": [
                "runtime_name"
            ],
            "GRUCell": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation",
                    "reset_after"
                ]
            },
            "GRU": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "unroll",
                    "time_major",
                    "reset_after"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state"
                ],
                "_defun_gru_call": [
                    "self",
                    "inputs",
                    "initial_state",
                    "training",
                    "mask"
                ]
            },
            "LSTMCell": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "unit_forget_bias",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation"
                ]
            },
            "LSTM": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "unit_forget_bias",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout",
                    "implementation",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "time_major",
                    "unroll"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.convolutional_recurrent": {
            "ConvRNN2D": {
                "__init__": [
                    "self",
                    "cell",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "unroll"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "get_initial_state": [
                    "self",
                    "inputs"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "constants"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state",
                    "constants"
                ],
                "reset_states": [
                    "self",
                    "states"
                ]
            },
            "ConvLSTM2DCell": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "unit_forget_bias",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "dropout",
                    "recurrent_dropout"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "states",
                    "training"
                ],
                "input_conv": [
                    "self",
                    "x",
                    "w",
                    "b",
                    "padding"
                ],
                "recurrent_conv": [
                    "self",
                    "x",
                    "w"
                ],
                "get_config": [
                    "self"
                ]
            },
            "ConvLSTM2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "recurrent_activation",
                    "use_bias",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "unit_forget_bias",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "return_sequences",
                    "go_backwards",
                    "stateful",
                    "dropout",
                    "recurrent_dropout"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state"
                ],
                "filters": [
                    "self"
                ],
                "kernel_size": [
                    "self"
                ],
                "strides": [
                    "self"
                ],
                "padding": [
                    "self"
                ],
                "data_format": [
                    "self"
                ],
                "dilation_rate": [
                    "self"
                ],
                "activation": [
                    "self"
                ],
                "recurrent_activation": [
                    "self"
                ],
                "use_bias": [
                    "self"
                ],
                "kernel_initializer": [
                    "self"
                ],
                "recurrent_initializer": [
                    "self"
                ],
                "bias_initializer": [
                    "self"
                ],
                "unit_forget_bias": [
                    "self"
                ],
                "kernel_regularizer": [
                    "self"
                ],
                "recurrent_regularizer": [
                    "self"
                ],
                "bias_regularizer": [
                    "self"
                ],
                "kernel_constraint": [
                    "self"
                ],
                "recurrent_constraint": [
                    "self"
                ],
                "bias_constraint": [
                    "self"
                ],
                "dropout": [
                    "self"
                ],
                "recurrent_dropout": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.cudnn_recurrent": {
            "_CuDNNRNN": {
                "__init__": [
                    "self",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful",
                    "time_major"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "training",
                    "initial_state"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "losses": [
                    "self"
                ],
                "get_losses_for": [
                    "self",
                    "inputs"
                ]
            },
            "CuDNNGRU": {
                "__init__": [
                    "self",
                    "units",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful"
                ],
                "cell": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_process_batch": [
                    "self",
                    "inputs",
                    "initial_state"
                ],
                "get_config": [
                    "self"
                ]
            },
            "CuDNNLSTM": {
                "__init__": [
                    "self",
                    "units",
                    "kernel_initializer",
                    "recurrent_initializer",
                    "bias_initializer",
                    "unit_forget_bias",
                    "kernel_regularizer",
                    "recurrent_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "recurrent_constraint",
                    "bias_constraint",
                    "return_sequences",
                    "return_state",
                    "go_backwards",
                    "stateful"
                ],
                "cell": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_process_batch": [
                    "self",
                    "inputs",
                    "initial_state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.layers": {},
        "tensorflow_core.python.keras.layers.preprocessing.normalization_v1": {
            "Normalization": {}
        },
        "tensorflow_core.python.keras.layers.preprocessing.normalization": {
            "Normalization": {
                "__init__": [
                    "self",
                    "axis",
                    "dtype"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "compute_output_signature": [
                    "self",
                    "input_spec"
                ],
                "get_config": [
                    "self"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.preprocessing.preprocessing_test_utils": {
            "PreprocessingLayerTest": {
                "assertAllCloseOrEqual": [
                    "self",
                    "a",
                    "b",
                    "msg"
                ],
                "assert_extracted_output_equal": [
                    "self",
                    "combiner",
                    "acc1",
                    "acc2",
                    "msg"
                ],
                "validate_accumulator_computation": [
                    "self",
                    "combiner",
                    "data",
                    "expected"
                ],
                "validate_accumulator_extract": [
                    "self",
                    "combiner",
                    "data",
                    "expected"
                ],
                "validate_accumulator_extract_and_restore": [
                    "self",
                    "combiner",
                    "data",
                    "expected"
                ],
                "validate_accumulator_serialize_and_deserialize": [
                    "self",
                    "combiner",
                    "data",
                    "expected"
                ],
                "validate_accumulator_uniqueness": [
                    "self",
                    "combiner",
                    "data"
                ]
            }
        },
        "tensorflow_core.python.keras.layers.preprocessing": {},
        "tensorflow_core.python.keras.utils.mode_keys": {},
        "tensorflow_core.python.keras.utils.io_utils": {
            "ask_to_proceed_with_overwrite": [
                "filepath"
            ],
            "HDF5Matrix": {
                "__init__": [
                    "self",
                    "datapath",
                    "dataset",
                    "start",
                    "end",
                    "normalizer"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "shape": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "_to_type_spec": [
                    "value"
                ]
            }
        },
        "tensorflow_core.python.keras.utils.conv_utils": {
            "convert_data_format": [
                "data_format",
                "ndim"
            ],
            "normalize_tuple": [
                "value",
                "n",
                "name"
            ],
            "conv_output_length": [
                "input_length",
                "filter_size",
                "padding",
                "stride",
                "dilation"
            ],
            "conv_input_length": [
                "output_length",
                "filter_size",
                "padding",
                "stride"
            ],
            "deconv_output_length": [
                "input_length",
                "filter_size",
                "padding",
                "output_padding",
                "stride",
                "dilation"
            ],
            "normalize_data_format": [
                "value"
            ],
            "normalize_padding": [
                "value"
            ],
            "convert_kernel": [
                "kernel"
            ],
            "conv_kernel_mask": [
                "input_shape",
                "kernel_shape",
                "strides",
                "padding"
            ],
            "conv_kernel_idxs": [
                "input_shape",
                "kernel_shape",
                "strides",
                "padding",
                "filters_in",
                "filters_out",
                "data_format"
            ],
            "conv_connected_inputs": [
                "input_shape",
                "kernel_shape",
                "output_position",
                "strides",
                "padding"
            ],
            "conv_output_shape": [
                "input_shape",
                "kernel_shape",
                "strides",
                "padding"
            ]
        },
        "tensorflow_core.python.keras.utils.layer_utils": {
            "get_source_inputs": [
                "tensor",
                "layer",
                "node_index"
            ],
            "count_params": [
                "weights"
            ],
            "print_summary": [
                "model",
                "line_length",
                "positions",
                "print_fn"
            ],
            "gather_trainable_weights": [
                "trainable",
                "sub_layers",
                "extra_variables"
            ],
            "gather_non_trainable_weights": [
                "trainable",
                "sub_layers",
                "extra_variables"
            ],
            "convert_all_kernels_in_model": [
                "model"
            ],
            "convert_dense_weights_data_format": [
                "dense",
                "previous_feature_map_shape",
                "target_data_format"
            ],
            "is_builtin_layer": [
                "layer"
            ]
        },
        "tensorflow_core.python.keras.utils.data_utils": {
            "is_generator_or_sequence": [
                "x"
            ],
            "_extract_archive": [
                "file_path",
                "path",
                "archive_format"
            ],
            "get_file": [
                "fname",
                "origin",
                "untar",
                "md5_hash",
                "file_hash",
                "cache_subdir",
                "hash_algorithm",
                "extract",
                "archive_format",
                "cache_dir"
            ],
            "_hash_file": [
                "fpath",
                "algorithm",
                "chunk_size"
            ],
            "validate_file": [
                "fpath",
                "file_hash",
                "algorithm",
                "chunk_size"
            ],
            "iter_sequence_infinite": [
                "seq"
            ],
            "get_worker_id_queue": [],
            "init_pool": [
                "seqs"
            ],
            "terminate_keras_multiprocessing_pools": [
                "grace_period",
                "use_sigkill"
            ],
            "get_index": [
                "uid",
                "i"
            ],
            "init_pool_generator": [
                "gens",
                "random_seed",
                "id_queue"
            ],
            "next_sample": [
                "uid"
            ],
            "Sequence": {
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__len__": [
                    "self"
                ],
                "on_epoch_end": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "SequenceEnqueuer": {
                "__init__": [
                    "self",
                    "sequence",
                    "use_multiprocessing"
                ],
                "is_running": [
                    "self"
                ],
                "start": [
                    "self",
                    "workers",
                    "max_queue_size"
                ],
                "_send_sequence": [
                    "self"
                ],
                "stop": [
                    "self",
                    "timeout"
                ],
                "__del__": [
                    "self"
                ],
                "_run": [
                    "self"
                ],
                "_get_executor_init": [
                    "self",
                    "workers"
                ],
                "get": [
                    "self"
                ]
            },
            "OrderedEnqueuer": {
                "__init__": [
                    "self",
                    "sequence",
                    "use_multiprocessing",
                    "shuffle"
                ],
                "_get_executor_init": [
                    "self",
                    "workers"
                ],
                "_wait_queue": [
                    "self"
                ],
                "_run": [
                    "self"
                ],
                "get": [
                    "self"
                ]
            },
            "GeneratorEnqueuer": {
                "__init__": [
                    "self",
                    "sequence",
                    "use_multiprocessing",
                    "random_seed"
                ],
                "_get_executor_init": [
                    "self",
                    "workers"
                ],
                "_run": [
                    "self"
                ],
                "get": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.utils.generic_utils": {
            "custom_object_scope": [],
            "get_custom_objects": [],
            "serialize_keras_class_and_config": [
                "cls_name",
                "cls_config"
            ],
            "serialize_keras_object": [
                "instance"
            ],
            "class_and_config_for_serialized_keras_object": [
                "config",
                "module_objects",
                "custom_objects",
                "printable_module_name"
            ],
            "deserialize_keras_object": [
                "identifier",
                "module_objects",
                "custom_objects",
                "printable_module_name"
            ],
            "func_dump": [
                "func"
            ],
            "func_load": [
                "code",
                "defaults",
                "closure",
                "globs"
            ],
            "has_arg": [
                "fn",
                "name",
                "accept_all"
            ],
            "make_batches": [
                "size",
                "batch_size"
            ],
            "slice_arrays": [
                "arrays",
                "start",
                "stop"
            ],
            "to_list": [
                "x"
            ],
            "object_list_uid": [
                "object_list"
            ],
            "to_snake_case": [
                "name"
            ],
            "is_all_none": [
                "structure"
            ],
            "check_for_unexpected_keys": [
                "name",
                "input_dict",
                "expected_values"
            ],
            "validate_kwargs": [
                "kwargs",
                "allowed_kwargs",
                "error_message"
            ],
            "CustomObjectScope": {
                "__init__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            },
            "Progbar": {
                "__init__": [
                    "self",
                    "target",
                    "width",
                    "verbose",
                    "interval",
                    "stateful_metrics",
                    "unit_name"
                ],
                "update": [
                    "self",
                    "current",
                    "values"
                ],
                "add": [
                    "self",
                    "n",
                    "values"
                ]
            }
        },
        "tensorflow_core.python.keras.utils.tf_utils": {
            "smart_cond": [
                "pred",
                "true_fn",
                "false_fn",
                "name"
            ],
            "constant_value": [
                "pred"
            ],
            "is_tensor_or_tensor_list": [
                "v"
            ],
            "get_reachable_from_inputs": [
                "inputs",
                "targets"
            ],
            "map_structure_with_atomic": [
                "is_atomic_fn",
                "map_fn",
                "nested"
            ],
            "convert_shapes": [
                "input_shape",
                "to_tuples"
            ],
            "convert_inner_node_data": [
                "nested",
                "wrap"
            ],
            "shape_type_conversion": [
                "fn"
            ],
            "are_all_symbolic_tensors": [
                "tensors"
            ],
            "is_symbolic_tensor": [
                "tensor"
            ],
            "register_symbolic_tensor_type": [
                "cls"
            ],
            "is_tensor_or_variable": [
                "x"
            ],
            "assert_no_legacy_layers": [
                "layers"
            ],
            "maybe_init_scope": [
                "layer"
            ],
            "graph_context_for_symbolic_tensors": [],
            "ListWrapper": {
                "__init__": [
                    "self",
                    "list_to_wrap"
                ],
                "as_list": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.keras.utils.metrics_utils": {
            "update_state_wrapper": [
                "update_state_fn"
            ],
            "result_wrapper": [
                "result_fn"
            ],
            "weakmethod": [
                "method"
            ],
            "assert_thresholds_range": [
                "thresholds"
            ],
            "parse_init_thresholds": [
                "thresholds",
                "default_threshold"
            ],
            "update_confusion_matrix_variables": [
                "variables_to_update",
                "y_true",
                "y_pred",
                "thresholds",
                "top_k",
                "class_id",
                "sample_weight"
            ],
            "_filter_top_k": [
                "x",
                "k"
            ],
            "ragged_assert_compatible_and_get_flat_values": [
                "values",
                "mask"
            ],
            "Reduction": {},
            "ConfusionMatrix": {},
            "AUCCurve": {
                "from_str": [
                    "key"
                ]
            },
            "AUCSummationMethod": {
                "from_str": [
                    "key"
                ]
            }
        },
        "tensorflow_core.python.keras.utils.kernelized_utils": {
            "_to_matrix": [
                "u"
            ],
            "_align_matrices": [
                "x",
                "y"
            ],
            "inner_product": [
                "u",
                "v"
            ],
            "exact_gaussian_kernel": [
                "x",
                "y",
                "stddev"
            ],
            "exact_laplacian_kernel": [
                "x",
                "y",
                "stddev"
            ]
        },
        "tensorflow_core.python.keras.utils.multi_gpu_utils": {
            "_get_available_devices": [],
            "_normalize_device_name": [
                "name"
            ],
            "multi_gpu_model": [
                "model",
                "gpus",
                "cpu_merge",
                "cpu_relocation"
            ]
        },
        "tensorflow_core.python.keras.utils.vis_utils": {
            "check_pydot": [],
            "is_wrapped_model": [
                "layer"
            ],
            "add_edge": [
                "dot",
                "src",
                "dst"
            ],
            "model_to_dot": [
                "model",
                "show_shapes",
                "show_layer_names",
                "rankdir",
                "expand_nested",
                "dpi",
                "subgraph"
            ],
            "plot_model": [
                "model",
                "to_file",
                "show_shapes",
                "show_layer_names",
                "rankdir",
                "expand_nested",
                "dpi"
            ]
        },
        "tensorflow_core.python.keras.utils.losses_utils": {
            "_safe_mean": [
                "losses",
                "num_present"
            ],
            "_num_elements": [
                "losses"
            ],
            "reduce_weighted_loss": [
                "weighted_losses",
                "reduction"
            ],
            "compute_weighted_loss": [
                "losses",
                "sample_weight",
                "reduction",
                "name"
            ],
            "scale_loss_for_distribution": [
                "loss_value"
            ]
        },
        "tensorflow_core.python.keras.utils.np_utils": {
            "to_categorical": [
                "y",
                "num_classes",
                "dtype"
            ],
            "normalize": [
                "x",
                "axis",
                "order"
            ]
        },
        "tensorflow_core.python.keras.utils": {},
        "tensorflow_core.python.keras.datasets.fashion_mnist": {
            "load_data": []
        },
        "tensorflow_core.python.keras.datasets.boston_housing": {
            "load_data": [
                "path",
                "test_split",
                "seed"
            ]
        },
        "tensorflow_core.python.keras.datasets.reuters": {
            "load_data": [
                "path",
                "num_words",
                "skip_top",
                "maxlen",
                "test_split",
                "seed",
                "start_char",
                "oov_char",
                "index_from"
            ],
            "get_word_index": [
                "path"
            ]
        },
        "tensorflow_core.python.keras.datasets.cifar": {
            "load_batch": [
                "fpath",
                "label_key"
            ]
        },
        "tensorflow_core.python.keras.datasets.mnist": {
            "load_data": [
                "path"
            ]
        },
        "tensorflow_core.python.keras.datasets.cifar100": {
            "load_data": [
                "label_mode"
            ]
        },
        "tensorflow_core.python.keras.datasets.imdb": {
            "load_data": [
                "path",
                "num_words",
                "skip_top",
                "maxlen",
                "seed",
                "start_char",
                "oov_char",
                "index_from"
            ],
            "get_word_index": [
                "path"
            ]
        },
        "tensorflow_core.python.keras.datasets.cifar10": {
            "load_data": []
        },
        "tensorflow_core.python.keras.datasets": {},
        "tensorflow_core.python.ops.default_gradient": {
            "get_zeros_dtype": [
                "t"
            ],
            "shape_and_dtype": [
                "t"
            ],
            "zeros_like": [
                "t"
            ]
        },
        "tensorflow_core.python.ops.gen_lookup_ops": {
            "hash_table": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "HashTable": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "hash_table_eager_fallback": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name",
                "ctx"
            ],
            "hash_table_v2": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "HashTableV2": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "hash_table_v2_eager_fallback": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name",
                "ctx"
            ],
            "initialize_table": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "InitializeTable": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "initialize_table_eager_fallback": [
                "table_handle",
                "keys",
                "values",
                "name",
                "ctx"
            ],
            "initialize_table_from_text_file": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name"
            ],
            "InitializeTableFromTextFile": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name"
            ],
            "initialize_table_from_text_file_eager_fallback": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name",
                "ctx"
            ],
            "initialize_table_from_text_file_v2": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name"
            ],
            "InitializeTableFromTextFileV2": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name"
            ],
            "initialize_table_from_text_file_v2_eager_fallback": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name",
                "ctx"
            ],
            "initialize_table_v2": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "InitializeTableV2": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "initialize_table_v2_eager_fallback": [
                "table_handle",
                "keys",
                "values",
                "name",
                "ctx"
            ],
            "lookup_table_export": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name"
            ],
            "LookupTableExport": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name"
            ],
            "lookup_table_export_eager_fallback": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name",
                "ctx"
            ],
            "lookup_table_export_v2": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name"
            ],
            "LookupTableExportV2": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name"
            ],
            "lookup_table_export_v2_eager_fallback": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name",
                "ctx"
            ],
            "lookup_table_find": [
                "table_handle",
                "keys",
                "default_value",
                "name"
            ],
            "LookupTableFind": [
                "table_handle",
                "keys",
                "default_value",
                "name"
            ],
            "lookup_table_find_eager_fallback": [
                "table_handle",
                "keys",
                "default_value",
                "name",
                "ctx"
            ],
            "lookup_table_find_v2": [
                "table_handle",
                "keys",
                "default_value",
                "name"
            ],
            "LookupTableFindV2": [
                "table_handle",
                "keys",
                "default_value",
                "name"
            ],
            "lookup_table_find_v2_eager_fallback": [
                "table_handle",
                "keys",
                "default_value",
                "name",
                "ctx"
            ],
            "lookup_table_import": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "LookupTableImport": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "lookup_table_import_eager_fallback": [
                "table_handle",
                "keys",
                "values",
                "name",
                "ctx"
            ],
            "lookup_table_import_v2": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "LookupTableImportV2": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "lookup_table_import_v2_eager_fallback": [
                "table_handle",
                "keys",
                "values",
                "name",
                "ctx"
            ],
            "lookup_table_insert": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "LookupTableInsert": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "lookup_table_insert_eager_fallback": [
                "table_handle",
                "keys",
                "values",
                "name",
                "ctx"
            ],
            "lookup_table_insert_v2": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "LookupTableInsertV2": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "lookup_table_insert_v2_eager_fallback": [
                "table_handle",
                "keys",
                "values",
                "name",
                "ctx"
            ],
            "lookup_table_remove_v2": [
                "table_handle",
                "keys",
                "name"
            ],
            "LookupTableRemoveV2": [
                "table_handle",
                "keys",
                "name"
            ],
            "lookup_table_remove_v2_eager_fallback": [
                "table_handle",
                "keys",
                "name",
                "ctx"
            ],
            "lookup_table_size": [
                "table_handle",
                "name"
            ],
            "LookupTableSize": [
                "table_handle",
                "name"
            ],
            "lookup_table_size_eager_fallback": [
                "table_handle",
                "name",
                "ctx"
            ],
            "lookup_table_size_v2": [
                "table_handle",
                "name"
            ],
            "LookupTableSizeV2": [
                "table_handle",
                "name"
            ],
            "lookup_table_size_v2_eager_fallback": [
                "table_handle",
                "name",
                "ctx"
            ],
            "mutable_dense_hash_table": [
                "empty_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name"
            ],
            "MutableDenseHashTable": [
                "empty_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name"
            ],
            "mutable_dense_hash_table_eager_fallback": [
                "empty_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name",
                "ctx"
            ],
            "mutable_dense_hash_table_v2": [
                "empty_key",
                "deleted_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name"
            ],
            "MutableDenseHashTableV2": [
                "empty_key",
                "deleted_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name"
            ],
            "mutable_dense_hash_table_v2_eager_fallback": [
                "empty_key",
                "deleted_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name",
                "ctx"
            ],
            "mutable_hash_table": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "MutableHashTable": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "mutable_hash_table_eager_fallback": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name",
                "ctx"
            ],
            "mutable_hash_table_of_tensors": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name"
            ],
            "MutableHashTableOfTensors": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name"
            ],
            "mutable_hash_table_of_tensors_eager_fallback": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name",
                "ctx"
            ],
            "mutable_hash_table_of_tensors_v2": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name"
            ],
            "MutableHashTableOfTensorsV2": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name"
            ],
            "mutable_hash_table_of_tensors_v2_eager_fallback": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name",
                "ctx"
            ],
            "mutable_hash_table_v2": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "MutableHashTableV2": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "mutable_hash_table_v2_eager_fallback": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.data_flow_grad": {
            "_DynamicPartitionGrads": [
                "op"
            ],
            "_DynamicStitchGrads": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.gen_resource_variable_ops": {
            "assign_add_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "AssignAddVariableOp": [
                "resource",
                "value",
                "name"
            ],
            "assign_add_variable_op_eager_fallback": [
                "resource",
                "value",
                "name",
                "ctx"
            ],
            "assign_sub_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "AssignSubVariableOp": [
                "resource",
                "value",
                "name"
            ],
            "assign_sub_variable_op_eager_fallback": [
                "resource",
                "value",
                "name",
                "ctx"
            ],
            "assign_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "AssignVariableOp": [
                "resource",
                "value",
                "name"
            ],
            "assign_variable_op_eager_fallback": [
                "resource",
                "value",
                "name",
                "ctx"
            ],
            "consume_mutex_lock": [
                "mutex_lock",
                "name"
            ],
            "ConsumeMutexLock": [
                "mutex_lock",
                "name"
            ],
            "consume_mutex_lock_eager_fallback": [
                "mutex_lock",
                "name",
                "ctx"
            ],
            "destroy_resource_op": [
                "resource",
                "ignore_lookup_error",
                "name"
            ],
            "DestroyResourceOp": [
                "resource",
                "ignore_lookup_error",
                "name"
            ],
            "destroy_resource_op_eager_fallback": [
                "resource",
                "ignore_lookup_error",
                "name",
                "ctx"
            ],
            "mutex_lock": [
                "mutex",
                "name"
            ],
            "MutexLock": [
                "mutex",
                "name"
            ],
            "mutex_lock_eager_fallback": [
                "mutex",
                "name",
                "ctx"
            ],
            "mutex_v2": [
                "container",
                "shared_name",
                "name"
            ],
            "MutexV2": [
                "container",
                "shared_name",
                "name"
            ],
            "mutex_v2_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "read_variable_op": [
                "resource",
                "dtype",
                "name"
            ],
            "ReadVariableOp": [
                "resource",
                "dtype",
                "name"
            ],
            "read_variable_op_eager_fallback": [
                "resource",
                "dtype",
                "name",
                "ctx"
            ],
            "resource_gather": [
                "resource",
                "indices",
                "dtype",
                "batch_dims",
                "validate_indices",
                "name"
            ],
            "ResourceGather": [
                "resource",
                "indices",
                "dtype",
                "batch_dims",
                "validate_indices",
                "name"
            ],
            "resource_gather_eager_fallback": [
                "resource",
                "indices",
                "dtype",
                "batch_dims",
                "validate_indices",
                "name",
                "ctx"
            ],
            "resource_gather_nd": [
                "resource",
                "indices",
                "dtype",
                "name"
            ],
            "ResourceGatherNd": [
                "resource",
                "indices",
                "dtype",
                "name"
            ],
            "resource_gather_nd_eager_fallback": [
                "resource",
                "indices",
                "dtype",
                "name",
                "ctx"
            ],
            "resource_scatter_add": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "ResourceScatterAdd": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "resource_scatter_add_eager_fallback": [
                "resource",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "resource_scatter_div": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "ResourceScatterDiv": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "resource_scatter_div_eager_fallback": [
                "resource",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "resource_scatter_max": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "ResourceScatterMax": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "resource_scatter_max_eager_fallback": [
                "resource",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "resource_scatter_min": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "ResourceScatterMin": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "resource_scatter_min_eager_fallback": [
                "resource",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "resource_scatter_mul": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "ResourceScatterMul": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "resource_scatter_mul_eager_fallback": [
                "resource",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "resource_scatter_sub": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "ResourceScatterSub": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "resource_scatter_sub_eager_fallback": [
                "resource",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "resource_scatter_update": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "ResourceScatterUpdate": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "resource_scatter_update_eager_fallback": [
                "resource",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "var_handle_op": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "VarHandleOp": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "var_handle_op_eager_fallback": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "var_is_initialized_op": [
                "resource",
                "name"
            ],
            "VarIsInitializedOp": [
                "resource",
                "name"
            ],
            "var_is_initialized_op_eager_fallback": [
                "resource",
                "name",
                "ctx"
            ],
            "variable_shape": [
                "input",
                "out_type",
                "name"
            ],
            "VariableShape": [
                "input",
                "out_type",
                "name"
            ],
            "variable_shape_eager_fallback": [
                "input",
                "out_type",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_user_ops": {
            "fact": [
                "name"
            ],
            "Fact": [
                "name"
            ],
            "fact_eager_fallback": [
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.summary_op_util": {
            "collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "clean_tag": [
                "name"
            ],
            "summary_scope": [
                "name",
                "family",
                "default_name",
                "values"
            ]
        },
        "tensorflow_core.python.ops.gen_set_ops": {
            "dense_to_dense_set_operation": [
                "set1",
                "set2",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "DenseToDenseSetOperation": [
                "set1",
                "set2",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "dense_to_dense_set_operation_eager_fallback": [
                "set1",
                "set2",
                "set_operation",
                "validate_indices",
                "name",
                "ctx"
            ],
            "dense_to_sparse_set_operation": [
                "set1",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "DenseToSparseSetOperation": [
                "set1",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "dense_to_sparse_set_operation_eager_fallback": [
                "set1",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name",
                "ctx"
            ],
            "set_size": [
                "set_indices",
                "set_values",
                "set_shape",
                "validate_indices",
                "name"
            ],
            "SetSize": [
                "set_indices",
                "set_values",
                "set_shape",
                "validate_indices",
                "name"
            ],
            "set_size_eager_fallback": [
                "set_indices",
                "set_values",
                "set_shape",
                "validate_indices",
                "name",
                "ctx"
            ],
            "sparse_to_sparse_set_operation": [
                "set1_indices",
                "set1_values",
                "set1_shape",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "SparseToSparseSetOperation": [
                "set1_indices",
                "set1_values",
                "set1_shape",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "sparse_to_sparse_set_operation_eager_fallback": [
                "set1_indices",
                "set1_values",
                "set1_shape",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.variables": {
            "default_variable_creator": [
                "_"
            ],
            "default_variable_creator_v2": [
                "_"
            ],
            "_make_getter": [
                "captured_getter",
                "captured_previous"
            ],
            "validate_synchronization_aggregation_trainable": [
                "synchronization",
                "aggregation",
                "trainable",
                "name"
            ],
            "_try_guard_against_uninitialized_dependencies": [
                "name",
                "initial_value"
            ],
            "_has_cycle": [
                "op",
                "state"
            ],
            "_safe_initial_value_from_tensor": [
                "name",
                "tensor",
                "op_cache"
            ],
            "_safe_initial_value_from_op": [
                "name",
                "op",
                "op_cache"
            ],
            "_find_initialized_value_for_variable": [
                "variable_op"
            ],
            "global_variables": [
                "scope"
            ],
            "all_variables": [],
            "_all_saveable_objects": [
                "scope"
            ],
            "local_variables": [
                "scope"
            ],
            "model_variables": [
                "scope"
            ],
            "trainable_variables": [
                "scope"
            ],
            "moving_average_variables": [
                "scope"
            ],
            "variables_initializer": [
                "var_list",
                "name"
            ],
            "initialize_variables": [
                "var_list",
                "name"
            ],
            "global_variables_initializer": [],
            "initialize_all_variables": [],
            "local_variables_initializer": [],
            "initialize_local_variables": [],
            "is_variable_initialized": [
                "variable"
            ],
            "assert_variables_initialized": [
                "var_list"
            ],
            "report_uninitialized_variables": [
                "var_list",
                "name"
            ],
            "VariableSynchronization": {},
            "VariableAggregationV2": {
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "VariableAggregation": {
                "__hash__": [
                    "self"
                ]
            },
            "VariableMetaclass": {
                "_variable_v1_call": [
                    "cls",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "variable_def",
                    "dtype",
                    "expected_shape",
                    "import_scope",
                    "constraint",
                    "use_resource",
                    "synchronization",
                    "aggregation",
                    "shape"
                ],
                "_variable_v2_call": [
                    "cls",
                    "initial_value",
                    "trainable",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "variable_def",
                    "dtype",
                    "import_scope",
                    "constraint",
                    "synchronization",
                    "aggregation",
                    "shape"
                ],
                "__call__": [
                    "cls"
                ]
            },
            "Variable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "variable_def",
                    "dtype",
                    "import_scope",
                    "constraint",
                    "synchronization",
                    "aggregation",
                    "shape"
                ],
                "__repr__": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "trainable": [
                    "self"
                ],
                "synchronization": [
                    "self"
                ],
                "aggregation": [
                    "self"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "initialized_value": [
                    "self"
                ],
                "initial_value": [
                    "self"
                ],
                "constraint": [
                    "self"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_add": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_sub": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "scatter_sub": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_add": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_max": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_min": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_mul": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_div": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_update": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "batch_scatter_update": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_nd_sub": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "scatter_nd_add": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "scatter_nd_update": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "sparse_read": [
                    "self",
                    "indices",
                    "name"
                ],
                "gather_nd": [
                    "self",
                    "indices",
                    "name"
                ],
                "count_up_to": [
                    "self",
                    "limit"
                ],
                "load": [
                    "self",
                    "value",
                    "session"
                ],
                "_TensorConversionFunction": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "_OverloadAllOperators": [
                    "cls"
                ],
                "_OverloadOperator": [
                    "cls",
                    "operator"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__iter__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_shared_name": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "variable_def",
                    "import_scope"
                ],
                "_set_save_slice_info": [
                    "self",
                    "save_slice_info"
                ],
                "_get_save_slice_info": [
                    "self"
                ],
                "experimental_ref": [
                    "self"
                ]
            },
            "VariableV1": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "variable_def",
                    "dtype",
                    "expected_shape",
                    "import_scope",
                    "constraint",
                    "use_resource",
                    "synchronization",
                    "aggregation",
                    "shape"
                ]
            },
            "RefVariable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "variable_def",
                    "dtype",
                    "expected_shape",
                    "import_scope",
                    "constraint",
                    "synchronization",
                    "aggregation",
                    "shape"
                ],
                "__repr__": [
                    "self"
                ],
                "_init_from_args": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "dtype",
                    "expected_shape",
                    "constraint",
                    "synchronization",
                    "aggregation",
                    "shape"
                ],
                "_init_from_proto": [
                    "self",
                    "variable_def",
                    "import_scope"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "_ref": [
                    "self"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "trainable": [
                    "self"
                ],
                "synchronization": [
                    "self"
                ],
                "aggregation": [
                    "self"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "initial_value": [
                    "self"
                ],
                "constraint": [
                    "self"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_add": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_sub": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "scatter_sub": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_add": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_max": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_min": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_mul": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_div": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_update": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "batch_scatter_update": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_nd_sub": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "scatter_nd_add": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "scatter_nd_update": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "_strided_slice_assign": [
                    "self",
                    "begin",
                    "end",
                    "strides",
                    "value",
                    "name",
                    "begin_mask",
                    "end_mask",
                    "ellipsis_mask",
                    "new_axis_mask",
                    "shrink_axis_mask"
                ],
                "count_up_to": [
                    "self",
                    "limit"
                ],
                "_TensorConversionFunction": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "name": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "_distribute_strategy": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "__irealdiv__": [
                    "self",
                    "other"
                ],
                "__ipow__": [
                    "self",
                    "other"
                ]
            },
            "PartitionedVariable": {
                "__init__": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "variable_list",
                    "partitions"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "_partition_axes": [
                    "self"
                ],
                "_concat": [
                    "self"
                ],
                "as_tensor": [
                    "self"
                ],
                "_TensorConversionFunction": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_distribute_strategy": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_get_variable_list": [
                    "self"
                ],
                "_get_partitions": [
                    "self"
                ],
                "_apply_assign_fn": [
                    "self",
                    "assign_fn",
                    "value"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_add": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_sub": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ]
            },
            "AbstractVariableMetaclass": {},
            "AbstractVariable": {}
        },
        "tensorflow_core.python.ops.gen_math_ops": {
            "_abs": [
                "x",
                "name"
            ],
            "Abs": [
                "x",
                "name"
            ],
            "_abs_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "accumulate_nv2": [
                "inputs",
                "shape",
                "name"
            ],
            "AccumulateNV2": [
                "inputs",
                "shape",
                "name"
            ],
            "accumulate_nv2_eager_fallback": [
                "inputs",
                "shape",
                "name",
                "ctx"
            ],
            "acos": [
                "x",
                "name"
            ],
            "Acos": [
                "x",
                "name"
            ],
            "acos_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "acosh": [
                "x",
                "name"
            ],
            "Acosh": [
                "x",
                "name"
            ],
            "acosh_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "add": [
                "x",
                "y",
                "name"
            ],
            "Add": [
                "x",
                "y",
                "name"
            ],
            "add_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "add_n": [
                "inputs",
                "name"
            ],
            "AddN": [
                "inputs",
                "name"
            ],
            "add_n_eager_fallback": [
                "inputs",
                "name",
                "ctx"
            ],
            "add_v2": [
                "x",
                "y",
                "name"
            ],
            "AddV2": [
                "x",
                "y",
                "name"
            ],
            "add_v2_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "_all": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "All": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "_all_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "angle": [
                "input",
                "Tout",
                "name"
            ],
            "Angle": [
                "input",
                "Tout",
                "name"
            ],
            "angle_eager_fallback": [
                "input",
                "Tout",
                "name",
                "ctx"
            ],
            "_any": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "Any": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "_any_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "approximate_equal": [
                "x",
                "y",
                "tolerance",
                "name"
            ],
            "ApproximateEqual": [
                "x",
                "y",
                "tolerance",
                "name"
            ],
            "approximate_equal_eager_fallback": [
                "x",
                "y",
                "tolerance",
                "name",
                "ctx"
            ],
            "arg_max": [
                "input",
                "dimension",
                "output_type",
                "name"
            ],
            "ArgMax": [
                "input",
                "dimension",
                "output_type",
                "name"
            ],
            "arg_max_eager_fallback": [
                "input",
                "dimension",
                "output_type",
                "name",
                "ctx"
            ],
            "arg_min": [
                "input",
                "dimension",
                "output_type",
                "name"
            ],
            "ArgMin": [
                "input",
                "dimension",
                "output_type",
                "name"
            ],
            "arg_min_eager_fallback": [
                "input",
                "dimension",
                "output_type",
                "name",
                "ctx"
            ],
            "asin": [
                "x",
                "name"
            ],
            "Asin": [
                "x",
                "name"
            ],
            "asin_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "asinh": [
                "x",
                "name"
            ],
            "Asinh": [
                "x",
                "name"
            ],
            "asinh_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "atan": [
                "x",
                "name"
            ],
            "Atan": [
                "x",
                "name"
            ],
            "atan_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "atan2": [
                "y",
                "x",
                "name"
            ],
            "Atan2": [
                "y",
                "x",
                "name"
            ],
            "atan2_eager_fallback": [
                "y",
                "x",
                "name",
                "ctx"
            ],
            "atanh": [
                "x",
                "name"
            ],
            "Atanh": [
                "x",
                "name"
            ],
            "atanh_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "batch_mat_mul": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name"
            ],
            "BatchMatMul": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name"
            ],
            "batch_mat_mul_eager_fallback": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name",
                "ctx"
            ],
            "batch_mat_mul_v2": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name"
            ],
            "BatchMatMulV2": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name"
            ],
            "batch_mat_mul_v2_eager_fallback": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name",
                "ctx"
            ],
            "bessel_i0e": [
                "x",
                "name"
            ],
            "BesselI0e": [
                "x",
                "name"
            ],
            "bessel_i0e_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "bessel_i1e": [
                "x",
                "name"
            ],
            "BesselI1e": [
                "x",
                "name"
            ],
            "bessel_i1e_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "betainc": [
                "a",
                "b",
                "x",
                "name"
            ],
            "Betainc": [
                "a",
                "b",
                "x",
                "name"
            ],
            "betainc_eager_fallback": [
                "a",
                "b",
                "x",
                "name",
                "ctx"
            ],
            "bincount": [
                "arr",
                "size",
                "weights",
                "name"
            ],
            "Bincount": [
                "arr",
                "size",
                "weights",
                "name"
            ],
            "bincount_eager_fallback": [
                "arr",
                "size",
                "weights",
                "name",
                "ctx"
            ],
            "bucketize": [
                "input",
                "boundaries",
                "name"
            ],
            "Bucketize": [
                "input",
                "boundaries",
                "name"
            ],
            "bucketize_eager_fallback": [
                "input",
                "boundaries",
                "name",
                "ctx"
            ],
            "cast": [
                "x",
                "DstT",
                "Truncate",
                "name"
            ],
            "Cast": [
                "x",
                "DstT",
                "Truncate",
                "name"
            ],
            "cast_eager_fallback": [
                "x",
                "DstT",
                "Truncate",
                "name",
                "ctx"
            ],
            "ceil": [
                "x",
                "name"
            ],
            "Ceil": [
                "x",
                "name"
            ],
            "ceil_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "_clip_by_value": [
                "t",
                "clip_value_min",
                "clip_value_max",
                "name"
            ],
            "ClipByValue": [
                "t",
                "clip_value_min",
                "clip_value_max",
                "name"
            ],
            "_clip_by_value_eager_fallback": [
                "t",
                "clip_value_min",
                "clip_value_max",
                "name",
                "ctx"
            ],
            "compare_and_bitpack": [
                "input",
                "threshold",
                "name"
            ],
            "CompareAndBitpack": [
                "input",
                "threshold",
                "name"
            ],
            "compare_and_bitpack_eager_fallback": [
                "input",
                "threshold",
                "name",
                "ctx"
            ],
            "_complex": [
                "real",
                "imag",
                "Tout",
                "name"
            ],
            "Complex": [
                "real",
                "imag",
                "Tout",
                "name"
            ],
            "_complex_eager_fallback": [
                "real",
                "imag",
                "Tout",
                "name",
                "ctx"
            ],
            "complex_abs": [
                "x",
                "Tout",
                "name"
            ],
            "ComplexAbs": [
                "x",
                "Tout",
                "name"
            ],
            "complex_abs_eager_fallback": [
                "x",
                "Tout",
                "name",
                "ctx"
            ],
            "conj": [
                "input",
                "name"
            ],
            "Conj": [
                "input",
                "name"
            ],
            "conj_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "cos": [
                "x",
                "name"
            ],
            "Cos": [
                "x",
                "name"
            ],
            "cos_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "cosh": [
                "x",
                "name"
            ],
            "Cosh": [
                "x",
                "name"
            ],
            "cosh_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "cross": [
                "a",
                "b",
                "name"
            ],
            "Cross": [
                "a",
                "b",
                "name"
            ],
            "cross_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "cumprod": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "Cumprod": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumprod_eager_fallback": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name",
                "ctx"
            ],
            "cumsum": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "Cumsum": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumsum_eager_fallback": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name",
                "ctx"
            ],
            "cumulative_logsumexp": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "CumulativeLogsumexp": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumulative_logsumexp_eager_fallback": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name",
                "ctx"
            ],
            "digamma": [
                "x",
                "name"
            ],
            "Digamma": [
                "x",
                "name"
            ],
            "digamma_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "div": [
                "x",
                "y",
                "name"
            ],
            "Div": [
                "x",
                "y",
                "name"
            ],
            "div_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "div_no_nan": [
                "x",
                "y",
                "name"
            ],
            "DivNoNan": [
                "x",
                "y",
                "name"
            ],
            "div_no_nan_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "equal": [
                "x",
                "y",
                "name"
            ],
            "Equal": [
                "x",
                "y",
                "name"
            ],
            "equal_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "erf": [
                "x",
                "name"
            ],
            "Erf": [
                "x",
                "name"
            ],
            "erf_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "erfc": [
                "x",
                "name"
            ],
            "Erfc": [
                "x",
                "name"
            ],
            "erfc_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "euclidean_norm": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "EuclideanNorm": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "euclidean_norm_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "exp": [
                "x",
                "name"
            ],
            "Exp": [
                "x",
                "name"
            ],
            "exp_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "expm1": [
                "x",
                "name"
            ],
            "Expm1": [
                "x",
                "name"
            ],
            "expm1_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "floor": [
                "x",
                "name"
            ],
            "Floor": [
                "x",
                "name"
            ],
            "floor_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "floor_div": [
                "x",
                "y",
                "name"
            ],
            "FloorDiv": [
                "x",
                "y",
                "name"
            ],
            "floor_div_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "floor_mod": [
                "x",
                "y",
                "name"
            ],
            "FloorMod": [
                "x",
                "y",
                "name"
            ],
            "floor_mod_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "greater": [
                "x",
                "y",
                "name"
            ],
            "Greater": [
                "x",
                "y",
                "name"
            ],
            "greater_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "greater_equal": [
                "x",
                "y",
                "name"
            ],
            "GreaterEqual": [
                "x",
                "y",
                "name"
            ],
            "greater_equal_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "_histogram_fixed_width": [
                "values",
                "value_range",
                "nbins",
                "dtype",
                "name"
            ],
            "HistogramFixedWidth": [
                "values",
                "value_range",
                "nbins",
                "dtype",
                "name"
            ],
            "_histogram_fixed_width_eager_fallback": [
                "values",
                "value_range",
                "nbins",
                "dtype",
                "name",
                "ctx"
            ],
            "igamma": [
                "a",
                "x",
                "name"
            ],
            "Igamma": [
                "a",
                "x",
                "name"
            ],
            "igamma_eager_fallback": [
                "a",
                "x",
                "name",
                "ctx"
            ],
            "igamma_grad_a": [
                "a",
                "x",
                "name"
            ],
            "IgammaGradA": [
                "a",
                "x",
                "name"
            ],
            "igamma_grad_a_eager_fallback": [
                "a",
                "x",
                "name",
                "ctx"
            ],
            "igammac": [
                "a",
                "x",
                "name"
            ],
            "Igammac": [
                "a",
                "x",
                "name"
            ],
            "igammac_eager_fallback": [
                "a",
                "x",
                "name",
                "ctx"
            ],
            "imag": [
                "input",
                "Tout",
                "name"
            ],
            "Imag": [
                "input",
                "Tout",
                "name"
            ],
            "imag_eager_fallback": [
                "input",
                "Tout",
                "name",
                "ctx"
            ],
            "inv": [
                "x",
                "name"
            ],
            "Inv": [
                "x",
                "name"
            ],
            "inv_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "inv_grad": [
                "y",
                "dy",
                "name"
            ],
            "InvGrad": [
                "y",
                "dy",
                "name"
            ],
            "inv_grad_eager_fallback": [
                "y",
                "dy",
                "name",
                "ctx"
            ],
            "is_finite": [
                "x",
                "name"
            ],
            "IsFinite": [
                "x",
                "name"
            ],
            "is_finite_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "is_inf": [
                "x",
                "name"
            ],
            "IsInf": [
                "x",
                "name"
            ],
            "is_inf_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "is_nan": [
                "x",
                "name"
            ],
            "IsNan": [
                "x",
                "name"
            ],
            "is_nan_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "less": [
                "x",
                "y",
                "name"
            ],
            "Less": [
                "x",
                "y",
                "name"
            ],
            "less_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "less_equal": [
                "x",
                "y",
                "name"
            ],
            "LessEqual": [
                "x",
                "y",
                "name"
            ],
            "less_equal_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "lgamma": [
                "x",
                "name"
            ],
            "Lgamma": [
                "x",
                "name"
            ],
            "lgamma_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "lin_space": [
                "start",
                "stop",
                "num",
                "name"
            ],
            "LinSpace": [
                "start",
                "stop",
                "num",
                "name"
            ],
            "lin_space_eager_fallback": [
                "start",
                "stop",
                "num",
                "name",
                "ctx"
            ],
            "log": [
                "x",
                "name"
            ],
            "Log": [
                "x",
                "name"
            ],
            "log_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "log1p": [
                "x",
                "name"
            ],
            "Log1p": [
                "x",
                "name"
            ],
            "log1p_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "logical_and": [
                "x",
                "y",
                "name"
            ],
            "LogicalAnd": [
                "x",
                "y",
                "name"
            ],
            "logical_and_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "logical_not": [
                "x",
                "name"
            ],
            "LogicalNot": [
                "x",
                "name"
            ],
            "logical_not_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "logical_or": [
                "x",
                "y",
                "name"
            ],
            "LogicalOr": [
                "x",
                "y",
                "name"
            ],
            "logical_or_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "mat_mul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "name"
            ],
            "MatMul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "name"
            ],
            "mat_mul_eager_fallback": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "name",
                "ctx"
            ],
            "_max": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "Max": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "_max_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "maximum": [
                "x",
                "y",
                "name"
            ],
            "Maximum": [
                "x",
                "y",
                "name"
            ],
            "maximum_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "mean": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "Mean": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "mean_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "_min": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "Min": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "_min_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "minimum": [
                "x",
                "y",
                "name"
            ],
            "Minimum": [
                "x",
                "y",
                "name"
            ],
            "minimum_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "mod": [
                "x",
                "y",
                "name"
            ],
            "Mod": [
                "x",
                "y",
                "name"
            ],
            "mod_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "mul": [
                "x",
                "y",
                "name"
            ],
            "Mul": [
                "x",
                "y",
                "name"
            ],
            "mul_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "mul_no_nan": [
                "x",
                "y",
                "name"
            ],
            "MulNoNan": [
                "x",
                "y",
                "name"
            ],
            "mul_no_nan_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "neg": [
                "x",
                "name"
            ],
            "Neg": [
                "x",
                "name"
            ],
            "neg_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "next_after": [
                "x1",
                "x2",
                "name"
            ],
            "NextAfter": [
                "x1",
                "x2",
                "name"
            ],
            "next_after_eager_fallback": [
                "x1",
                "x2",
                "name",
                "ctx"
            ],
            "not_equal": [
                "x",
                "y",
                "name"
            ],
            "NotEqual": [
                "x",
                "y",
                "name"
            ],
            "not_equal_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "polygamma": [
                "a",
                "x",
                "name"
            ],
            "Polygamma": [
                "a",
                "x",
                "name"
            ],
            "polygamma_eager_fallback": [
                "a",
                "x",
                "name",
                "ctx"
            ],
            "_pow": [
                "x",
                "y",
                "name"
            ],
            "Pow": [
                "x",
                "y",
                "name"
            ],
            "_pow_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "prod": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "Prod": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "prod_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "quantize_down_and_shrink_range": [
                "input",
                "input_min",
                "input_max",
                "out_type",
                "name"
            ],
            "QuantizeDownAndShrinkRange": [
                "input",
                "input_min",
                "input_max",
                "out_type",
                "name"
            ],
            "quantize_down_and_shrink_range_eager_fallback": [
                "input",
                "input_min",
                "input_max",
                "out_type",
                "name",
                "ctx"
            ],
            "quantized_add": [
                "x",
                "y",
                "min_x",
                "max_x",
                "min_y",
                "max_y",
                "Toutput",
                "name"
            ],
            "QuantizedAdd": [
                "x",
                "y",
                "min_x",
                "max_x",
                "min_y",
                "max_y",
                "Toutput",
                "name"
            ],
            "quantized_add_eager_fallback": [
                "x",
                "y",
                "min_x",
                "max_x",
                "min_y",
                "max_y",
                "Toutput",
                "name",
                "ctx"
            ],
            "quantized_mat_mul": [
                "a",
                "b",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "Tactivation",
                "name"
            ],
            "QuantizedMatMul": [
                "a",
                "b",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "Tactivation",
                "name"
            ],
            "quantized_mat_mul_eager_fallback": [
                "a",
                "b",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "Tactivation",
                "name",
                "ctx"
            ],
            "quantized_mul": [
                "x",
                "y",
                "min_x",
                "max_x",
                "min_y",
                "max_y",
                "Toutput",
                "name"
            ],
            "QuantizedMul": [
                "x",
                "y",
                "min_x",
                "max_x",
                "min_y",
                "max_y",
                "Toutput",
                "name"
            ],
            "quantized_mul_eager_fallback": [
                "x",
                "y",
                "min_x",
                "max_x",
                "min_y",
                "max_y",
                "Toutput",
                "name",
                "ctx"
            ],
            "_range": [
                "start",
                "limit",
                "delta",
                "name"
            ],
            "Range": [
                "start",
                "limit",
                "delta",
                "name"
            ],
            "_range_eager_fallback": [
                "start",
                "limit",
                "delta",
                "name",
                "ctx"
            ],
            "real": [
                "input",
                "Tout",
                "name"
            ],
            "Real": [
                "input",
                "Tout",
                "name"
            ],
            "real_eager_fallback": [
                "input",
                "Tout",
                "name",
                "ctx"
            ],
            "real_div": [
                "x",
                "y",
                "name"
            ],
            "RealDiv": [
                "x",
                "y",
                "name"
            ],
            "real_div_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "reciprocal": [
                "x",
                "name"
            ],
            "Reciprocal": [
                "x",
                "name"
            ],
            "reciprocal_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "reciprocal_grad": [
                "y",
                "dy",
                "name"
            ],
            "ReciprocalGrad": [
                "y",
                "dy",
                "name"
            ],
            "reciprocal_grad_eager_fallback": [
                "y",
                "dy",
                "name",
                "ctx"
            ],
            "requantization_range": [
                "input",
                "input_min",
                "input_max",
                "name"
            ],
            "RequantizationRange": [
                "input",
                "input_min",
                "input_max",
                "name"
            ],
            "requantization_range_eager_fallback": [
                "input",
                "input_min",
                "input_max",
                "name",
                "ctx"
            ],
            "requantization_range_per_channel": [
                "input",
                "input_min",
                "input_max",
                "clip_value_max",
                "name"
            ],
            "RequantizationRangePerChannel": [
                "input",
                "input_min",
                "input_max",
                "clip_value_max",
                "name"
            ],
            "requantization_range_per_channel_eager_fallback": [
                "input",
                "input_min",
                "input_max",
                "clip_value_max",
                "name",
                "ctx"
            ],
            "requantize": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name"
            ],
            "Requantize": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name"
            ],
            "requantize_eager_fallback": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name",
                "ctx"
            ],
            "requantize_per_channel": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name"
            ],
            "RequantizePerChannel": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name"
            ],
            "requantize_per_channel_eager_fallback": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name",
                "ctx"
            ],
            "rint": [
                "x",
                "name"
            ],
            "Rint": [
                "x",
                "name"
            ],
            "rint_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "round": [
                "x",
                "name"
            ],
            "Round": [
                "x",
                "name"
            ],
            "round_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "rsqrt": [
                "x",
                "name"
            ],
            "Rsqrt": [
                "x",
                "name"
            ],
            "rsqrt_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "rsqrt_grad": [
                "y",
                "dy",
                "name"
            ],
            "RsqrtGrad": [
                "y",
                "dy",
                "name"
            ],
            "rsqrt_grad_eager_fallback": [
                "y",
                "dy",
                "name",
                "ctx"
            ],
            "segment_max": [
                "data",
                "segment_ids",
                "name"
            ],
            "SegmentMax": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_max_eager_fallback": [
                "data",
                "segment_ids",
                "name",
                "ctx"
            ],
            "segment_mean": [
                "data",
                "segment_ids",
                "name"
            ],
            "SegmentMean": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_mean_eager_fallback": [
                "data",
                "segment_ids",
                "name",
                "ctx"
            ],
            "segment_min": [
                "data",
                "segment_ids",
                "name"
            ],
            "SegmentMin": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_min_eager_fallback": [
                "data",
                "segment_ids",
                "name",
                "ctx"
            ],
            "segment_prod": [
                "data",
                "segment_ids",
                "name"
            ],
            "SegmentProd": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_prod_eager_fallback": [
                "data",
                "segment_ids",
                "name",
                "ctx"
            ],
            "segment_sum": [
                "data",
                "segment_ids",
                "name"
            ],
            "SegmentSum": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_sum_eager_fallback": [
                "data",
                "segment_ids",
                "name",
                "ctx"
            ],
            "select": [
                "condition",
                "x",
                "y",
                "name"
            ],
            "Select": [
                "condition",
                "x",
                "y",
                "name"
            ],
            "select_eager_fallback": [
                "condition",
                "x",
                "y",
                "name",
                "ctx"
            ],
            "select_v2": [
                "condition",
                "t",
                "e",
                "name"
            ],
            "SelectV2": [
                "condition",
                "t",
                "e",
                "name"
            ],
            "select_v2_eager_fallback": [
                "condition",
                "t",
                "e",
                "name",
                "ctx"
            ],
            "sigmoid": [
                "x",
                "name"
            ],
            "Sigmoid": [
                "x",
                "name"
            ],
            "sigmoid_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "sigmoid_grad": [
                "y",
                "dy",
                "name"
            ],
            "SigmoidGrad": [
                "y",
                "dy",
                "name"
            ],
            "sigmoid_grad_eager_fallback": [
                "y",
                "dy",
                "name",
                "ctx"
            ],
            "sign": [
                "x",
                "name"
            ],
            "Sign": [
                "x",
                "name"
            ],
            "sign_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "sin": [
                "x",
                "name"
            ],
            "Sin": [
                "x",
                "name"
            ],
            "sin_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "sinh": [
                "x",
                "name"
            ],
            "Sinh": [
                "x",
                "name"
            ],
            "sinh_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "sparse_mat_mul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "SparseMatMul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "sparse_mat_mul_eager_fallback": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "a_is_sparse",
                "b_is_sparse",
                "name",
                "ctx"
            ],
            "sparse_segment_mean": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "SparseSegmentMean": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sparse_segment_mean_eager_fallback": [
                "data",
                "indices",
                "segment_ids",
                "name",
                "ctx"
            ],
            "sparse_segment_mean_grad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "SparseSegmentMeanGrad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "sparse_segment_mean_grad_eager_fallback": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name",
                "ctx"
            ],
            "sparse_segment_mean_with_num_segments": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "SparseSegmentMeanWithNumSegments": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "sparse_segment_mean_with_num_segments_eager_fallback": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name",
                "ctx"
            ],
            "sparse_segment_sqrt_n": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "SparseSegmentSqrtN": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sparse_segment_sqrt_n_eager_fallback": [
                "data",
                "indices",
                "segment_ids",
                "name",
                "ctx"
            ],
            "sparse_segment_sqrt_n_grad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "SparseSegmentSqrtNGrad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "sparse_segment_sqrt_n_grad_eager_fallback": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name",
                "ctx"
            ],
            "sparse_segment_sqrt_n_with_num_segments": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "SparseSegmentSqrtNWithNumSegments": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "sparse_segment_sqrt_n_with_num_segments_eager_fallback": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name",
                "ctx"
            ],
            "sparse_segment_sum": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "SparseSegmentSum": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sparse_segment_sum_eager_fallback": [
                "data",
                "indices",
                "segment_ids",
                "name",
                "ctx"
            ],
            "sparse_segment_sum_with_num_segments": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "SparseSegmentSumWithNumSegments": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "sparse_segment_sum_with_num_segments_eager_fallback": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name",
                "ctx"
            ],
            "sqrt": [
                "x",
                "name"
            ],
            "Sqrt": [
                "x",
                "name"
            ],
            "sqrt_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "sqrt_grad": [
                "y",
                "dy",
                "name"
            ],
            "SqrtGrad": [
                "y",
                "dy",
                "name"
            ],
            "sqrt_grad_eager_fallback": [
                "y",
                "dy",
                "name",
                "ctx"
            ],
            "square": [
                "x",
                "name"
            ],
            "Square": [
                "x",
                "name"
            ],
            "square_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "squared_difference": [
                "x",
                "y",
                "name"
            ],
            "SquaredDifference": [
                "x",
                "y",
                "name"
            ],
            "squared_difference_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "sub": [
                "x",
                "y",
                "name"
            ],
            "Sub": [
                "x",
                "y",
                "name"
            ],
            "sub_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "_sum": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "Sum": [
                "input",
                "axis",
                "keep_dims",
                "name"
            ],
            "_sum_eager_fallback": [
                "input",
                "axis",
                "keep_dims",
                "name",
                "ctx"
            ],
            "tan": [
                "x",
                "name"
            ],
            "Tan": [
                "x",
                "name"
            ],
            "tan_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "tanh": [
                "x",
                "name"
            ],
            "Tanh": [
                "x",
                "name"
            ],
            "tanh_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "tanh_grad": [
                "y",
                "dy",
                "name"
            ],
            "TanhGrad": [
                "y",
                "dy",
                "name"
            ],
            "tanh_grad_eager_fallback": [
                "y",
                "dy",
                "name",
                "ctx"
            ],
            "truncate_div": [
                "x",
                "y",
                "name"
            ],
            "TruncateDiv": [
                "x",
                "y",
                "name"
            ],
            "truncate_div_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "truncate_mod": [
                "x",
                "y",
                "name"
            ],
            "TruncateMod": [
                "x",
                "y",
                "name"
            ],
            "truncate_mod_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "unsorted_segment_max": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "UnsortedSegmentMax": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "unsorted_segment_max_eager_fallback": [
                "data",
                "segment_ids",
                "num_segments",
                "name",
                "ctx"
            ],
            "unsorted_segment_min": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "UnsortedSegmentMin": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "unsorted_segment_min_eager_fallback": [
                "data",
                "segment_ids",
                "num_segments",
                "name",
                "ctx"
            ],
            "unsorted_segment_prod": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "UnsortedSegmentProd": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "unsorted_segment_prod_eager_fallback": [
                "data",
                "segment_ids",
                "num_segments",
                "name",
                "ctx"
            ],
            "unsorted_segment_sum": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "UnsortedSegmentSum": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "unsorted_segment_sum_eager_fallback": [
                "data",
                "segment_ids",
                "num_segments",
                "name",
                "ctx"
            ],
            "xdivy": [
                "x",
                "y",
                "name"
            ],
            "Xdivy": [
                "x",
                "y",
                "name"
            ],
            "xdivy_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "xlogy": [
                "x",
                "y",
                "name"
            ],
            "Xlogy": [
                "x",
                "y",
                "name"
            ],
            "xlogy_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "zeta": [
                "x",
                "q",
                "name"
            ],
            "Zeta": [
                "x",
                "q",
                "name"
            ],
            "zeta_eager_fallback": [
                "x",
                "q",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.rnn": {
            "_transpose_batch_time": [
                "x"
            ],
            "_best_effort_input_batch_size": [
                "flat_input"
            ],
            "_infer_state_dtype": [
                "explicit_dtype",
                "state"
            ],
            "_maybe_tensor_shape_from_tensor": [
                "shape"
            ],
            "_should_cache": [],
            "_is_keras_rnn_cell": [
                "rnn_cell"
            ],
            "_rnn_step": [
                "time",
                "sequence_length",
                "min_sequence_length",
                "max_sequence_length",
                "zero_output",
                "state",
                "call_cell",
                "state_size",
                "skip_conditionals"
            ],
            "_reverse_seq": [
                "input_seq",
                "lengths"
            ],
            "bidirectional_dynamic_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "sequence_length",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ],
            "dynamic_rnn": [
                "cell",
                "inputs",
                "sequence_length",
                "initial_state",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ],
            "_dynamic_rnn_loop": [
                "cell",
                "inputs",
                "initial_state",
                "parallel_iterations",
                "swap_memory",
                "sequence_length",
                "dtype"
            ],
            "raw_rnn": [
                "cell",
                "loop_fn",
                "parallel_iterations",
                "swap_memory",
                "scope"
            ],
            "static_rnn": [
                "cell",
                "inputs",
                "initial_state",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "static_state_saving_rnn": [
                "cell",
                "inputs",
                "state_saver",
                "state_name",
                "sequence_length",
                "scope"
            ],
            "static_bidirectional_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "sequence_length",
                "scope"
            ]
        },
        "tensorflow_core.python.ops.lookup_ops": {
            "initialize_all_tables": [
                "name"
            ],
            "tables_initializer": [
                "name"
            ],
            "_check_table_dtypes": [
                "table",
                "key_dtype",
                "value_dtype"
            ],
            "_as_string": [
                "tensor"
            ],
            "index_table_from_file": [
                "vocabulary_file",
                "num_oov_buckets",
                "vocab_size",
                "default_value",
                "hasher_spec",
                "key_dtype",
                "name",
                "key_column_index",
                "value_column_index",
                "delimiter"
            ],
            "index_table_from_tensor": [
                "vocabulary_list",
                "num_oov_buckets",
                "default_value",
                "hasher_spec",
                "dtype",
                "name"
            ],
            "index_to_string_table_from_file": [
                "vocabulary_file",
                "vocab_size",
                "default_value",
                "name",
                "key_column_index",
                "value_column_index",
                "delimiter"
            ],
            "index_to_string_table_from_tensor": [
                "vocabulary_list",
                "default_value",
                "name"
            ],
            "LookupInterface": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype"
                ],
                "_create_resource": [
                    "self"
                ],
                "key_dtype": [
                    "self"
                ],
                "value_dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "InitializableLookupTableBase": {
                "__init__": [
                    "self",
                    "default_value",
                    "initializer"
                ],
                "_initialize": [
                    "self"
                ],
                "default_value": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "InitializableLookupTableBaseV1": {
                "initializer": [
                    "self"
                ]
            },
            "StaticHashTable": {
                "__init__": [
                    "self",
                    "initializer",
                    "default_value",
                    "name"
                ],
                "_create_resource": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "export": [
                    "self",
                    "name"
                ]
            },
            "StaticHashTableV1": {
                "initializer": [
                    "self"
                ]
            },
            "HashTable": {
                "init": [
                    "self"
                ]
            },
            "TableInitializerBase": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype"
                ],
                "key_dtype": [
                    "self"
                ],
                "value_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "table"
                ],
                "_shared_name": [
                    "self"
                ]
            },
            "KeyValueTensorInitializer": {
                "__init__": [
                    "self",
                    "keys",
                    "values",
                    "key_dtype",
                    "value_dtype",
                    "name"
                ],
                "initialize": [
                    "self",
                    "table"
                ]
            },
            "TextFileIndex": {},
            "TextFileInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_dtype",
                    "key_index",
                    "value_dtype",
                    "value_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ],
                "initialize": [
                    "self",
                    "table"
                ],
                "_shared_name": [
                    "self"
                ]
            },
            "TextFileStringTableInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_column_index",
                    "value_column_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ]
            },
            "TextFileIdTableInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_column_index",
                    "value_column_index",
                    "vocab_size",
                    "delimiter",
                    "name",
                    "key_dtype"
                ]
            },
            "HasherSpec": {},
            "StrongHashSpec": {
                "__new__": [
                    "cls",
                    "key"
                ]
            },
            "IdTableWithHashBuckets": {
                "__init__": [
                    "self",
                    "table",
                    "num_oov_buckets",
                    "hasher_spec",
                    "name",
                    "key_dtype"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "resource_handle": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "_get_string_to_hash_bucket_fn": [
                    "self",
                    "hasher_spec"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "StaticVocabularyTable": {
                "__init__": [
                    "self",
                    "initializer",
                    "num_oov_buckets",
                    "lookup_key_dtype",
                    "name"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "resource_handle": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "StaticVocabularyTableV1": {
                "initializer": [
                    "self"
                ]
            },
            "MutableHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "name",
                    "checkpoint"
                ],
                "_create_resource": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "remove": [
                    "self",
                    "keys",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export": [
                    "self",
                    "name"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            },
            "DenseHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "empty_key",
                    "deleted_key",
                    "initial_num_buckets",
                    "name",
                    "checkpoint"
                ],
                "_create_resource": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert_or_assign": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "erase": [
                    "self",
                    "keys",
                    "name"
                ],
                "remove": [
                    "self",
                    "keys",
                    "name"
                ],
                "export": [
                    "self",
                    "name"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.image_ops_impl": {
            "_assert": [
                "cond",
                "ex_type",
                "msg"
            ],
            "_is_tensor": [
                "x"
            ],
            "_ImageDimensions": [
                "image",
                "rank"
            ],
            "_Check3DImage": [
                "image",
                "require_static"
            ],
            "_Assert3DImage": [
                "image"
            ],
            "_AssertAtLeast3DImage": [
                "image"
            ],
            "_CheckAtLeast3DImage": [
                "image",
                "require_static"
            ],
            "_AssertGrayscaleImage": [
                "image"
            ],
            "_CheckGrayscaleImage": [
                "image",
                "require_static"
            ],
            "fix_image_flip_shape": [
                "image",
                "result"
            ],
            "random_flip_up_down": [
                "image",
                "seed"
            ],
            "random_flip_left_right": [
                "image",
                "seed"
            ],
            "_random_flip": [
                "image",
                "flip_index",
                "seed",
                "scope_name"
            ],
            "flip_left_right": [
                "image"
            ],
            "flip_up_down": [
                "image"
            ],
            "_flip": [
                "image",
                "flip_index",
                "scope_name"
            ],
            "rot90": [
                "image",
                "k",
                "name"
            ],
            "_rot90_3D": [
                "image",
                "k",
                "name_scope"
            ],
            "_rot90_4D": [
                "images",
                "k",
                "name_scope"
            ],
            "transpose": [
                "image",
                "name"
            ],
            "central_crop": [
                "image",
                "central_fraction"
            ],
            "pad_to_bounding_box": [
                "image",
                "offset_height",
                "offset_width",
                "target_height",
                "target_width"
            ],
            "crop_to_bounding_box": [
                "image",
                "offset_height",
                "offset_width",
                "target_height",
                "target_width"
            ],
            "resize_image_with_crop_or_pad": [
                "image",
                "target_height",
                "target_width"
            ],
            "_resize_images_common": [
                "images",
                "resizer_fn",
                "size",
                "preserve_aspect_ratio",
                "name",
                "skip_resize_if_same"
            ],
            "resize_images": [
                "images",
                "size",
                "method",
                "align_corners",
                "preserve_aspect_ratio",
                "name"
            ],
            "resize_images_v2": [
                "images",
                "size",
                "method",
                "preserve_aspect_ratio",
                "antialias",
                "name"
            ],
            "_resize_image_with_pad_common": [
                "image",
                "target_height",
                "target_width",
                "resize_fn"
            ],
            "resize_image_with_pad_v1": [
                "image",
                "target_height",
                "target_width",
                "method",
                "align_corners"
            ],
            "resize_image_with_pad_v2": [
                "image",
                "target_height",
                "target_width",
                "method",
                "antialias"
            ],
            "per_image_standardization": [
                "image"
            ],
            "random_brightness": [
                "image",
                "max_delta",
                "seed"
            ],
            "random_contrast": [
                "image",
                "lower",
                "upper",
                "seed"
            ],
            "adjust_brightness": [
                "image",
                "delta"
            ],
            "adjust_contrast": [
                "images",
                "contrast_factor"
            ],
            "adjust_gamma": [
                "image",
                "gamma",
                "gain"
            ],
            "convert_image_dtype": [
                "image",
                "dtype",
                "saturate",
                "name"
            ],
            "rgb_to_grayscale": [
                "images",
                "name"
            ],
            "grayscale_to_rgb": [
                "images",
                "name"
            ],
            "random_hue": [
                "image",
                "max_delta",
                "seed"
            ],
            "adjust_hue": [
                "image",
                "delta",
                "name"
            ],
            "random_jpeg_quality": [
                "image",
                "min_jpeg_quality",
                "max_jpeg_quality",
                "seed"
            ],
            "adjust_jpeg_quality": [
                "image",
                "jpeg_quality",
                "name"
            ],
            "random_saturation": [
                "image",
                "lower",
                "upper",
                "seed"
            ],
            "adjust_saturation": [
                "image",
                "saturation_factor",
                "name"
            ],
            "is_jpeg": [
                "contents",
                "name"
            ],
            "_is_png": [
                "contents",
                "name"
            ],
            "decode_image": [
                "contents",
                "channels",
                "dtype",
                "name",
                "expand_animations"
            ],
            "total_variation": [
                "images",
                "name"
            ],
            "sample_distorted_bounding_box_v2": [
                "image_size",
                "bounding_boxes",
                "seed",
                "min_object_covered",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "sample_distorted_bounding_box": [
                "image_size",
                "bounding_boxes",
                "seed",
                "seed2",
                "min_object_covered",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "non_max_suppression": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "name"
            ],
            "non_max_suppression_with_scores": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "soft_nms_sigma",
                "name"
            ],
            "non_max_suppression_padded": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "pad_to_max_output_size",
                "name"
            ],
            "non_max_suppression_with_overlaps": [
                "overlaps",
                "scores",
                "max_output_size",
                "overlap_threshold",
                "score_threshold",
                "name"
            ],
            "rgb_to_yiq": [
                "images"
            ],
            "yiq_to_rgb": [
                "images"
            ],
            "rgb_to_yuv": [
                "images"
            ],
            "yuv_to_rgb": [
                "images"
            ],
            "_verify_compatible_image_shapes": [
                "img1",
                "img2"
            ],
            "psnr": [
                "a",
                "b",
                "max_val",
                "name"
            ],
            "_ssim_helper": [
                "x",
                "y",
                "reducer",
                "max_val",
                "compensation",
                "k1",
                "k2"
            ],
            "_fspecial_gauss": [
                "size",
                "sigma"
            ],
            "_ssim_per_channel": [
                "img1",
                "img2",
                "max_val",
                "filter_size",
                "filter_sigma",
                "k1",
                "k2"
            ],
            "ssim": [
                "img1",
                "img2",
                "max_val",
                "filter_size",
                "filter_sigma",
                "k1",
                "k2"
            ],
            "ssim_multiscale": [
                "img1",
                "img2",
                "max_val",
                "power_factors",
                "filter_size",
                "filter_sigma",
                "k1",
                "k2"
            ],
            "image_gradients": [
                "image"
            ],
            "sobel_edges": [
                "image"
            ],
            "resize_bicubic": [
                "images",
                "size",
                "align_corners",
                "name",
                "half_pixel_centers"
            ],
            "resize_bilinear": [
                "images",
                "size",
                "align_corners",
                "name",
                "half_pixel_centers"
            ],
            "resize_nearest_neighbor": [
                "images",
                "size",
                "align_corners",
                "name",
                "half_pixel_centers"
            ],
            "crop_and_resize_v2": [
                "image",
                "boxes",
                "box_indices",
                "crop_size",
                "method",
                "extrapolation_value",
                "name"
            ],
            "crop_and_resize_v1": [
                "image",
                "boxes",
                "box_ind",
                "crop_size",
                "method",
                "extrapolation_value",
                "name",
                "box_indices"
            ],
            "extract_glimpse": [
                "input",
                "size",
                "offsets",
                "centered",
                "normalized",
                "uniform_noise",
                "name"
            ],
            "extract_glimpse_v2": [
                "input",
                "size",
                "offsets",
                "centered",
                "normalized",
                "noise",
                "name"
            ],
            "combined_non_max_suppression": [
                "boxes",
                "scores",
                "max_output_size_per_class",
                "max_total_size",
                "iou_threshold",
                "score_threshold",
                "pad_per_class",
                "clip_boxes",
                "name"
            ],
            "draw_bounding_boxes_v2": [
                "images",
                "boxes",
                "colors",
                "name"
            ],
            "draw_bounding_boxes": [
                "images",
                "boxes",
                "name",
                "colors"
            ],
            "ResizeMethodV1": {},
            "ResizeMethod": {}
        },
        "tensorflow_core.python.ops.sort_ops": {
            "sort": [
                "values",
                "axis",
                "direction",
                "name"
            ],
            "argsort": [
                "values",
                "axis",
                "direction",
                "stable",
                "name"
            ],
            "_sort_or_argsort": [
                "values",
                "axis",
                "direction",
                "return_argsort"
            ],
            "_descending_sort": [
                "values",
                "axis",
                "return_argsort"
            ],
            "_ascending_sort": [
                "values",
                "axis",
                "return_argsort"
            ]
        },
        "tensorflow_core.python.ops.ctc_ops": {
            "ctc_loss": [
                "labels",
                "inputs",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "ignore_longer_outputs_than_inputs",
                "time_major",
                "logits"
            ],
            "_CTCLossGrad": [
                "op",
                "grad_loss",
                "_"
            ],
            "ctc_greedy_decoder": [
                "inputs",
                "sequence_length",
                "merge_repeated"
            ],
            "ctc_beam_search_decoder": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated"
            ],
            "ctc_beam_search_decoder_v2": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths"
            ],
            "_ctc_state_trans": [
                "label_seq"
            ],
            "ctc_state_log_probs": [
                "seq_lengths",
                "max_seq_length"
            ],
            "_ilabel_to_state": [
                "labels",
                "num_labels",
                "ilabel_log_probs"
            ],
            "_state_to_olabel": [
                "labels",
                "num_labels",
                "states"
            ],
            "_state_to_olabel_unique": [
                "labels",
                "num_labels",
                "states",
                "unique"
            ],
            "ctc_loss_and_grad": [
                "logits",
                "labels",
                "label_length",
                "logit_length",
                "unique"
            ],
            "_ctc_loss_grad": [
                "op",
                "grad_loss",
                "_"
            ],
            "_ctc_loss_shape": [
                "op"
            ],
            "ctc_loss_v2": [
                "labels",
                "logits",
                "label_length",
                "logit_length",
                "logits_time_major",
                "unique",
                "blank_index",
                "name"
            ],
            "ctc_loss_dense": [
                "labels",
                "logits",
                "label_length",
                "logit_length",
                "logits_time_major",
                "unique",
                "blank_index",
                "name"
            ],
            "collapse_repeated": [
                "labels",
                "seq_length",
                "name"
            ],
            "dense_labels_to_sparse": [
                "dense",
                "length"
            ],
            "ctc_unique_labels": [
                "labels",
                "name"
            ],
            "_sum_states": [
                "idx",
                "states"
            ],
            "_forward_backward_log": [
                "state_trans_log_probs",
                "initial_state_log_probs",
                "final_state_log_probs",
                "observed_log_probs",
                "sequence_length"
            ],
            "_scan": [
                "fn",
                "elems",
                "initial",
                "reverse",
                "inclusive",
                "final_only"
            ],
            "_get_dim": [
                "tensor",
                "i"
            ]
        },
        "tensorflow_core.python.ops.gen_stateless_random_ops": {
            "stateless_multinomial": [
                "logits",
                "num_samples",
                "seed",
                "output_dtype",
                "name"
            ],
            "StatelessMultinomial": [
                "logits",
                "num_samples",
                "seed",
                "output_dtype",
                "name"
            ],
            "stateless_multinomial_eager_fallback": [
                "logits",
                "num_samples",
                "seed",
                "output_dtype",
                "name",
                "ctx"
            ],
            "stateless_random_normal": [
                "shape",
                "seed",
                "dtype",
                "name"
            ],
            "StatelessRandomNormal": [
                "shape",
                "seed",
                "dtype",
                "name"
            ],
            "stateless_random_normal_eager_fallback": [
                "shape",
                "seed",
                "dtype",
                "name",
                "ctx"
            ],
            "stateless_random_uniform": [
                "shape",
                "seed",
                "dtype",
                "name"
            ],
            "StatelessRandomUniform": [
                "shape",
                "seed",
                "dtype",
                "name"
            ],
            "stateless_random_uniform_eager_fallback": [
                "shape",
                "seed",
                "dtype",
                "name",
                "ctx"
            ],
            "stateless_random_uniform_int": [
                "shape",
                "seed",
                "minval",
                "maxval",
                "name"
            ],
            "StatelessRandomUniformInt": [
                "shape",
                "seed",
                "minval",
                "maxval",
                "name"
            ],
            "stateless_random_uniform_int_eager_fallback": [
                "shape",
                "seed",
                "minval",
                "maxval",
                "name",
                "ctx"
            ],
            "stateless_truncated_normal": [
                "shape",
                "seed",
                "dtype",
                "name"
            ],
            "StatelessTruncatedNormal": [
                "shape",
                "seed",
                "dtype",
                "name"
            ],
            "stateless_truncated_normal_eager_fallback": [
                "shape",
                "seed",
                "dtype",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_ragged_math_ops": {
            "ragged_range": [
                "starts",
                "limits",
                "deltas",
                "Tsplits",
                "name"
            ],
            "RaggedRange": [
                "starts",
                "limits",
                "deltas",
                "Tsplits",
                "name"
            ],
            "ragged_range_eager_fallback": [
                "starts",
                "limits",
                "deltas",
                "Tsplits",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_sparse_ops": {
            "add_many_sparse_to_tensors_map": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "AddManySparseToTensorsMap": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "add_many_sparse_to_tensors_map_eager_fallback": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "add_sparse_to_tensors_map": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "AddSparseToTensorsMap": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "add_sparse_to_tensors_map_eager_fallback": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "deserialize_many_sparse": [
                "serialized_sparse",
                "dtype",
                "name"
            ],
            "DeserializeManySparse": [
                "serialized_sparse",
                "dtype",
                "name"
            ],
            "deserialize_many_sparse_eager_fallback": [
                "serialized_sparse",
                "dtype",
                "name",
                "ctx"
            ],
            "deserialize_sparse": [
                "serialized_sparse",
                "dtype",
                "name"
            ],
            "DeserializeSparse": [
                "serialized_sparse",
                "dtype",
                "name"
            ],
            "deserialize_sparse_eager_fallback": [
                "serialized_sparse",
                "dtype",
                "name",
                "ctx"
            ],
            "serialize_many_sparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "out_type",
                "name"
            ],
            "SerializeManySparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "out_type",
                "name"
            ],
            "serialize_many_sparse_eager_fallback": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "out_type",
                "name",
                "ctx"
            ],
            "serialize_sparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "out_type",
                "name"
            ],
            "SerializeSparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "out_type",
                "name"
            ],
            "serialize_sparse_eager_fallback": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "out_type",
                "name",
                "ctx"
            ],
            "sparse_add": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "thresh",
                "name"
            ],
            "SparseAdd": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "thresh",
                "name"
            ],
            "sparse_add_eager_fallback": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "thresh",
                "name",
                "ctx"
            ],
            "sparse_add_grad": [
                "backprop_val_grad",
                "a_indices",
                "b_indices",
                "sum_indices",
                "name"
            ],
            "SparseAddGrad": [
                "backprop_val_grad",
                "a_indices",
                "b_indices",
                "sum_indices",
                "name"
            ],
            "sparse_add_grad_eager_fallback": [
                "backprop_val_grad",
                "a_indices",
                "b_indices",
                "sum_indices",
                "name",
                "ctx"
            ],
            "sparse_concat": [
                "indices",
                "values",
                "shapes",
                "concat_dim",
                "name"
            ],
            "SparseConcat": [
                "indices",
                "values",
                "shapes",
                "concat_dim",
                "name"
            ],
            "sparse_concat_eager_fallback": [
                "indices",
                "values",
                "shapes",
                "concat_dim",
                "name",
                "ctx"
            ],
            "sparse_cross": [
                "indices",
                "values",
                "shapes",
                "dense_inputs",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "out_type",
                "internal_type",
                "name"
            ],
            "SparseCross": [
                "indices",
                "values",
                "shapes",
                "dense_inputs",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "out_type",
                "internal_type",
                "name"
            ],
            "sparse_cross_eager_fallback": [
                "indices",
                "values",
                "shapes",
                "dense_inputs",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "out_type",
                "internal_type",
                "name",
                "ctx"
            ],
            "sparse_dense_cwise_add": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "SparseDenseCwiseAdd": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_dense_cwise_add_eager_fallback": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name",
                "ctx"
            ],
            "sparse_dense_cwise_div": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "SparseDenseCwiseDiv": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_dense_cwise_div_eager_fallback": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name",
                "ctx"
            ],
            "sparse_dense_cwise_mul": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "SparseDenseCwiseMul": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_dense_cwise_mul_eager_fallback": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name",
                "ctx"
            ],
            "sparse_fill_empty_rows": [
                "indices",
                "values",
                "dense_shape",
                "default_value",
                "name"
            ],
            "SparseFillEmptyRows": [
                "indices",
                "values",
                "dense_shape",
                "default_value",
                "name"
            ],
            "sparse_fill_empty_rows_eager_fallback": [
                "indices",
                "values",
                "dense_shape",
                "default_value",
                "name",
                "ctx"
            ],
            "sparse_fill_empty_rows_grad": [
                "reverse_index_map",
                "grad_values",
                "name"
            ],
            "SparseFillEmptyRowsGrad": [
                "reverse_index_map",
                "grad_values",
                "name"
            ],
            "sparse_fill_empty_rows_grad_eager_fallback": [
                "reverse_index_map",
                "grad_values",
                "name",
                "ctx"
            ],
            "sparse_reduce_max": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "SparseReduceMax": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "sparse_reduce_max_eager_fallback": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name",
                "ctx"
            ],
            "sparse_reduce_max_sparse": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "SparseReduceMaxSparse": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "sparse_reduce_max_sparse_eager_fallback": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name",
                "ctx"
            ],
            "sparse_reduce_sum": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "SparseReduceSum": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "sparse_reduce_sum_eager_fallback": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name",
                "ctx"
            ],
            "sparse_reduce_sum_sparse": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "SparseReduceSumSparse": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "sparse_reduce_sum_sparse_eager_fallback": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name",
                "ctx"
            ],
            "sparse_reorder": [
                "input_indices",
                "input_values",
                "input_shape",
                "name"
            ],
            "SparseReorder": [
                "input_indices",
                "input_values",
                "input_shape",
                "name"
            ],
            "sparse_reorder_eager_fallback": [
                "input_indices",
                "input_values",
                "input_shape",
                "name",
                "ctx"
            ],
            "sparse_reshape": [
                "input_indices",
                "input_shape",
                "new_shape",
                "name"
            ],
            "SparseReshape": [
                "input_indices",
                "input_shape",
                "new_shape",
                "name"
            ],
            "sparse_reshape_eager_fallback": [
                "input_indices",
                "input_shape",
                "new_shape",
                "name",
                "ctx"
            ],
            "sparse_slice": [
                "indices",
                "values",
                "shape",
                "start",
                "size",
                "name"
            ],
            "SparseSlice": [
                "indices",
                "values",
                "shape",
                "start",
                "size",
                "name"
            ],
            "sparse_slice_eager_fallback": [
                "indices",
                "values",
                "shape",
                "start",
                "size",
                "name",
                "ctx"
            ],
            "sparse_slice_grad": [
                "backprop_val_grad",
                "input_indices",
                "input_start",
                "output_indices",
                "name"
            ],
            "SparseSliceGrad": [
                "backprop_val_grad",
                "input_indices",
                "input_start",
                "output_indices",
                "name"
            ],
            "sparse_slice_grad_eager_fallback": [
                "backprop_val_grad",
                "input_indices",
                "input_start",
                "output_indices",
                "name",
                "ctx"
            ],
            "sparse_softmax": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "name"
            ],
            "SparseSoftmax": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "name"
            ],
            "sparse_softmax_eager_fallback": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "name",
                "ctx"
            ],
            "sparse_sparse_maximum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "SparseSparseMaximum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "sparse_sparse_maximum_eager_fallback": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name",
                "ctx"
            ],
            "sparse_sparse_minimum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "SparseSparseMinimum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "sparse_sparse_minimum_eager_fallback": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name",
                "ctx"
            ],
            "sparse_split": [
                "split_dim",
                "indices",
                "values",
                "shape",
                "num_split",
                "name"
            ],
            "SparseSplit": [
                "split_dim",
                "indices",
                "values",
                "shape",
                "num_split",
                "name"
            ],
            "sparse_split_eager_fallback": [
                "split_dim",
                "indices",
                "values",
                "shape",
                "num_split",
                "name",
                "ctx"
            ],
            "sparse_tensor_dense_add": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "name"
            ],
            "SparseTensorDenseAdd": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "name"
            ],
            "sparse_tensor_dense_add_eager_fallback": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "name",
                "ctx"
            ],
            "sparse_tensor_dense_mat_mul": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name"
            ],
            "SparseTensorDenseMatMul": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name"
            ],
            "sparse_tensor_dense_mat_mul_eager_fallback": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name",
                "ctx"
            ],
            "sparse_to_dense": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name"
            ],
            "SparseToDense": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name"
            ],
            "sparse_to_dense_eager_fallback": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name",
                "ctx"
            ],
            "take_many_sparse_from_tensors_map": [
                "sparse_handles",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "TakeManySparseFromTensorsMap": [
                "sparse_handles",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "take_many_sparse_from_tensors_map_eager_fallback": [
                "sparse_handles",
                "dtype",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.inplace_ops": {
            "_inplace_helper": [
                "x",
                "i",
                "v",
                "op"
            ],
            "alias_inplace_update": [
                "x",
                "i",
                "v"
            ],
            "alias_inplace_add": [
                "x",
                "i",
                "v"
            ],
            "alias_inplace_sub": [
                "x",
                "i",
                "v"
            ],
            "empty_like": [
                "x",
                "init"
            ],
            "inplace_update": [
                "x",
                "i",
                "v"
            ],
            "inplace_add": [
                "x",
                "i",
                "v"
            ],
            "inplace_sub": [
                "x",
                "i",
                "v"
            ]
        },
        "tensorflow_core.python.ops.cond_v2": {
            "cond_v2": [
                "pred",
                "true_fn",
                "false_fn",
                "name"
            ],
            "_IfGrad": [
                "op"
            ],
            "_build_cond": [
                "pred",
                "true_graph",
                "false_graph",
                "true_inputs",
                "false_inputs",
                "building_gradient",
                "name"
            ],
            "get_func_graphs": [
                "op"
            ],
            "_grad_fn": [
                "func_graph",
                "grads"
            ],
            "_create_grad_func": [
                "func_graph",
                "grads",
                "name"
            ],
            "_resolve_grad_inputs": [
                "cond_graph",
                "grad_graph"
            ],
            "_get_intermediates": [
                "func_graph"
            ],
            "_make_intermediates_match": [
                "branch_graphs",
                "branch_optionals"
            ],
            "_make_intermediates_match_xla": [
                "branch_graphs",
                "branch_intermediates"
            ],
            "_make_inputs_match": [
                "branch_graphs",
                "branch_inputs"
            ],
            "_make_output_composite_tensors_match": [
                "op_type",
                "branch_graphs"
            ],
            "_make_indexed_slices_indices_types_match": [
                "op_type",
                "branch_graphs"
            ],
            "_wrap_intermediates": [
                "func_graph",
                "intermediates"
            ],
            "_create_dummy_input": [
                "func_graph",
                "template_tensor"
            ],
            "_create_none_optionals": [
                "func_graph",
                "n"
            ],
            "_create_fakeparams": [
                "func_graph",
                "template_tensors"
            ],
            "_check_same_outputs": [
                "op_type",
                "graphs"
            ],
            "_get_output_shapes": [],
            "verify_captures": [
                "op_type",
                "branch_graphs"
            ],
            "indexed_case": [
                "branch_index",
                "branch_fns",
                "name"
            ],
            "_CaseGrad": [
                "op"
            ],
            "_build_case": [
                "branch_index",
                "branch_graphs",
                "branch_inputs",
                "name"
            ],
            "_CondGradFuncGraph": {
                "__init__": [
                    "self",
                    "name",
                    "forward_graph"
                ],
                "wrapped_intermediates": [
                    "self"
                ],
                "xla_intermediates": [
                    "self"
                ],
                "_capture_helper": [
                    "self",
                    "tensor",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.clip_ops": {
            "clip_by_value": [
                "t",
                "clip_value_min",
                "clip_value_max",
                "name"
            ],
            "_clip_by_value_grad": [
                "op",
                "grad"
            ],
            "clip_by_norm": [
                "t",
                "clip_norm",
                "axes",
                "name"
            ],
            "global_norm": [
                "t_list",
                "name"
            ],
            "clip_by_global_norm": [
                "t_list",
                "clip_norm",
                "use_norm",
                "name"
            ],
            "clip_by_average_norm": [
                "t",
                "clip_norm",
                "name"
            ]
        },
        "tensorflow_core.python.ops.gen_manip_ops": {
            "roll": [
                "input",
                "shift",
                "axis",
                "name"
            ],
            "Roll": [
                "input",
                "shift",
                "axis",
                "name"
            ],
            "roll_eager_fallback": [
                "input",
                "shift",
                "axis",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.tensor_array_grad": {
            "_GetGradSource": [
                "op_or_tensor"
            ],
            "_TensorArrayReadGrad": [
                "op",
                "grad"
            ],
            "_TensorArrayWriteGrad": [
                "op",
                "flow"
            ],
            "_TensorArrayGatherGrad": [
                "op",
                "grad"
            ],
            "_TensorArrayScatterGrad": [
                "op",
                "flow"
            ],
            "_TensorArrayConcatGrad": [
                "op",
                "grad",
                "unused_lengths_grad"
            ],
            "_TensorArraySplitGrad": [
                "op",
                "flow"
            ]
        },
        "tensorflow_core.python.ops.partitioned_variables": {
            "variable_axis_size_partitioner": [
                "max_shard_bytes",
                "axis",
                "bytes_per_string_element",
                "max_shards"
            ],
            "min_max_variable_partitioner": [
                "max_partitions",
                "axis",
                "min_slice_size",
                "bytes_per_string_element"
            ],
            "fixed_size_partitioner": [
                "num_shards",
                "axis"
            ],
            "create_partitioned_variables": [
                "shape",
                "slicing",
                "initializer",
                "dtype",
                "trainable",
                "collections",
                "name",
                "reuse"
            ]
        },
        "tensorflow_core.python.ops.gen_string_ops": {
            "as_string": [
                "input",
                "precision",
                "scientific",
                "shortest",
                "width",
                "fill",
                "name"
            ],
            "AsString": [
                "input",
                "precision",
                "scientific",
                "shortest",
                "width",
                "fill",
                "name"
            ],
            "as_string_eager_fallback": [
                "input",
                "precision",
                "scientific",
                "shortest",
                "width",
                "fill",
                "name",
                "ctx"
            ],
            "decode_base64": [
                "input",
                "name"
            ],
            "DecodeBase64": [
                "input",
                "name"
            ],
            "decode_base64_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "encode_base64": [
                "input",
                "pad",
                "name"
            ],
            "EncodeBase64": [
                "input",
                "pad",
                "name"
            ],
            "encode_base64_eager_fallback": [
                "input",
                "pad",
                "name",
                "ctx"
            ],
            "reduce_join": [
                "inputs",
                "reduction_indices",
                "keep_dims",
                "separator",
                "name"
            ],
            "ReduceJoin": [
                "inputs",
                "reduction_indices",
                "keep_dims",
                "separator",
                "name"
            ],
            "reduce_join_eager_fallback": [
                "inputs",
                "reduction_indices",
                "keep_dims",
                "separator",
                "name",
                "ctx"
            ],
            "regex_full_match": [
                "input",
                "pattern",
                "name"
            ],
            "RegexFullMatch": [
                "input",
                "pattern",
                "name"
            ],
            "regex_full_match_eager_fallback": [
                "input",
                "pattern",
                "name",
                "ctx"
            ],
            "regex_replace": [
                "input",
                "pattern",
                "rewrite",
                "replace_global",
                "name"
            ],
            "RegexReplace": [
                "input",
                "pattern",
                "rewrite",
                "replace_global",
                "name"
            ],
            "regex_replace_eager_fallback": [
                "input",
                "pattern",
                "rewrite",
                "replace_global",
                "name",
                "ctx"
            ],
            "static_regex_full_match": [
                "input",
                "pattern",
                "name"
            ],
            "StaticRegexFullMatch": [
                "input",
                "pattern",
                "name"
            ],
            "static_regex_full_match_eager_fallback": [
                "input",
                "pattern",
                "name",
                "ctx"
            ],
            "static_regex_replace": [
                "input",
                "pattern",
                "rewrite",
                "replace_global",
                "name"
            ],
            "StaticRegexReplace": [
                "input",
                "pattern",
                "rewrite",
                "replace_global",
                "name"
            ],
            "static_regex_replace_eager_fallback": [
                "input",
                "pattern",
                "rewrite",
                "replace_global",
                "name",
                "ctx"
            ],
            "string_format": [
                "inputs",
                "template",
                "placeholder",
                "summarize",
                "name"
            ],
            "StringFormat": [
                "inputs",
                "template",
                "placeholder",
                "summarize",
                "name"
            ],
            "string_format_eager_fallback": [
                "inputs",
                "template",
                "placeholder",
                "summarize",
                "name",
                "ctx"
            ],
            "string_join": [
                "inputs",
                "separator",
                "name"
            ],
            "StringJoin": [
                "inputs",
                "separator",
                "name"
            ],
            "string_join_eager_fallback": [
                "inputs",
                "separator",
                "name",
                "ctx"
            ],
            "string_length": [
                "input",
                "unit",
                "name"
            ],
            "StringLength": [
                "input",
                "unit",
                "name"
            ],
            "string_length_eager_fallback": [
                "input",
                "unit",
                "name",
                "ctx"
            ],
            "string_lower": [
                "input",
                "encoding",
                "name"
            ],
            "StringLower": [
                "input",
                "encoding",
                "name"
            ],
            "string_lower_eager_fallback": [
                "input",
                "encoding",
                "name",
                "ctx"
            ],
            "string_n_grams": [
                "data",
                "data_splits",
                "separator",
                "ngram_widths",
                "left_pad",
                "right_pad",
                "pad_width",
                "preserve_short_sequences",
                "name"
            ],
            "StringNGrams": [
                "data",
                "data_splits",
                "separator",
                "ngram_widths",
                "left_pad",
                "right_pad",
                "pad_width",
                "preserve_short_sequences",
                "name"
            ],
            "string_n_grams_eager_fallback": [
                "data",
                "data_splits",
                "separator",
                "ngram_widths",
                "left_pad",
                "right_pad",
                "pad_width",
                "preserve_short_sequences",
                "name",
                "ctx"
            ],
            "string_split": [
                "input",
                "delimiter",
                "skip_empty",
                "name"
            ],
            "StringSplit": [
                "input",
                "delimiter",
                "skip_empty",
                "name"
            ],
            "string_split_eager_fallback": [
                "input",
                "delimiter",
                "skip_empty",
                "name",
                "ctx"
            ],
            "string_split_v2": [
                "input",
                "sep",
                "maxsplit",
                "name"
            ],
            "StringSplitV2": [
                "input",
                "sep",
                "maxsplit",
                "name"
            ],
            "string_split_v2_eager_fallback": [
                "input",
                "sep",
                "maxsplit",
                "name",
                "ctx"
            ],
            "string_strip": [
                "input",
                "name"
            ],
            "StringStrip": [
                "input",
                "name"
            ],
            "string_strip_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "string_to_hash_bucket": [
                "string_tensor",
                "num_buckets",
                "name"
            ],
            "StringToHashBucket": [
                "string_tensor",
                "num_buckets",
                "name"
            ],
            "string_to_hash_bucket_eager_fallback": [
                "string_tensor",
                "num_buckets",
                "name",
                "ctx"
            ],
            "string_to_hash_bucket_fast": [
                "input",
                "num_buckets",
                "name"
            ],
            "StringToHashBucketFast": [
                "input",
                "num_buckets",
                "name"
            ],
            "string_to_hash_bucket_fast_eager_fallback": [
                "input",
                "num_buckets",
                "name",
                "ctx"
            ],
            "string_to_hash_bucket_strong": [
                "input",
                "num_buckets",
                "key",
                "name"
            ],
            "StringToHashBucketStrong": [
                "input",
                "num_buckets",
                "key",
                "name"
            ],
            "string_to_hash_bucket_strong_eager_fallback": [
                "input",
                "num_buckets",
                "key",
                "name",
                "ctx"
            ],
            "string_upper": [
                "input",
                "encoding",
                "name"
            ],
            "StringUpper": [
                "input",
                "encoding",
                "name"
            ],
            "string_upper_eager_fallback": [
                "input",
                "encoding",
                "name",
                "ctx"
            ],
            "substr": [
                "input",
                "pos",
                "len",
                "unit",
                "name"
            ],
            "Substr": [
                "input",
                "pos",
                "len",
                "unit",
                "name"
            ],
            "substr_eager_fallback": [
                "input",
                "pos",
                "len",
                "unit",
                "name",
                "ctx"
            ],
            "unicode_decode": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "Tsplits",
                "name"
            ],
            "UnicodeDecode": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "Tsplits",
                "name"
            ],
            "unicode_decode_eager_fallback": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "Tsplits",
                "name",
                "ctx"
            ],
            "unicode_decode_with_offsets": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "Tsplits",
                "name"
            ],
            "UnicodeDecodeWithOffsets": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "Tsplits",
                "name"
            ],
            "unicode_decode_with_offsets_eager_fallback": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "Tsplits",
                "name",
                "ctx"
            ],
            "unicode_encode": [
                "input_values",
                "input_splits",
                "output_encoding",
                "errors",
                "replacement_char",
                "name"
            ],
            "UnicodeEncode": [
                "input_values",
                "input_splits",
                "output_encoding",
                "errors",
                "replacement_char",
                "name"
            ],
            "unicode_encode_eager_fallback": [
                "input_values",
                "input_splits",
                "output_encoding",
                "errors",
                "replacement_char",
                "name",
                "ctx"
            ],
            "unicode_script": [
                "input",
                "name"
            ],
            "UnicodeScript": [
                "input",
                "name"
            ],
            "unicode_script_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "unicode_transcode": [
                "input",
                "input_encoding",
                "output_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "name"
            ],
            "UnicodeTranscode": [
                "input",
                "input_encoding",
                "output_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "name"
            ],
            "unicode_transcode_eager_fallback": [
                "input",
                "input_encoding",
                "output_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "name",
                "ctx"
            ],
            "unsorted_segment_join": [
                "inputs",
                "segment_ids",
                "num_segments",
                "separator",
                "name"
            ],
            "UnsortedSegmentJoin": [
                "inputs",
                "segment_ids",
                "num_segments",
                "separator",
                "name"
            ],
            "unsorted_segment_join_eager_fallback": [
                "inputs",
                "segment_ids",
                "num_segments",
                "separator",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_batch_ops": {
            "batch": [
                "in_tensors",
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "grad_timeout_micros",
                "max_enqueued_batches",
                "allowed_batch_sizes",
                "container",
                "shared_name",
                "batching_queue",
                "name"
            ],
            "Batch": [
                "in_tensors",
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "grad_timeout_micros",
                "max_enqueued_batches",
                "allowed_batch_sizes",
                "container",
                "shared_name",
                "batching_queue",
                "name"
            ],
            "batch_eager_fallback": [
                "in_tensors",
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "grad_timeout_micros",
                "max_enqueued_batches",
                "allowed_batch_sizes",
                "container",
                "shared_name",
                "batching_queue",
                "name",
                "ctx"
            ],
            "batch_function": [
                "in_tensors",
                "captured_tensors",
                "f",
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "Tout",
                "max_enqueued_batches",
                "allowed_batch_sizes",
                "container",
                "shared_name",
                "batching_queue",
                "name"
            ],
            "BatchFunction": [
                "in_tensors",
                "captured_tensors",
                "f",
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "Tout",
                "max_enqueued_batches",
                "allowed_batch_sizes",
                "container",
                "shared_name",
                "batching_queue",
                "name"
            ],
            "batch_function_eager_fallback": [
                "in_tensors",
                "captured_tensors",
                "f",
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "Tout",
                "max_enqueued_batches",
                "allowed_batch_sizes",
                "container",
                "shared_name",
                "batching_queue",
                "name",
                "ctx"
            ],
            "unbatch": [
                "batched_tensor",
                "batch_index",
                "id",
                "timeout_micros",
                "container",
                "shared_name",
                "name"
            ],
            "Unbatch": [
                "batched_tensor",
                "batch_index",
                "id",
                "timeout_micros",
                "container",
                "shared_name",
                "name"
            ],
            "unbatch_eager_fallback": [
                "batched_tensor",
                "batch_index",
                "id",
                "timeout_micros",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "unbatch_grad": [
                "original_input",
                "batch_index",
                "grad",
                "id",
                "container",
                "shared_name",
                "name"
            ],
            "UnbatchGrad": [
                "original_input",
                "batch_index",
                "grad",
                "id",
                "container",
                "shared_name",
                "name"
            ],
            "unbatch_grad_eager_fallback": [
                "original_input",
                "batch_index",
                "grad",
                "id",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.image_ops": {},
        "tensorflow_core.python.ops.nn_ops": {
            "_get_sequence": [
                "value",
                "n",
                "channel_index",
                "name"
            ],
            "_non_atrous_convolution": [
                "input",
                "filter",
                "padding",
                "data_format",
                "strides",
                "name"
            ],
            "dilation2d_v2": [
                "input",
                "filters",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "dilation2d_v1": [
                "input",
                "filter",
                "strides",
                "rates",
                "padding",
                "name",
                "filters",
                "dilations"
            ],
            "with_space_to_batch": [
                "input",
                "dilation_rate",
                "padding",
                "op",
                "filter_shape",
                "spatial_dims",
                "data_format"
            ],
            "_with_space_to_batch_base_paddings": [
                "filter_shape",
                "num_spatial_dims",
                "rate_or_const_rate"
            ],
            "_with_space_to_batch_adjust": [
                "orig",
                "fill_value",
                "spatial_dims"
            ],
            "_get_strides_and_dilation_rate": [
                "num_spatial_dims",
                "strides",
                "dilation_rate"
            ],
            "convolution": [
                "input",
                "filter",
                "padding",
                "strides",
                "dilation_rate",
                "name",
                "data_format",
                "filters",
                "dilations"
            ],
            "convolution_v2": [
                "input",
                "filters",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "_enclosing_tpu_context": [],
            "convolution_internal": [
                "input",
                "filters",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "call_from_convolution"
            ],
            "pool": [
                "input",
                "window_shape",
                "pooling_type",
                "padding",
                "dilation_rate",
                "strides",
                "name",
                "data_format",
                "dilations"
            ],
            "pool_v2": [
                "input",
                "window_shape",
                "pooling_type",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "atrous_conv2d": [
                "value",
                "filters",
                "rate",
                "padding",
                "name"
            ],
            "_convert_padding": [
                "padding"
            ],
            "conv1d": [
                "value",
                "filters",
                "stride",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name",
                "input",
                "dilations"
            ],
            "conv1d_v2": [
                "input",
                "filters",
                "stride",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv1d_transpose": [
                "input",
                "filters",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv2d_v2": [
                "input",
                "filters",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv2d": [
                "input",
                "filter",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "dilations",
                "name",
                "filters"
            ],
            "conv2d_backprop_filter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "dilations",
                "name"
            ],
            "conv2d_backprop_input": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "dilations",
                "name",
                "filters"
            ],
            "conv2d_transpose": [
                "value",
                "filter",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "name",
                "input",
                "filters",
                "dilations"
            ],
            "conv2d_transpose_v2": [
                "input",
                "filters",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "atrous_conv2d_transpose": [
                "value",
                "filters",
                "output_shape",
                "rate",
                "padding",
                "name"
            ],
            "conv3d_v2": [
                "input",
                "filters",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv3d_v1": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "filters"
            ],
            "conv3d_transpose": [
                "value",
                "filter",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "name",
                "input",
                "filters",
                "dilations"
            ],
            "conv3d_transpose_v2": [
                "input",
                "filters",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv_transpose": [
                "input",
                "filters",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "bias_add": [
                "value",
                "bias",
                "data_format",
                "name"
            ],
            "bias_add_v1": [
                "value",
                "bias",
                "name"
            ],
            "crelu": [
                "features",
                "name",
                "axis"
            ],
            "crelu_v2": [
                "features",
                "axis",
                "name"
            ],
            "relu6": [
                "features",
                "name"
            ],
            "leaky_relu": [
                "features",
                "alpha",
                "name"
            ],
            "_flatten_outer_dims": [
                "logits"
            ],
            "_softmax": [
                "logits",
                "compute_op",
                "dim",
                "name"
            ],
            "softmax": [
                "logits",
                "axis",
                "name",
                "dim"
            ],
            "softmax_v2": [
                "logits",
                "axis",
                "name"
            ],
            "log_softmax": [
                "logits",
                "axis",
                "name",
                "dim"
            ],
            "log_softmax_v2": [
                "logits",
                "axis",
                "name"
            ],
            "_ensure_xent_args": [
                "name",
                "sentinel",
                "labels",
                "logits"
            ],
            "softmax_cross_entropy_with_logits_v2": [
                "labels",
                "logits",
                "axis",
                "name"
            ],
            "softmax_cross_entropy_with_logits_v2_helper": [
                "labels",
                "logits",
                "axis",
                "name",
                "dim"
            ],
            "softmax_cross_entropy_with_logits": [
                "_sentinel",
                "labels",
                "logits",
                "dim",
                "name",
                "axis"
            ],
            "sparse_softmax_cross_entropy_with_logits": [
                "_sentinel",
                "labels",
                "logits",
                "name"
            ],
            "sparse_softmax_cross_entropy_with_logits_v2": [
                "labels",
                "logits",
                "name"
            ],
            "avg_pool_v2": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "input"
            ],
            "avg_pool2d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool1d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_v2": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "input"
            ],
            "max_pool1d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool2d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_with_argmax_v2": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "output_dtype",
                "include_batch_in_index",
                "name"
            ],
            "max_pool_with_argmax_v1": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "Targmax",
                "name",
                "output_dtype",
                "include_batch_in_index"
            ],
            "_calc_conv3d_flops": [
                "graph",
                "node"
            ],
            "_calc_conv_flops": [
                "graph",
                "node"
            ],
            "_calc_depthwise_conv_flops": [
                "graph",
                "node"
            ],
            "_calc_bias_add_flops": [
                "graph",
                "node"
            ],
            "xw_plus_b": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "xw_plus_b_v1": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "_get_noise_shape": [
                "x",
                "noise_shape"
            ],
            "dropout": [
                "x",
                "keep_prob",
                "noise_shape",
                "seed",
                "name",
                "rate"
            ],
            "dropout_v2": [
                "x",
                "rate",
                "noise_shape",
                "seed",
                "name"
            ],
            "top_k": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "nth_element": [
                "input",
                "n",
                "reverse",
                "name"
            ],
            "fractional_max_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "fractional_max_pool_v2": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "seed",
                "name"
            ],
            "fractional_avg_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "fractional_avg_pool_v2": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "seed",
                "name"
            ],
            "_calc_dilation2d_flops": [
                "graph",
                "node"
            ],
            "erosion2d": [
                "value",
                "kernel",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "erosion2d_v2": [
                "value",
                "filters",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "in_top_k": [
                "predictions",
                "targets",
                "k",
                "name"
            ],
            "in_top_k_v2": [
                "targets",
                "predictions",
                "k",
                "name"
            ],
            "_NonAtrousConvolution": {
                "__init__": [
                    "self",
                    "input_shape",
                    "filter_shape",
                    "padding",
                    "data_format",
                    "strides",
                    "name"
                ],
                "_conv1d": [
                    "self",
                    "input",
                    "filter",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ],
                "__call__": [
                    "self",
                    "inp",
                    "filter"
                ]
            },
            "_WithSpaceToBatch": {
                "__init__": [
                    "self",
                    "input_shape",
                    "dilation_rate",
                    "padding",
                    "build_op",
                    "filter_shape",
                    "spatial_dims",
                    "data_format"
                ],
                "_with_space_to_batch_call": [
                    "self",
                    "inp",
                    "filter"
                ],
                "__call__": [
                    "self",
                    "inp",
                    "filter"
                ]
            },
            "Convolution": {
                "__init__": [
                    "self",
                    "input_shape",
                    "filter_shape",
                    "padding",
                    "strides",
                    "dilation_rate",
                    "name",
                    "data_format"
                ],
                "_build_op": [
                    "self",
                    "_",
                    "padding"
                ],
                "__call__": [
                    "self",
                    "inp",
                    "filter"
                ]
            }
        },
        "tensorflow_core.python.ops.variable_scope": {
            "enable_resource_variables": [],
            "resource_variables_enabled": [],
            "disable_resource_variables": [],
            "no_regularizer": [
                "_"
            ],
            "get_variable_scope_store": [],
            "get_variable_scope": [],
            "_get_default_variable_store": [],
            "with_variable_store": [
                "store"
            ],
            "get_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "validate_shape",
                "use_resource",
                "custom_getter",
                "constraint",
                "synchronization",
                "aggregation"
            ],
            "get_local_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "validate_shape",
                "use_resource",
                "custom_getter",
                "constraint",
                "synchronization",
                "aggregation"
            ],
            "_get_partitioned_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "validate_shape",
                "use_resource",
                "constraint",
                "synchronization",
                "aggregation"
            ],
            "_maybe_wrap_custom_getter": [
                "custom_getter",
                "old_getter"
            ],
            "_get_unique_variable_scope": [
                "prefix"
            ],
            "variable_op_scope": [
                "values",
                "name_or_scope",
                "default_name",
                "initializer",
                "regularizer",
                "caching_device",
                "partitioner",
                "custom_getter",
                "reuse",
                "dtype",
                "use_resource",
                "constraint"
            ],
            "_call_partitioner": [
                "partitioner",
                "shape",
                "dtype"
            ],
            "_get_slice_dim_and_num_slices": [
                "slicing"
            ],
            "_iter_slices": [
                "full_shape",
                "num_slices",
                "slice_dim"
            ],
            "default_variable_creator": [
                "next_creator"
            ],
            "default_variable_creator_v2": [
                "next_creator"
            ],
            "_make_getter": [
                "captured_getter",
                "captured_previous"
            ],
            "variable_creator_scope_v1": [
                "variable_creator"
            ],
            "variable_creator_scope": [
                "variable_creator"
            ],
            "_PartitionInfo": {
                "__init__": [
                    "self",
                    "full_shape",
                    "var_offset"
                ],
                "full_shape": [
                    "self"
                ],
                "var_offset": [
                    "self"
                ],
                "single_offset": [
                    "self",
                    "shape"
                ],
                "single_slice_dim": [
                    "self",
                    "shape"
                ]
            },
            "_ReuseMode": {},
            "_VariableStore": {
                "__init__": [
                    "self"
                ],
                "get_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape",
                    "use_resource",
                    "custom_getter",
                    "constraint",
                    "synchronization",
                    "aggregation"
                ],
                "_get_partitioned_variable": [
                    "self",
                    "name",
                    "partitioner",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "validate_shape",
                    "use_resource",
                    "constraint",
                    "synchronization",
                    "aggregation"
                ],
                "_get_single_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "partition_info",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "validate_shape",
                    "use_resource",
                    "constraint",
                    "synchronization",
                    "aggregation"
                ],
                "_get_default_initializer": [
                    "self",
                    "name",
                    "shape",
                    "dtype"
                ]
            },
            "VariableScope": {
                "__init__": [
                    "self",
                    "reuse",
                    "name",
                    "initializer",
                    "regularizer",
                    "caching_device",
                    "partitioner",
                    "custom_getter",
                    "name_scope",
                    "dtype",
                    "use_resource",
                    "constraint"
                ],
                "name": [
                    "self"
                ],
                "original_name_scope": [
                    "self"
                ],
                "reuse": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "use_resource": [
                    "self"
                ],
                "regularizer": [
                    "self"
                ],
                "caching_device": [
                    "self"
                ],
                "partitioner": [
                    "self"
                ],
                "custom_getter": [
                    "self"
                ],
                "constraint": [
                    "self"
                ],
                "reuse_variables": [
                    "self"
                ],
                "set_initializer": [
                    "self",
                    "initializer"
                ],
                "set_dtype": [
                    "self",
                    "dtype"
                ],
                "set_use_resource": [
                    "self",
                    "use_resource"
                ],
                "set_regularizer": [
                    "self",
                    "regularizer"
                ],
                "set_caching_device": [
                    "self",
                    "caching_device"
                ],
                "set_partitioner": [
                    "self",
                    "partitioner"
                ],
                "set_custom_getter": [
                    "self",
                    "custom_getter"
                ],
                "get_collection": [
                    "self",
                    "name"
                ],
                "trainable_variables": [
                    "self"
                ],
                "global_variables": [
                    "self"
                ],
                "local_variables": [
                    "self"
                ],
                "get_variable": [
                    "self",
                    "var_store",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape",
                    "use_resource",
                    "custom_getter",
                    "constraint",
                    "synchronization",
                    "aggregation"
                ],
                "_get_partitioned_variable": [
                    "self",
                    "var_store",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape",
                    "use_resource",
                    "constraint",
                    "synchronization",
                    "aggregation"
                ]
            },
            "_VariableScopeStore": {
                "__init__": [
                    "self"
                ],
                "open_variable_scope": [
                    "self",
                    "scope_name"
                ],
                "close_variable_subscopes": [
                    "self",
                    "scope_name"
                ],
                "variable_scope_count": [
                    "self",
                    "scope_name"
                ]
            },
            "EagerVariableStore": {
                "__init__": [
                    "self",
                    "store"
                ],
                "as_default": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ],
                "copy": [
                    "self"
                ]
            },
            "_pure_variable_scope": {
                "__init__": [
                    "self",
                    "name_or_scope",
                    "reuse",
                    "initializer",
                    "regularizer",
                    "caching_device",
                    "partitioner",
                    "custom_getter",
                    "old_name_scope",
                    "dtype",
                    "use_resource",
                    "constraint"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type_arg",
                    "value_arg",
                    "traceback_arg"
                ]
            },
            "variable_scope": {
                "__init__": [
                    "self",
                    "name_or_scope",
                    "default_name",
                    "values",
                    "initializer",
                    "regularizer",
                    "caching_device",
                    "partitioner",
                    "custom_getter",
                    "reuse",
                    "dtype",
                    "use_resource",
                    "constraint",
                    "auxiliary_name_scope"
                ],
                "__enter__": [
                    "self"
                ],
                "_enter_scope_uncached": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type_arg",
                    "value_arg",
                    "traceback_arg"
                ]
            }
        },
        "tensorflow_core.python.ops.gen_decode_proto_ops": {
            "decode_proto_v2": [
                "bytes",
                "message_type",
                "field_names",
                "output_types",
                "descriptor_source",
                "message_format",
                "sanitize",
                "name"
            ],
            "DecodeProtoV2": [
                "bytes",
                "message_type",
                "field_names",
                "output_types",
                "descriptor_source",
                "message_format",
                "sanitize",
                "name"
            ],
            "decode_proto_v2_eager_fallback": [
                "bytes",
                "message_type",
                "field_names",
                "output_types",
                "descriptor_source",
                "message_format",
                "sanitize",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_checkpoint_ops": {
            "generate_vocab_remapping": [
                "new_vocab_file",
                "old_vocab_file",
                "new_vocab_offset",
                "num_new_vocab",
                "old_vocab_size",
                "name"
            ],
            "GenerateVocabRemapping": [
                "new_vocab_file",
                "old_vocab_file",
                "new_vocab_offset",
                "num_new_vocab",
                "old_vocab_size",
                "name"
            ],
            "generate_vocab_remapping_eager_fallback": [
                "new_vocab_file",
                "old_vocab_file",
                "new_vocab_offset",
                "num_new_vocab",
                "old_vocab_size",
                "name",
                "ctx"
            ],
            "load_and_remap_matrix": [
                "ckpt_path",
                "old_tensor_name",
                "row_remapping",
                "col_remapping",
                "initializing_values",
                "num_rows",
                "num_cols",
                "max_rows_in_memory",
                "name"
            ],
            "LoadAndRemapMatrix": [
                "ckpt_path",
                "old_tensor_name",
                "row_remapping",
                "col_remapping",
                "initializing_values",
                "num_rows",
                "num_cols",
                "max_rows_in_memory",
                "name"
            ],
            "load_and_remap_matrix_eager_fallback": [
                "ckpt_path",
                "old_tensor_name",
                "row_remapping",
                "col_remapping",
                "initializing_values",
                "num_rows",
                "num_cols",
                "max_rows_in_memory",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_parsing_ops": {
            "decode_csv": [
                "records",
                "record_defaults",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "name"
            ],
            "DecodeCSV": [
                "records",
                "record_defaults",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "name"
            ],
            "decode_csv_eager_fallback": [
                "records",
                "record_defaults",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "name",
                "ctx"
            ],
            "decode_compressed": [
                "bytes",
                "compression_type",
                "name"
            ],
            "DecodeCompressed": [
                "bytes",
                "compression_type",
                "name"
            ],
            "decode_compressed_eager_fallback": [
                "bytes",
                "compression_type",
                "name",
                "ctx"
            ],
            "decode_json_example": [
                "json_examples",
                "name"
            ],
            "DecodeJSONExample": [
                "json_examples",
                "name"
            ],
            "decode_json_example_eager_fallback": [
                "json_examples",
                "name",
                "ctx"
            ],
            "decode_padded_raw": [
                "input_bytes",
                "fixed_length",
                "out_type",
                "little_endian",
                "name"
            ],
            "DecodePaddedRaw": [
                "input_bytes",
                "fixed_length",
                "out_type",
                "little_endian",
                "name"
            ],
            "decode_padded_raw_eager_fallback": [
                "input_bytes",
                "fixed_length",
                "out_type",
                "little_endian",
                "name",
                "ctx"
            ],
            "decode_raw": [
                "bytes",
                "out_type",
                "little_endian",
                "name"
            ],
            "DecodeRaw": [
                "bytes",
                "out_type",
                "little_endian",
                "name"
            ],
            "decode_raw_eager_fallback": [
                "bytes",
                "out_type",
                "little_endian",
                "name",
                "ctx"
            ],
            "parse_example": [
                "serialized",
                "names",
                "sparse_keys",
                "dense_keys",
                "dense_defaults",
                "sparse_types",
                "dense_shapes",
                "name"
            ],
            "ParseExample": [
                "serialized",
                "names",
                "sparse_keys",
                "dense_keys",
                "dense_defaults",
                "sparse_types",
                "dense_shapes",
                "name"
            ],
            "parse_example_eager_fallback": [
                "serialized",
                "names",
                "sparse_keys",
                "dense_keys",
                "dense_defaults",
                "sparse_types",
                "dense_shapes",
                "name",
                "ctx"
            ],
            "parse_sequence_example": [
                "serialized",
                "debug_name",
                "context_dense_defaults",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "Ncontext_sparse",
                "Ncontext_dense",
                "Nfeature_list_sparse",
                "Nfeature_list_dense",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name"
            ],
            "ParseSequenceExample": [
                "serialized",
                "debug_name",
                "context_dense_defaults",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "Ncontext_sparse",
                "Ncontext_dense",
                "Nfeature_list_sparse",
                "Nfeature_list_dense",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name"
            ],
            "parse_sequence_example_eager_fallback": [
                "serialized",
                "debug_name",
                "context_dense_defaults",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "Ncontext_sparse",
                "Ncontext_dense",
                "Nfeature_list_sparse",
                "Nfeature_list_dense",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name",
                "ctx"
            ],
            "parse_single_example": [
                "serialized",
                "dense_defaults",
                "num_sparse",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "name"
            ],
            "ParseSingleExample": [
                "serialized",
                "dense_defaults",
                "num_sparse",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "name"
            ],
            "parse_single_example_eager_fallback": [
                "serialized",
                "dense_defaults",
                "num_sparse",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "name",
                "ctx"
            ],
            "parse_single_sequence_example": [
                "serialized",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "context_dense_defaults",
                "debug_name",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name"
            ],
            "ParseSingleSequenceExample": [
                "serialized",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "context_dense_defaults",
                "debug_name",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name"
            ],
            "parse_single_sequence_example_eager_fallback": [
                "serialized",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "context_dense_defaults",
                "debug_name",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name",
                "ctx"
            ],
            "parse_tensor": [
                "serialized",
                "out_type",
                "name"
            ],
            "ParseTensor": [
                "serialized",
                "out_type",
                "name"
            ],
            "parse_tensor_eager_fallback": [
                "serialized",
                "out_type",
                "name",
                "ctx"
            ],
            "serialize_tensor": [
                "tensor",
                "name"
            ],
            "SerializeTensor": [
                "tensor",
                "name"
            ],
            "serialize_tensor_eager_fallback": [
                "tensor",
                "name",
                "ctx"
            ],
            "string_to_number": [
                "string_tensor",
                "out_type",
                "name"
            ],
            "StringToNumber": [
                "string_tensor",
                "out_type",
                "name"
            ],
            "string_to_number_eager_fallback": [
                "string_tensor",
                "out_type",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.control_flow_v2_func_graphs": {
            "CondBranchFuncGraph": {},
            "WhileCondFuncGraph": {},
            "WhileBodyFuncGraph": {}
        },
        "tensorflow_core.python.ops.stateless_random_ops": {
            "stateless_random_uniform": [
                "shape",
                "seed",
                "minval",
                "maxval",
                "dtype",
                "name"
            ],
            "stateless_random_normal": [
                "shape",
                "seed",
                "mean",
                "stddev",
                "dtype",
                "name"
            ],
            "stateless_truncated_normal": [
                "shape",
                "seed",
                "mean",
                "stddev",
                "dtype",
                "name"
            ],
            "stateless_multinomial": [
                "logits",
                "num_samples",
                "seed",
                "output_dtype",
                "name"
            ],
            "stateless_categorical": [
                "logits",
                "num_samples",
                "seed",
                "dtype",
                "name"
            ],
            "stateless_multinomial_categorical_impl": [
                "logits",
                "num_samples",
                "dtype",
                "seed"
            ]
        },
        "tensorflow_core.python.ops.gen_state_ops": {
            "assign": [
                "ref",
                "value",
                "validate_shape",
                "use_locking",
                "name"
            ],
            "Assign": [
                "ref",
                "value",
                "validate_shape",
                "use_locking",
                "name"
            ],
            "assign_eager_fallback": [
                "ref",
                "value",
                "validate_shape",
                "use_locking",
                "name",
                "ctx"
            ],
            "assign_add": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "AssignAdd": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "assign_add_eager_fallback": [
                "ref",
                "value",
                "use_locking",
                "name",
                "ctx"
            ],
            "assign_sub": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "AssignSub": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "assign_sub_eager_fallback": [
                "ref",
                "value",
                "use_locking",
                "name",
                "ctx"
            ],
            "count_up_to": [
                "ref",
                "limit",
                "name"
            ],
            "CountUpTo": [
                "ref",
                "limit",
                "name"
            ],
            "count_up_to_eager_fallback": [
                "ref",
                "limit",
                "name",
                "ctx"
            ],
            "destroy_temporary_variable": [
                "ref",
                "var_name",
                "name"
            ],
            "DestroyTemporaryVariable": [
                "ref",
                "var_name",
                "name"
            ],
            "destroy_temporary_variable_eager_fallback": [
                "ref",
                "var_name",
                "name",
                "ctx"
            ],
            "is_variable_initialized": [
                "ref",
                "name"
            ],
            "IsVariableInitialized": [
                "ref",
                "name"
            ],
            "is_variable_initialized_eager_fallback": [
                "ref",
                "name",
                "ctx"
            ],
            "resource_count_up_to": [
                "resource",
                "limit",
                "T",
                "name"
            ],
            "ResourceCountUpTo": [
                "resource",
                "limit",
                "T",
                "name"
            ],
            "resource_count_up_to_eager_fallback": [
                "resource",
                "limit",
                "T",
                "name",
                "ctx"
            ],
            "resource_scatter_nd_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ResourceScatterNdAdd": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "resource_scatter_nd_add_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_scatter_nd_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ResourceScatterNdSub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "resource_scatter_nd_sub_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_scatter_nd_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ResourceScatterNdUpdate": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "resource_scatter_nd_update_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterAdd": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_add_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_div": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterDiv": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_div_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_max": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterMax": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_max_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_min": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterMin": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_min_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_mul": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterMul": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_mul_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_nd_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterNdAdd": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_add_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_nd_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterNdSub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_sub_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_nd_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterNdUpdate": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_update_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterSub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_sub_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "scatter_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "ScatterUpdate": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_update_eager_fallback": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name",
                "ctx"
            ],
            "temporary_variable": [
                "shape",
                "dtype",
                "var_name",
                "name"
            ],
            "TemporaryVariable": [
                "shape",
                "dtype",
                "var_name",
                "name"
            ],
            "temporary_variable_eager_fallback": [
                "shape",
                "dtype",
                "var_name",
                "name",
                "ctx"
            ],
            "variable": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "Variable": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "variable_eager_fallback": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "variable_v2": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "VariableV2": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "variable_v2_eager_fallback": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gradients": {},
        "tensorflow_core.python.ops.optional_grad": {
            "_OptionalFromValueGrad": [
                "op",
                "grad"
            ],
            "_OptionalGetValueGrad": [
                "unused_op"
            ]
        },
        "tensorflow_core.python.ops.list_ops": {
            "empty_tensor_list": [
                "element_shape",
                "element_dtype",
                "max_num_elements",
                "name"
            ],
            "tensor_list_reserve": [
                "element_shape",
                "num_elements",
                "element_dtype",
                "name"
            ],
            "tensor_list_from_tensor": [
                "tensor",
                "element_shape",
                "name"
            ],
            "tensor_list_get_item": [
                "input_handle",
                "index",
                "element_dtype",
                "element_shape",
                "name"
            ],
            "tensor_list_pop_back": [
                "input_handle",
                "element_dtype",
                "name"
            ],
            "tensor_list_gather": [
                "input_handle",
                "indices",
                "element_dtype",
                "element_shape",
                "name"
            ],
            "tensor_list_scatter": [
                "tensor",
                "indices",
                "element_shape",
                "input_handle",
                "name"
            ],
            "tensor_list_stack": [
                "input_handle",
                "element_dtype",
                "num_elements",
                "element_shape",
                "name"
            ],
            "tensor_list_concat": [
                "input_handle",
                "element_dtype",
                "element_shape",
                "name"
            ],
            "tensor_list_split": [
                "tensor",
                "element_shape",
                "lengths",
                "name"
            ],
            "tensor_list_set_item": [
                "input_handle",
                "index",
                "item",
                "resize_if_index_out_of_bounds",
                "name"
            ],
            "_PushBackGrad": [
                "op",
                "dresult"
            ],
            "_PopBackGrad": [
                "op",
                "dlist",
                "delement"
            ],
            "_TensorListStackGrad": [
                "unused_op",
                "dtensor"
            ],
            "_TensorListConcatGrad": [
                "op",
                "dtensor",
                "unused_dlengths"
            ],
            "_TensorListSplitGrad": [
                "op",
                "dlist"
            ],
            "_TensorListFromTensorGrad": [
                "op",
                "dlist"
            ],
            "_TensorListGetItemGrad": [
                "op",
                "ditem"
            ],
            "_TensorListSetItemGrad": [
                "op",
                "dlist"
            ],
            "_TensorListResizeGrad": [
                "op",
                "dlist"
            ],
            "_TensorListGatherGrad": [
                "op",
                "dtensor"
            ],
            "_TensorListScatterGrad": [
                "op",
                "dlist"
            ],
            "_TensorListScatterIntoExistingListGrad": [
                "op",
                "dlist"
            ],
            "_build_element_shape": [
                "shape"
            ]
        },
        "tensorflow_core.python.ops.gen_clustering_ops": {
            "kmc2_chain_initialization": [
                "distances",
                "seed",
                "name"
            ],
            "KMC2ChainInitialization": [
                "distances",
                "seed",
                "name"
            ],
            "kmc2_chain_initialization_eager_fallback": [
                "distances",
                "seed",
                "name",
                "ctx"
            ],
            "kmeans_plus_plus_initialization": [
                "points",
                "num_to_sample",
                "seed",
                "num_retries_per_sample",
                "name"
            ],
            "KmeansPlusPlusInitialization": [
                "points",
                "num_to_sample",
                "seed",
                "num_retries_per_sample",
                "name"
            ],
            "kmeans_plus_plus_initialization_eager_fallback": [
                "points",
                "num_to_sample",
                "seed",
                "num_retries_per_sample",
                "name",
                "ctx"
            ],
            "nearest_neighbors": [
                "points",
                "centers",
                "k",
                "name"
            ],
            "NearestNeighbors": [
                "points",
                "centers",
                "k",
                "name"
            ],
            "nearest_neighbors_eager_fallback": [
                "points",
                "centers",
                "k",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_experimental_dataset_ops": {
            "assert_next_dataset": [
                "input_dataset",
                "transformations",
                "output_types",
                "output_shapes",
                "name"
            ],
            "AssertNextDataset": [
                "input_dataset",
                "transformations",
                "output_types",
                "output_shapes",
                "name"
            ],
            "assert_next_dataset_eager_fallback": [
                "input_dataset",
                "transformations",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "auto_shard_dataset": [
                "input_dataset",
                "num_workers",
                "index",
                "output_types",
                "output_shapes",
                "name"
            ],
            "AutoShardDataset": [
                "input_dataset",
                "num_workers",
                "index",
                "output_types",
                "output_shapes",
                "name"
            ],
            "auto_shard_dataset_eager_fallback": [
                "input_dataset",
                "num_workers",
                "index",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "bytes_produced_stats_dataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "BytesProducedStatsDataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "bytes_produced_stats_dataset_eager_fallback": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "csv_dataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "header",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "record_defaults",
                "output_shapes",
                "name"
            ],
            "CSVDataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "header",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "record_defaults",
                "output_shapes",
                "name"
            ],
            "csv_dataset_eager_fallback": [
                "filenames",
                "compression_type",
                "buffer_size",
                "header",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "record_defaults",
                "output_shapes",
                "name",
                "ctx"
            ],
            "choose_fastest_branch_dataset": [
                "input_dataset",
                "ratio_numerator",
                "ratio_denominator",
                "other_arguments",
                "num_elements_per_branch",
                "branches",
                "other_arguments_lengths",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ChooseFastestBranchDataset": [
                "input_dataset",
                "ratio_numerator",
                "ratio_denominator",
                "other_arguments",
                "num_elements_per_branch",
                "branches",
                "other_arguments_lengths",
                "output_types",
                "output_shapes",
                "name"
            ],
            "choose_fastest_branch_dataset_eager_fallback": [
                "input_dataset",
                "ratio_numerator",
                "ratio_denominator",
                "other_arguments",
                "num_elements_per_branch",
                "branches",
                "other_arguments_lengths",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "choose_fastest_dataset": [
                "input_datasets",
                "num_experiments",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ChooseFastestDataset": [
                "input_datasets",
                "num_experiments",
                "output_types",
                "output_shapes",
                "name"
            ],
            "choose_fastest_dataset_eager_fallback": [
                "input_datasets",
                "num_experiments",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "dataset_cardinality": [
                "input_dataset",
                "name"
            ],
            "DatasetCardinality": [
                "input_dataset",
                "name"
            ],
            "dataset_cardinality_eager_fallback": [
                "input_dataset",
                "name",
                "ctx"
            ],
            "dataset_from_graph": [
                "graph_def",
                "name"
            ],
            "DatasetFromGraph": [
                "graph_def",
                "name"
            ],
            "dataset_from_graph_eager_fallback": [
                "graph_def",
                "name",
                "ctx"
            ],
            "dataset_to_tf_record": [
                "input_dataset",
                "filename",
                "compression_type",
                "name"
            ],
            "DatasetToTFRecord": [
                "input_dataset",
                "filename",
                "compression_type",
                "name"
            ],
            "dataset_to_tf_record_eager_fallback": [
                "input_dataset",
                "filename",
                "compression_type",
                "name",
                "ctx"
            ],
            "dense_to_sparse_batch_dataset": [
                "input_dataset",
                "batch_size",
                "row_shape",
                "output_types",
                "output_shapes",
                "name"
            ],
            "DenseToSparseBatchDataset": [
                "input_dataset",
                "batch_size",
                "row_shape",
                "output_types",
                "output_shapes",
                "name"
            ],
            "dense_to_sparse_batch_dataset_eager_fallback": [
                "input_dataset",
                "batch_size",
                "row_shape",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "directed_interleave_dataset": [
                "selector_input_dataset",
                "data_input_datasets",
                "output_types",
                "output_shapes",
                "name"
            ],
            "DirectedInterleaveDataset": [
                "selector_input_dataset",
                "data_input_datasets",
                "output_types",
                "output_shapes",
                "name"
            ],
            "directed_interleave_dataset_eager_fallback": [
                "selector_input_dataset",
                "data_input_datasets",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_assert_next_dataset": [
                "input_dataset",
                "transformations",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalAssertNextDataset": [
                "input_dataset",
                "transformations",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_assert_next_dataset_eager_fallback": [
                "input_dataset",
                "transformations",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_auto_shard_dataset": [
                "input_dataset",
                "num_workers",
                "index",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalAutoShardDataset": [
                "input_dataset",
                "num_workers",
                "index",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_auto_shard_dataset_eager_fallback": [
                "input_dataset",
                "num_workers",
                "index",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_bytes_produced_stats_dataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalBytesProducedStatsDataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_bytes_produced_stats_dataset_eager_fallback": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_csv_dataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "header",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "record_defaults",
                "output_shapes",
                "name"
            ],
            "ExperimentalCSVDataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "header",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "record_defaults",
                "output_shapes",
                "name"
            ],
            "experimental_csv_dataset_eager_fallback": [
                "filenames",
                "compression_type",
                "buffer_size",
                "header",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "record_defaults",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_choose_fastest_dataset": [
                "input_datasets",
                "num_experiments",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalChooseFastestDataset": [
                "input_datasets",
                "num_experiments",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_choose_fastest_dataset_eager_fallback": [
                "input_datasets",
                "num_experiments",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_dataset_cardinality": [
                "input_dataset",
                "name"
            ],
            "ExperimentalDatasetCardinality": [
                "input_dataset",
                "name"
            ],
            "experimental_dataset_cardinality_eager_fallback": [
                "input_dataset",
                "name",
                "ctx"
            ],
            "experimental_dataset_to_tf_record": [
                "input_dataset",
                "filename",
                "compression_type",
                "name"
            ],
            "ExperimentalDatasetToTFRecord": [
                "input_dataset",
                "filename",
                "compression_type",
                "name"
            ],
            "experimental_dataset_to_tf_record_eager_fallback": [
                "input_dataset",
                "filename",
                "compression_type",
                "name",
                "ctx"
            ],
            "experimental_dense_to_sparse_batch_dataset": [
                "input_dataset",
                "batch_size",
                "row_shape",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalDenseToSparseBatchDataset": [
                "input_dataset",
                "batch_size",
                "row_shape",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_dense_to_sparse_batch_dataset_eager_fallback": [
                "input_dataset",
                "batch_size",
                "row_shape",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_directed_interleave_dataset": [
                "selector_input_dataset",
                "data_input_datasets",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalDirectedInterleaveDataset": [
                "selector_input_dataset",
                "data_input_datasets",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_directed_interleave_dataset_eager_fallback": [
                "selector_input_dataset",
                "data_input_datasets",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_group_by_reducer_dataset": [
                "input_dataset",
                "key_func_other_arguments",
                "init_func_other_arguments",
                "reduce_func_other_arguments",
                "finalize_func_other_arguments",
                "key_func",
                "init_func",
                "reduce_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalGroupByReducerDataset": [
                "input_dataset",
                "key_func_other_arguments",
                "init_func_other_arguments",
                "reduce_func_other_arguments",
                "finalize_func_other_arguments",
                "key_func",
                "init_func",
                "reduce_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_group_by_reducer_dataset_eager_fallback": [
                "input_dataset",
                "key_func_other_arguments",
                "init_func_other_arguments",
                "reduce_func_other_arguments",
                "finalize_func_other_arguments",
                "key_func",
                "init_func",
                "reduce_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_group_by_window_dataset": [
                "input_dataset",
                "key_func_other_arguments",
                "reduce_func_other_arguments",
                "window_size_func_other_arguments",
                "key_func",
                "reduce_func",
                "window_size_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalGroupByWindowDataset": [
                "input_dataset",
                "key_func_other_arguments",
                "reduce_func_other_arguments",
                "window_size_func_other_arguments",
                "key_func",
                "reduce_func",
                "window_size_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_group_by_window_dataset_eager_fallback": [
                "input_dataset",
                "key_func_other_arguments",
                "reduce_func_other_arguments",
                "window_size_func_other_arguments",
                "key_func",
                "reduce_func",
                "window_size_func",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_ignore_errors_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalIgnoreErrorsDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_ignore_errors_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_iterator_get_device": [
                "resource",
                "name"
            ],
            "ExperimentalIteratorGetDevice": [
                "resource",
                "name"
            ],
            "experimental_iterator_get_device_eager_fallback": [
                "resource",
                "name",
                "ctx"
            ],
            "experimental_lmdb_dataset": [
                "filenames",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalLMDBDataset": [
                "filenames",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_lmdb_dataset_eager_fallback": [
                "filenames",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_latency_stats_dataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalLatencyStatsDataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_latency_stats_dataset_eager_fallback": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_map_and_batch_dataset": [
                "input_dataset",
                "other_arguments",
                "batch_size",
                "num_parallel_calls",
                "drop_remainder",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "ExperimentalMapAndBatchDataset": [
                "input_dataset",
                "other_arguments",
                "batch_size",
                "num_parallel_calls",
                "drop_remainder",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "experimental_map_and_batch_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "batch_size",
                "num_parallel_calls",
                "drop_remainder",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name",
                "ctx"
            ],
            "experimental_map_dataset": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "preserve_cardinality",
                "name"
            ],
            "ExperimentalMapDataset": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "preserve_cardinality",
                "name"
            ],
            "experimental_map_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "preserve_cardinality",
                "name",
                "ctx"
            ],
            "experimental_matching_files_dataset": [
                "patterns",
                "name"
            ],
            "ExperimentalMatchingFilesDataset": [
                "patterns",
                "name"
            ],
            "experimental_matching_files_dataset_eager_fallback": [
                "patterns",
                "name",
                "ctx"
            ],
            "experimental_max_intra_op_parallelism_dataset": [
                "input_dataset",
                "max_intra_op_parallelism",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalMaxIntraOpParallelismDataset": [
                "input_dataset",
                "max_intra_op_parallelism",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_max_intra_op_parallelism_dataset_eager_fallback": [
                "input_dataset",
                "max_intra_op_parallelism",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_non_serializable_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalNonSerializableDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_non_serializable_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_parallel_interleave_dataset": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalParallelInterleaveDataset": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_parallel_interleave_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements",
                "f",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_parse_example_dataset": [
                "input_dataset",
                "num_parallel_calls",
                "dense_defaults",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "output_types",
                "output_shapes",
                "sloppy",
                "name"
            ],
            "ExperimentalParseExampleDataset": [
                "input_dataset",
                "num_parallel_calls",
                "dense_defaults",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "output_types",
                "output_shapes",
                "sloppy",
                "name"
            ],
            "experimental_parse_example_dataset_eager_fallback": [
                "input_dataset",
                "num_parallel_calls",
                "dense_defaults",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "output_types",
                "output_shapes",
                "sloppy",
                "name",
                "ctx"
            ],
            "experimental_private_thread_pool_dataset": [
                "input_dataset",
                "num_threads",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalPrivateThreadPoolDataset": [
                "input_dataset",
                "num_threads",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_private_thread_pool_dataset_eager_fallback": [
                "input_dataset",
                "num_threads",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_random_dataset": [
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalRandomDataset": [
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_random_dataset_eager_fallback": [
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_rebatch_dataset": [
                "input_dataset",
                "num_replicas",
                "output_types",
                "output_shapes",
                "use_fallback",
                "name"
            ],
            "ExperimentalRebatchDataset": [
                "input_dataset",
                "num_replicas",
                "output_types",
                "output_shapes",
                "use_fallback",
                "name"
            ],
            "experimental_rebatch_dataset_eager_fallback": [
                "input_dataset",
                "num_replicas",
                "output_types",
                "output_shapes",
                "use_fallback",
                "name",
                "ctx"
            ],
            "experimental_scan_dataset": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "ExperimentalScanDataset": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "experimental_scan_dataset_eager_fallback": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name",
                "ctx"
            ],
            "experimental_set_stats_aggregator_dataset": [
                "input_dataset",
                "stats_aggregator",
                "tag",
                "counter_prefix",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalSetStatsAggregatorDataset": [
                "input_dataset",
                "stats_aggregator",
                "tag",
                "counter_prefix",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_set_stats_aggregator_dataset_eager_fallback": [
                "input_dataset",
                "stats_aggregator",
                "tag",
                "counter_prefix",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_sleep_dataset": [
                "input_dataset",
                "sleep_microseconds",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalSleepDataset": [
                "input_dataset",
                "sleep_microseconds",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_sleep_dataset_eager_fallback": [
                "input_dataset",
                "sleep_microseconds",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_sliding_window_dataset": [
                "input_dataset",
                "window_size",
                "window_shift",
                "window_stride",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalSlidingWindowDataset": [
                "input_dataset",
                "window_size",
                "window_shift",
                "window_stride",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_sliding_window_dataset_eager_fallback": [
                "input_dataset",
                "window_size",
                "window_shift",
                "window_stride",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_sql_dataset": [
                "driver_name",
                "data_source_name",
                "query",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalSqlDataset": [
                "driver_name",
                "data_source_name",
                "query",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_sql_dataset_eager_fallback": [
                "driver_name",
                "data_source_name",
                "query",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_stats_aggregator_handle": [
                "container",
                "shared_name",
                "name"
            ],
            "ExperimentalStatsAggregatorHandle": [
                "container",
                "shared_name",
                "name"
            ],
            "experimental_stats_aggregator_handle_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "experimental_stats_aggregator_summary": [
                "iterator",
                "name"
            ],
            "ExperimentalStatsAggregatorSummary": [
                "iterator",
                "name"
            ],
            "experimental_stats_aggregator_summary_eager_fallback": [
                "iterator",
                "name",
                "ctx"
            ],
            "experimental_take_while_dataset": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalTakeWhileDataset": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_take_while_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_thread_pool_dataset": [
                "input_dataset",
                "thread_pool",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalThreadPoolDataset": [
                "input_dataset",
                "thread_pool",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_thread_pool_dataset_eager_fallback": [
                "input_dataset",
                "thread_pool",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_thread_pool_handle": [
                "num_threads",
                "display_name",
                "max_intra_op_parallelism",
                "container",
                "shared_name",
                "name"
            ],
            "ExperimentalThreadPoolHandle": [
                "num_threads",
                "display_name",
                "max_intra_op_parallelism",
                "container",
                "shared_name",
                "name"
            ],
            "experimental_thread_pool_handle_eager_fallback": [
                "num_threads",
                "display_name",
                "max_intra_op_parallelism",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "experimental_unbatch_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalUnbatchDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_unbatch_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "experimental_unique_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ExperimentalUniqueDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "experimental_unique_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "group_by_reducer_dataset": [
                "input_dataset",
                "key_func_other_arguments",
                "init_func_other_arguments",
                "reduce_func_other_arguments",
                "finalize_func_other_arguments",
                "key_func",
                "init_func",
                "reduce_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "GroupByReducerDataset": [
                "input_dataset",
                "key_func_other_arguments",
                "init_func_other_arguments",
                "reduce_func_other_arguments",
                "finalize_func_other_arguments",
                "key_func",
                "init_func",
                "reduce_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "group_by_reducer_dataset_eager_fallback": [
                "input_dataset",
                "key_func_other_arguments",
                "init_func_other_arguments",
                "reduce_func_other_arguments",
                "finalize_func_other_arguments",
                "key_func",
                "init_func",
                "reduce_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "group_by_window_dataset": [
                "input_dataset",
                "key_func_other_arguments",
                "reduce_func_other_arguments",
                "window_size_func_other_arguments",
                "key_func",
                "reduce_func",
                "window_size_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "GroupByWindowDataset": [
                "input_dataset",
                "key_func_other_arguments",
                "reduce_func_other_arguments",
                "window_size_func_other_arguments",
                "key_func",
                "reduce_func",
                "window_size_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "group_by_window_dataset_eager_fallback": [
                "input_dataset",
                "key_func_other_arguments",
                "reduce_func_other_arguments",
                "window_size_func_other_arguments",
                "key_func",
                "reduce_func",
                "window_size_func",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "ignore_errors_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "IgnoreErrorsDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ignore_errors_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator_get_device": [
                "resource",
                "name"
            ],
            "IteratorGetDevice": [
                "resource",
                "name"
            ],
            "iterator_get_device_eager_fallback": [
                "resource",
                "name",
                "ctx"
            ],
            "lmdb_dataset": [
                "filenames",
                "output_types",
                "output_shapes",
                "name"
            ],
            "LMDBDataset": [
                "filenames",
                "output_types",
                "output_shapes",
                "name"
            ],
            "lmdb_dataset_eager_fallback": [
                "filenames",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "latency_stats_dataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "LatencyStatsDataset": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name"
            ],
            "latency_stats_dataset_eager_fallback": [
                "input_dataset",
                "tag",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "map_and_batch_dataset": [
                "input_dataset",
                "other_arguments",
                "batch_size",
                "num_parallel_calls",
                "drop_remainder",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "MapAndBatchDataset": [
                "input_dataset",
                "other_arguments",
                "batch_size",
                "num_parallel_calls",
                "drop_remainder",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "map_and_batch_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "batch_size",
                "num_parallel_calls",
                "drop_remainder",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name",
                "ctx"
            ],
            "matching_files_dataset": [
                "patterns",
                "name"
            ],
            "MatchingFilesDataset": [
                "patterns",
                "name"
            ],
            "matching_files_dataset_eager_fallback": [
                "patterns",
                "name",
                "ctx"
            ],
            "max_intra_op_parallelism_dataset": [
                "input_dataset",
                "max_intra_op_parallelism",
                "output_types",
                "output_shapes",
                "name"
            ],
            "MaxIntraOpParallelismDataset": [
                "input_dataset",
                "max_intra_op_parallelism",
                "output_types",
                "output_shapes",
                "name"
            ],
            "max_intra_op_parallelism_dataset_eager_fallback": [
                "input_dataset",
                "max_intra_op_parallelism",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "non_serializable_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "NonSerializableDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "non_serializable_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "parallel_interleave_dataset": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ParallelInterleaveDataset": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "parallel_interleave_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements",
                "f",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "parse_example_dataset": [
                "input_dataset",
                "num_parallel_calls",
                "dense_defaults",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "output_types",
                "output_shapes",
                "sloppy",
                "name"
            ],
            "ParseExampleDataset": [
                "input_dataset",
                "num_parallel_calls",
                "dense_defaults",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "output_types",
                "output_shapes",
                "sloppy",
                "name"
            ],
            "parse_example_dataset_eager_fallback": [
                "input_dataset",
                "num_parallel_calls",
                "dense_defaults",
                "sparse_keys",
                "dense_keys",
                "sparse_types",
                "dense_shapes",
                "output_types",
                "output_shapes",
                "sloppy",
                "name",
                "ctx"
            ],
            "private_thread_pool_dataset": [
                "input_dataset",
                "num_threads",
                "output_types",
                "output_shapes",
                "name"
            ],
            "PrivateThreadPoolDataset": [
                "input_dataset",
                "num_threads",
                "output_types",
                "output_shapes",
                "name"
            ],
            "private_thread_pool_dataset_eager_fallback": [
                "input_dataset",
                "num_threads",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "random_dataset": [
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name"
            ],
            "RandomDataset": [
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name"
            ],
            "random_dataset_eager_fallback": [
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "rebatch_dataset": [
                "input_dataset",
                "num_replicas",
                "output_types",
                "output_shapes",
                "use_fallback",
                "name"
            ],
            "RebatchDataset": [
                "input_dataset",
                "num_replicas",
                "output_types",
                "output_shapes",
                "use_fallback",
                "name"
            ],
            "rebatch_dataset_eager_fallback": [
                "input_dataset",
                "num_replicas",
                "output_types",
                "output_shapes",
                "use_fallback",
                "name",
                "ctx"
            ],
            "sampling_dataset": [
                "input_dataset",
                "rate",
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name"
            ],
            "SamplingDataset": [
                "input_dataset",
                "rate",
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name"
            ],
            "sampling_dataset_eager_fallback": [
                "input_dataset",
                "rate",
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "scan_dataset": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "ScanDataset": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name"
            ],
            "scan_dataset_eager_fallback": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "preserve_cardinality",
                "name",
                "ctx"
            ],
            "set_stats_aggregator_dataset": [
                "input_dataset",
                "stats_aggregator",
                "tag",
                "counter_prefix",
                "output_types",
                "output_shapes",
                "name"
            ],
            "SetStatsAggregatorDataset": [
                "input_dataset",
                "stats_aggregator",
                "tag",
                "counter_prefix",
                "output_types",
                "output_shapes",
                "name"
            ],
            "set_stats_aggregator_dataset_eager_fallback": [
                "input_dataset",
                "stats_aggregator",
                "tag",
                "counter_prefix",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "sleep_dataset": [
                "input_dataset",
                "sleep_microseconds",
                "output_types",
                "output_shapes",
                "name"
            ],
            "SleepDataset": [
                "input_dataset",
                "sleep_microseconds",
                "output_types",
                "output_shapes",
                "name"
            ],
            "sleep_dataset_eager_fallback": [
                "input_dataset",
                "sleep_microseconds",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "sliding_window_dataset": [
                "input_dataset",
                "window_size",
                "window_shift",
                "window_stride",
                "output_types",
                "output_shapes",
                "name"
            ],
            "SlidingWindowDataset": [
                "input_dataset",
                "window_size",
                "window_shift",
                "window_stride",
                "output_types",
                "output_shapes",
                "name"
            ],
            "sliding_window_dataset_eager_fallback": [
                "input_dataset",
                "window_size",
                "window_shift",
                "window_stride",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "snapshot_dataset": [
                "input_dataset",
                "path",
                "output_types",
                "output_shapes",
                "compression",
                "reader_path_prefix",
                "writer_path_prefix",
                "shard_size_bytes",
                "pending_snapshot_expiry_seconds",
                "num_reader_threads",
                "reader_buffer_size",
                "num_writer_threads",
                "writer_buffer_size",
                "name"
            ],
            "SnapshotDataset": [
                "input_dataset",
                "path",
                "output_types",
                "output_shapes",
                "compression",
                "reader_path_prefix",
                "writer_path_prefix",
                "shard_size_bytes",
                "pending_snapshot_expiry_seconds",
                "num_reader_threads",
                "reader_buffer_size",
                "num_writer_threads",
                "writer_buffer_size",
                "name"
            ],
            "snapshot_dataset_eager_fallback": [
                "input_dataset",
                "path",
                "output_types",
                "output_shapes",
                "compression",
                "reader_path_prefix",
                "writer_path_prefix",
                "shard_size_bytes",
                "pending_snapshot_expiry_seconds",
                "num_reader_threads",
                "reader_buffer_size",
                "num_writer_threads",
                "writer_buffer_size",
                "name",
                "ctx"
            ],
            "sql_dataset": [
                "driver_name",
                "data_source_name",
                "query",
                "output_types",
                "output_shapes",
                "name"
            ],
            "SqlDataset": [
                "driver_name",
                "data_source_name",
                "query",
                "output_types",
                "output_shapes",
                "name"
            ],
            "sql_dataset_eager_fallback": [
                "driver_name",
                "data_source_name",
                "query",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "stats_aggregator_handle": [
                "container",
                "shared_name",
                "name"
            ],
            "StatsAggregatorHandle": [
                "container",
                "shared_name",
                "name"
            ],
            "stats_aggregator_handle_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "stats_aggregator_handle_v2": [
                "container",
                "shared_name",
                "name"
            ],
            "StatsAggregatorHandleV2": [
                "container",
                "shared_name",
                "name"
            ],
            "stats_aggregator_handle_v2_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "stats_aggregator_set_summary_writer": [
                "stats_aggregator",
                "summary",
                "name"
            ],
            "StatsAggregatorSetSummaryWriter": [
                "stats_aggregator",
                "summary",
                "name"
            ],
            "stats_aggregator_set_summary_writer_eager_fallback": [
                "stats_aggregator",
                "summary",
                "name",
                "ctx"
            ],
            "stats_aggregator_summary": [
                "iterator",
                "name"
            ],
            "StatsAggregatorSummary": [
                "iterator",
                "name"
            ],
            "stats_aggregator_summary_eager_fallback": [
                "iterator",
                "name",
                "ctx"
            ],
            "take_while_dataset": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name"
            ],
            "TakeWhileDataset": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name"
            ],
            "take_while_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "thread_pool_dataset": [
                "input_dataset",
                "thread_pool",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ThreadPoolDataset": [
                "input_dataset",
                "thread_pool",
                "output_types",
                "output_shapes",
                "name"
            ],
            "thread_pool_dataset_eager_fallback": [
                "input_dataset",
                "thread_pool",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "thread_pool_handle": [
                "num_threads",
                "display_name",
                "max_intra_op_parallelism",
                "container",
                "shared_name",
                "name"
            ],
            "ThreadPoolHandle": [
                "num_threads",
                "display_name",
                "max_intra_op_parallelism",
                "container",
                "shared_name",
                "name"
            ],
            "thread_pool_handle_eager_fallback": [
                "num_threads",
                "display_name",
                "max_intra_op_parallelism",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "unbatch_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "UnbatchDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "unbatch_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "unique_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "UniqueDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "unique_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_nccl_ops": {
            "nccl_all_reduce": [
                "input",
                "reduction",
                "num_devices",
                "shared_name",
                "name"
            ],
            "NcclAllReduce": [
                "input",
                "reduction",
                "num_devices",
                "shared_name",
                "name"
            ],
            "nccl_all_reduce_eager_fallback": [
                "input",
                "reduction",
                "num_devices",
                "shared_name",
                "name",
                "ctx"
            ],
            "nccl_broadcast": [
                "input",
                "shape",
                "name"
            ],
            "NcclBroadcast": [
                "input",
                "shape",
                "name"
            ],
            "nccl_broadcast_eager_fallback": [
                "input",
                "shape",
                "name",
                "ctx"
            ],
            "nccl_reduce": [
                "input",
                "reduction",
                "name"
            ],
            "NcclReduce": [
                "input",
                "reduction",
                "name"
            ],
            "nccl_reduce_eager_fallback": [
                "input",
                "reduction",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.tensor_array_ops": {
            "build_ta_with_new_flow": [
                "old_ta",
                "flow"
            ],
            "_check_dtypes": [
                "value",
                "dtype"
            ],
            "_GraphTensorArray": {
                "__init__": [
                    "self",
                    "dtype",
                    "size",
                    "dynamic_size",
                    "clear_after_read",
                    "tensor_array_name",
                    "handle",
                    "flow",
                    "infer_shape",
                    "element_shape",
                    "colocate_with_first_write_call",
                    "name"
                ],
                "flow": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "element_shape": [
                    "self"
                ],
                "_check_element_shape": [
                    "self",
                    "shape"
                ],
                "_maybe_colocate_with": [
                    "self",
                    "value"
                ],
                "identity": [
                    "self"
                ],
                "grad": [
                    "self",
                    "source",
                    "flow",
                    "name"
                ],
                "read": [
                    "self",
                    "index",
                    "name"
                ],
                "write": [
                    "self",
                    "index",
                    "value",
                    "name"
                ],
                "stack": [
                    "self",
                    "name"
                ],
                "gather": [
                    "self",
                    "indices",
                    "name"
                ],
                "concat": [
                    "self",
                    "name"
                ],
                "unstack": [
                    "self",
                    "value",
                    "name"
                ],
                "scatter": [
                    "self",
                    "indices",
                    "value",
                    "name"
                ],
                "split": [
                    "self",
                    "value",
                    "lengths",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "close": [
                    "self",
                    "name"
                ]
            },
            "_GraphTensorArrayV2": {
                "__init__": [
                    "self",
                    "dtype",
                    "size",
                    "dynamic_size",
                    "clear_after_read",
                    "tensor_array_name",
                    "handle",
                    "flow",
                    "infer_shape",
                    "element_shape",
                    "colocate_with_first_write_call",
                    "name"
                ],
                "flow": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "element_shape": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "_check_element_shape": [
                    "self",
                    "shape"
                ],
                "identity": [
                    "self"
                ],
                "grad": [
                    "self",
                    "source",
                    "flow",
                    "name"
                ],
                "read": [
                    "self",
                    "index",
                    "name"
                ],
                "write": [
                    "self",
                    "index",
                    "value",
                    "name"
                ],
                "stack": [
                    "self",
                    "name"
                ],
                "gather": [
                    "self",
                    "indices",
                    "name"
                ],
                "concat": [
                    "self",
                    "name"
                ],
                "unstack": [
                    "self",
                    "value",
                    "name"
                ],
                "scatter": [
                    "self",
                    "indices",
                    "value",
                    "name"
                ],
                "split": [
                    "self",
                    "value",
                    "lengths",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "close": [
                    "self",
                    "name"
                ]
            },
            "_EagerTensorArray": {
                "__init__": [
                    "self",
                    "dtype",
                    "size",
                    "dynamic_size",
                    "clear_after_read",
                    "tensor_array_name",
                    "handle",
                    "flow",
                    "infer_shape",
                    "element_shape",
                    "colocate_with_first_write_call",
                    "name"
                ],
                "flow": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "element_shape": [
                    "self"
                ],
                "identity": [
                    "self"
                ],
                "grad": [
                    "self",
                    "source",
                    "flow",
                    "name"
                ],
                "read": [
                    "self",
                    "index",
                    "name"
                ],
                "_write": [
                    "self",
                    "index",
                    "value"
                ],
                "write": [
                    "self",
                    "index",
                    "value",
                    "name"
                ],
                "_maybe_zero": [
                    "self",
                    "ix"
                ],
                "stack": [
                    "self",
                    "name"
                ],
                "gather": [
                    "self",
                    "indices",
                    "name"
                ],
                "concat": [
                    "self",
                    "name"
                ],
                "unstack": [
                    "self",
                    "value",
                    "name"
                ],
                "scatter": [
                    "self",
                    "indices",
                    "value",
                    "name"
                ],
                "split": [
                    "self",
                    "value",
                    "lengths",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "close": [
                    "self",
                    "name"
                ]
            },
            "TensorArray": {
                "__init__": [
                    "self",
                    "dtype",
                    "size",
                    "dynamic_size",
                    "clear_after_read",
                    "tensor_array_name",
                    "handle",
                    "flow",
                    "infer_shape",
                    "element_shape",
                    "colocate_with_first_write_call",
                    "name"
                ],
                "flow": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "element_shape": [
                    "self"
                ],
                "dynamic_size": [
                    "self"
                ],
                "_infer_shape": [
                    "self"
                ],
                "identity": [
                    "self"
                ],
                "grad": [
                    "self",
                    "source",
                    "flow",
                    "name"
                ],
                "read": [
                    "self",
                    "index",
                    "name"
                ],
                "write": [
                    "self",
                    "index",
                    "value",
                    "name"
                ],
                "stack": [
                    "self",
                    "name"
                ],
                "gather": [
                    "self",
                    "indices",
                    "name"
                ],
                "concat": [
                    "self",
                    "name"
                ],
                "unstack": [
                    "self",
                    "value",
                    "name"
                ],
                "scatter": [
                    "self",
                    "indices",
                    "value",
                    "name"
                ],
                "split": [
                    "self",
                    "value",
                    "lengths",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "close": [
                    "self",
                    "name"
                ]
            },
            "TensorArraySpec": {
                "__init__": [
                    "self",
                    "element_shape",
                    "dtype",
                    "dynamic_size",
                    "infer_shape"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "most_specific_compatible_type": [
                    "self",
                    "other"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "tensor_list"
                ],
                "from_value": [
                    "value"
                ],
                "_to_legacy_output_types": [
                    "self"
                ],
                "_to_legacy_output_shapes": [
                    "self"
                ],
                "_to_legacy_output_classes": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.state_grad": {},
        "tensorflow_core.python.ops.map_fn": {
            "map_fn": [
                "fn",
                "elems",
                "dtype",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "infer_shape",
                "name"
            ]
        },
        "tensorflow_core.python.ops.nccl_ops": {
            "all_sum": [
                "tensors"
            ],
            "_all_sum_grad": [
                "op",
                "grad"
            ],
            "all_prod": [
                "tensors"
            ],
            "all_min": [
                "tensors"
            ],
            "all_max": [
                "tensors"
            ],
            "reduce_sum": [
                "tensors"
            ],
            "_reduce_sum_grad": [
                "op",
                "grad"
            ],
            "broadcast": [
                "tensor"
            ],
            "_broadcast_grad": [
                "op",
                "accumulated_grad"
            ],
            "_apply_all_reduce": [
                "reduction",
                "tensors"
            ],
            "_apply_reduce": [
                "reduction",
                "tensors"
            ],
            "_get_shared_name": [],
            "_check_device": [
                "tensor",
                "expected"
            ]
        },
        "tensorflow_core.python.ops.gen_candidate_sampling_ops": {
            "all_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "seed2",
                "name"
            ],
            "AllCandidateSampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "seed2",
                "name"
            ],
            "all_candidate_sampler_eager_fallback": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "compute_accidental_hits": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "seed2",
                "name"
            ],
            "ComputeAccidentalHits": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "seed2",
                "name"
            ],
            "compute_accidental_hits_eager_fallback": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "fixed_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "seed2",
                "name"
            ],
            "FixedUnigramCandidateSampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "seed2",
                "name"
            ],
            "fixed_unigram_candidate_sampler_eager_fallback": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "learned_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "LearnedUnigramCandidateSampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "learned_unigram_candidate_sampler_eager_fallback": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "log_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "LogUniformCandidateSampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "log_uniform_candidate_sampler_eager_fallback": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "thread_unsafe_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "ThreadUnsafeUnigramCandidateSampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "thread_unsafe_unigram_candidate_sampler_eager_fallback": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "UniformCandidateSampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "uniform_candidate_sampler_eager_fallback": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_spectral_ops": {
            "batch_fft": [
                "input",
                "name"
            ],
            "BatchFFT": [
                "input",
                "name"
            ],
            "batch_fft_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_fft2d": [
                "input",
                "name"
            ],
            "BatchFFT2D": [
                "input",
                "name"
            ],
            "batch_fft2d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_fft3d": [
                "input",
                "name"
            ],
            "BatchFFT3D": [
                "input",
                "name"
            ],
            "batch_fft3d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_ifft": [
                "input",
                "name"
            ],
            "BatchIFFT": [
                "input",
                "name"
            ],
            "batch_ifft_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_ifft2d": [
                "input",
                "name"
            ],
            "BatchIFFT2D": [
                "input",
                "name"
            ],
            "batch_ifft2d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_ifft3d": [
                "input",
                "name"
            ],
            "BatchIFFT3D": [
                "input",
                "name"
            ],
            "batch_ifft3d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "fft": [
                "input",
                "name"
            ],
            "FFT": [
                "input",
                "name"
            ],
            "fft_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "fft2d": [
                "input",
                "name"
            ],
            "FFT2D": [
                "input",
                "name"
            ],
            "fft2d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "fft3d": [
                "input",
                "name"
            ],
            "FFT3D": [
                "input",
                "name"
            ],
            "fft3d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "ifft": [
                "input",
                "name"
            ],
            "IFFT": [
                "input",
                "name"
            ],
            "ifft_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "ifft2d": [
                "input",
                "name"
            ],
            "IFFT2D": [
                "input",
                "name"
            ],
            "ifft2d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "ifft3d": [
                "input",
                "name"
            ],
            "IFFT3D": [
                "input",
                "name"
            ],
            "ifft3d_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "irfft": [
                "input",
                "fft_length",
                "name"
            ],
            "IRFFT": [
                "input",
                "fft_length",
                "name"
            ],
            "irfft_eager_fallback": [
                "input",
                "fft_length",
                "name",
                "ctx"
            ],
            "irfft2d": [
                "input",
                "fft_length",
                "name"
            ],
            "IRFFT2D": [
                "input",
                "fft_length",
                "name"
            ],
            "irfft2d_eager_fallback": [
                "input",
                "fft_length",
                "name",
                "ctx"
            ],
            "irfft3d": [
                "input",
                "fft_length",
                "name"
            ],
            "IRFFT3D": [
                "input",
                "fft_length",
                "name"
            ],
            "irfft3d_eager_fallback": [
                "input",
                "fft_length",
                "name",
                "ctx"
            ],
            "rfft": [
                "input",
                "fft_length",
                "name"
            ],
            "RFFT": [
                "input",
                "fft_length",
                "name"
            ],
            "rfft_eager_fallback": [
                "input",
                "fft_length",
                "name",
                "ctx"
            ],
            "rfft2d": [
                "input",
                "fft_length",
                "name"
            ],
            "RFFT2D": [
                "input",
                "fft_length",
                "name"
            ],
            "rfft2d_eager_fallback": [
                "input",
                "fft_length",
                "name",
                "ctx"
            ],
            "rfft3d": [
                "input",
                "fft_length",
                "name"
            ],
            "RFFT3D": [
                "input",
                "fft_length",
                "name"
            ],
            "rfft3d_eager_fallback": [
                "input",
                "fft_length",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.control_flow_state": {
            "_GetMaxSizeFromNestedMaximumIterations": [
                "value",
                "while_ctxt"
            ],
            "MaybeCreateControlFlowState": [
                "between_op_list",
                "between_ops",
                "colocate_gradients_with_ops"
            ],
            "ZerosLikeOutsideLoop": [
                "op",
                "index"
            ],
            "_GradLoopState": {
                "__init__": [
                    "self",
                    "forward_ctxt",
                    "outer_grad_state"
                ],
                "outer_grad_state": [
                    "self"
                ],
                "forward_context": [
                    "self"
                ],
                "forward_index": [
                    "self"
                ],
                "forward_sync": [
                    "self"
                ],
                "grad_context": [
                    "self"
                ],
                "grad_index": [
                    "self"
                ],
                "grad_sync": [
                    "self"
                ],
                "history_map": [
                    "self"
                ],
                "switch_map": [
                    "self"
                ],
                "unused_exits": [
                    "self"
                ],
                "deferred_exits": [
                    "self"
                ],
                "forward_loop_exits": [
                    "self"
                ],
                "pending_exits_count": [
                    "self",
                    "cnt"
                ],
                "AddForwardAccumulator": [
                    "self",
                    "value",
                    "dead_branch"
                ],
                "AddBackpropAccumulatedValue": [
                    "self",
                    "history_value",
                    "value",
                    "dead_branch"
                ],
                "GetRealValue": [
                    "self",
                    "value"
                ]
            },
            "_ControlFlowState": {
                "__init__": [
                    "self"
                ],
                "GetGradState": [
                    "self",
                    "op",
                    "before"
                ],
                "ProcessUnusedLoopExits": [
                    "self",
                    "pending_count",
                    "to_ops_set"
                ],
                "EnterGradWhileContext": [
                    "self",
                    "op",
                    "before"
                ],
                "ExitGradWhileContext": [
                    "self",
                    "op",
                    "before"
                ],
                "AddWhileContext": [
                    "self",
                    "op",
                    "between_op_list",
                    "between_ops"
                ],
                "ZerosLikeForExit": [
                    "self",
                    "val"
                ],
                "ZerosLike": [
                    "self",
                    "op",
                    "index"
                ],
                "PostProcessing": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.template": {
            "make_template": [
                "name_",
                "func_",
                "create_scope_now_",
                "unique_name_",
                "custom_getter_"
            ],
            "make_template_internal": [
                "name_",
                "func_",
                "create_scope_now_",
                "unique_name_",
                "custom_getter_",
                "create_graph_function_"
            ],
            "_skip_common_stack_elements": [
                "stacktrace",
                "base_case"
            ],
            "Template": {
                "__init__": [
                    "self",
                    "name",
                    "func",
                    "create_scope_now",
                    "unique_name",
                    "custom_getter",
                    "create_graph_function"
                ],
                "_call_func": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "__call__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "func": [
                    "self"
                ],
                "variable_scope": [
                    "self"
                ],
                "variable_scope_name": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ],
                "global_variables": [
                    "self"
                ],
                "local_variables": [
                    "self"
                ],
                "weights": [
                    "self"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "var_scope": [
                    "self"
                ]
            },
            "_EagerTemplateVariableStore": {
                "__init__": [
                    "self",
                    "variable_scope_name"
                ],
                "set_variable_scope_name": [
                    "self",
                    "variable_scope_name"
                ],
                "as_default": [
                    "self"
                ],
                "_variables_in_scope": [
                    "self",
                    "variable_list"
                ],
                "variables": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ]
            },
            "EagerTemplate": {
                "__init__": [
                    "self",
                    "name",
                    "func",
                    "create_scope_now",
                    "custom_getter",
                    "create_graph_function"
                ],
                "_call_func": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "__call__": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ],
                "global_variables": [
                    "self"
                ],
                "local_variables": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.gen_functional_ops": {
            "case": [
                "branch_index",
                "input",
                "Tout",
                "branches",
                "output_shapes",
                "name"
            ],
            "Case": [
                "branch_index",
                "input",
                "Tout",
                "branches",
                "output_shapes",
                "name"
            ],
            "case_eager_fallback": [
                "branch_index",
                "input",
                "Tout",
                "branches",
                "output_shapes",
                "name",
                "ctx"
            ],
            "fake_param": [
                "dtype",
                "shape",
                "name"
            ],
            "FakeParam": [
                "dtype",
                "shape",
                "name"
            ],
            "fake_param_eager_fallback": [
                "dtype",
                "shape",
                "name",
                "ctx"
            ],
            "_for": [
                "start",
                "limit",
                "delta",
                "input",
                "body",
                "name"
            ],
            "For": [
                "start",
                "limit",
                "delta",
                "input",
                "body",
                "name"
            ],
            "_for_eager_fallback": [
                "start",
                "limit",
                "delta",
                "input",
                "body",
                "name",
                "ctx"
            ],
            "_if": [
                "cond",
                "input",
                "Tout",
                "then_branch",
                "else_branch",
                "output_shapes",
                "name"
            ],
            "If": [
                "cond",
                "input",
                "Tout",
                "then_branch",
                "else_branch",
                "output_shapes",
                "name"
            ],
            "_if_eager_fallback": [
                "cond",
                "input",
                "Tout",
                "then_branch",
                "else_branch",
                "output_shapes",
                "name",
                "ctx"
            ],
            "partitioned_call": [
                "args",
                "Tout",
                "f",
                "config",
                "config_proto",
                "executor_type",
                "name"
            ],
            "PartitionedCall": [
                "args",
                "Tout",
                "f",
                "config",
                "config_proto",
                "executor_type",
                "name"
            ],
            "partitioned_call_eager_fallback": [
                "args",
                "Tout",
                "f",
                "config",
                "config_proto",
                "executor_type",
                "name",
                "ctx"
            ],
            "remote_call": [
                "target",
                "args",
                "Tout",
                "f",
                "name"
            ],
            "RemoteCall": [
                "target",
                "args",
                "Tout",
                "f",
                "name"
            ],
            "remote_call_eager_fallback": [
                "target",
                "args",
                "Tout",
                "f",
                "name",
                "ctx"
            ],
            "stateful_partitioned_call": [
                "args",
                "Tout",
                "f",
                "config",
                "config_proto",
                "executor_type",
                "name"
            ],
            "StatefulPartitionedCall": [
                "args",
                "Tout",
                "f",
                "config",
                "config_proto",
                "executor_type",
                "name"
            ],
            "stateful_partitioned_call_eager_fallback": [
                "args",
                "Tout",
                "f",
                "config",
                "config_proto",
                "executor_type",
                "name",
                "ctx"
            ],
            "stateless_if": [
                "cond",
                "input",
                "Tout",
                "then_branch",
                "else_branch",
                "output_shapes",
                "name"
            ],
            "StatelessIf": [
                "cond",
                "input",
                "Tout",
                "then_branch",
                "else_branch",
                "output_shapes",
                "name"
            ],
            "stateless_if_eager_fallback": [
                "cond",
                "input",
                "Tout",
                "then_branch",
                "else_branch",
                "output_shapes",
                "name",
                "ctx"
            ],
            "stateless_while": [
                "input",
                "cond",
                "body",
                "output_shapes",
                "parallel_iterations",
                "name"
            ],
            "StatelessWhile": [
                "input",
                "cond",
                "body",
                "output_shapes",
                "parallel_iterations",
                "name"
            ],
            "stateless_while_eager_fallback": [
                "input",
                "cond",
                "body",
                "output_shapes",
                "parallel_iterations",
                "name",
                "ctx"
            ],
            "symbolic_gradient": [
                "input",
                "Tout",
                "f",
                "name"
            ],
            "SymbolicGradient": [
                "input",
                "Tout",
                "f",
                "name"
            ],
            "symbolic_gradient_eager_fallback": [
                "input",
                "Tout",
                "f",
                "name",
                "ctx"
            ],
            "_while": [
                "input",
                "cond",
                "body",
                "output_shapes",
                "parallel_iterations",
                "name"
            ],
            "While": [
                "input",
                "cond",
                "body",
                "output_shapes",
                "parallel_iterations",
                "name"
            ],
            "_while_eager_fallback": [
                "input",
                "cond",
                "body",
                "output_shapes",
                "parallel_iterations",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.custom_gradient": {
            "copy_handle_data": [
                "source_t",
                "target_t"
            ],
            "custom_gradient": [
                "f"
            ],
            "get_variable_by_name": [
                "var_name"
            ],
            "get_dependent_variables": [
                "input_ops",
                "output_ops"
            ],
            "_graph_mode_decorator": [
                "f"
            ],
            "_eager_mode_decorator": [
                "f"
            ],
            "recompute_grad": [
                "f"
            ],
            "grad_pass_through": [
                "f"
            ]
        },
        "tensorflow_core.python.ops.op_selector": {
            "is_differentiable": [
                "op"
            ],
            "is_iterable": [
                "obj"
            ],
            "concatenate_unique": [
                "la",
                "lb"
            ],
            "get_tensors": [
                "graph"
            ],
            "get_unique_graph": [
                "tops",
                "check_types",
                "none_if_empty"
            ],
            "check_graphs": [],
            "make_list_of_t": [
                "ts",
                "check_graph",
                "allow_graph",
                "ignore_ops"
            ],
            "get_generating_ops": [
                "ts"
            ],
            "get_consuming_ops": [
                "ts"
            ],
            "make_list_of_op": [
                "tops",
                "check_graph",
                "allow_graph",
                "ignore_ts"
            ],
            "_get_inputs": [
                "op",
                "only_differentiable"
            ],
            "get_backward_walk_ops": [
                "seed_ops",
                "inclusive",
                "within_ops",
                "within_ops_fn",
                "stop_at_ts",
                "control_inputs",
                "only_differentiable"
            ],
            "_as_operation": [
                "op_or_tensor"
            ],
            "graph_inputs": [
                "op"
            ],
            "_path_from": [
                "from_op",
                "tensor",
                "sources"
            ],
            "map_subgraph": [
                "init_tensor",
                "sources",
                "disallowed_placeholders",
                "visited_ops",
                "op_outputs",
                "add_sources"
            ],
            "UnliftableError": {}
        },
        "tensorflow_core.python.ops.gen_ctc_ops": {
            "ctc_beam_search_decoder": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated",
                "name"
            ],
            "CTCBeamSearchDecoder": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated",
                "name"
            ],
            "ctc_beam_search_decoder_eager_fallback": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated",
                "name",
                "ctx"
            ],
            "ctc_greedy_decoder": [
                "inputs",
                "sequence_length",
                "merge_repeated",
                "name"
            ],
            "CTCGreedyDecoder": [
                "inputs",
                "sequence_length",
                "merge_repeated",
                "name"
            ],
            "ctc_greedy_decoder_eager_fallback": [
                "inputs",
                "sequence_length",
                "merge_repeated",
                "name",
                "ctx"
            ],
            "ctc_loss": [
                "inputs",
                "labels_indices",
                "labels_values",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "ignore_longer_outputs_than_inputs",
                "name"
            ],
            "CTCLoss": [
                "inputs",
                "labels_indices",
                "labels_values",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "ignore_longer_outputs_than_inputs",
                "name"
            ],
            "ctc_loss_eager_fallback": [
                "inputs",
                "labels_indices",
                "labels_values",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "ignore_longer_outputs_than_inputs",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_list_ops": {
            "empty_tensor_list": [
                "element_shape",
                "max_num_elements",
                "element_dtype",
                "name"
            ],
            "EmptyTensorList": [
                "element_shape",
                "max_num_elements",
                "element_dtype",
                "name"
            ],
            "empty_tensor_list_eager_fallback": [
                "element_shape",
                "max_num_elements",
                "element_dtype",
                "name",
                "ctx"
            ],
            "tensor_list_concat": [
                "input_handle",
                "element_dtype",
                "element_shape",
                "name"
            ],
            "TensorListConcat": [
                "input_handle",
                "element_dtype",
                "element_shape",
                "name"
            ],
            "tensor_list_concat_eager_fallback": [
                "input_handle",
                "element_dtype",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_list_concat_lists": [
                "input_a",
                "input_b",
                "element_dtype",
                "name"
            ],
            "TensorListConcatLists": [
                "input_a",
                "input_b",
                "element_dtype",
                "name"
            ],
            "tensor_list_concat_lists_eager_fallback": [
                "input_a",
                "input_b",
                "element_dtype",
                "name",
                "ctx"
            ],
            "tensor_list_concat_v2": [
                "input_handle",
                "element_shape",
                "leading_dims",
                "element_dtype",
                "name"
            ],
            "TensorListConcatV2": [
                "input_handle",
                "element_shape",
                "leading_dims",
                "element_dtype",
                "name"
            ],
            "tensor_list_concat_v2_eager_fallback": [
                "input_handle",
                "element_shape",
                "leading_dims",
                "element_dtype",
                "name",
                "ctx"
            ],
            "tensor_list_element_shape": [
                "input_handle",
                "shape_type",
                "name"
            ],
            "TensorListElementShape": [
                "input_handle",
                "shape_type",
                "name"
            ],
            "tensor_list_element_shape_eager_fallback": [
                "input_handle",
                "shape_type",
                "name",
                "ctx"
            ],
            "tensor_list_from_tensor": [
                "tensor",
                "element_shape",
                "name"
            ],
            "TensorListFromTensor": [
                "tensor",
                "element_shape",
                "name"
            ],
            "tensor_list_from_tensor_eager_fallback": [
                "tensor",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_list_gather": [
                "input_handle",
                "indices",
                "element_shape",
                "element_dtype",
                "name"
            ],
            "TensorListGather": [
                "input_handle",
                "indices",
                "element_shape",
                "element_dtype",
                "name"
            ],
            "tensor_list_gather_eager_fallback": [
                "input_handle",
                "indices",
                "element_shape",
                "element_dtype",
                "name",
                "ctx"
            ],
            "tensor_list_get_item": [
                "input_handle",
                "index",
                "element_shape",
                "element_dtype",
                "name"
            ],
            "TensorListGetItem": [
                "input_handle",
                "index",
                "element_shape",
                "element_dtype",
                "name"
            ],
            "tensor_list_get_item_eager_fallback": [
                "input_handle",
                "index",
                "element_shape",
                "element_dtype",
                "name",
                "ctx"
            ],
            "tensor_list_length": [
                "input_handle",
                "name"
            ],
            "TensorListLength": [
                "input_handle",
                "name"
            ],
            "tensor_list_length_eager_fallback": [
                "input_handle",
                "name",
                "ctx"
            ],
            "tensor_list_pop_back": [
                "input_handle",
                "element_shape",
                "element_dtype",
                "name"
            ],
            "TensorListPopBack": [
                "input_handle",
                "element_shape",
                "element_dtype",
                "name"
            ],
            "tensor_list_pop_back_eager_fallback": [
                "input_handle",
                "element_shape",
                "element_dtype",
                "name",
                "ctx"
            ],
            "tensor_list_push_back": [
                "input_handle",
                "tensor",
                "name"
            ],
            "TensorListPushBack": [
                "input_handle",
                "tensor",
                "name"
            ],
            "tensor_list_push_back_eager_fallback": [
                "input_handle",
                "tensor",
                "name",
                "ctx"
            ],
            "tensor_list_push_back_batch": [
                "input_handles",
                "tensor",
                "name"
            ],
            "TensorListPushBackBatch": [
                "input_handles",
                "tensor",
                "name"
            ],
            "tensor_list_push_back_batch_eager_fallback": [
                "input_handles",
                "tensor",
                "name",
                "ctx"
            ],
            "tensor_list_reserve": [
                "element_shape",
                "num_elements",
                "element_dtype",
                "name"
            ],
            "TensorListReserve": [
                "element_shape",
                "num_elements",
                "element_dtype",
                "name"
            ],
            "tensor_list_reserve_eager_fallback": [
                "element_shape",
                "num_elements",
                "element_dtype",
                "name",
                "ctx"
            ],
            "tensor_list_resize": [
                "input_handle",
                "size",
                "name"
            ],
            "TensorListResize": [
                "input_handle",
                "size",
                "name"
            ],
            "tensor_list_resize_eager_fallback": [
                "input_handle",
                "size",
                "name",
                "ctx"
            ],
            "tensor_list_scatter": [
                "tensor",
                "indices",
                "element_shape",
                "name"
            ],
            "TensorListScatter": [
                "tensor",
                "indices",
                "element_shape",
                "name"
            ],
            "tensor_list_scatter_eager_fallback": [
                "tensor",
                "indices",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_list_scatter_into_existing_list": [
                "input_handle",
                "tensor",
                "indices",
                "name"
            ],
            "TensorListScatterIntoExistingList": [
                "input_handle",
                "tensor",
                "indices",
                "name"
            ],
            "tensor_list_scatter_into_existing_list_eager_fallback": [
                "input_handle",
                "tensor",
                "indices",
                "name",
                "ctx"
            ],
            "tensor_list_scatter_v2": [
                "tensor",
                "indices",
                "element_shape",
                "num_elements",
                "name"
            ],
            "TensorListScatterV2": [
                "tensor",
                "indices",
                "element_shape",
                "num_elements",
                "name"
            ],
            "tensor_list_scatter_v2_eager_fallback": [
                "tensor",
                "indices",
                "element_shape",
                "num_elements",
                "name",
                "ctx"
            ],
            "tensor_list_set_item": [
                "input_handle",
                "index",
                "item",
                "name"
            ],
            "TensorListSetItem": [
                "input_handle",
                "index",
                "item",
                "name"
            ],
            "tensor_list_set_item_eager_fallback": [
                "input_handle",
                "index",
                "item",
                "name",
                "ctx"
            ],
            "tensor_list_split": [
                "tensor",
                "element_shape",
                "lengths",
                "name"
            ],
            "TensorListSplit": [
                "tensor",
                "element_shape",
                "lengths",
                "name"
            ],
            "tensor_list_split_eager_fallback": [
                "tensor",
                "element_shape",
                "lengths",
                "name",
                "ctx"
            ],
            "tensor_list_stack": [
                "input_handle",
                "element_shape",
                "element_dtype",
                "num_elements",
                "name"
            ],
            "TensorListStack": [
                "input_handle",
                "element_shape",
                "element_dtype",
                "num_elements",
                "name"
            ],
            "tensor_list_stack_eager_fallback": [
                "input_handle",
                "element_shape",
                "element_dtype",
                "num_elements",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.proto_ops": {},
        "tensorflow_core.python.ops.gen_data_flow_ops": {
            "accumulator_apply_gradient": [
                "handle",
                "local_step",
                "gradient",
                "name"
            ],
            "AccumulatorApplyGradient": [
                "handle",
                "local_step",
                "gradient",
                "name"
            ],
            "accumulator_apply_gradient_eager_fallback": [
                "handle",
                "local_step",
                "gradient",
                "name",
                "ctx"
            ],
            "accumulator_num_accumulated": [
                "handle",
                "name"
            ],
            "AccumulatorNumAccumulated": [
                "handle",
                "name"
            ],
            "accumulator_num_accumulated_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "accumulator_set_global_step": [
                "handle",
                "new_global_step",
                "name"
            ],
            "AccumulatorSetGlobalStep": [
                "handle",
                "new_global_step",
                "name"
            ],
            "accumulator_set_global_step_eager_fallback": [
                "handle",
                "new_global_step",
                "name",
                "ctx"
            ],
            "accumulator_take_gradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "AccumulatorTakeGradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "accumulator_take_gradient_eager_fallback": [
                "handle",
                "num_required",
                "dtype",
                "name",
                "ctx"
            ],
            "barrier": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "Barrier": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "barrier_eager_fallback": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "barrier_close": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "BarrierClose": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "barrier_close_eager_fallback": [
                "handle",
                "cancel_pending_enqueues",
                "name",
                "ctx"
            ],
            "barrier_incomplete_size": [
                "handle",
                "name"
            ],
            "BarrierIncompleteSize": [
                "handle",
                "name"
            ],
            "barrier_incomplete_size_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "barrier_insert_many": [
                "handle",
                "keys",
                "values",
                "component_index",
                "name"
            ],
            "BarrierInsertMany": [
                "handle",
                "keys",
                "values",
                "component_index",
                "name"
            ],
            "barrier_insert_many_eager_fallback": [
                "handle",
                "keys",
                "values",
                "component_index",
                "name",
                "ctx"
            ],
            "barrier_ready_size": [
                "handle",
                "name"
            ],
            "BarrierReadySize": [
                "handle",
                "name"
            ],
            "barrier_ready_size_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "barrier_take_many": [
                "handle",
                "num_elements",
                "component_types",
                "allow_small_batch",
                "wait_for_incomplete",
                "timeout_ms",
                "name"
            ],
            "BarrierTakeMany": [
                "handle",
                "num_elements",
                "component_types",
                "allow_small_batch",
                "wait_for_incomplete",
                "timeout_ms",
                "name"
            ],
            "barrier_take_many_eager_fallback": [
                "handle",
                "num_elements",
                "component_types",
                "allow_small_batch",
                "wait_for_incomplete",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "conditional_accumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name"
            ],
            "ConditionalAccumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name"
            ],
            "conditional_accumulator_eager_fallback": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name",
                "ctx"
            ],
            "delete_session_tensor": [
                "handle",
                "name"
            ],
            "DeleteSessionTensor": [
                "handle",
                "name"
            ],
            "delete_session_tensor_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "dynamic_partition": [
                "data",
                "partitions",
                "num_partitions",
                "name"
            ],
            "DynamicPartition": [
                "data",
                "partitions",
                "num_partitions",
                "name"
            ],
            "dynamic_partition_eager_fallback": [
                "data",
                "partitions",
                "num_partitions",
                "name",
                "ctx"
            ],
            "dynamic_stitch": [
                "indices",
                "data",
                "name"
            ],
            "DynamicStitch": [
                "indices",
                "data",
                "name"
            ],
            "dynamic_stitch_eager_fallback": [
                "indices",
                "data",
                "name",
                "ctx"
            ],
            "fifo_queue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "FIFOQueue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "fifo_queue_eager_fallback": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "fifo_queue_v2": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "FIFOQueueV2": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "fifo_queue_v2_eager_fallback": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "fake_queue": [
                "resource",
                "name"
            ],
            "FakeQueue": [
                "resource",
                "name"
            ],
            "fake_queue_eager_fallback": [
                "resource",
                "name",
                "ctx"
            ],
            "get_session_handle": [
                "value",
                "name"
            ],
            "GetSessionHandle": [
                "value",
                "name"
            ],
            "get_session_handle_eager_fallback": [
                "value",
                "name",
                "ctx"
            ],
            "get_session_handle_v2": [
                "value",
                "name"
            ],
            "GetSessionHandleV2": [
                "value",
                "name"
            ],
            "get_session_handle_v2_eager_fallback": [
                "value",
                "name",
                "ctx"
            ],
            "get_session_tensor": [
                "handle",
                "dtype",
                "name"
            ],
            "GetSessionTensor": [
                "handle",
                "dtype",
                "name"
            ],
            "get_session_tensor_eager_fallback": [
                "handle",
                "dtype",
                "name",
                "ctx"
            ],
            "map_clear": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "MapClear": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "map_clear_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "map_incomplete_size": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "MapIncompleteSize": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "map_incomplete_size_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "map_peek": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "MapPeek": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "map_peek_eager_fallback": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "map_size": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "MapSize": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "map_size_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "map_stage": [
                "key",
                "indices",
                "values",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "MapStage": [
                "key",
                "indices",
                "values",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "map_stage_eager_fallback": [
                "key",
                "indices",
                "values",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "map_unstage": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "MapUnstage": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "map_unstage_eager_fallback": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "map_unstage_no_key": [
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "MapUnstageNoKey": [
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "map_unstage_no_key_eager_fallback": [
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "ordered_map_clear": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "OrderedMapClear": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "ordered_map_clear_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "ordered_map_incomplete_size": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "OrderedMapIncompleteSize": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "ordered_map_incomplete_size_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "ordered_map_peek": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "OrderedMapPeek": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "ordered_map_peek_eager_fallback": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "ordered_map_size": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "OrderedMapSize": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "ordered_map_size_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "ordered_map_stage": [
                "key",
                "indices",
                "values",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "OrderedMapStage": [
                "key",
                "indices",
                "values",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "ordered_map_stage_eager_fallback": [
                "key",
                "indices",
                "values",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "ordered_map_unstage": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "OrderedMapUnstage": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "ordered_map_unstage_eager_fallback": [
                "key",
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "ordered_map_unstage_no_key": [
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "OrderedMapUnstageNoKey": [
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "ordered_map_unstage_no_key_eager_fallback": [
                "indices",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "padding_fifo_queue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "PaddingFIFOQueue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "padding_fifo_queue_eager_fallback": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "padding_fifo_queue_v2": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "PaddingFIFOQueueV2": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "padding_fifo_queue_v2_eager_fallback": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "parallel_dynamic_stitch": [
                "indices",
                "data",
                "name"
            ],
            "ParallelDynamicStitch": [
                "indices",
                "data",
                "name"
            ],
            "parallel_dynamic_stitch_eager_fallback": [
                "indices",
                "data",
                "name",
                "ctx"
            ],
            "priority_queue": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "PriorityQueue": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "priority_queue_eager_fallback": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "priority_queue_v2": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "PriorityQueueV2": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "priority_queue_v2_eager_fallback": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "queue_close": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "QueueClose": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "queue_close_eager_fallback": [
                "handle",
                "cancel_pending_enqueues",
                "name",
                "ctx"
            ],
            "queue_close_v2": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "QueueCloseV2": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "queue_close_v2_eager_fallback": [
                "handle",
                "cancel_pending_enqueues",
                "name",
                "ctx"
            ],
            "queue_dequeue": [
                "handle",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "QueueDequeue": [
                "handle",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "queue_dequeue_eager_fallback": [
                "handle",
                "component_types",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_dequeue_many": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "QueueDequeueMany": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "queue_dequeue_many_eager_fallback": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_dequeue_many_v2": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "QueueDequeueManyV2": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "queue_dequeue_many_v2_eager_fallback": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_dequeue_up_to": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "QueueDequeueUpTo": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "queue_dequeue_up_to_eager_fallback": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_dequeue_up_to_v2": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "QueueDequeueUpToV2": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "queue_dequeue_up_to_v2_eager_fallback": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_dequeue_v2": [
                "handle",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "QueueDequeueV2": [
                "handle",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "queue_dequeue_v2_eager_fallback": [
                "handle",
                "component_types",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_enqueue": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "QueueEnqueue": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "queue_enqueue_eager_fallback": [
                "handle",
                "components",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_enqueue_many": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "QueueEnqueueMany": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "queue_enqueue_many_eager_fallback": [
                "handle",
                "components",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_enqueue_many_v2": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "QueueEnqueueManyV2": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "queue_enqueue_many_v2_eager_fallback": [
                "handle",
                "components",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_enqueue_v2": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "QueueEnqueueV2": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "queue_enqueue_v2_eager_fallback": [
                "handle",
                "components",
                "timeout_ms",
                "name",
                "ctx"
            ],
            "queue_is_closed": [
                "handle",
                "name"
            ],
            "QueueIsClosed": [
                "handle",
                "name"
            ],
            "queue_is_closed_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "queue_is_closed_v2": [
                "handle",
                "name"
            ],
            "QueueIsClosedV2": [
                "handle",
                "name"
            ],
            "queue_is_closed_v2_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "queue_size": [
                "handle",
                "name"
            ],
            "QueueSize": [
                "handle",
                "name"
            ],
            "queue_size_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "queue_size_v2": [
                "handle",
                "name"
            ],
            "QueueSizeV2": [
                "handle",
                "name"
            ],
            "queue_size_v2_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "random_shuffle_queue": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name"
            ],
            "RandomShuffleQueue": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name"
            ],
            "random_shuffle_queue_eager_fallback": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "random_shuffle_queue_v2": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name"
            ],
            "RandomShuffleQueueV2": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name"
            ],
            "random_shuffle_queue_v2_eager_fallback": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "record_input": [
                "file_pattern",
                "file_random_seed",
                "file_shuffle_shift_ratio",
                "file_buffer_size",
                "file_parallelism",
                "batch_size",
                "compression_type",
                "name"
            ],
            "RecordInput": [
                "file_pattern",
                "file_random_seed",
                "file_shuffle_shift_ratio",
                "file_buffer_size",
                "file_parallelism",
                "batch_size",
                "compression_type",
                "name"
            ],
            "record_input_eager_fallback": [
                "file_pattern",
                "file_random_seed",
                "file_shuffle_shift_ratio",
                "file_buffer_size",
                "file_parallelism",
                "batch_size",
                "compression_type",
                "name",
                "ctx"
            ],
            "resource_accumulator_apply_gradient": [
                "handle",
                "local_step",
                "gradient",
                "name"
            ],
            "ResourceAccumulatorApplyGradient": [
                "handle",
                "local_step",
                "gradient",
                "name"
            ],
            "resource_accumulator_apply_gradient_eager_fallback": [
                "handle",
                "local_step",
                "gradient",
                "name",
                "ctx"
            ],
            "resource_accumulator_num_accumulated": [
                "handle",
                "name"
            ],
            "ResourceAccumulatorNumAccumulated": [
                "handle",
                "name"
            ],
            "resource_accumulator_num_accumulated_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "resource_accumulator_set_global_step": [
                "handle",
                "new_global_step",
                "name"
            ],
            "ResourceAccumulatorSetGlobalStep": [
                "handle",
                "new_global_step",
                "name"
            ],
            "resource_accumulator_set_global_step_eager_fallback": [
                "handle",
                "new_global_step",
                "name",
                "ctx"
            ],
            "resource_accumulator_take_gradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "ResourceAccumulatorTakeGradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "resource_accumulator_take_gradient_eager_fallback": [
                "handle",
                "num_required",
                "dtype",
                "name",
                "ctx"
            ],
            "resource_conditional_accumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name"
            ],
            "ResourceConditionalAccumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name"
            ],
            "resource_conditional_accumulator_eager_fallback": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name",
                "ctx"
            ],
            "sparse_accumulator_apply_gradient": [
                "handle",
                "local_step",
                "gradient_indices",
                "gradient_values",
                "gradient_shape",
                "has_known_shape",
                "name"
            ],
            "SparseAccumulatorApplyGradient": [
                "handle",
                "local_step",
                "gradient_indices",
                "gradient_values",
                "gradient_shape",
                "has_known_shape",
                "name"
            ],
            "sparse_accumulator_apply_gradient_eager_fallback": [
                "handle",
                "local_step",
                "gradient_indices",
                "gradient_values",
                "gradient_shape",
                "has_known_shape",
                "name",
                "ctx"
            ],
            "sparse_accumulator_take_gradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "SparseAccumulatorTakeGradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "sparse_accumulator_take_gradient_eager_fallback": [
                "handle",
                "num_required",
                "dtype",
                "name",
                "ctx"
            ],
            "sparse_conditional_accumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name"
            ],
            "SparseConditionalAccumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name"
            ],
            "sparse_conditional_accumulator_eager_fallback": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "reduction_type",
                "name",
                "ctx"
            ],
            "_stack": [
                "elem_type",
                "stack_name",
                "name"
            ],
            "Stack": [
                "elem_type",
                "stack_name",
                "name"
            ],
            "_stack_eager_fallback": [
                "elem_type",
                "stack_name",
                "name",
                "ctx"
            ],
            "stack_close": [
                "handle",
                "name"
            ],
            "StackClose": [
                "handle",
                "name"
            ],
            "stack_close_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "stack_close_v2": [
                "handle",
                "name"
            ],
            "StackCloseV2": [
                "handle",
                "name"
            ],
            "stack_close_v2_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "stack_pop": [
                "handle",
                "elem_type",
                "name"
            ],
            "StackPop": [
                "handle",
                "elem_type",
                "name"
            ],
            "stack_pop_eager_fallback": [
                "handle",
                "elem_type",
                "name",
                "ctx"
            ],
            "stack_pop_v2": [
                "handle",
                "elem_type",
                "name"
            ],
            "StackPopV2": [
                "handle",
                "elem_type",
                "name"
            ],
            "stack_pop_v2_eager_fallback": [
                "handle",
                "elem_type",
                "name",
                "ctx"
            ],
            "stack_push": [
                "handle",
                "elem",
                "swap_memory",
                "name"
            ],
            "StackPush": [
                "handle",
                "elem",
                "swap_memory",
                "name"
            ],
            "stack_push_eager_fallback": [
                "handle",
                "elem",
                "swap_memory",
                "name",
                "ctx"
            ],
            "stack_push_v2": [
                "handle",
                "elem",
                "swap_memory",
                "name"
            ],
            "StackPushV2": [
                "handle",
                "elem",
                "swap_memory",
                "name"
            ],
            "stack_push_v2_eager_fallback": [
                "handle",
                "elem",
                "swap_memory",
                "name",
                "ctx"
            ],
            "stack_v2": [
                "max_size",
                "elem_type",
                "stack_name",
                "name"
            ],
            "StackV2": [
                "max_size",
                "elem_type",
                "stack_name",
                "name"
            ],
            "stack_v2_eager_fallback": [
                "max_size",
                "elem_type",
                "stack_name",
                "name",
                "ctx"
            ],
            "stage": [
                "values",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "Stage": [
                "values",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "stage_eager_fallback": [
                "values",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "stage_clear": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "StageClear": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "stage_clear_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "stage_peek": [
                "index",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "StagePeek": [
                "index",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "stage_peek_eager_fallback": [
                "index",
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "stage_size": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "StageSize": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "stage_size_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "tensor_array": [
                "size",
                "dtype",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "element_shape",
                "name"
            ],
            "TensorArray": [
                "size",
                "dtype",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "element_shape",
                "name"
            ],
            "tensor_array_eager_fallback": [
                "size",
                "dtype",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_array_close": [
                "handle",
                "name"
            ],
            "TensorArrayClose": [
                "handle",
                "name"
            ],
            "tensor_array_close_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "tensor_array_close_v2": [
                "handle",
                "name"
            ],
            "TensorArrayCloseV2": [
                "handle",
                "name"
            ],
            "tensor_array_close_v2_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "tensor_array_close_v3": [
                "handle",
                "name"
            ],
            "TensorArrayCloseV3": [
                "handle",
                "name"
            ],
            "tensor_array_close_v3_eager_fallback": [
                "handle",
                "name",
                "ctx"
            ],
            "tensor_array_concat": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "TensorArrayConcat": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "tensor_array_concat_eager_fallback": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name",
                "ctx"
            ],
            "tensor_array_concat_v2": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "TensorArrayConcatV2": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "tensor_array_concat_v2_eager_fallback": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name",
                "ctx"
            ],
            "tensor_array_concat_v3": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "TensorArrayConcatV3": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "tensor_array_concat_v3_eager_fallback": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name",
                "ctx"
            ],
            "tensor_array_gather": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "TensorArrayGather": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "tensor_array_gather_eager_fallback": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_array_gather_v2": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "TensorArrayGatherV2": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "tensor_array_gather_v2_eager_fallback": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_array_gather_v3": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "TensorArrayGatherV3": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "tensor_array_gather_v3_eager_fallback": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_array_grad": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "TensorArrayGrad": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "tensor_array_grad_eager_fallback": [
                "handle",
                "flow_in",
                "source",
                "name",
                "ctx"
            ],
            "tensor_array_grad_v2": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "TensorArrayGradV2": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "tensor_array_grad_v2_eager_fallback": [
                "handle",
                "flow_in",
                "source",
                "name",
                "ctx"
            ],
            "tensor_array_grad_v3": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "TensorArrayGradV3": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "tensor_array_grad_v3_eager_fallback": [
                "handle",
                "flow_in",
                "source",
                "name",
                "ctx"
            ],
            "tensor_array_grad_with_shape": [
                "handle",
                "flow_in",
                "shape_to_prepend",
                "source",
                "name"
            ],
            "TensorArrayGradWithShape": [
                "handle",
                "flow_in",
                "shape_to_prepend",
                "source",
                "name"
            ],
            "tensor_array_grad_with_shape_eager_fallback": [
                "handle",
                "flow_in",
                "shape_to_prepend",
                "source",
                "name",
                "ctx"
            ],
            "tensor_array_pack": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "TensorArrayPack": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "tensor_array_pack_eager_fallback": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape",
                "name",
                "ctx"
            ],
            "tensor_array_read": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "TensorArrayRead": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "tensor_array_read_eager_fallback": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name",
                "ctx"
            ],
            "tensor_array_read_v2": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "TensorArrayReadV2": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "tensor_array_read_v2_eager_fallback": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name",
                "ctx"
            ],
            "tensor_array_read_v3": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "TensorArrayReadV3": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "tensor_array_read_v3_eager_fallback": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name",
                "ctx"
            ],
            "tensor_array_scatter": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "TensorArrayScatter": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "tensor_array_scatter_eager_fallback": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_scatter_v2": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "TensorArrayScatterV2": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "tensor_array_scatter_v2_eager_fallback": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_scatter_v3": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "TensorArrayScatterV3": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "tensor_array_scatter_v3_eager_fallback": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_size": [
                "handle",
                "flow_in",
                "name"
            ],
            "TensorArraySize": [
                "handle",
                "flow_in",
                "name"
            ],
            "tensor_array_size_eager_fallback": [
                "handle",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_size_v2": [
                "handle",
                "flow_in",
                "name"
            ],
            "TensorArraySizeV2": [
                "handle",
                "flow_in",
                "name"
            ],
            "tensor_array_size_v2_eager_fallback": [
                "handle",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_size_v3": [
                "handle",
                "flow_in",
                "name"
            ],
            "TensorArraySizeV3": [
                "handle",
                "flow_in",
                "name"
            ],
            "tensor_array_size_v3_eager_fallback": [
                "handle",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_split": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "TensorArraySplit": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "tensor_array_split_eager_fallback": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_split_v2": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "TensorArraySplitV2": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "tensor_array_split_v2_eager_fallback": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_split_v3": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "TensorArraySplitV3": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "tensor_array_split_v3_eager_fallback": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_unpack": [
                "handle",
                "value",
                "flow_in",
                "name"
            ],
            "TensorArrayUnpack": [
                "handle",
                "value",
                "flow_in",
                "name"
            ],
            "tensor_array_unpack_eager_fallback": [
                "handle",
                "value",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_v2": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "name"
            ],
            "TensorArrayV2": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "name"
            ],
            "tensor_array_v2_eager_fallback": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "name",
                "ctx"
            ],
            "tensor_array_v3": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "identical_element_shapes",
                "tensor_array_name",
                "name"
            ],
            "TensorArrayV3": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "identical_element_shapes",
                "tensor_array_name",
                "name"
            ],
            "tensor_array_v3_eager_fallback": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "identical_element_shapes",
                "tensor_array_name",
                "name",
                "ctx"
            ],
            "tensor_array_write": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "TensorArrayWrite": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "tensor_array_write_eager_fallback": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_write_v2": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "TensorArrayWriteV2": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "tensor_array_write_v2_eager_fallback": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name",
                "ctx"
            ],
            "tensor_array_write_v3": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "TensorArrayWriteV3": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "tensor_array_write_v3_eager_fallback": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name",
                "ctx"
            ],
            "unstage": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "Unstage": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name"
            ],
            "unstage_eager_fallback": [
                "dtypes",
                "capacity",
                "memory_limit",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_logging_ops": {
            "_assert": [
                "condition",
                "data",
                "summarize",
                "name"
            ],
            "Assert": [
                "condition",
                "data",
                "summarize",
                "name"
            ],
            "_assert_eager_fallback": [
                "condition",
                "data",
                "summarize",
                "name",
                "ctx"
            ],
            "audio_summary": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "AudioSummary": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "audio_summary_eager_fallback": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name",
                "ctx"
            ],
            "audio_summary_v2": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "AudioSummaryV2": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "audio_summary_v2_eager_fallback": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name",
                "ctx"
            ],
            "histogram_summary": [
                "tag",
                "values",
                "name"
            ],
            "HistogramSummary": [
                "tag",
                "values",
                "name"
            ],
            "histogram_summary_eager_fallback": [
                "tag",
                "values",
                "name",
                "ctx"
            ],
            "image_summary": [
                "tag",
                "tensor",
                "max_images",
                "bad_color",
                "name"
            ],
            "ImageSummary": [
                "tag",
                "tensor",
                "max_images",
                "bad_color",
                "name"
            ],
            "image_summary_eager_fallback": [
                "tag",
                "tensor",
                "max_images",
                "bad_color",
                "name",
                "ctx"
            ],
            "merge_summary": [
                "inputs",
                "name"
            ],
            "MergeSummary": [
                "inputs",
                "name"
            ],
            "merge_summary_eager_fallback": [
                "inputs",
                "name",
                "ctx"
            ],
            "_print": [
                "input",
                "data",
                "message",
                "first_n",
                "summarize",
                "name"
            ],
            "Print": [
                "input",
                "data",
                "message",
                "first_n",
                "summarize",
                "name"
            ],
            "_print_eager_fallback": [
                "input",
                "data",
                "message",
                "first_n",
                "summarize",
                "name",
                "ctx"
            ],
            "print_v2": [
                "input",
                "output_stream",
                "end",
                "name"
            ],
            "PrintV2": [
                "input",
                "output_stream",
                "end",
                "name"
            ],
            "print_v2_eager_fallback": [
                "input",
                "output_stream",
                "end",
                "name",
                "ctx"
            ],
            "scalar_summary": [
                "tags",
                "values",
                "name"
            ],
            "ScalarSummary": [
                "tags",
                "values",
                "name"
            ],
            "scalar_summary_eager_fallback": [
                "tags",
                "values",
                "name",
                "ctx"
            ],
            "tensor_summary": [
                "tensor",
                "description",
                "labels",
                "display_name",
                "name"
            ],
            "TensorSummary": [
                "tensor",
                "description",
                "labels",
                "display_name",
                "name"
            ],
            "tensor_summary_eager_fallback": [
                "tensor",
                "description",
                "labels",
                "display_name",
                "name",
                "ctx"
            ],
            "tensor_summary_v2": [
                "tag",
                "tensor",
                "serialized_summary_metadata",
                "name"
            ],
            "TensorSummaryV2": [
                "tag",
                "tensor",
                "serialized_summary_metadata",
                "name"
            ],
            "tensor_summary_v2_eager_fallback": [
                "tag",
                "tensor",
                "serialized_summary_metadata",
                "name",
                "ctx"
            ],
            "timestamp": [
                "name"
            ],
            "Timestamp": [
                "name"
            ],
            "timestamp_eager_fallback": [
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.array_grad": {
            "_PackGrad": [
                "op",
                "grad"
            ],
            "_UnpackGrad": [
                "op"
            ],
            "_ConcatGradHelper": [
                "op",
                "grad",
                "start_value_index",
                "end_value_index",
                "dim_index"
            ],
            "_ConcatGrad": [
                "op",
                "grad"
            ],
            "_ConcatGradV2": [
                "op",
                "grad"
            ],
            "_SliceGrad": [
                "op",
                "grad"
            ],
            "_StridedSliceGrad": [
                "op",
                "grad"
            ],
            "_StridedSliceGradGrad": [
                "op",
                "grad"
            ],
            "_SplitGrad": [
                "op"
            ],
            "_SplitVGrad": [
                "op"
            ],
            "_DiagGrad": [
                "_",
                "grad"
            ],
            "_DiagPartGrad": [
                "_",
                "grad"
            ],
            "_MatrixDiagGrad": [
                "_",
                "grad"
            ],
            "_MatrixDiagV2Grad": [
                "op",
                "grad"
            ],
            "_MatrixDiagPartGrad": [
                "op",
                "grad"
            ],
            "_MatrixDiagPartV2Grad": [
                "op",
                "grad"
            ],
            "_MatrixSetDiagGrad": [
                "op",
                "grad"
            ],
            "_MatrixSetDiagGradV2": [
                "op",
                "grad"
            ],
            "_MatrixBandPartGrad": [
                "op",
                "grad"
            ],
            "_FillGrad": [
                "_",
                "grad"
            ],
            "_PreventGradientGrad": [
                "op",
                "_"
            ],
            "_GatherGrad": [
                "op",
                "grad"
            ],
            "_GetBatchIndices": [
                "params_shape",
                "indices",
                "batch_dims"
            ],
            "_BatchGatherGrad": [
                "params_shape",
                "values",
                "indices",
                "batch_dims",
                "gather_dim_size"
            ],
            "_GatherV2Grad": [
                "op",
                "grad"
            ],
            "_GatherNdGrad": [
                "op",
                "grad"
            ],
            "_ResourceGatherNdGrad": [
                "op",
                "grad"
            ],
            "_CheckNumericsGrad": [
                "op",
                "grad"
            ],
            "_IdGrad": [
                "_",
                "grad"
            ],
            "_RefIdGrad": [
                "_",
                "grad"
            ],
            "_IdNGrad": [
                "_"
            ],
            "_ReshapeGrad": [
                "op",
                "grad"
            ],
            "_ReshapeToInput": [
                "op",
                "grad"
            ],
            "_ExpandDimsGrad": [
                "op",
                "grad"
            ],
            "_SqueezeGrad": [
                "op",
                "grad"
            ],
            "_TransposeGrad": [
                "op",
                "grad"
            ],
            "_ConjugateTransposeGrad": [
                "op",
                "grad"
            ],
            "_TileGrad": [
                "op",
                "grad"
            ],
            "_PadGrad": [
                "op",
                "grad"
            ],
            "_ReverseSequenceGrad": [
                "op",
                "grad"
            ],
            "_ReverseGrad": [
                "op",
                "grad"
            ],
            "_ReverseV2Grad": [
                "op",
                "grad"
            ],
            "_SpaceToBatchGrad": [
                "op",
                "grad"
            ],
            "_SpaceToBatchNDGrad": [
                "op",
                "grad"
            ],
            "_BatchToSpaceGrad": [
                "op",
                "grad"
            ],
            "_BatchToSpaceNDGrad": [
                "op",
                "grad"
            ],
            "_SpaceToDepthGrad": [
                "op",
                "grad"
            ],
            "_DepthToSpaceGrad": [
                "op",
                "grad"
            ],
            "_MirrorPadGrad": [
                "op",
                "grad"
            ],
            "_MirrorPadGradGrad": [
                "op",
                "grad"
            ],
            "_QuantizeAndDequantizeGrad": [
                "_",
                "grad"
            ],
            "_QuantizeAndDequantizeV2Grad": [
                "_",
                "grad"
            ],
            "_QuantizeAndDequantizeV3Grad": [
                "_",
                "grad"
            ],
            "_ExtractImagePatchesGrad": [
                "op",
                "grad"
            ],
            "_ExtractVolumePatchesGrad": [
                "op",
                "grad"
            ],
            "_ScatterNdGrad": [
                "op",
                "grad"
            ],
            "_TensorScatterUpdateGrad": [
                "op",
                "grad"
            ],
            "_TensorScatterAddGrad": [
                "op",
                "grad"
            ],
            "_TensorScatterSubGrad": [
                "op",
                "grad"
            ],
            "_ScatterNdNonAliasingAddGrad": [
                "op",
                "grad"
            ],
            "_BroadcastToGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.control_flow_util": {
            "enable_control_flow_v2": [],
            "EnableControlFlowV2": [
                "graph"
            ],
            "IsInXLAContext": [
                "op"
            ],
            "InXlaContext": [
                "graph"
            ],
            "GraphOrParentsInXlaContext": [
                "graph"
            ],
            "IsInWhileLoop": [
                "op"
            ],
            "IsInCond": [
                "op"
            ],
            "IsSwitch": [
                "op"
            ],
            "IsMerge": [
                "op"
            ],
            "IsLoopEnter": [
                "op"
            ],
            "IsLoopExit": [
                "op"
            ],
            "IsCondSwitch": [
                "op"
            ],
            "IsCondMerge": [
                "op"
            ],
            "IsLoopSwitch": [
                "op"
            ],
            "IsLoopMerge": [
                "op"
            ],
            "IsLoopConstantEnter": [
                "op"
            ],
            "GetLoopConstantEnter": [
                "value"
            ],
            "GetOutputContext": [
                "op"
            ],
            "GetContainingWhileContext": [
                "ctxt",
                "stop_ctxt"
            ],
            "GetContainingXLAContext": [
                "ctxt"
            ],
            "GetContainingCondContext": [
                "ctxt"
            ],
            "IsContainingContext": [
                "ctxt",
                "maybe_containing_ctxt"
            ],
            "OpInContext": [
                "op",
                "ctxt"
            ],
            "TensorInContext": [
                "tensor",
                "ctxt"
            ],
            "CheckInputFromValidContext": [
                "op",
                "input_op"
            ],
            "GetWhileContext": [
                "op"
            ]
        },
        "tensorflow_core.python.ops.gen_rnn_ops": {
            "block_lstm": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "BlockLSTM": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "block_lstm_eager_fallback": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name",
                "ctx"
            ],
            "block_lstm_grad": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "h",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name"
            ],
            "BlockLSTMGrad": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "h",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name"
            ],
            "block_lstm_grad_eager_fallback": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "h",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name",
                "ctx"
            ],
            "block_lstm_grad_v2": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "h",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name"
            ],
            "BlockLSTMGradV2": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "h",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name"
            ],
            "block_lstm_grad_v2_eager_fallback": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "h",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name",
                "ctx"
            ],
            "block_lstmv2": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "BlockLSTMV2": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "block_lstmv2_eager_fallback": [
                "seq_len_max",
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "cell_clip",
                "use_peephole",
                "name",
                "ctx"
            ],
            "gru_block_cell": [
                "x",
                "h_prev",
                "w_ru",
                "w_c",
                "b_ru",
                "b_c",
                "name"
            ],
            "GRUBlockCell": [
                "x",
                "h_prev",
                "w_ru",
                "w_c",
                "b_ru",
                "b_c",
                "name"
            ],
            "gru_block_cell_eager_fallback": [
                "x",
                "h_prev",
                "w_ru",
                "w_c",
                "b_ru",
                "b_c",
                "name",
                "ctx"
            ],
            "gru_block_cell_grad": [
                "x",
                "h_prev",
                "w_ru",
                "w_c",
                "b_ru",
                "b_c",
                "r",
                "u",
                "c",
                "d_h",
                "name"
            ],
            "GRUBlockCellGrad": [
                "x",
                "h_prev",
                "w_ru",
                "w_c",
                "b_ru",
                "b_c",
                "r",
                "u",
                "c",
                "d_h",
                "name"
            ],
            "gru_block_cell_grad_eager_fallback": [
                "x",
                "h_prev",
                "w_ru",
                "w_c",
                "b_ru",
                "b_c",
                "r",
                "u",
                "c",
                "d_h",
                "name",
                "ctx"
            ],
            "lstm_block_cell": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "LSTMBlockCell": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "lstm_block_cell_eager_fallback": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name",
                "ctx"
            ],
            "lstm_block_cell_grad": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name"
            ],
            "LSTMBlockCellGrad": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name"
            ],
            "lstm_block_cell_grad_eager_fallback": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "wci",
                "wcf",
                "wco",
                "b",
                "i",
                "cs",
                "f",
                "o",
                "ci",
                "co",
                "cs_grad",
                "h_grad",
                "use_peephole",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_nn_ops": {
            "avg_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "AvgPool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool_eager_fallback": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "avg_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "AvgPool3D": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool3d_eager_fallback": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "avg_pool3d_grad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "AvgPool3DGrad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool3d_grad_eager_fallback": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "avg_pool_grad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "AvgPoolGrad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool_grad_eager_fallback": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "_batch_norm_with_global_normalization": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "BatchNormWithGlobalNormalization": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_batch_norm_with_global_normalization_eager_fallback": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name",
                "ctx"
            ],
            "batch_norm_with_global_normalization_grad": [
                "t",
                "m",
                "v",
                "gamma",
                "backprop",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "BatchNormWithGlobalNormalizationGrad": [
                "t",
                "m",
                "v",
                "gamma",
                "backprop",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "batch_norm_with_global_normalization_grad_eager_fallback": [
                "t",
                "m",
                "v",
                "gamma",
                "backprop",
                "variance_epsilon",
                "scale_after_normalization",
                "name",
                "ctx"
            ],
            "bias_add": [
                "value",
                "bias",
                "data_format",
                "name"
            ],
            "BiasAdd": [
                "value",
                "bias",
                "data_format",
                "name"
            ],
            "bias_add_eager_fallback": [
                "value",
                "bias",
                "data_format",
                "name",
                "ctx"
            ],
            "bias_add_grad": [
                "out_backprop",
                "data_format",
                "name"
            ],
            "BiasAddGrad": [
                "out_backprop",
                "data_format",
                "name"
            ],
            "bias_add_grad_eager_fallback": [
                "out_backprop",
                "data_format",
                "name",
                "ctx"
            ],
            "bias_add_v1": [
                "value",
                "bias",
                "name"
            ],
            "BiasAddV1": [
                "value",
                "bias",
                "name"
            ],
            "bias_add_v1_eager_fallback": [
                "value",
                "bias",
                "name",
                "ctx"
            ],
            "conv2d": [
                "input",
                "filter",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name"
            ],
            "Conv2D": [
                "input",
                "filter",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name"
            ],
            "conv2d_eager_fallback": [
                "input",
                "filter",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "conv2d_backprop_filter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name"
            ],
            "Conv2DBackpropFilter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name"
            ],
            "conv2d_backprop_filter_eager_fallback": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "conv2d_backprop_input": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name"
            ],
            "Conv2DBackpropInput": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name"
            ],
            "conv2d_backprop_input_eager_fallback": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "explicit_paddings",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "conv3d": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "Conv3D": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv3d_eager_fallback": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "conv3d_backprop_filter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "dilations",
                "name"
            ],
            "Conv3DBackpropFilter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "dilations",
                "name"
            ],
            "conv3d_backprop_filter_eager_fallback": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "dilations",
                "name",
                "ctx"
            ],
            "conv3d_backprop_filter_v2": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "Conv3DBackpropFilterV2": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv3d_backprop_filter_v2_eager_fallback": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "conv3d_backprop_input": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "dilations",
                "name"
            ],
            "Conv3DBackpropInput": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "dilations",
                "name"
            ],
            "conv3d_backprop_input_eager_fallback": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "dilations",
                "name",
                "ctx"
            ],
            "conv3d_backprop_input_v2": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "Conv3DBackpropInputV2": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "conv3d_backprop_input_v2_eager_fallback": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "data_format_dim_map": [
                "x",
                "src_format",
                "dst_format",
                "name"
            ],
            "DataFormatDimMap": [
                "x",
                "src_format",
                "dst_format",
                "name"
            ],
            "data_format_dim_map_eager_fallback": [
                "x",
                "src_format",
                "dst_format",
                "name",
                "ctx"
            ],
            "data_format_vec_permute": [
                "x",
                "src_format",
                "dst_format",
                "name"
            ],
            "DataFormatVecPermute": [
                "x",
                "src_format",
                "dst_format",
                "name"
            ],
            "data_format_vec_permute_eager_fallback": [
                "x",
                "src_format",
                "dst_format",
                "name",
                "ctx"
            ],
            "depthwise_conv2d_native": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "DepthwiseConv2dNative": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "depthwise_conv2d_native_eager_fallback": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "depthwise_conv2d_native_backprop_filter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "DepthwiseConv2dNativeBackpropFilter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "depthwise_conv2d_native_backprop_filter_eager_fallback": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "depthwise_conv2d_native_backprop_input": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "DepthwiseConv2dNativeBackpropInput": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "depthwise_conv2d_native_backprop_input_eager_fallback": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name",
                "ctx"
            ],
            "dilation2d": [
                "input",
                "filter",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "Dilation2D": [
                "input",
                "filter",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "dilation2d_eager_fallback": [
                "input",
                "filter",
                "strides",
                "rates",
                "padding",
                "name",
                "ctx"
            ],
            "dilation2d_backprop_filter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "Dilation2DBackpropFilter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "dilation2d_backprop_filter_eager_fallback": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name",
                "ctx"
            ],
            "dilation2d_backprop_input": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "Dilation2DBackpropInput": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "dilation2d_backprop_input_eager_fallback": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name",
                "ctx"
            ],
            "elu": [
                "features",
                "name"
            ],
            "Elu": [
                "features",
                "name"
            ],
            "elu_eager_fallback": [
                "features",
                "name",
                "ctx"
            ],
            "elu_grad": [
                "gradients",
                "outputs",
                "name"
            ],
            "EluGrad": [
                "gradients",
                "outputs",
                "name"
            ],
            "elu_grad_eager_fallback": [
                "gradients",
                "outputs",
                "name",
                "ctx"
            ],
            "fractional_avg_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "FractionalAvgPool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "fractional_avg_pool_eager_fallback": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "fractional_avg_pool_grad": [
                "orig_input_tensor_shape",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "FractionalAvgPoolGrad": [
                "orig_input_tensor_shape",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "fractional_avg_pool_grad_eager_fallback": [
                "orig_input_tensor_shape",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name",
                "ctx"
            ],
            "fractional_max_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "FractionalMaxPool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "fractional_max_pool_eager_fallback": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "fractional_max_pool_grad": [
                "orig_input",
                "orig_output",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "FractionalMaxPoolGrad": [
                "orig_input",
                "orig_output",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "fractional_max_pool_grad_eager_fallback": [
                "orig_input",
                "orig_output",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name",
                "ctx"
            ],
            "_fused_batch_norm": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "FusedBatchNorm": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "_fused_batch_norm_eager_fallback": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name",
                "ctx"
            ],
            "fused_batch_norm_grad": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "FusedBatchNormGrad": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_batch_norm_grad_eager_fallback": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name",
                "ctx"
            ],
            "fused_batch_norm_grad_v2": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "FusedBatchNormGradV2": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_batch_norm_grad_v2_eager_fallback": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name",
                "ctx"
            ],
            "fused_batch_norm_grad_v3": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "reserve_space_3",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "FusedBatchNormGradV3": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "reserve_space_3",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_batch_norm_grad_v3_eager_fallback": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "reserve_space_3",
                "epsilon",
                "data_format",
                "is_training",
                "name",
                "ctx"
            ],
            "fused_batch_norm_v2": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "FusedBatchNormV2": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_batch_norm_v2_eager_fallback": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name",
                "ctx"
            ],
            "fused_batch_norm_v3": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "FusedBatchNormV3": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_batch_norm_v3_eager_fallback": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name",
                "ctx"
            ],
            "fused_pad_conv2d": [
                "input",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "name"
            ],
            "FusedPadConv2D": [
                "input",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "name"
            ],
            "fused_pad_conv2d_eager_fallback": [
                "input",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "name",
                "ctx"
            ],
            "fused_resize_and_pad_conv2d": [
                "input",
                "size",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "resize_align_corners",
                "name"
            ],
            "FusedResizeAndPadConv2D": [
                "input",
                "size",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "resize_align_corners",
                "name"
            ],
            "fused_resize_and_pad_conv2d_eager_fallback": [
                "input",
                "size",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "resize_align_corners",
                "name",
                "ctx"
            ],
            "in_top_k": [
                "predictions",
                "targets",
                "k",
                "name"
            ],
            "InTopK": [
                "predictions",
                "targets",
                "k",
                "name"
            ],
            "in_top_k_eager_fallback": [
                "predictions",
                "targets",
                "k",
                "name",
                "ctx"
            ],
            "in_top_kv2": [
                "predictions",
                "targets",
                "k",
                "name"
            ],
            "InTopKV2": [
                "predictions",
                "targets",
                "k",
                "name"
            ],
            "in_top_kv2_eager_fallback": [
                "predictions",
                "targets",
                "k",
                "name",
                "ctx"
            ],
            "l2_loss": [
                "t",
                "name"
            ],
            "L2Loss": [
                "t",
                "name"
            ],
            "l2_loss_eager_fallback": [
                "t",
                "name",
                "ctx"
            ],
            "lrn": [
                "input",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "LRN": [
                "input",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "lrn_eager_fallback": [
                "input",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name",
                "ctx"
            ],
            "lrn_grad": [
                "input_grads",
                "input_image",
                "output_image",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "LRNGrad": [
                "input_grads",
                "input_image",
                "output_image",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "lrn_grad_eager_fallback": [
                "input_grads",
                "input_image",
                "output_image",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name",
                "ctx"
            ],
            "leaky_relu": [
                "features",
                "alpha",
                "name"
            ],
            "LeakyRelu": [
                "features",
                "alpha",
                "name"
            ],
            "leaky_relu_eager_fallback": [
                "features",
                "alpha",
                "name",
                "ctx"
            ],
            "leaky_relu_grad": [
                "gradients",
                "features",
                "alpha",
                "name"
            ],
            "LeakyReluGrad": [
                "gradients",
                "features",
                "alpha",
                "name"
            ],
            "leaky_relu_grad_eager_fallback": [
                "gradients",
                "features",
                "alpha",
                "name",
                "ctx"
            ],
            "log_softmax": [
                "logits",
                "name"
            ],
            "LogSoftmax": [
                "logits",
                "name"
            ],
            "log_softmax_eager_fallback": [
                "logits",
                "name",
                "ctx"
            ],
            "max_pool": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPool": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_eager_fallback": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPool3D": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool3d_eager_fallback": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool3d_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPool3DGrad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool3d_grad_eager_fallback": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool3d_grad_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPool3DGradGrad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool3d_grad_grad_eager_fallback": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPoolGrad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_grad_eager_fallback": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool_grad_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPoolGradGrad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_grad_grad_eager_fallback": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool_grad_grad_v2": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPoolGradGradV2": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_grad_grad_v2_eager_fallback": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool_grad_grad_with_argmax": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "include_batch_in_index",
                "name"
            ],
            "MaxPoolGradGradWithArgmax": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "include_batch_in_index",
                "name"
            ],
            "max_pool_grad_grad_with_argmax_eager_fallback": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "include_batch_in_index",
                "name",
                "ctx"
            ],
            "max_pool_grad_v2": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPoolGradV2": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_grad_v2_eager_fallback": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool_grad_with_argmax": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "include_batch_in_index",
                "name"
            ],
            "MaxPoolGradWithArgmax": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "include_batch_in_index",
                "name"
            ],
            "max_pool_grad_with_argmax_eager_fallback": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "include_batch_in_index",
                "name",
                "ctx"
            ],
            "max_pool_v2": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "MaxPoolV2": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool_v2_eager_fallback": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name",
                "ctx"
            ],
            "max_pool_with_argmax": [
                "input",
                "ksize",
                "strides",
                "padding",
                "Targmax",
                "include_batch_in_index",
                "name"
            ],
            "MaxPoolWithArgmax": [
                "input",
                "ksize",
                "strides",
                "padding",
                "Targmax",
                "include_batch_in_index",
                "name"
            ],
            "max_pool_with_argmax_eager_fallback": [
                "input",
                "ksize",
                "strides",
                "padding",
                "Targmax",
                "include_batch_in_index",
                "name",
                "ctx"
            ],
            "nth_element": [
                "input",
                "n",
                "reverse",
                "name"
            ],
            "NthElement": [
                "input",
                "n",
                "reverse",
                "name"
            ],
            "nth_element_eager_fallback": [
                "input",
                "n",
                "reverse",
                "name",
                "ctx"
            ],
            "quantized_avg_pool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "QuantizedAvgPool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "quantized_avg_pool_eager_fallback": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name",
                "ctx"
            ],
            "quantized_batch_norm_with_global_normalization": [
                "t",
                "t_min",
                "t_max",
                "m",
                "m_min",
                "m_max",
                "v",
                "v_min",
                "v_max",
                "beta",
                "beta_min",
                "beta_max",
                "gamma",
                "gamma_min",
                "gamma_max",
                "out_type",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "QuantizedBatchNormWithGlobalNormalization": [
                "t",
                "t_min",
                "t_max",
                "m",
                "m_min",
                "m_max",
                "v",
                "v_min",
                "v_max",
                "beta",
                "beta_min",
                "beta_max",
                "gamma",
                "gamma_min",
                "gamma_max",
                "out_type",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "quantized_batch_norm_with_global_normalization_eager_fallback": [
                "t",
                "t_min",
                "t_max",
                "m",
                "m_min",
                "m_max",
                "v",
                "v_min",
                "v_max",
                "beta",
                "beta_min",
                "beta_max",
                "gamma",
                "gamma_min",
                "gamma_max",
                "out_type",
                "variance_epsilon",
                "scale_after_normalization",
                "name",
                "ctx"
            ],
            "quantized_bias_add": [
                "input",
                "bias",
                "min_input",
                "max_input",
                "min_bias",
                "max_bias",
                "out_type",
                "name"
            ],
            "QuantizedBiasAdd": [
                "input",
                "bias",
                "min_input",
                "max_input",
                "min_bias",
                "max_bias",
                "out_type",
                "name"
            ],
            "quantized_bias_add_eager_fallback": [
                "input",
                "bias",
                "min_input",
                "max_input",
                "min_bias",
                "max_bias",
                "out_type",
                "name",
                "ctx"
            ],
            "quantized_conv2d": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "QuantizedConv2D": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "quantized_conv2d_eager_fallback": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name",
                "ctx"
            ],
            "quantized_conv2d_and_relu": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DAndRelu": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_and_relu_eager_fallback": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_and_relu_and_requantize": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DAndReluAndRequantize": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_and_relu_and_requantize_eager_fallback": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_and_requantize": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DAndRequantize": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_and_requantize_eager_fallback": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_per_channel": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "QuantizedConv2DPerChannel": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "quantized_conv2d_per_channel_eager_fallback": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name",
                "ctx"
            ],
            "quantized_conv2d_with_bias": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DWithBias": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_with_bias_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_with_bias_and_relu": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DWithBiasAndRelu": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_with_bias_and_relu_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_with_bias_and_relu_and_requantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DWithBiasAndReluAndRequantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_with_bias_and_relu_and_requantize_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_with_bias_and_requantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DWithBiasAndRequantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_with_bias_and_requantize_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_with_bias_signed_sum_and_relu_and_requantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "summand",
                "min_summand",
                "max_summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DWithBiasSignedSumAndReluAndRequantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "summand",
                "min_summand",
                "max_summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_with_bias_signed_sum_and_relu_and_requantize_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "summand",
                "min_summand",
                "max_summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_with_bias_sum_and_relu": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DWithBiasSumAndRelu": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_with_bias_sum_and_relu_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_conv2d_with_bias_sum_and_relu_and_requantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "summand",
                "min_summand",
                "max_summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "QuantizedConv2DWithBiasSumAndReluAndRequantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "summand",
                "min_summand",
                "max_summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name"
            ],
            "quantized_conv2d_with_bias_sum_and_relu_and_requantize_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "summand",
                "min_summand",
                "max_summand",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "padding_list",
                "name",
                "ctx"
            ],
            "quantized_depthwise_conv2d": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "QuantizedDepthwiseConv2D": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "quantized_depthwise_conv2d_eager_fallback": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name",
                "ctx"
            ],
            "quantized_depthwise_conv2d_with_bias": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "QuantizedDepthwiseConv2DWithBias": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "quantized_depthwise_conv2d_with_bias_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name",
                "ctx"
            ],
            "quantized_depthwise_conv2d_with_bias_and_relu": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "QuantizedDepthwiseConv2DWithBiasAndRelu": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "quantized_depthwise_conv2d_with_bias_and_relu_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name",
                "ctx"
            ],
            "quantized_depthwise_conv2d_with_bias_and_relu_and_requantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name"
            ],
            "quantized_depthwise_conv2d_with_bias_and_relu_and_requantize_eager_fallback": [
                "input",
                "filter",
                "bias",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "min_freezed_output",
                "max_freezed_output",
                "strides",
                "padding",
                "out_type",
                "dilations",
                "name",
                "ctx"
            ],
            "quantized_mat_mul_with_bias": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name"
            ],
            "QuantizedMatMulWithBias": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name"
            ],
            "quantized_mat_mul_with_bias_eager_fallback": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name",
                "ctx"
            ],
            "quantized_mat_mul_with_bias_and_relu": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name"
            ],
            "QuantizedMatMulWithBiasAndRelu": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name"
            ],
            "quantized_mat_mul_with_bias_and_relu_eager_fallback": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name",
                "ctx"
            ],
            "quantized_mat_mul_with_bias_and_relu_and_requantize": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "min_freezed_output",
                "max_freezed_output",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name"
            ],
            "QuantizedMatMulWithBiasAndReluAndRequantize": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "min_freezed_output",
                "max_freezed_output",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name"
            ],
            "quantized_mat_mul_with_bias_and_relu_and_requantize_eager_fallback": [
                "a",
                "b",
                "bias",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "min_freezed_output",
                "max_freezed_output",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "input_quant_mode",
                "name",
                "ctx"
            ],
            "quantized_max_pool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "QuantizedMaxPool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "quantized_max_pool_eager_fallback": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name",
                "ctx"
            ],
            "quantized_relu": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "QuantizedRelu": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "quantized_relu_eager_fallback": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name",
                "ctx"
            ],
            "quantized_relu6": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "QuantizedRelu6": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "quantized_relu6_eager_fallback": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name",
                "ctx"
            ],
            "quantized_relu_x": [
                "features",
                "max_value",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "QuantizedReluX": [
                "features",
                "max_value",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "quantized_relu_x_eager_fallback": [
                "features",
                "max_value",
                "min_features",
                "max_features",
                "out_type",
                "name",
                "ctx"
            ],
            "relu": [
                "features",
                "name"
            ],
            "Relu": [
                "features",
                "name"
            ],
            "relu_eager_fallback": [
                "features",
                "name",
                "ctx"
            ],
            "relu6": [
                "features",
                "name"
            ],
            "Relu6": [
                "features",
                "name"
            ],
            "relu6_eager_fallback": [
                "features",
                "name",
                "ctx"
            ],
            "relu6_grad": [
                "gradients",
                "features",
                "name"
            ],
            "Relu6Grad": [
                "gradients",
                "features",
                "name"
            ],
            "relu6_grad_eager_fallback": [
                "gradients",
                "features",
                "name",
                "ctx"
            ],
            "relu_grad": [
                "gradients",
                "features",
                "name"
            ],
            "ReluGrad": [
                "gradients",
                "features",
                "name"
            ],
            "relu_grad_eager_fallback": [
                "gradients",
                "features",
                "name",
                "ctx"
            ],
            "selu": [
                "features",
                "name"
            ],
            "Selu": [
                "features",
                "name"
            ],
            "selu_eager_fallback": [
                "features",
                "name",
                "ctx"
            ],
            "selu_grad": [
                "gradients",
                "outputs",
                "name"
            ],
            "SeluGrad": [
                "gradients",
                "outputs",
                "name"
            ],
            "selu_grad_eager_fallback": [
                "gradients",
                "outputs",
                "name",
                "ctx"
            ],
            "softmax": [
                "logits",
                "name"
            ],
            "Softmax": [
                "logits",
                "name"
            ],
            "softmax_eager_fallback": [
                "logits",
                "name",
                "ctx"
            ],
            "softmax_cross_entropy_with_logits": [
                "features",
                "labels",
                "name"
            ],
            "SoftmaxCrossEntropyWithLogits": [
                "features",
                "labels",
                "name"
            ],
            "softmax_cross_entropy_with_logits_eager_fallback": [
                "features",
                "labels",
                "name",
                "ctx"
            ],
            "softplus": [
                "features",
                "name"
            ],
            "Softplus": [
                "features",
                "name"
            ],
            "softplus_eager_fallback": [
                "features",
                "name",
                "ctx"
            ],
            "softplus_grad": [
                "gradients",
                "features",
                "name"
            ],
            "SoftplusGrad": [
                "gradients",
                "features",
                "name"
            ],
            "softplus_grad_eager_fallback": [
                "gradients",
                "features",
                "name",
                "ctx"
            ],
            "softsign": [
                "features",
                "name"
            ],
            "Softsign": [
                "features",
                "name"
            ],
            "softsign_eager_fallback": [
                "features",
                "name",
                "ctx"
            ],
            "softsign_grad": [
                "gradients",
                "features",
                "name"
            ],
            "SoftsignGrad": [
                "gradients",
                "features",
                "name"
            ],
            "softsign_grad_eager_fallback": [
                "gradients",
                "features",
                "name",
                "ctx"
            ],
            "sparse_softmax_cross_entropy_with_logits": [
                "features",
                "labels",
                "name"
            ],
            "SparseSoftmaxCrossEntropyWithLogits": [
                "features",
                "labels",
                "name"
            ],
            "sparse_softmax_cross_entropy_with_logits_eager_fallback": [
                "features",
                "labels",
                "name",
                "ctx"
            ],
            "top_k": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "TopK": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "top_k_eager_fallback": [
                "input",
                "k",
                "sorted",
                "name",
                "ctx"
            ],
            "top_kv2": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "TopKV2": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "top_kv2_eager_fallback": [
                "input",
                "k",
                "sorted",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.control_flow_grad": {
            "_SwitchGrad": [
                "op"
            ],
            "_MergeGrad": [
                "op",
                "grad",
                "_"
            ],
            "_RefMergeGrad": [
                "op",
                "grad",
                "_"
            ],
            "_ExitGrad": [
                "op",
                "grad"
            ],
            "_NextIterationGrad": [
                "_",
                "grad"
            ],
            "_RefNextIterationGrad": [
                "_",
                "grad"
            ],
            "_EnterGrad": [
                "op",
                "grad"
            ],
            "_RefEnterGrad": [
                "op",
                "grad"
            ],
            "_LoopCondGrad": [
                "_"
            ]
        },
        "tensorflow_core.python.ops.weights_broadcast_ops": {
            "_has_valid_dims": [
                "weights_shape",
                "values_shape"
            ],
            "_has_valid_nonscalar_shape": [
                "weights_rank",
                "weights_shape",
                "values_rank",
                "values_shape"
            ],
            "assert_broadcastable": [
                "weights",
                "values"
            ],
            "broadcast_weights": [
                "weights",
                "values"
            ]
        },
        "tensorflow_core.python.ops.rnn_cell_wrapper_impl": {
            "_serialize_function_to_config": [
                "function"
            ],
            "_parse_config_to_function": [
                "config",
                "custom_objects",
                "func_attr_name",
                "func_type_attr_name",
                "module_attr_name"
            ],
            "_default_dropout_state_filter_visitor": [
                "substate"
            ],
            "_enumerated_map_structure_up_to": [
                "shallow_structure",
                "map_fn"
            ],
            "DropoutWrapperBase": {
                "__init__": [
                    "self",
                    "cell",
                    "input_keep_prob",
                    "output_keep_prob",
                    "state_keep_prob",
                    "variational_recurrent",
                    "input_size",
                    "dtype",
                    "seed",
                    "dropout_state_filter_visitor"
                ],
                "_gen_seed": [
                    "self",
                    "salt_prefix",
                    "index"
                ],
                "wrapped_cell": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "_variational_recurrent_dropout_value": [
                    "self",
                    "unused_index",
                    "value",
                    "noise",
                    "keep_prob"
                ],
                "_dropout": [
                    "self",
                    "values",
                    "salt_prefix",
                    "recurrent_noise",
                    "keep_prob",
                    "shallow_filtered_substructure"
                ],
                "_call_wrapped_cell": [
                    "self",
                    "inputs",
                    "state",
                    "cell_call_fn"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "ResidualWrapperBase": {
                "__init__": [
                    "self",
                    "cell",
                    "residual_fn"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "_call_wrapped_cell": [
                    "self",
                    "inputs",
                    "state",
                    "cell_call_fn"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "DeviceWrapperBase": {
                "__init__": [
                    "self",
                    "cell",
                    "device"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "_call_wrapped_cell": [
                    "self",
                    "inputs",
                    "state",
                    "cell_call_fn"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.math_grad": {
            "_safe_shape_div": [
                "x",
                "y"
            ],
            "_ArgMaxGrad": [
                "op",
                "grad"
            ],
            "_ArgMinGrad": [
                "op",
                "grad"
            ],
            "SmartBroadcastGradientArgs": [
                "x",
                "y",
                "grad"
            ],
            "_IsScalar": [
                "x"
            ],
            "_SumGrad": [
                "op",
                "grad"
            ],
            "_MinOrMaxGrad": [
                "op",
                "grad"
            ],
            "_MaxGrad": [
                "op",
                "grad"
            ],
            "_MinGrad": [
                "op",
                "grad"
            ],
            "_MeanGrad": [
                "op",
                "grad"
            ],
            "_ProdGrad": [
                "op",
                "grad"
            ],
            "_SegmentSumGrad": [
                "op",
                "grad"
            ],
            "_SegmentMeanGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSumGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSumWithNumSegmentsGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentMeanGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentMeanWithNumSegmentsGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSqrtNGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSqrtNWithNumSegmentsGrad": [
                "op",
                "grad"
            ],
            "_SegmentMinOrMaxGrad": [
                "op",
                "grad"
            ],
            "_SegmentMinGrad": [
                "op",
                "grad"
            ],
            "_SegmentMaxGrad": [
                "op",
                "grad"
            ],
            "_GatherDropNegatives": [
                "params",
                "ids",
                "zero_clipped_indices",
                "is_positive"
            ],
            "_UnsortedSegmentMinOrMaxGrad": [
                "op",
                "grad"
            ],
            "_UnsortedSegmentSumGrad": [
                "op",
                "grad"
            ],
            "_UnsortedSegmentMaxGrad": [
                "op",
                "grad"
            ],
            "_UnsortedSegmentMinGrad": [
                "op",
                "grad"
            ],
            "_UnsortedSegmentProdGrad": [
                "op",
                "grad"
            ],
            "_AbsGrad": [
                "op",
                "grad"
            ],
            "_NegGrad": [
                "_",
                "grad"
            ],
            "_InvGrad": [
                "op",
                "grad"
            ],
            "_ReciprocalGrad": [
                "op",
                "grad"
            ],
            "_InvGradGrad": [
                "op",
                "grad"
            ],
            "_ReciprocalGradGrad": [
                "op",
                "grad"
            ],
            "_SquareGrad": [
                "op",
                "grad"
            ],
            "_SqrtGrad": [
                "op",
                "grad"
            ],
            "_SqrtGradGrad": [
                "op",
                "grad"
            ],
            "_RsqrtGrad": [
                "op",
                "grad"
            ],
            "_RsqrtGradGrad": [
                "op",
                "grad"
            ],
            "_ExpGrad": [
                "op",
                "grad"
            ],
            "_Expm1Grad": [
                "op",
                "grad"
            ],
            "_LogGrad": [
                "op",
                "grad"
            ],
            "_Log1pGrad": [
                "op",
                "grad"
            ],
            "_XLogyGrad": [
                "op",
                "grad"
            ],
            "_XDivyGrad": [
                "op",
                "grad"
            ],
            "_SinhGrad": [
                "op",
                "grad"
            ],
            "_CoshGrad": [
                "op",
                "grad"
            ],
            "_TanhGrad": [
                "op",
                "grad"
            ],
            "_AsinhGrad": [
                "op",
                "grad"
            ],
            "_AcoshGrad": [
                "op",
                "grad"
            ],
            "_AtanhGrad": [
                "op",
                "grad"
            ],
            "_TanhGradGrad": [
                "op",
                "grad"
            ],
            "_ErfGrad": [
                "op",
                "grad"
            ],
            "_ErfcGrad": [
                "op",
                "grad"
            ],
            "_LgammaGrad": [
                "op",
                "grad"
            ],
            "_DigammaGrad": [
                "op",
                "grad"
            ],
            "_BesselI0eGrad": [
                "op",
                "grad"
            ],
            "_BesselI1eGrad": [
                "op",
                "grad"
            ],
            "_IgammaGrad": [
                "op",
                "grad"
            ],
            "_IgammacGrad": [
                "op",
                "grad"
            ],
            "_BetaincGrad": [
                "op",
                "grad"
            ],
            "_ZetaGrad": [
                "op",
                "grad"
            ],
            "_PolygammaGrad": [
                "op",
                "grad"
            ],
            "_SigmoidGrad": [
                "op",
                "grad"
            ],
            "_SigmoidGradGrad": [
                "op",
                "grad"
            ],
            "_SignGrad": [
                "op",
                "_"
            ],
            "_SinGrad": [
                "op",
                "grad"
            ],
            "_CosGrad": [
                "op",
                "grad"
            ],
            "_TanGrad": [
                "op",
                "grad"
            ],
            "_AsinGrad": [
                "op",
                "grad"
            ],
            "_AcosGrad": [
                "op",
                "grad"
            ],
            "_AtanGrad": [
                "op",
                "grad"
            ],
            "_Atan2Grad": [
                "op",
                "grad"
            ],
            "_AddNGrad": [
                "op",
                "grad"
            ],
            "_ShapesFullySpecifiedAndEqual": [
                "x",
                "y",
                "grad"
            ],
            "_AddGrad": [
                "op",
                "grad"
            ],
            "_SubGrad": [
                "op",
                "grad"
            ],
            "_MulGrad": [
                "op",
                "grad"
            ],
            "_MulNoNanGrad": [
                "op",
                "grad"
            ],
            "_DivGrad": [
                "op",
                "grad"
            ],
            "_FloorDivGrad": [
                "_",
                "unused_grad"
            ],
            "_FloorModGrad": [
                "op",
                "grad"
            ],
            "_TruncateDivGrad": [
                "_",
                "unused_grad"
            ],
            "_RealDivGrad": [
                "op",
                "grad"
            ],
            "_DivNoNanGrad": [
                "op",
                "grad"
            ],
            "_PowGrad": [
                "op",
                "grad"
            ],
            "_MaximumMinimumGradInputOnly": [
                "op",
                "grad",
                "selector_op"
            ],
            "_MaximumMinimumGrad": [
                "op",
                "grad",
                "selector_op"
            ],
            "_MaximumGrad": [
                "op",
                "grad"
            ],
            "_MinimumGrad": [
                "op",
                "grad"
            ],
            "_SquaredDifferenceGrad": [
                "op",
                "grad"
            ],
            "_SelectGrad": [
                "op",
                "grad"
            ],
            "_SelectGradV2": [
                "op",
                "grad"
            ],
            "_MatMulGradAgainstFirstOnly": [
                "op",
                "grad"
            ],
            "_MatMulGradAgainstSecondOnly": [
                "op",
                "grad"
            ],
            "_MatMulGrad": [
                "op",
                "grad"
            ],
            "_SparseMatMulGrad": [
                "op",
                "grad"
            ],
            "_FloorGrad": [
                "_",
                "unused_grad"
            ],
            "_CeilGrad": [
                "_",
                "unused_grad"
            ],
            "_RoundGrad": [
                "_",
                "unused_grad"
            ],
            "_RintGrad": [
                "_",
                "unused_grad"
            ],
            "_BatchMatMul": [
                "op",
                "grad"
            ],
            "_BatchMatMulV2": [
                "op",
                "grad"
            ],
            "_ComplexGrad": [
                "op",
                "grad"
            ],
            "_RealGrad": [
                "_",
                "grad"
            ],
            "_ImagGrad": [
                "_",
                "grad"
            ],
            "_AngleGrad": [
                "op",
                "grad"
            ],
            "_ConjGrad": [
                "_",
                "grad"
            ],
            "_ComplexAbsGrad": [
                "op",
                "grad"
            ],
            "_CastGrad": [
                "op",
                "grad"
            ],
            "_CrossGrad": [
                "op",
                "grad"
            ],
            "_CumsumGrad": [
                "op",
                "grad"
            ],
            "_CumprodGrad": [
                "op",
                "grad"
            ],
            "_CumulativeLogsumexpGrad": [
                "op",
                "grad"
            ],
            "_NextAfterGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.bitwise_ops": {},
        "tensorflow_core.python.ops.init_ops": {
            "lecun_normal": [
                "seed"
            ],
            "lecun_uniform": [
                "seed"
            ],
            "he_normal": [
                "seed"
            ],
            "he_uniform": [
                "seed"
            ],
            "_compute_fans": [
                "shape"
            ],
            "_assert_float_dtype": [
                "dtype"
            ],
            "Initializer": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "Zeros": {
                "__init__": [
                    "self",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Ones": {
                "__init__": [
                    "self",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Constant": {
                "__init__": [
                    "self",
                    "value",
                    "dtype",
                    "verify_shape"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info",
                    "verify_shape"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RandomUniform": {
                "__init__": [
                    "self",
                    "minval",
                    "maxval",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RandomNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "TruncatedNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "UniformUnitScaling": {
                "__init__": [
                    "self",
                    "factor",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "VarianceScaling": {
                "__init__": [
                    "self",
                    "scale",
                    "mode",
                    "distribution",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Orthogonal": {
                "__init__": [
                    "self",
                    "gain",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "ConvolutionDeltaOrthogonal": {
                "__init__": [
                    "self",
                    "gain",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "ConvolutionOrthogonal": {
                "__init__": [
                    "self",
                    "gain",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ],
                "_orthogonal_matrix": [
                    "self",
                    "n"
                ],
                "_symmetric_projection": [
                    "self",
                    "n"
                ]
            },
            "ConvolutionOrthogonal2D": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "_dict_to_tensor": [
                    "self",
                    "x",
                    "k1",
                    "k2"
                ],
                "_block_orth": [
                    "self",
                    "p1",
                    "p2"
                ],
                "_matrix_conv": [
                    "self",
                    "m1",
                    "m2"
                ],
                "_orthogonal_kernel": [
                    "self",
                    "ksize",
                    "cin",
                    "cout"
                ]
            },
            "ConvolutionOrthogonal1D": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "_dict_to_tensor": [
                    "self",
                    "x",
                    "k"
                ],
                "_block_orth": [
                    "self",
                    "projection_matrix"
                ],
                "_matrix_conv": [
                    "self",
                    "m1",
                    "m2"
                ],
                "_orthogonal_kernel": [
                    "self",
                    "ksize",
                    "cin",
                    "cout"
                ]
            },
            "ConvolutionOrthogonal3D": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "_dict_to_tensor": [
                    "self",
                    "x",
                    "k1",
                    "k2",
                    "k3"
                ],
                "_block_orth": [
                    "self",
                    "p1",
                    "p2",
                    "p3"
                ],
                "_matrix_conv": [
                    "self",
                    "m1",
                    "m2"
                ],
                "_orthogonal_kernel": [
                    "self",
                    "ksize",
                    "cin",
                    "cout"
                ]
            },
            "Identity": {
                "__init__": [
                    "self",
                    "gain",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GlorotUniform": {
                "__init__": [
                    "self",
                    "seed",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GlorotNormal": {
                "__init__": [
                    "self",
                    "seed",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.while_v2": {
            "while_loop": [
                "cond",
                "body",
                "loop_vars",
                "shape_invariants",
                "parallel_iterations",
                "maximum_iterations",
                "name",
                "return_same_structure",
                "back_prop"
            ],
            "_WhileGrad": [
                "op"
            ],
            "_get_intermediates": [
                "func_graph"
            ],
            "_preprocess_grad": [
                "grad",
                "body_graph_output",
                "while_op_output"
            ],
            "_zeros_like": [
                "op_output"
            ],
            "_is_trainable": [
                "tensor"
            ],
            "_get_graph": [
                "while_op",
                "func_attr_name"
            ],
            "_create_grad_func": [
                "ys",
                "xs",
                "grads",
                "cond_graph",
                "body_graph",
                "name",
                "while_op",
                "maximum_iterations"
            ],
            "_grad_fn": [
                "ys",
                "xs",
                "args",
                "func_graph"
            ],
            "_resolve_grad_captures": [
                "body_graph",
                "body_grad_graph",
                "while_op"
            ],
            "_get_structured_grad_output": [
                "outputs",
                "grads",
                "body_grad_graph"
            ],
            "_get_accumulator": [
                "tensor"
            ],
            "_check_shapes_compat": [
                "output_tensors",
                "shape_invariants",
                "input_tensors"
            ],
            "_check_num_inputs_outputs": [
                "cond_graph",
                "body_graph",
                "num_flattened_loop_vars"
            ],
            "_check_inputs_outputs_types_match": [
                "body_graph",
                "flattened_loop_vars"
            ],
            "_copy_handle_data": [
                "src_tensors",
                "tgt_tensors"
            ],
            "_graph_name": [
                "graph"
            ],
            "_pack_sequence_as": [
                "structure_with_tas",
                "loop_vars"
            ],
            "_tensor_array_to_flow": [
                "loop_vars"
            ],
            "_build_maximum_iterations_loop_var": [
                "maximum_iterations"
            ],
            "_build_accumulator_name": [
                "tensor"
            ],
            "_is_loop_invariant": [
                "tensor",
                "inputs",
                "outputs"
            ],
            "_WhileBodyGradFuncGraph": {
                "__init__": [
                    "self",
                    "name",
                    "forward_cond_graph",
                    "forward_body_graph",
                    "maximum_iterations",
                    "forward_while_op",
                    "body_graph_inputs",
                    "body_graph_outputs"
                ],
                "while_op_needs_rewrite": [
                    "self"
                ],
                "capture": [
                    "self",
                    "tensor",
                    "name",
                    "whitelisted"
                ],
                "_capture_helper": [
                    "self",
                    "tensor",
                    "name"
                ],
                "_resource_capture_helper": [
                    "self",
                    "tensor"
                ]
            }
        },
        "tensorflow_core.python.ops.metrics": {},
        "tensorflow_core.python.ops.special_math_ops": {
            "lbeta": [
                "x",
                "name"
            ],
            "bessel_i0": [
                "x",
                "name"
            ],
            "bessel_i1": [
                "x",
                "name"
            ],
            "_einsum_grad": [
                "op",
                "grad"
            ],
            "_enclosing_tpu_context": [],
            "einsum": [
                "equation"
            ],
            "_einsum_parse_and_resolve_equation": [
                "equation",
                "input_shapes"
            ],
            "_einsum_reduction": [
                "t0",
                "t0_axis_labels",
                "t1",
                "t1_axis_labels",
                "axes_to_sum"
            ],
            "_transpose_if_necessary": [
                "tensor",
                "perm"
            ],
            "_reshape_if_necessary": [
                "tensor",
                "new_shape"
            ],
            "_get_shape": [
                "tensor"
            ],
            "_total_size": [
                "shape_values"
            ],
            "_exponential_space_einsum": [
                "equation"
            ]
        },
        "tensorflow_core.python.ops.gen_ragged_conversion_ops": {
            "ragged_tensor_from_variant": [
                "encoded_ragged",
                "input_ragged_rank",
                "output_ragged_rank",
                "Tvalues",
                "Tsplits",
                "name"
            ],
            "RaggedTensorFromVariant": [
                "encoded_ragged",
                "input_ragged_rank",
                "output_ragged_rank",
                "Tvalues",
                "Tsplits",
                "name"
            ],
            "ragged_tensor_from_variant_eager_fallback": [
                "encoded_ragged",
                "input_ragged_rank",
                "output_ragged_rank",
                "Tvalues",
                "Tsplits",
                "name",
                "ctx"
            ],
            "ragged_tensor_to_sparse": [
                "rt_nested_splits",
                "rt_dense_values",
                "name"
            ],
            "RaggedTensorToSparse": [
                "rt_nested_splits",
                "rt_dense_values",
                "name"
            ],
            "ragged_tensor_to_sparse_eager_fallback": [
                "rt_nested_splits",
                "rt_dense_values",
                "name",
                "ctx"
            ],
            "ragged_tensor_to_tensor": [
                "shape",
                "values",
                "default_value",
                "row_partition_tensors",
                "row_partition_types",
                "name"
            ],
            "RaggedTensorToTensor": [
                "shape",
                "values",
                "default_value",
                "row_partition_tensors",
                "row_partition_types",
                "name"
            ],
            "ragged_tensor_to_tensor_eager_fallback": [
                "shape",
                "values",
                "default_value",
                "row_partition_tensors",
                "row_partition_types",
                "name",
                "ctx"
            ],
            "ragged_tensor_to_variant": [
                "rt_nested_splits",
                "rt_dense_values",
                "batched_input",
                "name"
            ],
            "RaggedTensorToVariant": [
                "rt_nested_splits",
                "rt_dense_values",
                "batched_input",
                "name"
            ],
            "ragged_tensor_to_variant_eager_fallback": [
                "rt_nested_splits",
                "rt_dense_values",
                "batched_input",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_io_ops": {
            "fixed_length_record_reader": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "hop_bytes",
                "container",
                "shared_name",
                "name"
            ],
            "FixedLengthRecordReader": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "hop_bytes",
                "container",
                "shared_name",
                "name"
            ],
            "fixed_length_record_reader_eager_fallback": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "hop_bytes",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "fixed_length_record_reader_v2": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "hop_bytes",
                "container",
                "shared_name",
                "encoding",
                "name"
            ],
            "FixedLengthRecordReaderV2": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "hop_bytes",
                "container",
                "shared_name",
                "encoding",
                "name"
            ],
            "fixed_length_record_reader_v2_eager_fallback": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "hop_bytes",
                "container",
                "shared_name",
                "encoding",
                "name",
                "ctx"
            ],
            "identity_reader": [
                "container",
                "shared_name",
                "name"
            ],
            "IdentityReader": [
                "container",
                "shared_name",
                "name"
            ],
            "identity_reader_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "identity_reader_v2": [
                "container",
                "shared_name",
                "name"
            ],
            "IdentityReaderV2": [
                "container",
                "shared_name",
                "name"
            ],
            "identity_reader_v2_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "lmdb_reader": [
                "container",
                "shared_name",
                "name"
            ],
            "LMDBReader": [
                "container",
                "shared_name",
                "name"
            ],
            "lmdb_reader_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "matching_files": [
                "pattern",
                "name"
            ],
            "MatchingFiles": [
                "pattern",
                "name"
            ],
            "matching_files_eager_fallback": [
                "pattern",
                "name",
                "ctx"
            ],
            "merge_v2_checkpoints": [
                "checkpoint_prefixes",
                "destination_prefix",
                "delete_old_dirs",
                "name"
            ],
            "MergeV2Checkpoints": [
                "checkpoint_prefixes",
                "destination_prefix",
                "delete_old_dirs",
                "name"
            ],
            "merge_v2_checkpoints_eager_fallback": [
                "checkpoint_prefixes",
                "destination_prefix",
                "delete_old_dirs",
                "name",
                "ctx"
            ],
            "read_file": [
                "filename",
                "name"
            ],
            "ReadFile": [
                "filename",
                "name"
            ],
            "read_file_eager_fallback": [
                "filename",
                "name",
                "ctx"
            ],
            "reader_num_records_produced": [
                "reader_handle",
                "name"
            ],
            "ReaderNumRecordsProduced": [
                "reader_handle",
                "name"
            ],
            "reader_num_records_produced_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "reader_num_records_produced_v2": [
                "reader_handle",
                "name"
            ],
            "ReaderNumRecordsProducedV2": [
                "reader_handle",
                "name"
            ],
            "reader_num_records_produced_v2_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "reader_num_work_units_completed": [
                "reader_handle",
                "name"
            ],
            "ReaderNumWorkUnitsCompleted": [
                "reader_handle",
                "name"
            ],
            "reader_num_work_units_completed_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "reader_num_work_units_completed_v2": [
                "reader_handle",
                "name"
            ],
            "ReaderNumWorkUnitsCompletedV2": [
                "reader_handle",
                "name"
            ],
            "reader_num_work_units_completed_v2_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "reader_read": [
                "reader_handle",
                "queue_handle",
                "name"
            ],
            "ReaderRead": [
                "reader_handle",
                "queue_handle",
                "name"
            ],
            "reader_read_eager_fallback": [
                "reader_handle",
                "queue_handle",
                "name",
                "ctx"
            ],
            "reader_read_up_to": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name"
            ],
            "ReaderReadUpTo": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name"
            ],
            "reader_read_up_to_eager_fallback": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name",
                "ctx"
            ],
            "reader_read_up_to_v2": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name"
            ],
            "ReaderReadUpToV2": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name"
            ],
            "reader_read_up_to_v2_eager_fallback": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name",
                "ctx"
            ],
            "reader_read_v2": [
                "reader_handle",
                "queue_handle",
                "name"
            ],
            "ReaderReadV2": [
                "reader_handle",
                "queue_handle",
                "name"
            ],
            "reader_read_v2_eager_fallback": [
                "reader_handle",
                "queue_handle",
                "name",
                "ctx"
            ],
            "reader_reset": [
                "reader_handle",
                "name"
            ],
            "ReaderReset": [
                "reader_handle",
                "name"
            ],
            "reader_reset_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "reader_reset_v2": [
                "reader_handle",
                "name"
            ],
            "ReaderResetV2": [
                "reader_handle",
                "name"
            ],
            "reader_reset_v2_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "reader_restore_state": [
                "reader_handle",
                "state",
                "name"
            ],
            "ReaderRestoreState": [
                "reader_handle",
                "state",
                "name"
            ],
            "reader_restore_state_eager_fallback": [
                "reader_handle",
                "state",
                "name",
                "ctx"
            ],
            "reader_restore_state_v2": [
                "reader_handle",
                "state",
                "name"
            ],
            "ReaderRestoreStateV2": [
                "reader_handle",
                "state",
                "name"
            ],
            "reader_restore_state_v2_eager_fallback": [
                "reader_handle",
                "state",
                "name",
                "ctx"
            ],
            "reader_serialize_state": [
                "reader_handle",
                "name"
            ],
            "ReaderSerializeState": [
                "reader_handle",
                "name"
            ],
            "reader_serialize_state_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "reader_serialize_state_v2": [
                "reader_handle",
                "name"
            ],
            "ReaderSerializeStateV2": [
                "reader_handle",
                "name"
            ],
            "reader_serialize_state_v2_eager_fallback": [
                "reader_handle",
                "name",
                "ctx"
            ],
            "restore": [
                "file_pattern",
                "tensor_name",
                "dt",
                "preferred_shard",
                "name"
            ],
            "Restore": [
                "file_pattern",
                "tensor_name",
                "dt",
                "preferred_shard",
                "name"
            ],
            "restore_eager_fallback": [
                "file_pattern",
                "tensor_name",
                "dt",
                "preferred_shard",
                "name",
                "ctx"
            ],
            "restore_slice": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "dt",
                "preferred_shard",
                "name"
            ],
            "RestoreSlice": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "dt",
                "preferred_shard",
                "name"
            ],
            "restore_slice_eager_fallback": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "dt",
                "preferred_shard",
                "name",
                "ctx"
            ],
            "restore_v2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "dtypes",
                "name"
            ],
            "RestoreV2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "dtypes",
                "name"
            ],
            "restore_v2_eager_fallback": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "dtypes",
                "name",
                "ctx"
            ],
            "save": [
                "filename",
                "tensor_names",
                "data",
                "name"
            ],
            "Save": [
                "filename",
                "tensor_names",
                "data",
                "name"
            ],
            "save_eager_fallback": [
                "filename",
                "tensor_names",
                "data",
                "name",
                "ctx"
            ],
            "save_slices": [
                "filename",
                "tensor_names",
                "shapes_and_slices",
                "data",
                "name"
            ],
            "SaveSlices": [
                "filename",
                "tensor_names",
                "shapes_and_slices",
                "data",
                "name"
            ],
            "save_slices_eager_fallback": [
                "filename",
                "tensor_names",
                "shapes_and_slices",
                "data",
                "name",
                "ctx"
            ],
            "save_v2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "tensors",
                "name"
            ],
            "SaveV2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "tensors",
                "name"
            ],
            "save_v2_eager_fallback": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "tensors",
                "name",
                "ctx"
            ],
            "sharded_filename": [
                "basename",
                "shard",
                "num_shards",
                "name"
            ],
            "ShardedFilename": [
                "basename",
                "shard",
                "num_shards",
                "name"
            ],
            "sharded_filename_eager_fallback": [
                "basename",
                "shard",
                "num_shards",
                "name",
                "ctx"
            ],
            "sharded_filespec": [
                "basename",
                "num_shards",
                "name"
            ],
            "ShardedFilespec": [
                "basename",
                "num_shards",
                "name"
            ],
            "sharded_filespec_eager_fallback": [
                "basename",
                "num_shards",
                "name",
                "ctx"
            ],
            "tf_record_reader": [
                "container",
                "shared_name",
                "compression_type",
                "name"
            ],
            "TFRecordReader": [
                "container",
                "shared_name",
                "compression_type",
                "name"
            ],
            "tf_record_reader_eager_fallback": [
                "container",
                "shared_name",
                "compression_type",
                "name",
                "ctx"
            ],
            "tf_record_reader_v2": [
                "container",
                "shared_name",
                "compression_type",
                "name"
            ],
            "TFRecordReaderV2": [
                "container",
                "shared_name",
                "compression_type",
                "name"
            ],
            "tf_record_reader_v2_eager_fallback": [
                "container",
                "shared_name",
                "compression_type",
                "name",
                "ctx"
            ],
            "text_line_reader": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name"
            ],
            "TextLineReader": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name"
            ],
            "text_line_reader_eager_fallback": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "text_line_reader_v2": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name"
            ],
            "TextLineReaderV2": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name"
            ],
            "text_line_reader_v2_eager_fallback": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "whole_file_reader": [
                "container",
                "shared_name",
                "name"
            ],
            "WholeFileReader": [
                "container",
                "shared_name",
                "name"
            ],
            "whole_file_reader_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "whole_file_reader_v2": [
                "container",
                "shared_name",
                "name"
            ],
            "WholeFileReaderV2": [
                "container",
                "shared_name",
                "name"
            ],
            "whole_file_reader_v2_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "write_file": [
                "filename",
                "contents",
                "name"
            ],
            "WriteFile": [
                "filename",
                "contents",
                "name"
            ],
            "write_file_eager_fallback": [
                "filename",
                "contents",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_array_ops": {
            "batch_matrix_band_part": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "BatchMatrixBandPart": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "batch_matrix_band_part_eager_fallback": [
                "input",
                "num_lower",
                "num_upper",
                "name",
                "ctx"
            ],
            "batch_matrix_diag": [
                "diagonal",
                "name"
            ],
            "BatchMatrixDiag": [
                "diagonal",
                "name"
            ],
            "batch_matrix_diag_eager_fallback": [
                "diagonal",
                "name",
                "ctx"
            ],
            "batch_matrix_diag_part": [
                "input",
                "name"
            ],
            "BatchMatrixDiagPart": [
                "input",
                "name"
            ],
            "batch_matrix_diag_part_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_matrix_set_diag": [
                "input",
                "diagonal",
                "name"
            ],
            "BatchMatrixSetDiag": [
                "input",
                "diagonal",
                "name"
            ],
            "batch_matrix_set_diag_eager_fallback": [
                "input",
                "diagonal",
                "name",
                "ctx"
            ],
            "batch_to_space": [
                "input",
                "crops",
                "block_size",
                "name"
            ],
            "BatchToSpace": [
                "input",
                "crops",
                "block_size",
                "name"
            ],
            "batch_to_space_eager_fallback": [
                "input",
                "crops",
                "block_size",
                "name",
                "ctx"
            ],
            "batch_to_space_nd": [
                "input",
                "block_shape",
                "crops",
                "name"
            ],
            "BatchToSpaceND": [
                "input",
                "block_shape",
                "crops",
                "name"
            ],
            "batch_to_space_nd_eager_fallback": [
                "input",
                "block_shape",
                "crops",
                "name",
                "ctx"
            ],
            "bitcast": [
                "input",
                "type",
                "name"
            ],
            "Bitcast": [
                "input",
                "type",
                "name"
            ],
            "bitcast_eager_fallback": [
                "input",
                "type",
                "name",
                "ctx"
            ],
            "broadcast_args": [
                "s0",
                "s1",
                "name"
            ],
            "BroadcastArgs": [
                "s0",
                "s1",
                "name"
            ],
            "broadcast_args_eager_fallback": [
                "s0",
                "s1",
                "name",
                "ctx"
            ],
            "broadcast_gradient_args": [
                "s0",
                "s1",
                "name"
            ],
            "BroadcastGradientArgs": [
                "s0",
                "s1",
                "name"
            ],
            "broadcast_gradient_args_eager_fallback": [
                "s0",
                "s1",
                "name",
                "ctx"
            ],
            "broadcast_to": [
                "input",
                "shape",
                "name"
            ],
            "BroadcastTo": [
                "input",
                "shape",
                "name"
            ],
            "broadcast_to_eager_fallback": [
                "input",
                "shape",
                "name",
                "ctx"
            ],
            "check_numerics": [
                "tensor",
                "message",
                "name"
            ],
            "CheckNumerics": [
                "tensor",
                "message",
                "name"
            ],
            "check_numerics_eager_fallback": [
                "tensor",
                "message",
                "name",
                "ctx"
            ],
            "concat": [
                "concat_dim",
                "values",
                "name"
            ],
            "Concat": [
                "concat_dim",
                "values",
                "name"
            ],
            "concat_eager_fallback": [
                "concat_dim",
                "values",
                "name",
                "ctx"
            ],
            "concat_offset": [
                "concat_dim",
                "shape",
                "name"
            ],
            "ConcatOffset": [
                "concat_dim",
                "shape",
                "name"
            ],
            "concat_offset_eager_fallback": [
                "concat_dim",
                "shape",
                "name",
                "ctx"
            ],
            "concat_v2": [
                "values",
                "axis",
                "name"
            ],
            "ConcatV2": [
                "values",
                "axis",
                "name"
            ],
            "concat_v2_eager_fallback": [
                "values",
                "axis",
                "name",
                "ctx"
            ],
            "conjugate_transpose": [
                "x",
                "perm",
                "name"
            ],
            "ConjugateTranspose": [
                "x",
                "perm",
                "name"
            ],
            "conjugate_transpose_eager_fallback": [
                "x",
                "perm",
                "name",
                "ctx"
            ],
            "const": [
                "value",
                "dtype",
                "name"
            ],
            "Const": [
                "value",
                "dtype",
                "name"
            ],
            "const_eager_fallback": [
                "value",
                "dtype",
                "name",
                "ctx"
            ],
            "debug_gradient_identity": [
                "input",
                "name"
            ],
            "DebugGradientIdentity": [
                "input",
                "name"
            ],
            "debug_gradient_identity_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "debug_gradient_ref_identity": [
                "input",
                "name"
            ],
            "DebugGradientRefIdentity": [
                "input",
                "name"
            ],
            "debug_gradient_ref_identity_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "deep_copy": [
                "x",
                "name"
            ],
            "DeepCopy": [
                "x",
                "name"
            ],
            "deep_copy_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "depth_to_space": [
                "input",
                "block_size",
                "data_format",
                "name"
            ],
            "DepthToSpace": [
                "input",
                "block_size",
                "data_format",
                "name"
            ],
            "depth_to_space_eager_fallback": [
                "input",
                "block_size",
                "data_format",
                "name",
                "ctx"
            ],
            "dequantize": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "name"
            ],
            "Dequantize": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "name"
            ],
            "dequantize_eager_fallback": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "name",
                "ctx"
            ],
            "diag": [
                "diagonal",
                "name"
            ],
            "Diag": [
                "diagonal",
                "name"
            ],
            "diag_eager_fallback": [
                "diagonal",
                "name",
                "ctx"
            ],
            "diag_part": [
                "input",
                "name"
            ],
            "DiagPart": [
                "input",
                "name"
            ],
            "diag_part_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "edit_distance": [
                "hypothesis_indices",
                "hypothesis_values",
                "hypothesis_shape",
                "truth_indices",
                "truth_values",
                "truth_shape",
                "normalize",
                "name"
            ],
            "EditDistance": [
                "hypothesis_indices",
                "hypothesis_values",
                "hypothesis_shape",
                "truth_indices",
                "truth_values",
                "truth_shape",
                "normalize",
                "name"
            ],
            "edit_distance_eager_fallback": [
                "hypothesis_indices",
                "hypothesis_values",
                "hypothesis_shape",
                "truth_indices",
                "truth_values",
                "truth_shape",
                "normalize",
                "name",
                "ctx"
            ],
            "empty": [
                "shape",
                "dtype",
                "init",
                "name"
            ],
            "Empty": [
                "shape",
                "dtype",
                "init",
                "name"
            ],
            "empty_eager_fallback": [
                "shape",
                "dtype",
                "init",
                "name",
                "ctx"
            ],
            "ensure_shape": [
                "input",
                "shape",
                "name"
            ],
            "EnsureShape": [
                "input",
                "shape",
                "name"
            ],
            "ensure_shape_eager_fallback": [
                "input",
                "shape",
                "name",
                "ctx"
            ],
            "expand_dims": [
                "input",
                "axis",
                "name"
            ],
            "ExpandDims": [
                "input",
                "axis",
                "name"
            ],
            "expand_dims_eager_fallback": [
                "input",
                "axis",
                "name",
                "ctx"
            ],
            "extract_image_patches": [
                "images",
                "ksizes",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "ExtractImagePatches": [
                "images",
                "ksizes",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "extract_image_patches_eager_fallback": [
                "images",
                "ksizes",
                "strides",
                "rates",
                "padding",
                "name",
                "ctx"
            ],
            "extract_volume_patches": [
                "input",
                "ksizes",
                "strides",
                "padding",
                "name"
            ],
            "ExtractVolumePatches": [
                "input",
                "ksizes",
                "strides",
                "padding",
                "name"
            ],
            "extract_volume_patches_eager_fallback": [
                "input",
                "ksizes",
                "strides",
                "padding",
                "name",
                "ctx"
            ],
            "fake_quant_with_min_max_args": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "FakeQuantWithMinMaxArgs": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "fake_quant_with_min_max_args_eager_fallback": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name",
                "ctx"
            ],
            "fake_quant_with_min_max_args_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "FakeQuantWithMinMaxArgsGradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "fake_quant_with_min_max_args_gradient_eager_fallback": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name",
                "ctx"
            ],
            "fake_quant_with_min_max_vars": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "FakeQuantWithMinMaxVars": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "fake_quant_with_min_max_vars_eager_fallback": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name",
                "ctx"
            ],
            "fake_quant_with_min_max_vars_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "FakeQuantWithMinMaxVarsGradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "fake_quant_with_min_max_vars_gradient_eager_fallback": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name",
                "ctx"
            ],
            "fake_quant_with_min_max_vars_per_channel": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "FakeQuantWithMinMaxVarsPerChannel": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "fake_quant_with_min_max_vars_per_channel_eager_fallback": [
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name",
                "ctx"
            ],
            "fake_quant_with_min_max_vars_per_channel_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "FakeQuantWithMinMaxVarsPerChannelGradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name"
            ],
            "fake_quant_with_min_max_vars_per_channel_gradient_eager_fallback": [
                "gradients",
                "inputs",
                "min",
                "max",
                "num_bits",
                "narrow_range",
                "name",
                "ctx"
            ],
            "fill": [
                "dims",
                "value",
                "name"
            ],
            "Fill": [
                "dims",
                "value",
                "name"
            ],
            "fill_eager_fallback": [
                "dims",
                "value",
                "name",
                "ctx"
            ],
            "fingerprint": [
                "data",
                "method",
                "name"
            ],
            "Fingerprint": [
                "data",
                "method",
                "name"
            ],
            "fingerprint_eager_fallback": [
                "data",
                "method",
                "name",
                "ctx"
            ],
            "gather": [
                "params",
                "indices",
                "validate_indices",
                "name"
            ],
            "Gather": [
                "params",
                "indices",
                "validate_indices",
                "name"
            ],
            "gather_eager_fallback": [
                "params",
                "indices",
                "validate_indices",
                "name",
                "ctx"
            ],
            "gather_nd": [
                "params",
                "indices",
                "name"
            ],
            "GatherNd": [
                "params",
                "indices",
                "name"
            ],
            "gather_nd_eager_fallback": [
                "params",
                "indices",
                "name",
                "ctx"
            ],
            "gather_v2": [
                "params",
                "indices",
                "axis",
                "batch_dims",
                "name"
            ],
            "GatherV2": [
                "params",
                "indices",
                "axis",
                "batch_dims",
                "name"
            ],
            "gather_v2_eager_fallback": [
                "params",
                "indices",
                "axis",
                "batch_dims",
                "name",
                "ctx"
            ],
            "guarantee_const": [
                "input",
                "name"
            ],
            "GuaranteeConst": [
                "input",
                "name"
            ],
            "guarantee_const_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "identity": [
                "input",
                "name"
            ],
            "Identity": [
                "input",
                "name"
            ],
            "identity_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "identity_n": [
                "input",
                "name"
            ],
            "IdentityN": [
                "input",
                "name"
            ],
            "identity_n_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "immutable_const": [
                "dtype",
                "shape",
                "memory_region_name",
                "name"
            ],
            "ImmutableConst": [
                "dtype",
                "shape",
                "memory_region_name",
                "name"
            ],
            "immutable_const_eager_fallback": [
                "dtype",
                "shape",
                "memory_region_name",
                "name",
                "ctx"
            ],
            "inplace_add": [
                "x",
                "i",
                "v",
                "name"
            ],
            "InplaceAdd": [
                "x",
                "i",
                "v",
                "name"
            ],
            "inplace_add_eager_fallback": [
                "x",
                "i",
                "v",
                "name",
                "ctx"
            ],
            "inplace_sub": [
                "x",
                "i",
                "v",
                "name"
            ],
            "InplaceSub": [
                "x",
                "i",
                "v",
                "name"
            ],
            "inplace_sub_eager_fallback": [
                "x",
                "i",
                "v",
                "name",
                "ctx"
            ],
            "inplace_update": [
                "x",
                "i",
                "v",
                "name"
            ],
            "InplaceUpdate": [
                "x",
                "i",
                "v",
                "name"
            ],
            "inplace_update_eager_fallback": [
                "x",
                "i",
                "v",
                "name",
                "ctx"
            ],
            "invert_permutation": [
                "x",
                "name"
            ],
            "InvertPermutation": [
                "x",
                "name"
            ],
            "invert_permutation_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "list_diff": [
                "x",
                "y",
                "out_idx",
                "name"
            ],
            "ListDiff": [
                "x",
                "y",
                "out_idx",
                "name"
            ],
            "list_diff_eager_fallback": [
                "x",
                "y",
                "out_idx",
                "name",
                "ctx"
            ],
            "lower_bound": [
                "sorted_inputs",
                "values",
                "out_type",
                "name"
            ],
            "LowerBound": [
                "sorted_inputs",
                "values",
                "out_type",
                "name"
            ],
            "lower_bound_eager_fallback": [
                "sorted_inputs",
                "values",
                "out_type",
                "name",
                "ctx"
            ],
            "matrix_band_part": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "MatrixBandPart": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "matrix_band_part_eager_fallback": [
                "input",
                "num_lower",
                "num_upper",
                "name",
                "ctx"
            ],
            "matrix_diag": [
                "diagonal",
                "name"
            ],
            "MatrixDiag": [
                "diagonal",
                "name"
            ],
            "matrix_diag_eager_fallback": [
                "diagonal",
                "name",
                "ctx"
            ],
            "matrix_diag_part": [
                "input",
                "name"
            ],
            "MatrixDiagPart": [
                "input",
                "name"
            ],
            "matrix_diag_part_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "matrix_diag_part_v2": [
                "input",
                "k",
                "padding_value",
                "name"
            ],
            "MatrixDiagPartV2": [
                "input",
                "k",
                "padding_value",
                "name"
            ],
            "matrix_diag_part_v2_eager_fallback": [
                "input",
                "k",
                "padding_value",
                "name",
                "ctx"
            ],
            "matrix_diag_v2": [
                "diagonal",
                "k",
                "num_rows",
                "num_cols",
                "padding_value",
                "name"
            ],
            "MatrixDiagV2": [
                "diagonal",
                "k",
                "num_rows",
                "num_cols",
                "padding_value",
                "name"
            ],
            "matrix_diag_v2_eager_fallback": [
                "diagonal",
                "k",
                "num_rows",
                "num_cols",
                "padding_value",
                "name",
                "ctx"
            ],
            "matrix_set_diag": [
                "input",
                "diagonal",
                "name"
            ],
            "MatrixSetDiag": [
                "input",
                "diagonal",
                "name"
            ],
            "matrix_set_diag_eager_fallback": [
                "input",
                "diagonal",
                "name",
                "ctx"
            ],
            "matrix_set_diag_v2": [
                "input",
                "diagonal",
                "k",
                "name"
            ],
            "MatrixSetDiagV2": [
                "input",
                "diagonal",
                "k",
                "name"
            ],
            "matrix_set_diag_v2_eager_fallback": [
                "input",
                "diagonal",
                "k",
                "name",
                "ctx"
            ],
            "mirror_pad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "MirrorPad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "mirror_pad_eager_fallback": [
                "input",
                "paddings",
                "mode",
                "name",
                "ctx"
            ],
            "mirror_pad_grad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "MirrorPadGrad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "mirror_pad_grad_eager_fallback": [
                "input",
                "paddings",
                "mode",
                "name",
                "ctx"
            ],
            "one_hot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "name"
            ],
            "OneHot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "name"
            ],
            "one_hot_eager_fallback": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "name",
                "ctx"
            ],
            "ones_like": [
                "x",
                "name"
            ],
            "OnesLike": [
                "x",
                "name"
            ],
            "ones_like_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "pack": [
                "values",
                "axis",
                "name"
            ],
            "Pack": [
                "values",
                "axis",
                "name"
            ],
            "pack_eager_fallback": [
                "values",
                "axis",
                "name",
                "ctx"
            ],
            "pad": [
                "input",
                "paddings",
                "name"
            ],
            "Pad": [
                "input",
                "paddings",
                "name"
            ],
            "pad_eager_fallback": [
                "input",
                "paddings",
                "name",
                "ctx"
            ],
            "pad_v2": [
                "input",
                "paddings",
                "constant_values",
                "name"
            ],
            "PadV2": [
                "input",
                "paddings",
                "constant_values",
                "name"
            ],
            "pad_v2_eager_fallback": [
                "input",
                "paddings",
                "constant_values",
                "name",
                "ctx"
            ],
            "parallel_concat": [
                "values",
                "shape",
                "name"
            ],
            "ParallelConcat": [
                "values",
                "shape",
                "name"
            ],
            "parallel_concat_eager_fallback": [
                "values",
                "shape",
                "name",
                "ctx"
            ],
            "placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "Placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "placeholder_eager_fallback": [
                "dtype",
                "shape",
                "name",
                "ctx"
            ],
            "placeholder_v2": [
                "dtype",
                "shape",
                "name"
            ],
            "PlaceholderV2": [
                "dtype",
                "shape",
                "name"
            ],
            "placeholder_v2_eager_fallback": [
                "dtype",
                "shape",
                "name",
                "ctx"
            ],
            "placeholder_with_default": [
                "input",
                "shape",
                "name"
            ],
            "PlaceholderWithDefault": [
                "input",
                "shape",
                "name"
            ],
            "placeholder_with_default_eager_fallback": [
                "input",
                "shape",
                "name",
                "ctx"
            ],
            "prevent_gradient": [
                "input",
                "message",
                "name"
            ],
            "PreventGradient": [
                "input",
                "message",
                "name"
            ],
            "prevent_gradient_eager_fallback": [
                "input",
                "message",
                "name",
                "ctx"
            ],
            "quantize_and_dequantize": [
                "input",
                "signed_input",
                "num_bits",
                "range_given",
                "input_min",
                "input_max",
                "name"
            ],
            "QuantizeAndDequantize": [
                "input",
                "signed_input",
                "num_bits",
                "range_given",
                "input_min",
                "input_max",
                "name"
            ],
            "quantize_and_dequantize_eager_fallback": [
                "input",
                "signed_input",
                "num_bits",
                "range_given",
                "input_min",
                "input_max",
                "name",
                "ctx"
            ],
            "quantize_and_dequantize_v2": [
                "input",
                "input_min",
                "input_max",
                "signed_input",
                "num_bits",
                "range_given",
                "round_mode",
                "narrow_range",
                "name"
            ],
            "QuantizeAndDequantizeV2": [
                "input",
                "input_min",
                "input_max",
                "signed_input",
                "num_bits",
                "range_given",
                "round_mode",
                "narrow_range",
                "name"
            ],
            "quantize_and_dequantize_v2_eager_fallback": [
                "input",
                "input_min",
                "input_max",
                "signed_input",
                "num_bits",
                "range_given",
                "round_mode",
                "narrow_range",
                "name",
                "ctx"
            ],
            "quantize_and_dequantize_v3": [
                "input",
                "input_min",
                "input_max",
                "num_bits",
                "signed_input",
                "range_given",
                "narrow_range",
                "name"
            ],
            "QuantizeAndDequantizeV3": [
                "input",
                "input_min",
                "input_max",
                "num_bits",
                "signed_input",
                "range_given",
                "narrow_range",
                "name"
            ],
            "quantize_and_dequantize_v3_eager_fallback": [
                "input",
                "input_min",
                "input_max",
                "num_bits",
                "signed_input",
                "range_given",
                "narrow_range",
                "name",
                "ctx"
            ],
            "quantize_v2": [
                "input",
                "min_range",
                "max_range",
                "T",
                "mode",
                "round_mode",
                "name"
            ],
            "QuantizeV2": [
                "input",
                "min_range",
                "max_range",
                "T",
                "mode",
                "round_mode",
                "name"
            ],
            "quantize_v2_eager_fallback": [
                "input",
                "min_range",
                "max_range",
                "T",
                "mode",
                "round_mode",
                "name",
                "ctx"
            ],
            "quantized_concat": [
                "concat_dim",
                "values",
                "input_mins",
                "input_maxes",
                "name"
            ],
            "QuantizedConcat": [
                "concat_dim",
                "values",
                "input_mins",
                "input_maxes",
                "name"
            ],
            "quantized_concat_eager_fallback": [
                "concat_dim",
                "values",
                "input_mins",
                "input_maxes",
                "name",
                "ctx"
            ],
            "quantized_instance_norm": [
                "x",
                "x_min",
                "x_max",
                "output_range_given",
                "given_y_min",
                "given_y_max",
                "variance_epsilon",
                "min_separation",
                "name"
            ],
            "QuantizedInstanceNorm": [
                "x",
                "x_min",
                "x_max",
                "output_range_given",
                "given_y_min",
                "given_y_max",
                "variance_epsilon",
                "min_separation",
                "name"
            ],
            "quantized_instance_norm_eager_fallback": [
                "x",
                "x_min",
                "x_max",
                "output_range_given",
                "given_y_min",
                "given_y_max",
                "variance_epsilon",
                "min_separation",
                "name",
                "ctx"
            ],
            "quantized_reshape": [
                "tensor",
                "shape",
                "input_min",
                "input_max",
                "name"
            ],
            "QuantizedReshape": [
                "tensor",
                "shape",
                "input_min",
                "input_max",
                "name"
            ],
            "quantized_reshape_eager_fallback": [
                "tensor",
                "shape",
                "input_min",
                "input_max",
                "name",
                "ctx"
            ],
            "rank": [
                "input",
                "name"
            ],
            "Rank": [
                "input",
                "name"
            ],
            "rank_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "ref_identity": [
                "input",
                "name"
            ],
            "RefIdentity": [
                "input",
                "name"
            ],
            "ref_identity_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "reshape": [
                "tensor",
                "shape",
                "name"
            ],
            "Reshape": [
                "tensor",
                "shape",
                "name"
            ],
            "reshape_eager_fallback": [
                "tensor",
                "shape",
                "name",
                "ctx"
            ],
            "resource_strided_slice_assign": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "ResourceStridedSliceAssign": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "resource_strided_slice_assign_eager_fallback": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name",
                "ctx"
            ],
            "reverse": [
                "tensor",
                "dims",
                "name"
            ],
            "Reverse": [
                "tensor",
                "dims",
                "name"
            ],
            "reverse_eager_fallback": [
                "tensor",
                "dims",
                "name",
                "ctx"
            ],
            "reverse_sequence": [
                "input",
                "seq_lengths",
                "seq_dim",
                "batch_dim",
                "name"
            ],
            "ReverseSequence": [
                "input",
                "seq_lengths",
                "seq_dim",
                "batch_dim",
                "name"
            ],
            "reverse_sequence_eager_fallback": [
                "input",
                "seq_lengths",
                "seq_dim",
                "batch_dim",
                "name",
                "ctx"
            ],
            "reverse_v2": [
                "tensor",
                "axis",
                "name"
            ],
            "ReverseV2": [
                "tensor",
                "axis",
                "name"
            ],
            "reverse_v2_eager_fallback": [
                "tensor",
                "axis",
                "name",
                "ctx"
            ],
            "scatter_nd": [
                "indices",
                "updates",
                "shape",
                "name"
            ],
            "ScatterNd": [
                "indices",
                "updates",
                "shape",
                "name"
            ],
            "scatter_nd_eager_fallback": [
                "indices",
                "updates",
                "shape",
                "name",
                "ctx"
            ],
            "scatter_nd_non_aliasing_add": [
                "input",
                "indices",
                "updates",
                "name"
            ],
            "ScatterNdNonAliasingAdd": [
                "input",
                "indices",
                "updates",
                "name"
            ],
            "scatter_nd_non_aliasing_add_eager_fallback": [
                "input",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "shape": [
                "input",
                "out_type",
                "name"
            ],
            "Shape": [
                "input",
                "out_type",
                "name"
            ],
            "shape_eager_fallback": [
                "input",
                "out_type",
                "name",
                "ctx"
            ],
            "shape_n": [
                "input",
                "out_type",
                "name"
            ],
            "ShapeN": [
                "input",
                "out_type",
                "name"
            ],
            "shape_n_eager_fallback": [
                "input",
                "out_type",
                "name",
                "ctx"
            ],
            "size": [
                "input",
                "out_type",
                "name"
            ],
            "Size": [
                "input",
                "out_type",
                "name"
            ],
            "size_eager_fallback": [
                "input",
                "out_type",
                "name",
                "ctx"
            ],
            "_slice": [
                "input",
                "begin",
                "size",
                "name"
            ],
            "Slice": [
                "input",
                "begin",
                "size",
                "name"
            ],
            "_slice_eager_fallback": [
                "input",
                "begin",
                "size",
                "name",
                "ctx"
            ],
            "snapshot": [
                "input",
                "name"
            ],
            "Snapshot": [
                "input",
                "name"
            ],
            "snapshot_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "space_to_batch": [
                "input",
                "paddings",
                "block_size",
                "name"
            ],
            "SpaceToBatch": [
                "input",
                "paddings",
                "block_size",
                "name"
            ],
            "space_to_batch_eager_fallback": [
                "input",
                "paddings",
                "block_size",
                "name",
                "ctx"
            ],
            "space_to_batch_nd": [
                "input",
                "block_shape",
                "paddings",
                "name"
            ],
            "SpaceToBatchND": [
                "input",
                "block_shape",
                "paddings",
                "name"
            ],
            "space_to_batch_nd_eager_fallback": [
                "input",
                "block_shape",
                "paddings",
                "name",
                "ctx"
            ],
            "space_to_depth": [
                "input",
                "block_size",
                "data_format",
                "name"
            ],
            "SpaceToDepth": [
                "input",
                "block_size",
                "data_format",
                "name"
            ],
            "space_to_depth_eager_fallback": [
                "input",
                "block_size",
                "data_format",
                "name",
                "ctx"
            ],
            "split": [
                "axis",
                "value",
                "num_split",
                "name"
            ],
            "Split": [
                "axis",
                "value",
                "num_split",
                "name"
            ],
            "split_eager_fallback": [
                "axis",
                "value",
                "num_split",
                "name",
                "ctx"
            ],
            "split_v": [
                "value",
                "size_splits",
                "axis",
                "num_split",
                "name"
            ],
            "SplitV": [
                "value",
                "size_splits",
                "axis",
                "num_split",
                "name"
            ],
            "split_v_eager_fallback": [
                "value",
                "size_splits",
                "axis",
                "num_split",
                "name",
                "ctx"
            ],
            "squeeze": [
                "input",
                "axis",
                "name"
            ],
            "Squeeze": [
                "input",
                "axis",
                "name"
            ],
            "squeeze_eager_fallback": [
                "input",
                "axis",
                "name",
                "ctx"
            ],
            "stop_gradient": [
                "input",
                "name"
            ],
            "StopGradient": [
                "input",
                "name"
            ],
            "stop_gradient_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "strided_slice": [
                "input",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "StridedSlice": [
                "input",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "strided_slice_eager_fallback": [
                "input",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name",
                "ctx"
            ],
            "strided_slice_assign": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "StridedSliceAssign": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "strided_slice_assign_eager_fallback": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name",
                "ctx"
            ],
            "strided_slice_grad": [
                "shape",
                "begin",
                "end",
                "strides",
                "dy",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "StridedSliceGrad": [
                "shape",
                "begin",
                "end",
                "strides",
                "dy",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "strided_slice_grad_eager_fallback": [
                "shape",
                "begin",
                "end",
                "strides",
                "dy",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name",
                "ctx"
            ],
            "tensor_scatter_add": [
                "tensor",
                "indices",
                "updates",
                "name"
            ],
            "TensorScatterAdd": [
                "tensor",
                "indices",
                "updates",
                "name"
            ],
            "tensor_scatter_add_eager_fallback": [
                "tensor",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "tensor_scatter_sub": [
                "tensor",
                "indices",
                "updates",
                "name"
            ],
            "TensorScatterSub": [
                "tensor",
                "indices",
                "updates",
                "name"
            ],
            "tensor_scatter_sub_eager_fallback": [
                "tensor",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "tensor_scatter_update": [
                "tensor",
                "indices",
                "updates",
                "name"
            ],
            "TensorScatterUpdate": [
                "tensor",
                "indices",
                "updates",
                "name"
            ],
            "tensor_scatter_update_eager_fallback": [
                "tensor",
                "indices",
                "updates",
                "name",
                "ctx"
            ],
            "tensor_strided_slice_update": [
                "input",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "TensorStridedSliceUpdate": [
                "input",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "tensor_strided_slice_update_eager_fallback": [
                "input",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name",
                "ctx"
            ],
            "tile": [
                "input",
                "multiples",
                "name"
            ],
            "Tile": [
                "input",
                "multiples",
                "name"
            ],
            "tile_eager_fallback": [
                "input",
                "multiples",
                "name",
                "ctx"
            ],
            "tile_grad": [
                "input",
                "multiples",
                "name"
            ],
            "TileGrad": [
                "input",
                "multiples",
                "name"
            ],
            "tile_grad_eager_fallback": [
                "input",
                "multiples",
                "name",
                "ctx"
            ],
            "transpose": [
                "x",
                "perm",
                "name"
            ],
            "Transpose": [
                "x",
                "perm",
                "name"
            ],
            "transpose_eager_fallback": [
                "x",
                "perm",
                "name",
                "ctx"
            ],
            "unique": [
                "x",
                "out_idx",
                "name"
            ],
            "Unique": [
                "x",
                "out_idx",
                "name"
            ],
            "unique_eager_fallback": [
                "x",
                "out_idx",
                "name",
                "ctx"
            ],
            "unique_v2": [
                "x",
                "axis",
                "out_idx",
                "name"
            ],
            "UniqueV2": [
                "x",
                "axis",
                "out_idx",
                "name"
            ],
            "unique_v2_eager_fallback": [
                "x",
                "axis",
                "out_idx",
                "name",
                "ctx"
            ],
            "unique_with_counts": [
                "x",
                "out_idx",
                "name"
            ],
            "UniqueWithCounts": [
                "x",
                "out_idx",
                "name"
            ],
            "unique_with_counts_eager_fallback": [
                "x",
                "out_idx",
                "name",
                "ctx"
            ],
            "unique_with_counts_v2": [
                "x",
                "axis",
                "out_idx",
                "name"
            ],
            "UniqueWithCountsV2": [
                "x",
                "axis",
                "out_idx",
                "name"
            ],
            "unique_with_counts_v2_eager_fallback": [
                "x",
                "axis",
                "out_idx",
                "name",
                "ctx"
            ],
            "unpack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "Unpack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "unpack_eager_fallback": [
                "value",
                "num",
                "axis",
                "name",
                "ctx"
            ],
            "unravel_index": [
                "indices",
                "dims",
                "name"
            ],
            "UnravelIndex": [
                "indices",
                "dims",
                "name"
            ],
            "unravel_index_eager_fallback": [
                "indices",
                "dims",
                "name",
                "ctx"
            ],
            "upper_bound": [
                "sorted_inputs",
                "values",
                "out_type",
                "name"
            ],
            "UpperBound": [
                "sorted_inputs",
                "values",
                "out_type",
                "name"
            ],
            "upper_bound_eager_fallback": [
                "sorted_inputs",
                "values",
                "out_type",
                "name",
                "ctx"
            ],
            "where": [
                "condition",
                "name"
            ],
            "Where": [
                "condition",
                "name"
            ],
            "where_eager_fallback": [
                "condition",
                "name",
                "ctx"
            ],
            "zeros_like": [
                "x",
                "name"
            ],
            "ZerosLike": [
                "x",
                "name"
            ],
            "zeros_like_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.script_ops": {
            "_maybe_copy_to_context_device": [
                "tensor",
                "device_name"
            ],
            "_internal_py_func": [
                "func",
                "inp",
                "Tout",
                "stateful",
                "eager",
                "is_grad_func",
                "name"
            ],
            "_EagerPyFuncGrad": [
                "op"
            ],
            "eager_py_func": [
                "func",
                "inp",
                "Tout",
                "name"
            ],
            "py_func_common": [
                "func",
                "inp",
                "Tout",
                "stateful",
                "name"
            ],
            "py_func": [
                "func",
                "inp",
                "Tout",
                "stateful",
                "name"
            ],
            "numpy_function": [
                "func",
                "inp",
                "Tout",
                "name"
            ],
            "EagerFunc": {
                "__init__": [
                    "self",
                    "func",
                    "Tout",
                    "is_grad_func"
                ],
                "_convert": [
                    "self",
                    "value",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "device",
                    "token",
                    "args"
                ]
            },
            "FuncRegistry": {
                "__init__": [
                    "self"
                ],
                "_ctx": [
                    "self"
                ],
                "insert": [
                    "self",
                    "func"
                ],
                "remove": [
                    "self",
                    "token"
                ],
                "_convert": [
                    "value",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "token",
                    "device",
                    "args"
                ],
                "size": [
                    "self"
                ],
                "_next_unique_token": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.data_flow_ops": {
            "_as_type_list": [
                "dtypes"
            ],
            "_as_shape_list": [
                "shapes",
                "dtypes",
                "unknown_dim_allowed",
                "unknown_rank_allowed"
            ],
            "_as_name_list": [
                "names",
                "dtypes"
            ],
            "_shape_common": [
                "s1",
                "s2"
            ],
            "_shared_name": [
                "shared_name"
            ],
            "QueueBase": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "names",
                    "queue_ref"
                ],
                "from_list": [
                    "index",
                    "queues"
                ],
                "queue_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "shapes": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "_check_enqueue_dtypes": [
                    "self",
                    "vals"
                ],
                "_scope_vals": [
                    "self",
                    "vals"
                ],
                "enqueue": [
                    "self",
                    "vals",
                    "name"
                ],
                "enqueue_many": [
                    "self",
                    "vals",
                    "name"
                ],
                "_dequeue_return_value": [
                    "self",
                    "tensors"
                ],
                "dequeue": [
                    "self",
                    "name"
                ],
                "dequeue_many": [
                    "self",
                    "n",
                    "name"
                ],
                "dequeue_up_to": [
                    "self",
                    "n",
                    "name"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "is_closed": [
                    "self",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ]
            },
            "RandomShuffleQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "min_after_dequeue",
                    "dtypes",
                    "shapes",
                    "names",
                    "seed",
                    "shared_name",
                    "name"
                ]
            },
            "FIFOQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "PaddingFIFOQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "PriorityQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "types",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "Barrier": {
                "__init__": [
                    "self",
                    "types",
                    "shapes",
                    "shared_name",
                    "name"
                ],
                "barrier_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "insert_many": [
                    "self",
                    "component_index",
                    "keys",
                    "values",
                    "name"
                ],
                "take_many": [
                    "self",
                    "num_elements",
                    "allow_small_batch",
                    "timeout",
                    "name"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "ready_size": [
                    "self",
                    "name"
                ],
                "incomplete_size": [
                    "self",
                    "name"
                ]
            },
            "ConditionalAccumulatorBase": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "accumulator_ref"
                ],
                "accumulator_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "num_accumulated": [
                    "self",
                    "name"
                ],
                "set_global_step": [
                    "self",
                    "new_global_step",
                    "name"
                ]
            },
            "ConditionalAccumulator": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "shared_name",
                    "name",
                    "reduction_type"
                ],
                "apply_grad": [
                    "self",
                    "grad",
                    "local_step",
                    "name"
                ],
                "take_grad": [
                    "self",
                    "num_required",
                    "name"
                ]
            },
            "SparseConditionalAccumulator": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "shared_name",
                    "name",
                    "reduction_type"
                ],
                "apply_indexed_slices_grad": [
                    "self",
                    "grad",
                    "local_step",
                    "name"
                ],
                "apply_grad": [
                    "self",
                    "grad_indices",
                    "grad_values",
                    "grad_shape",
                    "local_step",
                    "name"
                ],
                "take_grad": [
                    "self",
                    "num_required",
                    "name"
                ],
                "take_indexed_slices_grad": [
                    "self",
                    "num_required",
                    "name"
                ],
                "num_accumulated": [
                    "self",
                    "name"
                ],
                "set_global_step": [
                    "self",
                    "new_global_step",
                    "name"
                ]
            },
            "BaseStagingArea": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "capacity",
                    "memory_limit"
                ],
                "name": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "shapes": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "capacity": [
                    "self"
                ],
                "memory_limit": [
                    "self"
                ],
                "_check_put_dtypes": [
                    "self",
                    "vals",
                    "indices"
                ],
                "_create_device_transfers": [
                    "self",
                    "tensors"
                ],
                "_get_return_value": [
                    "self",
                    "tensors",
                    "indices"
                ],
                "_scope_vals": [
                    "self",
                    "vals"
                ]
            },
            "StagingArea": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "capacity",
                    "memory_limit"
                ],
                "put": [
                    "self",
                    "values",
                    "name"
                ],
                "__internal_get": [
                    "self",
                    "get_fn",
                    "name"
                ],
                "get": [
                    "self",
                    "name"
                ],
                "peek": [
                    "self",
                    "index",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "clear": [
                    "self",
                    "name"
                ]
            },
            "MapStagingArea": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "ordered",
                    "capacity",
                    "memory_limit"
                ],
                "put": [
                    "self",
                    "key",
                    "vals",
                    "indices",
                    "name"
                ],
                "_get_indices_and_dtypes": [
                    "self",
                    "indices"
                ],
                "peek": [
                    "self",
                    "key",
                    "indices",
                    "name"
                ],
                "get": [
                    "self",
                    "key",
                    "indices",
                    "name"
                ],
                "_pop": [
                    "self",
                    "key",
                    "indices",
                    "name"
                ],
                "_popitem": [
                    "self",
                    "indices",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "incomplete_size": [
                    "self",
                    "name"
                ],
                "clear": [
                    "self",
                    "name"
                ]
            },
            "RecordInput": {
                "__init__": [
                    "self",
                    "file_pattern",
                    "batch_size",
                    "buffer_size",
                    "parallelism",
                    "shift_ratio",
                    "seed",
                    "name",
                    "batches",
                    "compression_type"
                ],
                "get_yield_op": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.control_flow_ops": {
            "_summarize_eager": [
                "tensor",
                "summarize"
            ],
            "Assert": [
                "condition",
                "data",
                "summarize",
                "name"
            ],
            "_Identity": [
                "data",
                "name"
            ],
            "_NextIteration": [
                "data",
                "name"
            ],
            "_Enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "use_ref",
                "use_input_shape",
                "name"
            ],
            "exit": [
                "data",
                "name"
            ],
            "switch": [
                "data",
                "pred",
                "dtype",
                "name"
            ],
            "_SwitchRefOrTensor": [
                "data",
                "pred",
                "name"
            ],
            "merge": [
                "inputs",
                "name"
            ],
            "_convert_tensorarray_to_flow": [
                "tensor_or_tensor_array"
            ],
            "_convert_flows_to_tensorarrays": [
                "tensors_or_tensorarrays",
                "tensors_or_flows"
            ],
            "_ShapeLessThanOrEqual": [
                "shape1",
                "shape2"
            ],
            "_get_shape_invariant": [
                "var",
                "shape"
            ],
            "_shape_invariant_to_type_spec": [
                "var",
                "shape"
            ],
            "_SetShapeInvariants": [
                "input_vars",
                "enter_vars",
                "shapes"
            ],
            "_EnforceShapeInvariant": [
                "merge_var",
                "next_var"
            ],
            "_AddNextAndBackEdge": [
                "m",
                "v",
                "enforce_shape_invariant"
            ],
            "_UnpackIfSingleton": [
                "res"
            ],
            "cond": [
                "pred",
                "true_fn",
                "false_fn",
                "strict",
                "name",
                "fn1",
                "fn2"
            ],
            "_cast_indexed_slice_indices": [
                "a",
                "b"
            ],
            "cond_for_tf_v2": [
                "pred",
                "true_fn",
                "false_fn",
                "name"
            ],
            "_resource_safe_shape": [
                "t"
            ],
            "while_loop_v2": [
                "cond",
                "body",
                "loop_vars",
                "shape_invariants",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "maximum_iterations",
                "name"
            ],
            "while_loop": [
                "cond",
                "body",
                "loop_vars",
                "shape_invariants",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name",
                "maximum_iterations",
                "return_same_structure"
            ],
            "_AsTensorList": [
                "x",
                "p"
            ],
            "_CheckResults": [
                "a",
                "b"
            ],
            "with_dependencies": [
                "dependencies",
                "output_tensor",
                "name"
            ],
            "_GroupControlDeps": [
                "dev",
                "deps",
                "name"
            ],
            "group": [],
            "tuple_v2": [
                "tensors",
                "control_inputs",
                "name"
            ],
            "tuple": [
                "tensors",
                "name",
                "control_inputs"
            ],
            "_assert_at_most_n_true": [
                "predicates",
                "n",
                "msg"
            ],
            "_case_create_default_action": [
                "predicates",
                "actions"
            ],
            "_case_verify_and_canonicalize_args": [
                "pred_fn_pairs",
                "exclusive",
                "name",
                "allow_python_preds"
            ],
            "_case_helper": [
                "cond_fn",
                "pred_fn_pairs",
                "default",
                "exclusive",
                "name",
                "allow_python_preds"
            ],
            "_indexed_case_verify_and_canonicalize_args": [
                "branch_fns",
                "default",
                "branch_index"
            ],
            "_indexed_case_helper": [
                "branch_fns",
                "default",
                "branch_index",
                "name"
            ],
            "case_v2": [
                "pred_fn_pairs",
                "default",
                "exclusive",
                "strict",
                "name"
            ],
            "case": [
                "pred_fn_pairs",
                "default",
                "exclusive",
                "strict",
                "name"
            ],
            "switch_case": [
                "branch_index",
                "branch_fns",
                "default",
                "name"
            ],
            "from_control_flow_context_def": [
                "context_def",
                "import_scope"
            ],
            "ControlFlowContext": {
                "__init__": [
                    "self",
                    "values_def",
                    "import_scope"
                ],
                "_init_values_from_proto": [
                    "self",
                    "values_def",
                    "import_scope"
                ],
                "name": [
                    "self"
                ],
                "outer_context": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "to_control_flow_context_def": [
                    "self",
                    "context_def",
                    "export_scope"
                ],
                "_to_values_def": [
                    "self",
                    "export_scope"
                ],
                "AddName": [
                    "self",
                    "name"
                ],
                "Enter": [
                    "self"
                ],
                "Exit": [
                    "self"
                ],
                "EnterGradientColocation": [
                    "self",
                    "op",
                    "gradient_uid"
                ],
                "ExitGradientColocation": [
                    "self",
                    "op",
                    "gradient_uid"
                ],
                "ExitResult": [
                    "self",
                    "result"
                ],
                "GetWhileContext": [
                    "self"
                ],
                "_RemoveExternalControlEdges": [
                    "self",
                    "op"
                ],
                "AddInnerOp": [
                    "self",
                    "op"
                ],
                "GetControlPivot": [
                    "self"
                ],
                "IsWhileContext": [
                    "self"
                ],
                "IsCondContext": [
                    "self"
                ],
                "IsXLAContext": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "CondContext": {
                "__init__": [
                    "self",
                    "pred",
                    "pivot",
                    "branch",
                    "name",
                    "context_def",
                    "import_scope"
                ],
                "_init_from_proto": [
                    "self",
                    "context_def",
                    "import_scope"
                ],
                "pred": [
                    "self"
                ],
                "pivot": [
                    "self"
                ],
                "branch": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "GetControlPivot": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "context_def",
                    "import_scope"
                ],
                "to_control_flow_context_def": [
                    "self",
                    "context_def",
                    "export_scope"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "_AddOpInternal": [
                    "self",
                    "op"
                ],
                "_ProcessOutputTensor": [
                    "self",
                    "val"
                ],
                "_BuildCondTensor": [
                    "self",
                    "v"
                ],
                "BuildCondBranch": [
                    "self",
                    "fn"
                ],
                "IsCondContext": [
                    "self"
                ]
            },
            "WhileContext": {
                "__init__": [
                    "self",
                    "maximum_iterations",
                    "parallel_iterations",
                    "back_prop",
                    "swap_memory",
                    "name",
                    "grad_state",
                    "context_def",
                    "import_scope"
                ],
                "_init_from_args": [
                    "self",
                    "maximum_iterations",
                    "parallel_iterations",
                    "back_prop",
                    "swap_memory",
                    "name"
                ],
                "_init_from_proto": [
                    "self",
                    "context_def",
                    "import_scope"
                ],
                "maximum_iterations": [
                    "self"
                ],
                "parallel_iterations": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "swap_memory": [
                    "self"
                ],
                "pivot": [
                    "self"
                ],
                "loop_enters": [
                    "self"
                ],
                "loop_exits": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "to_control_flow_context_def": [
                    "self",
                    "context_def",
                    "export_scope"
                ],
                "from_proto": [
                    "context_def",
                    "import_scope"
                ],
                "GetWhileContext": [
                    "self"
                ],
                "GetControlPivot": [
                    "self"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "_AddOpInternal": [
                    "self",
                    "op"
                ],
                "_MaybeAddControlDependency": [
                    "self",
                    "op"
                ],
                "AddForwardLoopCounter": [
                    "self",
                    "outer_grad_state"
                ],
                "AddBackpropLoopCounter": [
                    "self",
                    "count",
                    "outer_grad_state"
                ],
                "AddBackpropAccumulator": [
                    "self",
                    "op",
                    "grad"
                ],
                "AddBackpropIndexedSlicesAccumulator": [
                    "self",
                    "op",
                    "grad"
                ],
                "_InitializeValues": [
                    "self",
                    "values"
                ],
                "_BuildLoop": [
                    "self",
                    "pred",
                    "body",
                    "original_loop_vars",
                    "loop_vars",
                    "shape_invariants"
                ],
                "BuildLoop": [
                    "self",
                    "pred",
                    "body",
                    "loop_vars",
                    "shape_invariants",
                    "return_same_structure"
                ],
                "_FixControlInputsAndContext": [
                    "self",
                    "enters"
                ],
                "IsWhileContext": [
                    "self"
                ]
            },
            "XLAControlFlowContext": {
                "__init__": [
                    "self"
                ],
                "to_control_flow_context_def": [
                    "self",
                    "context_def",
                    "export_scope"
                ],
                "IsXLAContext": [
                    "self"
                ],
                "AddOp": [
                    "self",
                    "_"
                ],
                "AddValue": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.python.ops.gen_tensor_forest_ops": {
            "tensor_forest_create_tree_variable": [
                "tree_handle",
                "tree_config",
                "name"
            ],
            "TensorForestCreateTreeVariable": [
                "tree_handle",
                "tree_config",
                "name"
            ],
            "tensor_forest_create_tree_variable_eager_fallback": [
                "tree_handle",
                "tree_config",
                "name",
                "ctx"
            ],
            "tensor_forest_tree_deserialize": [
                "tree_handle",
                "tree_config",
                "name"
            ],
            "TensorForestTreeDeserialize": [
                "tree_handle",
                "tree_config",
                "name"
            ],
            "tensor_forest_tree_deserialize_eager_fallback": [
                "tree_handle",
                "tree_config",
                "name",
                "ctx"
            ],
            "tensor_forest_tree_is_initialized_op": [
                "tree_handle",
                "name"
            ],
            "TensorForestTreeIsInitializedOp": [
                "tree_handle",
                "name"
            ],
            "tensor_forest_tree_is_initialized_op_eager_fallback": [
                "tree_handle",
                "name",
                "ctx"
            ],
            "tensor_forest_tree_predict": [
                "tree_handle",
                "dense_features",
                "logits_dimension",
                "name"
            ],
            "TensorForestTreePredict": [
                "tree_handle",
                "dense_features",
                "logits_dimension",
                "name"
            ],
            "tensor_forest_tree_predict_eager_fallback": [
                "tree_handle",
                "dense_features",
                "logits_dimension",
                "name",
                "ctx"
            ],
            "tensor_forest_tree_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "TensorForestTreeResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "tensor_forest_tree_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "tensor_forest_tree_serialize": [
                "tree_handle",
                "name"
            ],
            "TensorForestTreeSerialize": [
                "tree_handle",
                "name"
            ],
            "tensor_forest_tree_serialize_eager_fallback": [
                "tree_handle",
                "name",
                "ctx"
            ],
            "tensor_forest_tree_size": [
                "tree_handle",
                "name"
            ],
            "TensorForestTreeSize": [
                "tree_handle",
                "name"
            ],
            "tensor_forest_tree_size_eager_fallback": [
                "tree_handle",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.linalg_ops_impl": {
            "eye": [
                "num_rows",
                "num_columns",
                "batch_shape",
                "dtype",
                "name"
            ]
        },
        "tensorflow_core.python.ops.init_ops_v2": {
            "lecun_normal": [
                "seed"
            ],
            "lecun_uniform": [
                "seed"
            ],
            "he_normal": [
                "seed"
            ],
            "he_uniform": [
                "seed"
            ],
            "_compute_fans": [
                "shape"
            ],
            "_assert_float_dtype": [
                "dtype"
            ],
            "Initializer": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "Zeros": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ]
            },
            "Ones": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ]
            },
            "Constant": {
                "__init__": [
                    "self",
                    "value"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RandomUniform": {
                "__init__": [
                    "self",
                    "minval",
                    "maxval",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "RandomNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "TruncatedNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "VarianceScaling": {
                "__init__": [
                    "self",
                    "scale",
                    "mode",
                    "distribution",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Orthogonal": {
                "__init__": [
                    "self",
                    "gain",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "Identity": {
                "__init__": [
                    "self",
                    "gain"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GlorotUniform": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GlorotNormal": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "get_config": [
                    "self"
                ]
            },
            "_RandomGenerator": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "random_normal": [
                    "self",
                    "shape",
                    "mean",
                    "stddev",
                    "dtype"
                ],
                "random_uniform": [
                    "self",
                    "shape",
                    "minval",
                    "maxval",
                    "dtype"
                ],
                "truncated_normal": [
                    "self",
                    "shape",
                    "mean",
                    "stddev",
                    "dtype"
                ]
            }
        },
        "tensorflow_core.python.ops.gen_script_ops": {
            "eager_py_func": [
                "input",
                "token",
                "Tout",
                "is_async",
                "name"
            ],
            "EagerPyFunc": [
                "input",
                "token",
                "Tout",
                "is_async",
                "name"
            ],
            "eager_py_func_eager_fallback": [
                "input",
                "token",
                "Tout",
                "is_async",
                "name",
                "ctx"
            ],
            "py_func": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "PyFunc": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "py_func_eager_fallback": [
                "input",
                "token",
                "Tout",
                "name",
                "ctx"
            ],
            "py_func_stateless": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "PyFuncStateless": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "py_func_stateless_eager_fallback": [
                "input",
                "token",
                "Tout",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.linalg_grad": {
            "_MatrixInverseGrad": [
                "op",
                "grad"
            ],
            "_MatrixDeterminantGrad": [
                "op",
                "grad"
            ],
            "_MatrixSquareRootGrad": [
                "op",
                "grad"
            ],
            "_LogMatrixDeterminantGrad": [
                "op",
                "_",
                "grad_b"
            ],
            "_CholeskyGrad": [
                "op",
                "grad"
            ],
            "_QrGrad": [
                "op",
                "dq",
                "dr"
            ],
            "_MatrixSolveGrad": [
                "op",
                "grad"
            ],
            "_MatrixSolveLsGrad": [
                "op",
                "grad"
            ],
            "_MatrixTriangularSolveGrad": [
                "op",
                "grad"
            ],
            "_SelfAdjointEigV2Grad": [
                "op",
                "grad_e",
                "grad_v"
            ],
            "_SvdGrad": [
                "op",
                "grad_s",
                "grad_u",
                "grad_v"
            ],
            "_LeftShift": [
                "x"
            ],
            "_RightShift": [
                "x"
            ],
            "_TridiagonalMatMulGrad": [
                "op",
                "grad"
            ],
            "_TridiagonalSolveGrad": [
                "op",
                "grad"
            ],
            "_TransposeTridiagonalMatrix": [
                "diags"
            ],
            "_MatmulExtractingThreeDiagonals": [
                "x",
                "y_tr"
            ]
        },
        "tensorflow_core.python.ops.math_ops": {
            "_set_doc": [
                "doc"
            ],
            "argmax": [
                "input",
                "axis",
                "name",
                "dimension",
                "output_type"
            ],
            "argmax_v2": [
                "input",
                "axis",
                "output_type",
                "name"
            ],
            "argmin": [
                "input",
                "axis",
                "name",
                "dimension",
                "output_type"
            ],
            "argmin_v2": [
                "input",
                "axis",
                "output_type",
                "name"
            ],
            "abs": [
                "x",
                "name"
            ],
            "_bucketize": [
                "input",
                "boundaries",
                "name"
            ],
            "divide": [
                "x",
                "y",
                "name"
            ],
            "multiply": [
                "x",
                "y",
                "name"
            ],
            "_mul": [
                "x",
                "y",
                "name"
            ],
            "subtract": [
                "x",
                "y",
                "name"
            ],
            "_sub": [
                "x",
                "y",
                "name"
            ],
            "_neg": [
                "x",
                "name"
            ],
            "scalar_mul": [
                "scalar",
                "x",
                "name"
            ],
            "scalar_mul_v2": [
                "scalar",
                "x",
                "name"
            ],
            "pow": [
                "x",
                "y",
                "name"
            ],
            "complex": [
                "real",
                "imag",
                "name"
            ],
            "real": [
                "input",
                "name"
            ],
            "imag": [
                "input",
                "name"
            ],
            "angle": [
                "input",
                "name"
            ],
            "round": [
                "x",
                "name"
            ],
            "cast": [
                "x",
                "dtype",
                "name"
            ],
            "saturate_cast": [
                "value",
                "dtype",
                "name"
            ],
            "to_float": [
                "x",
                "name"
            ],
            "to_double": [
                "x",
                "name"
            ],
            "to_int32": [
                "x",
                "name"
            ],
            "to_int64": [
                "x",
                "name"
            ],
            "to_bfloat16": [
                "x",
                "name"
            ],
            "to_complex64": [
                "x",
                "name"
            ],
            "to_complex128": [
                "x",
                "name"
            ],
            "_OverrideBinaryOperatorHelper": [
                "func",
                "op_name",
                "clazz_object"
            ],
            "_sparse_dense_truediv": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "y",
                "name"
            ],
            "_truediv_python3": [
                "x",
                "y",
                "name"
            ],
            "_div_python2": [
                "x",
                "y",
                "name"
            ],
            "truediv": [
                "x",
                "y",
                "name"
            ],
            "div": [
                "x",
                "y",
                "name"
            ],
            "div_no_nan": [
                "x",
                "y",
                "name"
            ],
            "multiply_no_nan": [
                "x",
                "y",
                "name"
            ],
            "floordiv": [
                "x",
                "y",
                "name"
            ],
            "_add_dispatch": [
                "x",
                "y",
                "name"
            ],
            "_mul_dispatch": [
                "x",
                "y",
                "name"
            ],
            "logical_xor": [
                "x",
                "y",
                "name"
            ],
            "tensor_equals": [
                "self",
                "other"
            ],
            "tensor_not_equals": [
                "self",
                "other"
            ],
            "range": [
                "start",
                "limit",
                "delta",
                "dtype",
                "name"
            ],
            "_ReductionDims": [
                "x",
                "axis",
                "reduction_indices"
            ],
            "_may_reduce_to_scalar": [
                "keepdims",
                "axis",
                "output"
            ],
            "reduce_sum_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_sum": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_euclidean_norm": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "count_nonzero": [
                "input_tensor",
                "axis",
                "keepdims",
                "dtype",
                "name",
                "reduction_indices",
                "keep_dims",
                "input"
            ],
            "count_nonzero_v2": [
                "input",
                "axis",
                "keepdims",
                "dtype",
                "name"
            ],
            "reduce_mean_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_mean": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_variance": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_std": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_prod": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_prod_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_min_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_min": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_max_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_max": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_all_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_all": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_any_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_any": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_logsumexp_v1": [
                "input_tensor",
                "axis",
                "keepdims",
                "name",
                "reduction_indices",
                "keep_dims"
            ],
            "reduce_logsumexp": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "trace": [
                "x",
                "name"
            ],
            "matmul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "adjoint_a",
                "adjoint_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "matvec": [
                "a",
                "b",
                "transpose_a",
                "adjoint_a",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "_calc_mat_mul_flops": [
                "graph",
                "node"
            ],
            "_calc_batch_mat_mul_flops": [
                "graph",
                "node"
            ],
            "_as_indexed_slices": [
                "x",
                "optimize"
            ],
            "_as_indexed_slices_list": [
                "inputs",
                "optimize"
            ],
            "add_n": [
                "inputs",
                "name"
            ],
            "accumulate_n": [
                "inputs",
                "shape",
                "tensor_dtype",
                "name"
            ],
            "_accumulate_n_grad": [
                "op",
                "grad"
            ],
            "sigmoid": [
                "x",
                "name"
            ],
            "log_sigmoid": [
                "x",
                "name"
            ],
            "bincount": [
                "arr",
                "weights",
                "minlength",
                "maxlength",
                "dtype",
                "name"
            ],
            "bincount_v1": [
                "arr",
                "weights",
                "minlength",
                "maxlength",
                "dtype"
            ],
            "cumsum": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumprod": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumulative_logsumexp": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "conj": [
                "x",
                "name"
            ],
            "_BroadcastShape": [
                "op"
            ],
            "reduced_shape": [
                "input_shape",
                "axes"
            ],
            "_unsorted_segment_N": [
                "data",
                "segment_ids",
                "num_segments"
            ],
            "unsorted_segment_mean": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "unsorted_segment_sqrt_n": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "sparse_segment_sum": [
                "data",
                "indices",
                "segment_ids",
                "name",
                "num_segments"
            ],
            "sparse_segment_sum_v2": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "sparse_segment_mean": [
                "data",
                "indices",
                "segment_ids",
                "name",
                "num_segments"
            ],
            "sparse_segment_mean_v2": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "sparse_segment_sqrt_n": [
                "data",
                "indices",
                "segment_ids",
                "name",
                "num_segments"
            ],
            "sparse_segment_sqrt_n_v2": [
                "data",
                "indices",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "tensordot": [
                "a",
                "b",
                "axes",
                "name"
            ],
            "polyval": [
                "coeffs",
                "x",
                "name"
            ],
            "reciprocal_no_nan": [
                "x",
                "name"
            ],
            "DivideDelegateWithName": {
                "__init__": [
                    "self",
                    "x",
                    "name"
                ],
                "__truediv__": [
                    "self",
                    "y"
                ],
                "__floordiv__": [
                    "self",
                    "y"
                ],
                "__div__": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow_core.python.ops.gen_tpu_ops": {
            "all_to_all": [
                "input",
                "group_assignment",
                "concat_dimension",
                "split_dimension",
                "split_count",
                "name"
            ],
            "AllToAll": [
                "input",
                "group_assignment",
                "concat_dimension",
                "split_dimension",
                "split_count",
                "name"
            ],
            "all_to_all_eager_fallback": [
                "input",
                "group_assignment",
                "concat_dimension",
                "split_dimension",
                "split_count",
                "name",
                "ctx"
            ],
            "collective_permute": [
                "input",
                "source_target_pairs",
                "name"
            ],
            "CollectivePermute": [
                "input",
                "source_target_pairs",
                "name"
            ],
            "collective_permute_eager_fallback": [
                "input",
                "source_target_pairs",
                "name",
                "ctx"
            ],
            "configure_distributed_tpu": [
                "embedding_config",
                "tpu_embedding_config",
                "is_global_init",
                "name"
            ],
            "ConfigureDistributedTPU": [
                "embedding_config",
                "tpu_embedding_config",
                "is_global_init",
                "name"
            ],
            "configure_distributed_tpu_eager_fallback": [
                "embedding_config",
                "tpu_embedding_config",
                "is_global_init",
                "name",
                "ctx"
            ],
            "configure_tpu_embedding": [
                "config",
                "name"
            ],
            "ConfigureTPUEmbedding": [
                "config",
                "name"
            ],
            "configure_tpu_embedding_eager_fallback": [
                "config",
                "name",
                "ctx"
            ],
            "cross_replica_sum": [
                "input",
                "group_assignment",
                "name"
            ],
            "CrossReplicaSum": [
                "input",
                "group_assignment",
                "name"
            ],
            "cross_replica_sum_eager_fallback": [
                "input",
                "group_assignment",
                "name",
                "ctx"
            ],
            "enqueue_tpu_embedding_integer_batch": [
                "batch",
                "mode_override",
                "device_ordinal",
                "name"
            ],
            "EnqueueTPUEmbeddingIntegerBatch": [
                "batch",
                "mode_override",
                "device_ordinal",
                "name"
            ],
            "enqueue_tpu_embedding_integer_batch_eager_fallback": [
                "batch",
                "mode_override",
                "device_ordinal",
                "name",
                "ctx"
            ],
            "enqueue_tpu_embedding_sparse_batch": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "mode_override",
                "device_ordinal",
                "combiners",
                "name"
            ],
            "EnqueueTPUEmbeddingSparseBatch": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "mode_override",
                "device_ordinal",
                "combiners",
                "name"
            ],
            "enqueue_tpu_embedding_sparse_batch_eager_fallback": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "mode_override",
                "device_ordinal",
                "combiners",
                "name",
                "ctx"
            ],
            "enqueue_tpu_embedding_sparse_tensor_batch": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "mode_override",
                "table_ids",
                "device_ordinal",
                "combiners",
                "max_sequence_lengths",
                "name"
            ],
            "EnqueueTPUEmbeddingSparseTensorBatch": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "mode_override",
                "table_ids",
                "device_ordinal",
                "combiners",
                "max_sequence_lengths",
                "name"
            ],
            "enqueue_tpu_embedding_sparse_tensor_batch_eager_fallback": [
                "sample_indices",
                "embedding_indices",
                "aggregation_weights",
                "mode_override",
                "table_ids",
                "device_ordinal",
                "combiners",
                "max_sequence_lengths",
                "name",
                "ctx"
            ],
            "infeed_dequeue": [
                "dtype",
                "shape",
                "name"
            ],
            "InfeedDequeue": [
                "dtype",
                "shape",
                "name"
            ],
            "infeed_dequeue_eager_fallback": [
                "dtype",
                "shape",
                "name",
                "ctx"
            ],
            "infeed_dequeue_tuple": [
                "dtypes",
                "shapes",
                "name"
            ],
            "InfeedDequeueTuple": [
                "dtypes",
                "shapes",
                "name"
            ],
            "infeed_dequeue_tuple_eager_fallback": [
                "dtypes",
                "shapes",
                "name",
                "ctx"
            ],
            "infeed_enqueue": [
                "input",
                "shape",
                "layout",
                "device_ordinal",
                "name"
            ],
            "InfeedEnqueue": [
                "input",
                "shape",
                "layout",
                "device_ordinal",
                "name"
            ],
            "infeed_enqueue_eager_fallback": [
                "input",
                "shape",
                "layout",
                "device_ordinal",
                "name",
                "ctx"
            ],
            "infeed_enqueue_prelinearized_buffer": [
                "input",
                "device_ordinal",
                "name"
            ],
            "InfeedEnqueuePrelinearizedBuffer": [
                "input",
                "device_ordinal",
                "name"
            ],
            "infeed_enqueue_prelinearized_buffer_eager_fallback": [
                "input",
                "device_ordinal",
                "name",
                "ctx"
            ],
            "infeed_enqueue_tuple": [
                "inputs",
                "shapes",
                "layouts",
                "device_ordinal",
                "name"
            ],
            "InfeedEnqueueTuple": [
                "inputs",
                "shapes",
                "layouts",
                "device_ordinal",
                "name"
            ],
            "infeed_enqueue_tuple_eager_fallback": [
                "inputs",
                "shapes",
                "layouts",
                "device_ordinal",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_adam_parameters": [
                "parameters",
                "momenta",
                "velocities",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingADAMParameters": [
                "parameters",
                "momenta",
                "velocities",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_adam_parameters_eager_fallback": [
                "parameters",
                "momenta",
                "velocities",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_adam_parameters_grad_accum_debug": [
                "parameters",
                "momenta",
                "velocities",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingADAMParametersGradAccumDebug": [
                "parameters",
                "momenta",
                "velocities",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_adam_parameters_grad_accum_debug_eager_fallback": [
                "parameters",
                "momenta",
                "velocities",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_adadelta_parameters": [
                "parameters",
                "accumulators",
                "updates",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingAdadeltaParameters": [
                "parameters",
                "accumulators",
                "updates",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_adadelta_parameters_eager_fallback": [
                "parameters",
                "accumulators",
                "updates",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_adadelta_parameters_grad_accum_debug": [
                "parameters",
                "accumulators",
                "updates",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingAdadeltaParametersGradAccumDebug": [
                "parameters",
                "accumulators",
                "updates",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_adadelta_parameters_grad_accum_debug_eager_fallback": [
                "parameters",
                "accumulators",
                "updates",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_adagrad_parameters": [
                "parameters",
                "accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingAdagradParameters": [
                "parameters",
                "accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_adagrad_parameters_eager_fallback": [
                "parameters",
                "accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_adagrad_parameters_grad_accum_debug": [
                "parameters",
                "accumulators",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingAdagradParametersGradAccumDebug": [
                "parameters",
                "accumulators",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_adagrad_parameters_grad_accum_debug_eager_fallback": [
                "parameters",
                "accumulators",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_centered_rms_prop_parameters": [
                "parameters",
                "ms",
                "mom",
                "mg",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingCenteredRMSPropParameters": [
                "parameters",
                "ms",
                "mom",
                "mg",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_centered_rms_prop_parameters_eager_fallback": [
                "parameters",
                "ms",
                "mom",
                "mg",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_ftrl_parameters": [
                "parameters",
                "accumulators",
                "linears",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingFTRLParameters": [
                "parameters",
                "accumulators",
                "linears",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_ftrl_parameters_eager_fallback": [
                "parameters",
                "accumulators",
                "linears",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_ftrl_parameters_grad_accum_debug": [
                "parameters",
                "accumulators",
                "linears",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingFTRLParametersGradAccumDebug": [
                "parameters",
                "accumulators",
                "linears",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_ftrl_parameters_grad_accum_debug_eager_fallback": [
                "parameters",
                "accumulators",
                "linears",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_mdl_adagrad_light_parameters": [
                "parameters",
                "accumulators",
                "weights",
                "benefits",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingMDLAdagradLightParameters": [
                "parameters",
                "accumulators",
                "weights",
                "benefits",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_mdl_adagrad_light_parameters_eager_fallback": [
                "parameters",
                "accumulators",
                "weights",
                "benefits",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_momentum_parameters": [
                "parameters",
                "momenta",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingMomentumParameters": [
                "parameters",
                "momenta",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_momentum_parameters_eager_fallback": [
                "parameters",
                "momenta",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_momentum_parameters_grad_accum_debug": [
                "parameters",
                "momenta",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingMomentumParametersGradAccumDebug": [
                "parameters",
                "momenta",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_momentum_parameters_grad_accum_debug_eager_fallback": [
                "parameters",
                "momenta",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_proximal_adagrad_parameters": [
                "parameters",
                "accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingProximalAdagradParameters": [
                "parameters",
                "accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_proximal_adagrad_parameters_eager_fallback": [
                "parameters",
                "accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_proximal_adagrad_parameters_grad_accum_debug": [
                "parameters",
                "accumulators",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug": [
                "parameters",
                "accumulators",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_proximal_adagrad_parameters_grad_accum_debug_eager_fallback": [
                "parameters",
                "accumulators",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_rms_prop_parameters": [
                "parameters",
                "ms",
                "mom",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingRMSPropParameters": [
                "parameters",
                "ms",
                "mom",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_rms_prop_parameters_eager_fallback": [
                "parameters",
                "ms",
                "mom",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_rms_prop_parameters_grad_accum_debug": [
                "parameters",
                "ms",
                "mom",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingRMSPropParametersGradAccumDebug": [
                "parameters",
                "ms",
                "mom",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_rms_prop_parameters_grad_accum_debug_eager_fallback": [
                "parameters",
                "ms",
                "mom",
                "gradient_accumulators",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "load_tpu_embedding_stochastic_gradient_descent_parameters": [
                "parameters",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "LoadTPUEmbeddingStochasticGradientDescentParameters": [
                "parameters",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "load_tpu_embedding_stochastic_gradient_descent_parameters_eager_fallback": [
                "parameters",
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "outfeed_dequeue": [
                "dtype",
                "shape",
                "device_ordinal",
                "name"
            ],
            "OutfeedDequeue": [
                "dtype",
                "shape",
                "device_ordinal",
                "name"
            ],
            "outfeed_dequeue_eager_fallback": [
                "dtype",
                "shape",
                "device_ordinal",
                "name",
                "ctx"
            ],
            "outfeed_dequeue_tuple": [
                "dtypes",
                "shapes",
                "device_ordinal",
                "name"
            ],
            "OutfeedDequeueTuple": [
                "dtypes",
                "shapes",
                "device_ordinal",
                "name"
            ],
            "outfeed_dequeue_tuple_eager_fallback": [
                "dtypes",
                "shapes",
                "device_ordinal",
                "name",
                "ctx"
            ],
            "outfeed_enqueue": [
                "input",
                "name"
            ],
            "OutfeedEnqueue": [
                "input",
                "name"
            ],
            "outfeed_enqueue_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "outfeed_enqueue_tuple": [
                "inputs",
                "name"
            ],
            "OutfeedEnqueueTuple": [
                "inputs",
                "name"
            ],
            "outfeed_enqueue_tuple_eager_fallback": [
                "inputs",
                "name",
                "ctx"
            ],
            "prelinearize": [
                "input",
                "shape",
                "layout",
                "name"
            ],
            "Prelinearize": [
                "input",
                "shape",
                "layout",
                "name"
            ],
            "prelinearize_eager_fallback": [
                "input",
                "shape",
                "layout",
                "name",
                "ctx"
            ],
            "prelinearize_tuple": [
                "inputs",
                "shapes",
                "layouts",
                "name"
            ],
            "PrelinearizeTuple": [
                "inputs",
                "shapes",
                "layouts",
                "name"
            ],
            "prelinearize_tuple_eager_fallback": [
                "inputs",
                "shapes",
                "layouts",
                "name",
                "ctx"
            ],
            "recv_tpu_embedding_activations": [
                "num_outputs",
                "config",
                "name"
            ],
            "RecvTPUEmbeddingActivations": [
                "num_outputs",
                "config",
                "name"
            ],
            "recv_tpu_embedding_activations_eager_fallback": [
                "num_outputs",
                "config",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_adam_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingADAMParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_adam_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_adam_parameters_grad_accum_debug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingADAMParametersGradAccumDebug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_adam_parameters_grad_accum_debug_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_adadelta_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingAdadeltaParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_adadelta_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_adadelta_parameters_grad_accum_debug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_adadelta_parameters_grad_accum_debug_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_adagrad_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingAdagradParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_adagrad_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_adagrad_parameters_grad_accum_debug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingAdagradParametersGradAccumDebug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_adagrad_parameters_grad_accum_debug_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_centered_rms_prop_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingCenteredRMSPropParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_centered_rms_prop_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_ftrl_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingFTRLParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_ftrl_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_ftrl_parameters_grad_accum_debug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingFTRLParametersGradAccumDebug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_ftrl_parameters_grad_accum_debug_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_mdl_adagrad_light_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingMDLAdagradLightParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_mdl_adagrad_light_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_momentum_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingMomentumParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_momentum_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_momentum_parameters_grad_accum_debug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingMomentumParametersGradAccumDebug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_momentum_parameters_grad_accum_debug_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_proximal_adagrad_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingProximalAdagradParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_proximal_adagrad_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_proximal_adagrad_parameters_grad_accum_debug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_proximal_adagrad_parameters_grad_accum_debug_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_rms_prop_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingRMSPropParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_rms_prop_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_rms_prop_parameters_grad_accum_debug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_rms_prop_parameters_grad_accum_debug_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "retrieve_tpu_embedding_stochastic_gradient_descent_parameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "RetrieveTPUEmbeddingStochasticGradientDescentParameters": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name"
            ],
            "retrieve_tpu_embedding_stochastic_gradient_descent_parameters_eager_fallback": [
                "num_shards",
                "shard_id",
                "table_id",
                "table_name",
                "name",
                "ctx"
            ],
            "send_tpu_embedding_gradients": [
                "inputs",
                "learning_rates",
                "config",
                "name"
            ],
            "SendTPUEmbeddingGradients": [
                "inputs",
                "learning_rates",
                "config",
                "name"
            ],
            "send_tpu_embedding_gradients_eager_fallback": [
                "inputs",
                "learning_rates",
                "config",
                "name",
                "ctx"
            ],
            "shutdown_distributed_tpu": [
                "name"
            ],
            "ShutdownDistributedTPU": [
                "name"
            ],
            "shutdown_distributed_tpu_eager_fallback": [
                "name",
                "ctx"
            ],
            "tpu_compilation_result": [
                "name"
            ],
            "TPUCompilationResult": [
                "name"
            ],
            "tpu_compilation_result_eager_fallback": [
                "name",
                "ctx"
            ],
            "tpu_embedding_activations": [
                "embedding_variable",
                "sliced_activations",
                "table_id",
                "lookup_id",
                "name"
            ],
            "TPUEmbeddingActivations": [
                "embedding_variable",
                "sliced_activations",
                "table_id",
                "lookup_id",
                "name"
            ],
            "tpu_embedding_activations_eager_fallback": [
                "embedding_variable",
                "sliced_activations",
                "table_id",
                "lookup_id",
                "name",
                "ctx"
            ],
            "tpu_ordinal_selector": [
                "name"
            ],
            "TPUOrdinalSelector": [
                "name"
            ],
            "tpu_ordinal_selector_eager_fallback": [
                "name",
                "ctx"
            ],
            "tpu_partitioned_call": [
                "args",
                "device_ordinal",
                "Tout",
                "f",
                "name"
            ],
            "TPUPartitionedCall": [
                "args",
                "device_ordinal",
                "Tout",
                "f",
                "name"
            ],
            "tpu_partitioned_call_eager_fallback": [
                "args",
                "device_ordinal",
                "Tout",
                "f",
                "name",
                "ctx"
            ],
            "tpu_replicate_metadata": [
                "num_replicas",
                "num_cores_per_replica",
                "topology",
                "use_tpu",
                "device_assignment",
                "computation_shape",
                "host_compute_core",
                "padding_map",
                "step_marker_location",
                "allow_soft_placement",
                "name"
            ],
            "TPUReplicateMetadata": [
                "num_replicas",
                "num_cores_per_replica",
                "topology",
                "use_tpu",
                "device_assignment",
                "computation_shape",
                "host_compute_core",
                "padding_map",
                "step_marker_location",
                "allow_soft_placement",
                "name"
            ],
            "tpu_replicate_metadata_eager_fallback": [
                "num_replicas",
                "num_cores_per_replica",
                "topology",
                "use_tpu",
                "device_assignment",
                "computation_shape",
                "host_compute_core",
                "padding_map",
                "step_marker_location",
                "allow_soft_placement",
                "name",
                "ctx"
            ],
            "tpu_replicated_input": [
                "inputs",
                "name"
            ],
            "TPUReplicatedInput": [
                "inputs",
                "name"
            ],
            "tpu_replicated_input_eager_fallback": [
                "inputs",
                "name",
                "ctx"
            ],
            "tpu_replicated_output": [
                "input",
                "num_replicas",
                "name"
            ],
            "TPUReplicatedOutput": [
                "input",
                "num_replicas",
                "name"
            ],
            "tpu_replicated_output_eager_fallback": [
                "input",
                "num_replicas",
                "name",
                "ctx"
            ],
            "worker_heartbeat": [
                "request",
                "name"
            ],
            "WorkerHeartbeat": [
                "request",
                "name"
            ],
            "worker_heartbeat_eager_fallback": [
                "request",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.image_grad": {
            "_ResizeNearestNeighborGrad": [
                "op",
                "grad"
            ],
            "_ResizeBilinearGrad": [
                "op",
                "grad"
            ],
            "_ScaleAndTranslateGrad": [
                "op",
                "grad"
            ],
            "_ResizeBicubicGrad": [
                "op",
                "grad"
            ],
            "_CropAndResizeGrad": [
                "op",
                "grad"
            ],
            "_CustomReciprocal": [
                "x"
            ],
            "_RGBToHSVGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.gradient_checker": {
            "_product": [
                "t"
            ],
            "_extra_feeds": [
                "extra_feed_dict",
                "new_feeds"
            ],
            "_compute_theoretical_jacobian": [
                "x",
                "x_shape",
                "x_data",
                "dy",
                "dy_shape",
                "dx",
                "extra_feed_dict"
            ],
            "_compute_numeric_jacobian": [
                "x",
                "x_shape",
                "x_data",
                "y",
                "y_shape",
                "delta",
                "extra_feed_dict"
            ],
            "_compute_dx_and_dy": [
                "x",
                "y",
                "y_shape"
            ],
            "_compute_gradient": [
                "x",
                "x_shape",
                "dx",
                "y",
                "y_shape",
                "dy",
                "x_init_value",
                "delta",
                "extra_feed_dict"
            ],
            "_compute_gradient_list": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ],
            "compute_gradient": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ],
            "_compute_error": [
                "grad"
            ],
            "compute_gradient_error": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ]
        },
        "tensorflow_core.python.ops.array_ops": {
            "reshape": [
                "tensor",
                "shape",
                "name"
            ],
            "fill": [
                "dims",
                "value",
                "name"
            ],
            "identity": [
                "input",
                "name"
            ],
            "expand_dims": [
                "input",
                "axis",
                "name",
                "dim"
            ],
            "expand_dims_v2": [
                "input",
                "axis",
                "name"
            ],
            "listdiff": [
                "x",
                "y",
                "out_idx",
                "name"
            ],
            "setdiff1d": [
                "x",
                "y",
                "index_dtype",
                "name"
            ],
            "broadcast_dynamic_shape": [
                "shape_x",
                "shape_y"
            ],
            "broadcast_static_shape": [
                "shape_x",
                "shape_y"
            ],
            "shape_v2": [
                "input",
                "out_type",
                "name"
            ],
            "shape": [
                "input",
                "name",
                "out_type"
            ],
            "shape_internal": [
                "input",
                "name",
                "optimize",
                "out_type"
            ],
            "shape_n": [
                "input",
                "out_type",
                "name"
            ],
            "size_v2": [
                "input",
                "out_type",
                "name"
            ],
            "size": [
                "input",
                "name",
                "out_type"
            ],
            "size_internal": [
                "input",
                "name",
                "optimize",
                "out_type"
            ],
            "rank": [
                "input",
                "name"
            ],
            "rank_internal": [
                "input",
                "name",
                "optimize"
            ],
            "_check_index": [
                "idx"
            ],
            "_slice_helper": [
                "tensor",
                "slice_spec",
                "var"
            ],
            "slice": [
                "input_",
                "begin",
                "size",
                "name"
            ],
            "strided_slice": [
                "input_",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "var",
                "name"
            ],
            "_SliceHelperVar": [
                "var",
                "slice_spec"
            ],
            "parallel_stack": [
                "values",
                "name"
            ],
            "stack": [
                "values",
                "axis",
                "name"
            ],
            "_autopacking_helper": [
                "list_or_tuple",
                "dtype",
                "name"
            ],
            "_get_dtype_from_nested_lists": [
                "list_or_tuple"
            ],
            "_cast_nested_seqs_to_dtype": [
                "dtype"
            ],
            "_should_not_autopack": [
                "v"
            ],
            "_autopacking_conversion_function": [
                "v",
                "dtype",
                "name",
                "as_ref"
            ],
            "unstack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "concat": [
                "values",
                "axis",
                "name"
            ],
            "boolean_mask": [
                "tensor",
                "mask",
                "name",
                "axis"
            ],
            "boolean_mask_v2": [
                "tensor",
                "mask",
                "axis",
                "name"
            ],
            "sparse_mask": [
                "a",
                "mask_indices",
                "name"
            ],
            "unique": [
                "x",
                "out_idx",
                "name"
            ],
            "unique_with_counts": [
                "x",
                "out_idx",
                "name"
            ],
            "split": [
                "value",
                "num_or_size_splits",
                "axis",
                "num",
                "name"
            ],
            "transpose_v2": [
                "a",
                "perm",
                "conjugate",
                "name"
            ],
            "transpose": [
                "a",
                "perm",
                "name",
                "conjugate"
            ],
            "matrix_transpose": [
                "a",
                "name",
                "conjugate"
            ],
            "matrix_diag": [
                "diagonal",
                "name",
                "k",
                "num_rows",
                "num_cols",
                "padding_value"
            ],
            "matrix_diag_part": [
                "input",
                "name",
                "k",
                "padding_value"
            ],
            "matrix_set_diag": [
                "input",
                "diagonal",
                "name",
                "k"
            ],
            "_constant_if_small": [
                "value",
                "shape",
                "dtype",
                "name"
            ],
            "zeros": [
                "shape",
                "dtype",
                "name"
            ],
            "zeros_like": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "zeros_like_v2": [
                "input",
                "dtype",
                "name"
            ],
            "zeros_like_impl": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "ones_like": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "ones_like_v2": [
                "input",
                "dtype",
                "name"
            ],
            "ones_like_impl": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "ones": [
                "shape",
                "dtype",
                "name"
            ],
            "placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "placeholder_with_default": [
                "input",
                "shape",
                "name"
            ],
            "_normalize_sparse_shape": [
                "shape",
                "name"
            ],
            "sparse_placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "pad_v2": [
                "tensor",
                "paddings",
                "mode",
                "constant_values",
                "name"
            ],
            "pad": [
                "tensor",
                "paddings",
                "mode",
                "name",
                "constant_values"
            ],
            "meshgrid": [],
            "_compute_size_of_strided_dim": [
                "shrink",
                "spec",
                "size"
            ],
            "_TileGradShape": [
                "op"
            ],
            "edit_distance": [
                "hypothesis",
                "truth",
                "normalize",
                "name"
            ],
            "_FakeQuantWithMinMaxArgsGradient": [
                "op",
                "grad"
            ],
            "_FakeQuantWithMinMaxVarsGradient": [
                "op",
                "grad"
            ],
            "_FakeQuantWithMinMaxVarsPerChannelGradient": [
                "op",
                "grad"
            ],
            "required_space_to_batch_paddings": [
                "input_shape",
                "block_shape",
                "base_paddings",
                "name"
            ],
            "space_to_batch": [
                "input",
                "paddings",
                "block_size",
                "name",
                "block_shape"
            ],
            "space_to_batch_v2": [
                "input",
                "block_shape",
                "paddings",
                "name"
            ],
            "space_to_depth": [
                "input",
                "block_size",
                "name",
                "data_format"
            ],
            "space_to_depth_v2": [
                "input",
                "block_size",
                "data_format",
                "name"
            ],
            "depth_to_space": [
                "input",
                "block_size",
                "name",
                "data_format"
            ],
            "depth_to_space_v2": [
                "input",
                "block_size",
                "data_format",
                "name"
            ],
            "batch_to_space": [
                "input",
                "crops",
                "block_size",
                "name",
                "block_shape"
            ],
            "batch_to_space_v2": [
                "input",
                "block_shape",
                "crops",
                "name"
            ],
            "one_hot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "dtype",
                "name"
            ],
            "_all_dimensions": [
                "x"
            ],
            "sequence_mask": [
                "lengths",
                "maxlen",
                "dtype",
                "name"
            ],
            "squeeze": [
                "input",
                "axis",
                "name",
                "squeeze_dims"
            ],
            "squeeze_v2": [
                "input",
                "axis",
                "name"
            ],
            "where": [
                "condition",
                "x",
                "y",
                "name"
            ],
            "where_v2": [
                "condition",
                "x",
                "y",
                "name"
            ],
            "reverse_sequence": [
                "input",
                "seq_lengths",
                "seq_axis",
                "batch_axis",
                "name",
                "seq_dim",
                "batch_dim"
            ],
            "reverse_sequence_v2": [
                "input",
                "seq_lengths",
                "seq_axis",
                "batch_axis",
                "name"
            ],
            "gather": [
                "params",
                "indices",
                "validate_indices",
                "name",
                "axis",
                "batch_dims"
            ],
            "gather_v2": [
                "params",
                "indices",
                "validate_indices",
                "axis",
                "batch_dims",
                "name"
            ],
            "batch_gather": [
                "params",
                "indices",
                "name"
            ],
            "_batch_gather": [
                "params",
                "indices",
                "batch_dims",
                "axis"
            ],
            "gather_nd": [
                "params",
                "indices",
                "name",
                "batch_dims"
            ],
            "gather_nd_v2": [
                "params",
                "indices",
                "batch_dims",
                "name"
            ],
            "batch_gather_nd": [
                "params",
                "indices",
                "batch_dims",
                "name"
            ],
            "quantize_v2": [
                "input",
                "min_range",
                "max_range",
                "T",
                "mode",
                "name",
                "round_mode"
            ],
            "quantize": [
                "input",
                "min_range",
                "max_range",
                "T",
                "mode",
                "round_mode",
                "name"
            ],
            "quantize_and_dequantize": [
                "input",
                "input_min",
                "input_max",
                "signed_input",
                "num_bits",
                "range_given",
                "round_mode",
                "name",
                "narrow_range"
            ],
            "searchsorted": [
                "sorted_sequence",
                "values",
                "side",
                "out_type",
                "name"
            ],
            "extract_image_patches_v2": [
                "images",
                "sizes",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "extract_image_patches": [
                "images",
                "ksizes",
                "strides",
                "rates",
                "padding",
                "name",
                "sizes"
            ],
            "fingerprint": [
                "data",
                "method",
                "name"
            ],
            "convert_to_int_tensor": [
                "tensor",
                "name",
                "dtype"
            ],
            "get_positive_axis": [
                "axis",
                "ndims"
            ],
            "repeat_with_axis": [
                "data",
                "repeats",
                "axis",
                "name"
            ],
            "tile_one_dimension": [
                "data",
                "axis",
                "multiple"
            ],
            "_with_nonzero_rank": [
                "data"
            ],
            "repeat": [
                "input",
                "repeats",
                "axis",
                "name"
            ]
        },
        "tensorflow_core.python.ops.gen_random_ops": {
            "multinomial": [
                "logits",
                "num_samples",
                "seed",
                "seed2",
                "output_dtype",
                "name"
            ],
            "Multinomial": [
                "logits",
                "num_samples",
                "seed",
                "seed2",
                "output_dtype",
                "name"
            ],
            "multinomial_eager_fallback": [
                "logits",
                "num_samples",
                "seed",
                "seed2",
                "output_dtype",
                "name",
                "ctx"
            ],
            "parameterized_truncated_normal": [
                "shape",
                "means",
                "stdevs",
                "minvals",
                "maxvals",
                "seed",
                "seed2",
                "name"
            ],
            "ParameterizedTruncatedNormal": [
                "shape",
                "means",
                "stdevs",
                "minvals",
                "maxvals",
                "seed",
                "seed2",
                "name"
            ],
            "parameterized_truncated_normal_eager_fallback": [
                "shape",
                "means",
                "stdevs",
                "minvals",
                "maxvals",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "random_gamma": [
                "shape",
                "alpha",
                "seed",
                "seed2",
                "name"
            ],
            "RandomGamma": [
                "shape",
                "alpha",
                "seed",
                "seed2",
                "name"
            ],
            "random_gamma_eager_fallback": [
                "shape",
                "alpha",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "random_gamma_grad": [
                "alpha",
                "sample",
                "name"
            ],
            "RandomGammaGrad": [
                "alpha",
                "sample",
                "name"
            ],
            "random_gamma_grad_eager_fallback": [
                "alpha",
                "sample",
                "name",
                "ctx"
            ],
            "random_poisson": [
                "shape",
                "rate",
                "seed",
                "seed2",
                "name"
            ],
            "RandomPoisson": [
                "shape",
                "rate",
                "seed",
                "seed2",
                "name"
            ],
            "random_poisson_eager_fallback": [
                "shape",
                "rate",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "random_poisson_v2": [
                "shape",
                "rate",
                "seed",
                "seed2",
                "dtype",
                "name"
            ],
            "RandomPoissonV2": [
                "shape",
                "rate",
                "seed",
                "seed2",
                "dtype",
                "name"
            ],
            "random_poisson_v2_eager_fallback": [
                "shape",
                "rate",
                "seed",
                "seed2",
                "dtype",
                "name",
                "ctx"
            ],
            "random_shuffle": [
                "value",
                "seed",
                "seed2",
                "name"
            ],
            "RandomShuffle": [
                "value",
                "seed",
                "seed2",
                "name"
            ],
            "random_shuffle_eager_fallback": [
                "value",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "random_standard_normal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "RandomStandardNormal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "random_standard_normal_eager_fallback": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "random_uniform": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "RandomUniform": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "random_uniform_eager_fallback": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "random_uniform_int": [
                "shape",
                "minval",
                "maxval",
                "seed",
                "seed2",
                "name"
            ],
            "RandomUniformInt": [
                "shape",
                "minval",
                "maxval",
                "seed",
                "seed2",
                "name"
            ],
            "random_uniform_int_eager_fallback": [
                "shape",
                "minval",
                "maxval",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "truncated_normal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "TruncatedNormal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "truncated_normal_eager_fallback": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.metrics_impl": {
            "metric_variable": [
                "shape",
                "dtype",
                "validate_shape",
                "name"
            ],
            "_remove_squeezable_dimensions": [
                "predictions",
                "labels",
                "weights"
            ],
            "_maybe_expand_labels": [
                "labels",
                "predictions"
            ],
            "_safe_scalar_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_streaming_confusion_matrix": [
                "labels",
                "predictions",
                "num_classes",
                "weights"
            ],
            "_aggregate_across_replicas": [
                "metrics_collections",
                "metric_value_fn"
            ],
            "mean": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "accuracy": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_confusion_matrix_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "includes"
            ],
            "_aggregate_variable": [
                "v",
                "collections"
            ],
            "auc": [
                "labels",
                "predictions",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "curve",
                "name",
                "summation_method",
                "thresholds"
            ],
            "mean_absolute_error": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_cosine_distance": [
                "labels",
                "predictions",
                "dim",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_per_class_accuracy": [
                "labels",
                "predictions",
                "num_classes",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_iou": [
                "labels",
                "predictions",
                "num_classes",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_relative_error": [
                "labels",
                "predictions",
                "normalizer",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_squared_error": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_tensor": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "percentage_below": [
                "values",
                "threshold",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_count_condition": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections"
            ],
            "false_negatives": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "false_negatives_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "false_positives": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "false_positives_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "true_negatives": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "true_negatives_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "true_positives": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "true_positives_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "precision": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "precision_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "recall": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_at_k_name": [
                "name",
                "k",
                "class_id"
            ],
            "_select_class_id": [
                "ids",
                "selected_id"
            ],
            "_maybe_select_class_id": [
                "labels",
                "predictions_idx",
                "selected_id"
            ],
            "_sparse_true_positive_at_k": [
                "labels",
                "predictions_idx",
                "class_id",
                "weights",
                "name"
            ],
            "_streaming_sparse_true_positive_at_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "_sparse_false_negative_at_k": [
                "labels",
                "predictions_idx",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_negative_at_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "recall_at_k": [
                "labels",
                "predictions",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "recall_at_top_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "recall_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "root_mean_squared_error": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "sensitivity_at_specificity": [
                "labels",
                "predictions",
                "specificity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_expand_and_tile": [
                "tensor",
                "multiple",
                "dim",
                "name"
            ],
            "_num_relevant": [
                "labels",
                "k"
            ],
            "_sparse_average_precision_at_top_k": [
                "labels",
                "predictions_idx"
            ],
            "_streaming_sparse_average_precision_at_top_k": [
                "labels",
                "predictions_idx",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_clean_out_of_range_indices": [
                "labels",
                "num_classes"
            ],
            "sparse_average_precision_at_k": [
                "labels",
                "predictions",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "average_precision_at_k": [
                "labels",
                "predictions",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_sparse_false_positive_at_k": [
                "labels",
                "predictions_idx",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_positive_at_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "precision_at_top_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "sparse_precision_at_k": [
                "labels",
                "predictions",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "precision_at_k": [
                "labels",
                "predictions",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "specificity_at_sensitivity": [
                "labels",
                "predictions",
                "sensitivity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ]
        },
        "tensorflow_core.python.ops.gen_encode_proto_ops": {
            "encode_proto": [
                "sizes",
                "values",
                "field_names",
                "message_type",
                "descriptor_source",
                "name"
            ],
            "EncodeProto": [
                "sizes",
                "values",
                "field_names",
                "message_type",
                "descriptor_source",
                "name"
            ],
            "encode_proto_eager_fallback": [
                "sizes",
                "values",
                "field_names",
                "message_type",
                "descriptor_source",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_image_ops": {
            "adjust_contrast": [
                "images",
                "contrast_factor",
                "min_value",
                "max_value",
                "name"
            ],
            "AdjustContrast": [
                "images",
                "contrast_factor",
                "min_value",
                "max_value",
                "name"
            ],
            "adjust_contrast_eager_fallback": [
                "images",
                "contrast_factor",
                "min_value",
                "max_value",
                "name",
                "ctx"
            ],
            "adjust_contrastv2": [
                "images",
                "contrast_factor",
                "name"
            ],
            "AdjustContrastv2": [
                "images",
                "contrast_factor",
                "name"
            ],
            "adjust_contrastv2_eager_fallback": [
                "images",
                "contrast_factor",
                "name",
                "ctx"
            ],
            "adjust_hue": [
                "images",
                "delta",
                "name"
            ],
            "AdjustHue": [
                "images",
                "delta",
                "name"
            ],
            "adjust_hue_eager_fallback": [
                "images",
                "delta",
                "name",
                "ctx"
            ],
            "adjust_saturation": [
                "images",
                "scale",
                "name"
            ],
            "AdjustSaturation": [
                "images",
                "scale",
                "name"
            ],
            "adjust_saturation_eager_fallback": [
                "images",
                "scale",
                "name",
                "ctx"
            ],
            "combined_non_max_suppression": [
                "boxes",
                "scores",
                "max_output_size_per_class",
                "max_total_size",
                "iou_threshold",
                "score_threshold",
                "pad_per_class",
                "clip_boxes",
                "name"
            ],
            "CombinedNonMaxSuppression": [
                "boxes",
                "scores",
                "max_output_size_per_class",
                "max_total_size",
                "iou_threshold",
                "score_threshold",
                "pad_per_class",
                "clip_boxes",
                "name"
            ],
            "combined_non_max_suppression_eager_fallback": [
                "boxes",
                "scores",
                "max_output_size_per_class",
                "max_total_size",
                "iou_threshold",
                "score_threshold",
                "pad_per_class",
                "clip_boxes",
                "name",
                "ctx"
            ],
            "crop_and_resize": [
                "image",
                "boxes",
                "box_ind",
                "crop_size",
                "method",
                "extrapolation_value",
                "name"
            ],
            "CropAndResize": [
                "image",
                "boxes",
                "box_ind",
                "crop_size",
                "method",
                "extrapolation_value",
                "name"
            ],
            "crop_and_resize_eager_fallback": [
                "image",
                "boxes",
                "box_ind",
                "crop_size",
                "method",
                "extrapolation_value",
                "name",
                "ctx"
            ],
            "crop_and_resize_grad_boxes": [
                "grads",
                "image",
                "boxes",
                "box_ind",
                "method",
                "name"
            ],
            "CropAndResizeGradBoxes": [
                "grads",
                "image",
                "boxes",
                "box_ind",
                "method",
                "name"
            ],
            "crop_and_resize_grad_boxes_eager_fallback": [
                "grads",
                "image",
                "boxes",
                "box_ind",
                "method",
                "name",
                "ctx"
            ],
            "crop_and_resize_grad_image": [
                "grads",
                "boxes",
                "box_ind",
                "image_size",
                "T",
                "method",
                "name"
            ],
            "CropAndResizeGradImage": [
                "grads",
                "boxes",
                "box_ind",
                "image_size",
                "T",
                "method",
                "name"
            ],
            "crop_and_resize_grad_image_eager_fallback": [
                "grads",
                "boxes",
                "box_ind",
                "image_size",
                "T",
                "method",
                "name",
                "ctx"
            ],
            "decode_and_crop_jpeg": [
                "contents",
                "crop_window",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "dct_method",
                "name"
            ],
            "DecodeAndCropJpeg": [
                "contents",
                "crop_window",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "dct_method",
                "name"
            ],
            "decode_and_crop_jpeg_eager_fallback": [
                "contents",
                "crop_window",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "dct_method",
                "name",
                "ctx"
            ],
            "decode_bmp": [
                "contents",
                "channels",
                "name"
            ],
            "DecodeBmp": [
                "contents",
                "channels",
                "name"
            ],
            "decode_bmp_eager_fallback": [
                "contents",
                "channels",
                "name",
                "ctx"
            ],
            "decode_gif": [
                "contents",
                "name"
            ],
            "DecodeGif": [
                "contents",
                "name"
            ],
            "decode_gif_eager_fallback": [
                "contents",
                "name",
                "ctx"
            ],
            "decode_jpeg": [
                "contents",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "dct_method",
                "name"
            ],
            "DecodeJpeg": [
                "contents",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "dct_method",
                "name"
            ],
            "decode_jpeg_eager_fallback": [
                "contents",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "dct_method",
                "name",
                "ctx"
            ],
            "decode_png": [
                "contents",
                "channels",
                "dtype",
                "name"
            ],
            "DecodePng": [
                "contents",
                "channels",
                "dtype",
                "name"
            ],
            "decode_png_eager_fallback": [
                "contents",
                "channels",
                "dtype",
                "name",
                "ctx"
            ],
            "draw_bounding_boxes": [
                "images",
                "boxes",
                "name"
            ],
            "DrawBoundingBoxes": [
                "images",
                "boxes",
                "name"
            ],
            "draw_bounding_boxes_eager_fallback": [
                "images",
                "boxes",
                "name",
                "ctx"
            ],
            "draw_bounding_boxes_v2": [
                "images",
                "boxes",
                "colors",
                "name"
            ],
            "DrawBoundingBoxesV2": [
                "images",
                "boxes",
                "colors",
                "name"
            ],
            "draw_bounding_boxes_v2_eager_fallback": [
                "images",
                "boxes",
                "colors",
                "name",
                "ctx"
            ],
            "encode_jpeg": [
                "image",
                "format",
                "quality",
                "progressive",
                "optimize_size",
                "chroma_downsampling",
                "density_unit",
                "x_density",
                "y_density",
                "xmp_metadata",
                "name"
            ],
            "EncodeJpeg": [
                "image",
                "format",
                "quality",
                "progressive",
                "optimize_size",
                "chroma_downsampling",
                "density_unit",
                "x_density",
                "y_density",
                "xmp_metadata",
                "name"
            ],
            "encode_jpeg_eager_fallback": [
                "image",
                "format",
                "quality",
                "progressive",
                "optimize_size",
                "chroma_downsampling",
                "density_unit",
                "x_density",
                "y_density",
                "xmp_metadata",
                "name",
                "ctx"
            ],
            "encode_jpeg_variable_quality": [
                "images",
                "quality",
                "name"
            ],
            "EncodeJpegVariableQuality": [
                "images",
                "quality",
                "name"
            ],
            "encode_jpeg_variable_quality_eager_fallback": [
                "images",
                "quality",
                "name",
                "ctx"
            ],
            "encode_png": [
                "image",
                "compression",
                "name"
            ],
            "EncodePng": [
                "image",
                "compression",
                "name"
            ],
            "encode_png_eager_fallback": [
                "image",
                "compression",
                "name",
                "ctx"
            ],
            "extract_glimpse": [
                "input",
                "size",
                "offsets",
                "centered",
                "normalized",
                "uniform_noise",
                "noise",
                "name"
            ],
            "ExtractGlimpse": [
                "input",
                "size",
                "offsets",
                "centered",
                "normalized",
                "uniform_noise",
                "noise",
                "name"
            ],
            "extract_glimpse_eager_fallback": [
                "input",
                "size",
                "offsets",
                "centered",
                "normalized",
                "uniform_noise",
                "noise",
                "name",
                "ctx"
            ],
            "extract_jpeg_shape": [
                "contents",
                "output_type",
                "name"
            ],
            "ExtractJpegShape": [
                "contents",
                "output_type",
                "name"
            ],
            "extract_jpeg_shape_eager_fallback": [
                "contents",
                "output_type",
                "name",
                "ctx"
            ],
            "hsv_to_rgb": [
                "images",
                "name"
            ],
            "HSVToRGB": [
                "images",
                "name"
            ],
            "hsv_to_rgb_eager_fallback": [
                "images",
                "name",
                "ctx"
            ],
            "non_max_suppression": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name"
            ],
            "NonMaxSuppression": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name"
            ],
            "non_max_suppression_eager_fallback": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name",
                "ctx"
            ],
            "non_max_suppression_v2": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name"
            ],
            "NonMaxSuppressionV2": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name"
            ],
            "non_max_suppression_v2_eager_fallback": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name",
                "ctx"
            ],
            "non_max_suppression_v3": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "name"
            ],
            "NonMaxSuppressionV3": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "name"
            ],
            "non_max_suppression_v3_eager_fallback": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "name",
                "ctx"
            ],
            "non_max_suppression_v4": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "pad_to_max_output_size",
                "name"
            ],
            "NonMaxSuppressionV4": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "pad_to_max_output_size",
                "name"
            ],
            "non_max_suppression_v4_eager_fallback": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "pad_to_max_output_size",
                "name",
                "ctx"
            ],
            "non_max_suppression_v5": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "soft_nms_sigma",
                "pad_to_max_output_size",
                "name"
            ],
            "NonMaxSuppressionV5": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "soft_nms_sigma",
                "pad_to_max_output_size",
                "name"
            ],
            "non_max_suppression_v5_eager_fallback": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "score_threshold",
                "soft_nms_sigma",
                "pad_to_max_output_size",
                "name",
                "ctx"
            ],
            "non_max_suppression_with_overlaps": [
                "overlaps",
                "scores",
                "max_output_size",
                "overlap_threshold",
                "score_threshold",
                "name"
            ],
            "NonMaxSuppressionWithOverlaps": [
                "overlaps",
                "scores",
                "max_output_size",
                "overlap_threshold",
                "score_threshold",
                "name"
            ],
            "non_max_suppression_with_overlaps_eager_fallback": [
                "overlaps",
                "scores",
                "max_output_size",
                "overlap_threshold",
                "score_threshold",
                "name",
                "ctx"
            ],
            "quantized_resize_bilinear": [
                "images",
                "size",
                "min",
                "max",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "QuantizedResizeBilinear": [
                "images",
                "size",
                "min",
                "max",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "quantized_resize_bilinear_eager_fallback": [
                "images",
                "size",
                "min",
                "max",
                "align_corners",
                "half_pixel_centers",
                "name",
                "ctx"
            ],
            "rgb_to_hsv": [
                "images",
                "name"
            ],
            "RGBToHSV": [
                "images",
                "name"
            ],
            "rgb_to_hsv_eager_fallback": [
                "images",
                "name",
                "ctx"
            ],
            "random_crop": [
                "image",
                "size",
                "seed",
                "seed2",
                "name"
            ],
            "RandomCrop": [
                "image",
                "size",
                "seed",
                "seed2",
                "name"
            ],
            "random_crop_eager_fallback": [
                "image",
                "size",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "resize_area": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "ResizeArea": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "resize_area_eager_fallback": [
                "images",
                "size",
                "align_corners",
                "name",
                "ctx"
            ],
            "resize_bicubic": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "ResizeBicubic": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "resize_bicubic_eager_fallback": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name",
                "ctx"
            ],
            "resize_bicubic_grad": [
                "grads",
                "original_image",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "ResizeBicubicGrad": [
                "grads",
                "original_image",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "resize_bicubic_grad_eager_fallback": [
                "grads",
                "original_image",
                "align_corners",
                "half_pixel_centers",
                "name",
                "ctx"
            ],
            "resize_bilinear": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "ResizeBilinear": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "resize_bilinear_eager_fallback": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name",
                "ctx"
            ],
            "resize_bilinear_grad": [
                "grads",
                "original_image",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "ResizeBilinearGrad": [
                "grads",
                "original_image",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "resize_bilinear_grad_eager_fallback": [
                "grads",
                "original_image",
                "align_corners",
                "half_pixel_centers",
                "name",
                "ctx"
            ],
            "resize_nearest_neighbor": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "ResizeNearestNeighbor": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "resize_nearest_neighbor_eager_fallback": [
                "images",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name",
                "ctx"
            ],
            "resize_nearest_neighbor_grad": [
                "grads",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "ResizeNearestNeighborGrad": [
                "grads",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name"
            ],
            "resize_nearest_neighbor_grad_eager_fallback": [
                "grads",
                "size",
                "align_corners",
                "half_pixel_centers",
                "name",
                "ctx"
            ],
            "sample_distorted_bounding_box": [
                "image_size",
                "bounding_boxes",
                "seed",
                "seed2",
                "min_object_covered",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "SampleDistortedBoundingBox": [
                "image_size",
                "bounding_boxes",
                "seed",
                "seed2",
                "min_object_covered",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "sample_distorted_bounding_box_eager_fallback": [
                "image_size",
                "bounding_boxes",
                "seed",
                "seed2",
                "min_object_covered",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name",
                "ctx"
            ],
            "sample_distorted_bounding_box_v2": [
                "image_size",
                "bounding_boxes",
                "min_object_covered",
                "seed",
                "seed2",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "SampleDistortedBoundingBoxV2": [
                "image_size",
                "bounding_boxes",
                "min_object_covered",
                "seed",
                "seed2",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "sample_distorted_bounding_box_v2_eager_fallback": [
                "image_size",
                "bounding_boxes",
                "min_object_covered",
                "seed",
                "seed2",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name",
                "ctx"
            ],
            "scale_and_translate": [
                "images",
                "size",
                "scale",
                "translation",
                "kernel_type",
                "antialias",
                "name"
            ],
            "ScaleAndTranslate": [
                "images",
                "size",
                "scale",
                "translation",
                "kernel_type",
                "antialias",
                "name"
            ],
            "scale_and_translate_eager_fallback": [
                "images",
                "size",
                "scale",
                "translation",
                "kernel_type",
                "antialias",
                "name",
                "ctx"
            ],
            "scale_and_translate_grad": [
                "grads",
                "original_image",
                "scale",
                "translation",
                "kernel_type",
                "antialias",
                "name"
            ],
            "ScaleAndTranslateGrad": [
                "grads",
                "original_image",
                "scale",
                "translation",
                "kernel_type",
                "antialias",
                "name"
            ],
            "scale_and_translate_grad_eager_fallback": [
                "grads",
                "original_image",
                "scale",
                "translation",
                "kernel_type",
                "antialias",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_stateful_random_ops": {
            "non_deterministic_ints": [
                "shape",
                "dtype",
                "name"
            ],
            "NonDeterministicInts": [
                "shape",
                "dtype",
                "name"
            ],
            "non_deterministic_ints_eager_fallback": [
                "shape",
                "dtype",
                "name",
                "ctx"
            ],
            "rng_skip": [
                "resource",
                "algorithm",
                "delta",
                "name"
            ],
            "RngSkip": [
                "resource",
                "algorithm",
                "delta",
                "name"
            ],
            "rng_skip_eager_fallback": [
                "resource",
                "algorithm",
                "delta",
                "name",
                "ctx"
            ],
            "stateful_random_binomial": [
                "resource",
                "algorithm",
                "shape",
                "counts",
                "probs",
                "dtype",
                "name"
            ],
            "StatefulRandomBinomial": [
                "resource",
                "algorithm",
                "shape",
                "counts",
                "probs",
                "dtype",
                "name"
            ],
            "stateful_random_binomial_eager_fallback": [
                "resource",
                "algorithm",
                "shape",
                "counts",
                "probs",
                "dtype",
                "name",
                "ctx"
            ],
            "stateful_standard_normal": [
                "resource",
                "shape",
                "dtype",
                "name"
            ],
            "StatefulStandardNormal": [
                "resource",
                "shape",
                "dtype",
                "name"
            ],
            "stateful_standard_normal_eager_fallback": [
                "resource",
                "shape",
                "dtype",
                "name",
                "ctx"
            ],
            "stateful_standard_normal_v2": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "StatefulStandardNormalV2": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "stateful_standard_normal_v2_eager_fallback": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name",
                "ctx"
            ],
            "stateful_truncated_normal": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "StatefulTruncatedNormal": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "stateful_truncated_normal_eager_fallback": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name",
                "ctx"
            ],
            "stateful_uniform": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "StatefulUniform": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "stateful_uniform_eager_fallback": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name",
                "ctx"
            ],
            "stateful_uniform_full_int": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "StatefulUniformFullInt": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name"
            ],
            "stateful_uniform_full_int_eager_fallback": [
                "resource",
                "algorithm",
                "shape",
                "dtype",
                "name",
                "ctx"
            ],
            "stateful_uniform_int": [
                "resource",
                "algorithm",
                "shape",
                "minval",
                "maxval",
                "name"
            ],
            "StatefulUniformInt": [
                "resource",
                "algorithm",
                "shape",
                "minval",
                "maxval",
                "name"
            ],
            "stateful_uniform_int_eager_fallback": [
                "resource",
                "algorithm",
                "shape",
                "minval",
                "maxval",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.sdca_ops": {},
        "tensorflow_core.python.ops.functional_ops": {
            "foldl": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "foldr": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "scan": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "infer_shape",
                "reverse",
                "name"
            ],
            "If": [
                "cond",
                "inputs",
                "then_branch",
                "else_branch",
                "name"
            ],
            "Gradient": [
                "inputs",
                "f",
                "name"
            ],
            "_LoopBodyCaptureWrapper": [
                "func"
            ],
            "While": [
                "input_",
                "cond",
                "body",
                "name",
                "hostmem"
            ],
            "_ForUsingWhile": [
                "start",
                "limit",
                "delta",
                "inputs",
                "forbody",
                "name",
                "hostmem"
            ],
            "For": [
                "start",
                "limit",
                "delta",
                "inputs",
                "body",
                "name",
                "hostmem",
                "rewrite_with_while"
            ],
            "partitioned_call": [
                "args",
                "f",
                "tout",
                "executing_eagerly",
                "config",
                "executor_type"
            ]
        },
        "tensorflow_core.python.ops.control_flow_util_v2": {
            "in_defun": [],
            "create_new_tf_function": [
                "func_graph"
            ],
            "unique_fn_name": [
                "scope",
                "name"
            ],
            "unique_grad_fn_name": [
                "forward_name"
            ],
            "maybe_set_lowering_attr": [
                "op"
            ],
            "maybe_propagate_compile_time_consts_in_xla": [
                "op"
            ],
            "resource_input_index": [
                "tensor_name",
                "input_names",
                "node_defs",
                "functions"
            ],
            "clear_control_inputs": [],
            "_is_tpu_strategy": [
                "strategy"
            ],
            "_is_building_keras_layer": [],
            "output_all_intermediates": []
        },
        "tensorflow_core.python.ops.confusion_matrix": {
            "remove_squeezable_dimensions": [
                "labels",
                "predictions",
                "expected_rank_diff",
                "name"
            ],
            "confusion_matrix": [
                "labels",
                "predictions",
                "num_classes",
                "weights",
                "dtype",
                "name"
            ],
            "confusion_matrix_v1": [
                "labels",
                "predictions",
                "num_classes",
                "dtype",
                "name",
                "weights"
            ]
        },
        "tensorflow_core.python.ops.gen_collective_ops": {
            "collective_bcast_recv": [
                "T",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name"
            ],
            "CollectiveBcastRecv": [
                "T",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name"
            ],
            "collective_bcast_recv_eager_fallback": [
                "T",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name",
                "ctx"
            ],
            "collective_bcast_send": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name"
            ],
            "CollectiveBcastSend": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name"
            ],
            "collective_bcast_send_eager_fallback": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name",
                "ctx"
            ],
            "collective_gather": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name"
            ],
            "CollectiveGather": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name"
            ],
            "collective_gather_eager_fallback": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "shape",
                "communication_hint",
                "name",
                "ctx"
            ],
            "collective_reduce": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "merge_op",
                "final_op",
                "subdiv_offsets",
                "wait_for",
                "communication_hint",
                "name"
            ],
            "CollectiveReduce": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "merge_op",
                "final_op",
                "subdiv_offsets",
                "wait_for",
                "communication_hint",
                "name"
            ],
            "collective_reduce_eager_fallback": [
                "input",
                "group_size",
                "group_key",
                "instance_key",
                "merge_op",
                "final_op",
                "subdiv_offsets",
                "wait_for",
                "communication_hint",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.random_ops": {
            "random_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed",
                "name"
            ],
            "parameterized_truncated_normal": [
                "shape",
                "means",
                "stddevs",
                "minvals",
                "maxvals",
                "dtype",
                "seed",
                "name"
            ],
            "truncated_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed",
                "name"
            ],
            "random_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed",
                "name"
            ],
            "random_shuffle": [
                "value",
                "seed",
                "name"
            ],
            "random_crop": [
                "value",
                "size",
                "seed",
                "name"
            ],
            "multinomial": [
                "logits",
                "num_samples",
                "seed",
                "name",
                "output_dtype"
            ],
            "categorical": [
                "logits",
                "num_samples",
                "dtype",
                "seed",
                "name"
            ],
            "multinomial_categorical_impl": [
                "logits",
                "num_samples",
                "dtype",
                "seed"
            ],
            "_maybe_set_static_shape_helper": [
                "tensor",
                "shape",
                "postfix_tensor"
            ],
            "random_gamma": [
                "shape",
                "alpha",
                "beta",
                "dtype",
                "seed",
                "name"
            ],
            "random_poisson": [
                "lam",
                "shape",
                "dtype",
                "seed",
                "name"
            ],
            "random_poisson_v2": [
                "shape",
                "lam",
                "dtype",
                "seed",
                "name"
            ]
        },
        "tensorflow_core.python.ops.check_ops": {
            "_maybe_constant_value_string": [
                "t"
            ],
            "_assert_static": [
                "condition",
                "data"
            ],
            "_shape_and_dtype_str": [
                "tensor"
            ],
            "_unary_assert_doc": [
                "sym",
                "sym_name"
            ],
            "_binary_assert_doc": [
                "sym"
            ],
            "_make_assert_msg_data": [
                "sym",
                "x",
                "y",
                "summarize",
                "test_op"
            ],
            "_pretty_print": [
                "data_item",
                "summarize"
            ],
            "_binary_assert": [
                "sym",
                "opname",
                "op_func",
                "static_func",
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_proper_iterable": [
                "values"
            ],
            "assert_negative_v2": [
                "x",
                "message",
                "summarize",
                "name"
            ],
            "assert_negative": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_positive_v2": [
                "x",
                "message",
                "summarize",
                "name"
            ],
            "assert_positive": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_non_negative_v2": [
                "x",
                "message",
                "summarize",
                "name"
            ],
            "assert_non_negative": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_non_positive_v2": [
                "x",
                "message",
                "summarize",
                "name"
            ],
            "assert_non_positive": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_equal_v2": [
                "x",
                "y",
                "message",
                "summarize",
                "name"
            ],
            "assert_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_none_equal_v2": [
                "x",
                "y",
                "summarize",
                "message",
                "name"
            ],
            "assert_none_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_near_v2": [
                "x",
                "y",
                "rtol",
                "atol",
                "message",
                "summarize",
                "name"
            ],
            "assert_near": [
                "x",
                "y",
                "rtol",
                "atol",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_less_v2": [
                "x",
                "y",
                "message",
                "summarize",
                "name"
            ],
            "assert_less": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_less_equal_v2": [
                "x",
                "y",
                "message",
                "summarize",
                "name"
            ],
            "assert_less_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_greater_v2": [
                "x",
                "y",
                "message",
                "summarize",
                "name"
            ],
            "assert_greater": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_greater_equal_v2": [
                "x",
                "y",
                "message",
                "summarize",
                "name"
            ],
            "assert_greater_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "_assert_rank_condition": [
                "x",
                "rank",
                "static_condition",
                "dynamic_condition",
                "data",
                "summarize"
            ],
            "assert_rank_v2": [
                "x",
                "rank",
                "message",
                "name"
            ],
            "assert_rank": [
                "x",
                "rank",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_rank_at_least_v2": [
                "x",
                "rank",
                "message",
                "name"
            ],
            "assert_rank_at_least": [
                "x",
                "rank",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "_static_rank_in": [
                "actual_rank",
                "given_ranks"
            ],
            "_dynamic_rank_in": [
                "actual_rank",
                "given_ranks"
            ],
            "_assert_ranks_condition": [
                "x",
                "ranks",
                "static_condition",
                "dynamic_condition",
                "data",
                "summarize"
            ],
            "assert_rank_in_v2": [
                "x",
                "ranks",
                "message",
                "name"
            ],
            "assert_rank_in": [
                "x",
                "ranks",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_integer_v2": [
                "x",
                "message",
                "name"
            ],
            "assert_integer": [
                "x",
                "message",
                "name"
            ],
            "assert_type_v2": [
                "tensor",
                "tf_type",
                "message",
                "name"
            ],
            "assert_type": [
                "tensor",
                "tf_type",
                "message",
                "name"
            ],
            "_dimension_sizes": [
                "x"
            ],
            "_symbolic_dimension_sizes": [
                "symbolic_shape"
            ],
            "_has_known_value": [
                "dimension_size"
            ],
            "_is_symbol_for_any_size": [
                "symbol"
            ],
            "assert_shapes_v2": [
                "shapes",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_shapes": [
                "shapes",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "_get_diff_for_monotonic_comparison": [
                "x"
            ],
            "is_numeric_tensor": [
                "tensor"
            ],
            "is_non_decreasing": [
                "x",
                "name"
            ],
            "is_strictly_increasing": [
                "x",
                "name"
            ],
            "_assert_same_base_type": [
                "items",
                "expected_type"
            ],
            "assert_same_float_dtype": [
                "tensors",
                "dtype"
            ],
            "assert_scalar_v2": [
                "tensor",
                "message",
                "name"
            ],
            "assert_scalar": [
                "tensor",
                "name",
                "message"
            ],
            "ensure_shape": [
                "x",
                "shape",
                "name"
            ],
            "_ensure_shape_grad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.sets_impl": {
            "set_size": [
                "a",
                "validate_indices"
            ],
            "_convert_to_tensors_or_sparse_tensors": [
                "a",
                "b"
            ],
            "_set_operation": [
                "a",
                "b",
                "set_operation",
                "validate_indices"
            ],
            "set_intersection": [
                "a",
                "b",
                "validate_indices"
            ],
            "set_difference": [
                "a",
                "b",
                "aminusb",
                "validate_indices"
            ],
            "set_union": [
                "a",
                "b",
                "validate_indices"
            ]
        },
        "tensorflow_core.python.ops.rnn_grad": {
            "_block_lstm_grad": [
                "op"
            ]
        },
        "tensorflow_core.python.ops.while_v2_indexed_slices_rewriter": {
            "rewrite_grad_indexed_slices": [
                "grads",
                "body_grad_graph",
                "loop_vars",
                "forward_inputs"
            ],
            "_rewrite_output_as_tensor": [
                "body_grad_graph",
                "grad_output_slices"
            ],
            "_rewrite_input_as_indexed_slices": [
                "body_grad_graph",
                "grad_output_slices",
                "forward_input",
                "loop_vars"
            ],
            "_create_grad_indexed_slices_init": [
                "grad_output_slices",
                "forward_input"
            ],
            "_rewrite_grad_indexed_slices_output": [
                "old_output_slices",
                "new_input_slices"
            ],
            "_update_indexed_slices_param": [
                "graph",
                "loop_vars",
                "init_slices",
                "input_slices",
                "output_slices",
                "old_output_slices"
            ],
            "_flatten": [
                "arg"
            ]
        },
        "tensorflow_core.python.ops.manip_grad": {
            "_RollGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.rnn_cell": {},
        "tensorflow_core.python.ops.session_ops": {
            "encode_resource_handle": [
                "resource_handle"
            ],
            "get_session_handle": [
                "data",
                "name"
            ],
            "get_session_tensor": [
                "handle",
                "dtype",
                "name"
            ],
            "delete_session_tensor": [
                "handle",
                "name"
            ],
            "_register_handle_feeder": [
                "graph",
                "feeder",
                "dtype"
            ],
            "_get_handle_feeder": [
                "graph",
                "feeder"
            ],
            "_get_handle_reader": [
                "graph",
                "handle",
                "dtype"
            ],
            "_get_handle_mover": [
                "graph",
                "feeder",
                "handle"
            ],
            "_get_handle_deleter": [
                "graph",
                "deleter_key",
                "handle"
            ],
            "TensorHandle": {
                "__init__": [
                    "self",
                    "handle",
                    "dtype",
                    "session"
                ],
                "__del__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_get_resource_handle": [
                    "self"
                ],
                "to_numpy_array": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "eval": [
                    "self"
                ],
                "delete": [
                    "self"
                ],
                "get_raw_handle": [
                    "self"
                ],
                "_get_device_name": [
                    "handle"
                ],
                "_get_reader_key": [
                    "handle"
                ],
                "_get_mover_key": [
                    "feeder",
                    "handle"
                ]
            }
        },
        "tensorflow_core.python.ops.gen_sdca_ops": {
            "sdca_fprint": [
                "input",
                "name"
            ],
            "SdcaFprint": [
                "input",
                "name"
            ],
            "sdca_fprint_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "sdca_optimizer": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptative",
                "name"
            ],
            "SdcaOptimizer": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptative",
                "name"
            ],
            "sdca_optimizer_eager_fallback": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptative",
                "name",
                "ctx"
            ],
            "sdca_optimizer_v2": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptive",
                "name"
            ],
            "SdcaOptimizerV2": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptive",
                "name"
            ],
            "sdca_optimizer_v2_eager_fallback": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptive",
                "name",
                "ctx"
            ],
            "sdca_shrink_l1": [
                "weights",
                "l1",
                "l2",
                "name"
            ],
            "SdcaShrinkL1": [
                "weights",
                "l1",
                "l2",
                "name"
            ],
            "sdca_shrink_l1_eager_fallback": [
                "weights",
                "l1",
                "l2",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_ragged_array_ops": {
            "ragged_gather": [
                "params_nested_splits",
                "params_dense_values",
                "indices",
                "OUTPUT_RAGGED_RANK",
                "name"
            ],
            "RaggedGather": [
                "params_nested_splits",
                "params_dense_values",
                "indices",
                "OUTPUT_RAGGED_RANK",
                "name"
            ],
            "ragged_gather_eager_fallback": [
                "params_nested_splits",
                "params_dense_values",
                "indices",
                "OUTPUT_RAGGED_RANK",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.standard_ops": {},
        "tensorflow_core.python.ops.collective_ops": {
            "all_reduce": [
                "t",
                "group_size",
                "group_key",
                "instance_key",
                "merge_op",
                "final_op",
                "subdiv_offsets",
                "communication_hint"
            ],
            "all_gather": [
                "t",
                "group_size",
                "group_key",
                "instance_key",
                "communication_hint"
            ],
            "broadcast_send": [
                "t",
                "shape",
                "dtype",
                "group_size",
                "group_key",
                "instance_key",
                "communication_hint"
            ],
            "broadcast_recv": [
                "shape",
                "dtype",
                "group_size",
                "group_key",
                "instance_key",
                "communication_hint"
            ]
        },
        "tensorflow_core.python.ops.nn_grad": {
            "_Conv2DBackpropInputGrad": [
                "op",
                "grad"
            ],
            "_Conv2DBackpropFilterGrad": [
                "op",
                "grad"
            ],
            "_DepthwiseConv2dNativeBackpropInputGrad": [
                "op",
                "grad"
            ],
            "_DepthwiseConv2dNativeBackpropFilterGrad": [
                "op",
                "grad"
            ],
            "_Conv3DGrad": [
                "op",
                "grad"
            ],
            "_Conv3DBackpropInputGrad": [
                "op",
                "grad"
            ],
            "_Conv3DBackpropFilterGrad": [
                "op",
                "grad"
            ],
            "_AvgPool3DGrad": [
                "op",
                "grad"
            ],
            "_AvgPool3DGradGrad": [
                "op",
                "grad"
            ],
            "_MaxPool3DGrad": [
                "op",
                "grad"
            ],
            "_MaxPool3DGradGrad": [
                "op",
                "grad"
            ],
            "_MaxPool3DGradGradGrad": [
                "op",
                "grad"
            ],
            "_SoftmaxGrad": [
                "op",
                "grad_softmax"
            ],
            "_LogSoftmaxGrad": [
                "op",
                "grad"
            ],
            "_BiasAddGrad": [
                "op",
                "received_grad"
            ],
            "_BiasAddGradGrad": [
                "op",
                "received_grad"
            ],
            "_BiasAddGradV1": [
                "unused_bias_op",
                "received_grad"
            ],
            "_ReluGrad": [
                "op",
                "grad"
            ],
            "_EluGradGrad": [
                "op",
                "grad"
            ],
            "_SeluGradGrad": [
                "op",
                "grad"
            ],
            "_Relu6Grad": [
                "op",
                "grad"
            ],
            "_Relu6GradGrad": [
                "op",
                "grad"
            ],
            "_LeakyReluGrad": [
                "op",
                "grad"
            ],
            "_LeakyReluGradGrad": [
                "op",
                "grad"
            ],
            "_EluGrad": [
                "op",
                "grad"
            ],
            "_SeluGrad": [
                "op",
                "grad"
            ],
            "_SoftplusGrad": [
                "op",
                "grad"
            ],
            "_SoftplusGradGrad": [
                "op",
                "grad"
            ],
            "_SoftsignGrad": [
                "op",
                "grad"
            ],
            "_ReluGradGrad": [
                "op",
                "grad"
            ],
            "_BroadcastMul": [
                "vec",
                "mat"
            ],
            "_SoftmaxCrossEntropyWithLogitsGrad": [
                "op",
                "grad_loss",
                "grad_grad"
            ],
            "_SparseSoftmaxCrossEntropyWithLogitsGrad": [
                "op",
                "grad_0",
                "_"
            ],
            "_Conv2DGrad": [
                "op",
                "grad"
            ],
            "_DepthwiseConv2dNativeGrad": [
                "op",
                "grad"
            ],
            "_Dilation2DGrad": [
                "op",
                "grad"
            ],
            "_LRNGrad": [
                "op",
                "grad"
            ],
            "_AvgPoolGrad": [
                "op",
                "grad"
            ],
            "_AvgPoolGradGrad": [
                "op",
                "grad"
            ],
            "_MaxPoolGrad": [
                "op",
                "grad"
            ],
            "_MaxPoolGradV2": [
                "op",
                "grad"
            ],
            "_MaxPoolGradWithArgmax": [
                "op",
                "grad",
                "unused_argmax_grad"
            ],
            "_MaxPoolGradGrad": [
                "op",
                "grad"
            ],
            "_MaxPoolGradGradV2": [
                "op",
                "grad"
            ],
            "_MaxPoolGradGradGrad": [
                "op",
                "grad"
            ],
            "_FractionalMaxPoolGrad": [
                "op",
                "grad_0",
                "unused_grad_1",
                "unused_grad_2"
            ],
            "_FractionalAvgPoolGrad": [
                "op",
                "grad_0",
                "unused_grad_1",
                "unused_grad_2"
            ],
            "_BatchNormWithGlobalNormalizationGrad": [
                "op",
                "grad"
            ],
            "_BaseFusedBatchNormGrad": [
                "op",
                "version"
            ],
            "_FusedBatchNormGrad": [
                "op"
            ],
            "_FusedBatchNormV2Grad": [
                "op"
            ],
            "_FusedBatchNormV3Grad": [
                "op"
            ],
            "_BatchNormGrad": [
                "grad_y",
                "x",
                "scale",
                "pop_mean",
                "pop_var",
                "epsilon",
                "data_format",
                "is_training"
            ],
            "_FusedBatchNormGradGrad": [
                "op"
            ],
            "_FusedBatchNormGradGradV2": [
                "op"
            ],
            "_FusedBatchNormGradGradV3": [
                "op"
            ],
            "_L2LossGrad": [
                "op",
                "grad"
            ],
            "_TopKGrad": [
                "op",
                "grad",
                "_"
            ],
            "_NthElementGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.gen_control_flow_ops": {
            "abort": [
                "error_msg",
                "exit_without_error",
                "name"
            ],
            "Abort": [
                "error_msg",
                "exit_without_error",
                "name"
            ],
            "abort_eager_fallback": [
                "error_msg",
                "exit_without_error",
                "name",
                "ctx"
            ],
            "control_trigger": [
                "name"
            ],
            "ControlTrigger": [
                "name"
            ],
            "control_trigger_eager_fallback": [
                "name",
                "ctx"
            ],
            "enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "Enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "enter_eager_fallback": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name",
                "ctx"
            ],
            "_exit": [
                "data",
                "name"
            ],
            "Exit": [
                "data",
                "name"
            ],
            "_exit_eager_fallback": [
                "data",
                "name",
                "ctx"
            ],
            "loop_cond": [
                "input",
                "name"
            ],
            "LoopCond": [
                "input",
                "name"
            ],
            "loop_cond_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "merge": [
                "inputs",
                "name"
            ],
            "Merge": [
                "inputs",
                "name"
            ],
            "merge_eager_fallback": [
                "inputs",
                "name",
                "ctx"
            ],
            "next_iteration": [
                "data",
                "name"
            ],
            "NextIteration": [
                "data",
                "name"
            ],
            "next_iteration_eager_fallback": [
                "data",
                "name",
                "ctx"
            ],
            "no_op": [
                "name"
            ],
            "NoOp": [
                "name"
            ],
            "no_op_eager_fallback": [
                "name",
                "ctx"
            ],
            "ref_enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "RefEnter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "ref_enter_eager_fallback": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name",
                "ctx"
            ],
            "ref_exit": [
                "data",
                "name"
            ],
            "RefExit": [
                "data",
                "name"
            ],
            "ref_exit_eager_fallback": [
                "data",
                "name",
                "ctx"
            ],
            "ref_merge": [
                "inputs",
                "name"
            ],
            "RefMerge": [
                "inputs",
                "name"
            ],
            "ref_merge_eager_fallback": [
                "inputs",
                "name",
                "ctx"
            ],
            "ref_next_iteration": [
                "data",
                "name"
            ],
            "RefNextIteration": [
                "data",
                "name"
            ],
            "ref_next_iteration_eager_fallback": [
                "data",
                "name",
                "ctx"
            ],
            "ref_select": [
                "index",
                "inputs",
                "name"
            ],
            "RefSelect": [
                "index",
                "inputs",
                "name"
            ],
            "ref_select_eager_fallback": [
                "index",
                "inputs",
                "name",
                "ctx"
            ],
            "ref_switch": [
                "data",
                "pred",
                "name"
            ],
            "RefSwitch": [
                "data",
                "pred",
                "name"
            ],
            "ref_switch_eager_fallback": [
                "data",
                "pred",
                "name",
                "ctx"
            ],
            "switch": [
                "data",
                "pred",
                "name"
            ],
            "Switch": [
                "data",
                "pred",
                "name"
            ],
            "switch_eager_fallback": [
                "data",
                "pred",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_dataset_ops": {
            "anonymous_iterator": [
                "output_types",
                "output_shapes",
                "name"
            ],
            "AnonymousIterator": [
                "output_types",
                "output_shapes",
                "name"
            ],
            "anonymous_iterator_eager_fallback": [
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "anonymous_iterator_v2": [
                "output_types",
                "output_shapes",
                "name"
            ],
            "AnonymousIteratorV2": [
                "output_types",
                "output_shapes",
                "name"
            ],
            "anonymous_iterator_v2_eager_fallback": [
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "anonymous_memory_cache": [
                "name"
            ],
            "AnonymousMemoryCache": [
                "name"
            ],
            "anonymous_memory_cache_eager_fallback": [
                "name",
                "ctx"
            ],
            "anonymous_multi_device_iterator": [
                "devices",
                "output_types",
                "output_shapes",
                "name"
            ],
            "AnonymousMultiDeviceIterator": [
                "devices",
                "output_types",
                "output_shapes",
                "name"
            ],
            "anonymous_multi_device_iterator_eager_fallback": [
                "devices",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "anonymous_random_seed_generator": [
                "seed",
                "seed2",
                "name"
            ],
            "AnonymousRandomSeedGenerator": [
                "seed",
                "seed2",
                "name"
            ],
            "anonymous_random_seed_generator_eager_fallback": [
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "batch_dataset": [
                "input_dataset",
                "batch_size",
                "output_types",
                "output_shapes",
                "name"
            ],
            "BatchDataset": [
                "input_dataset",
                "batch_size",
                "output_types",
                "output_shapes",
                "name"
            ],
            "batch_dataset_eager_fallback": [
                "input_dataset",
                "batch_size",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "batch_dataset_v2": [
                "input_dataset",
                "batch_size",
                "drop_remainder",
                "output_types",
                "output_shapes",
                "parallel_copy",
                "name"
            ],
            "BatchDatasetV2": [
                "input_dataset",
                "batch_size",
                "drop_remainder",
                "output_types",
                "output_shapes",
                "parallel_copy",
                "name"
            ],
            "batch_dataset_v2_eager_fallback": [
                "input_dataset",
                "batch_size",
                "drop_remainder",
                "output_types",
                "output_shapes",
                "parallel_copy",
                "name",
                "ctx"
            ],
            "cache_dataset": [
                "input_dataset",
                "filename",
                "output_types",
                "output_shapes",
                "name"
            ],
            "CacheDataset": [
                "input_dataset",
                "filename",
                "output_types",
                "output_shapes",
                "name"
            ],
            "cache_dataset_eager_fallback": [
                "input_dataset",
                "filename",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "cache_dataset_v2": [
                "input_dataset",
                "filename",
                "cache",
                "output_types",
                "output_shapes",
                "name"
            ],
            "CacheDatasetV2": [
                "input_dataset",
                "filename",
                "cache",
                "output_types",
                "output_shapes",
                "name"
            ],
            "cache_dataset_v2_eager_fallback": [
                "input_dataset",
                "filename",
                "cache",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "concatenate_dataset": [
                "input_dataset",
                "another_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ConcatenateDataset": [
                "input_dataset",
                "another_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "concatenate_dataset_eager_fallback": [
                "input_dataset",
                "another_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "dataset_to_graph": [
                "input_dataset",
                "stateful_whitelist",
                "name"
            ],
            "DatasetToGraph": [
                "input_dataset",
                "stateful_whitelist",
                "name"
            ],
            "dataset_to_graph_eager_fallback": [
                "input_dataset",
                "stateful_whitelist",
                "name",
                "ctx"
            ],
            "dataset_to_single_element": [
                "dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "DatasetToSingleElement": [
                "dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "dataset_to_single_element_eager_fallback": [
                "dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "delete_iterator": [
                "handle",
                "deleter",
                "name"
            ],
            "DeleteIterator": [
                "handle",
                "deleter",
                "name"
            ],
            "delete_iterator_eager_fallback": [
                "handle",
                "deleter",
                "name",
                "ctx"
            ],
            "delete_memory_cache": [
                "handle",
                "deleter",
                "name"
            ],
            "DeleteMemoryCache": [
                "handle",
                "deleter",
                "name"
            ],
            "delete_memory_cache_eager_fallback": [
                "handle",
                "deleter",
                "name",
                "ctx"
            ],
            "delete_multi_device_iterator": [
                "multi_device_iterator",
                "iterators",
                "deleter",
                "name"
            ],
            "DeleteMultiDeviceIterator": [
                "multi_device_iterator",
                "iterators",
                "deleter",
                "name"
            ],
            "delete_multi_device_iterator_eager_fallback": [
                "multi_device_iterator",
                "iterators",
                "deleter",
                "name",
                "ctx"
            ],
            "delete_random_seed_generator": [
                "handle",
                "deleter",
                "name"
            ],
            "DeleteRandomSeedGenerator": [
                "handle",
                "deleter",
                "name"
            ],
            "delete_random_seed_generator_eager_fallback": [
                "handle",
                "deleter",
                "name",
                "ctx"
            ],
            "deserialize_iterator": [
                "resource_handle",
                "serialized",
                "name"
            ],
            "DeserializeIterator": [
                "resource_handle",
                "serialized",
                "name"
            ],
            "deserialize_iterator_eager_fallback": [
                "resource_handle",
                "serialized",
                "name",
                "ctx"
            ],
            "filter_by_last_component_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "FilterByLastComponentDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name"
            ],
            "filter_by_last_component_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "filter_dataset": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name"
            ],
            "FilterDataset": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name"
            ],
            "filter_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "predicate",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "fixed_length_record_dataset": [
                "filenames",
                "header_bytes",
                "record_bytes",
                "footer_bytes",
                "buffer_size",
                "name"
            ],
            "FixedLengthRecordDataset": [
                "filenames",
                "header_bytes",
                "record_bytes",
                "footer_bytes",
                "buffer_size",
                "name"
            ],
            "fixed_length_record_dataset_eager_fallback": [
                "filenames",
                "header_bytes",
                "record_bytes",
                "footer_bytes",
                "buffer_size",
                "name",
                "ctx"
            ],
            "fixed_length_record_dataset_v2": [
                "filenames",
                "header_bytes",
                "record_bytes",
                "footer_bytes",
                "buffer_size",
                "compression_type",
                "name"
            ],
            "FixedLengthRecordDatasetV2": [
                "filenames",
                "header_bytes",
                "record_bytes",
                "footer_bytes",
                "buffer_size",
                "compression_type",
                "name"
            ],
            "fixed_length_record_dataset_v2_eager_fallback": [
                "filenames",
                "header_bytes",
                "record_bytes",
                "footer_bytes",
                "buffer_size",
                "compression_type",
                "name",
                "ctx"
            ],
            "flat_map_dataset": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "FlatMapDataset": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "flat_map_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "generator_dataset": [
                "init_func_other_args",
                "next_func_other_args",
                "finalize_func_other_args",
                "init_func",
                "next_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "GeneratorDataset": [
                "init_func_other_args",
                "next_func_other_args",
                "finalize_func_other_args",
                "init_func",
                "next_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name"
            ],
            "generator_dataset_eager_fallback": [
                "init_func_other_args",
                "next_func_other_args",
                "finalize_func_other_args",
                "init_func",
                "next_func",
                "finalize_func",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "interleave_dataset": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "InterleaveDataset": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "f",
                "output_types",
                "output_shapes",
                "name"
            ],
            "interleave_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "f",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator": [
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name"
            ],
            "Iterator": [
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name"
            ],
            "iterator_eager_fallback": [
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator_from_string_handle": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name"
            ],
            "IteratorFromStringHandle": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name"
            ],
            "iterator_from_string_handle_eager_fallback": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator_from_string_handle_v2": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name"
            ],
            "IteratorFromStringHandleV2": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name"
            ],
            "iterator_from_string_handle_v2_eager_fallback": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator_get_next": [
                "iterator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "IteratorGetNext": [
                "iterator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "iterator_get_next_eager_fallback": [
                "iterator",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator_get_next_as_optional": [
                "iterator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "IteratorGetNextAsOptional": [
                "iterator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "iterator_get_next_as_optional_eager_fallback": [
                "iterator",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator_get_next_sync": [
                "iterator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "IteratorGetNextSync": [
                "iterator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "iterator_get_next_sync_eager_fallback": [
                "iterator",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "iterator_to_string_handle": [
                "resource_handle",
                "name"
            ],
            "IteratorToStringHandle": [
                "resource_handle",
                "name"
            ],
            "iterator_to_string_handle_eager_fallback": [
                "resource_handle",
                "name",
                "ctx"
            ],
            "iterator_v2": [
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name"
            ],
            "IteratorV2": [
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name"
            ],
            "iterator_v2_eager_fallback": [
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "make_iterator": [
                "dataset",
                "iterator",
                "name"
            ],
            "MakeIterator": [
                "dataset",
                "iterator",
                "name"
            ],
            "make_iterator_eager_fallback": [
                "dataset",
                "iterator",
                "name",
                "ctx"
            ],
            "map_dataset": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "preserve_cardinality",
                "name"
            ],
            "MapDataset": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "preserve_cardinality",
                "name"
            ],
            "map_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "preserve_cardinality",
                "name",
                "ctx"
            ],
            "map_defun": [
                "arguments",
                "captured_inputs",
                "output_types",
                "output_shapes",
                "f",
                "max_intra_op_parallelism",
                "name"
            ],
            "MapDefun": [
                "arguments",
                "captured_inputs",
                "output_types",
                "output_shapes",
                "f",
                "max_intra_op_parallelism",
                "name"
            ],
            "map_defun_eager_fallback": [
                "arguments",
                "captured_inputs",
                "output_types",
                "output_shapes",
                "f",
                "max_intra_op_parallelism",
                "name",
                "ctx"
            ],
            "model_dataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "algorithm",
                "cpu_budget",
                "name"
            ],
            "ModelDataset": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "algorithm",
                "cpu_budget",
                "name"
            ],
            "model_dataset_eager_fallback": [
                "input_dataset",
                "output_types",
                "output_shapes",
                "algorithm",
                "cpu_budget",
                "name",
                "ctx"
            ],
            "multi_device_iterator": [
                "devices",
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name"
            ],
            "MultiDeviceIterator": [
                "devices",
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name"
            ],
            "multi_device_iterator_eager_fallback": [
                "devices",
                "shared_name",
                "container",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "multi_device_iterator_from_string_handle": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name"
            ],
            "MultiDeviceIteratorFromStringHandle": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name"
            ],
            "multi_device_iterator_from_string_handle_eager_fallback": [
                "string_handle",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "multi_device_iterator_get_next_from_shard": [
                "multi_device_iterator",
                "shard_num",
                "incarnation_id",
                "output_types",
                "output_shapes",
                "name"
            ],
            "MultiDeviceIteratorGetNextFromShard": [
                "multi_device_iterator",
                "shard_num",
                "incarnation_id",
                "output_types",
                "output_shapes",
                "name"
            ],
            "multi_device_iterator_get_next_from_shard_eager_fallback": [
                "multi_device_iterator",
                "shard_num",
                "incarnation_id",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "multi_device_iterator_init": [
                "dataset",
                "multi_device_iterator",
                "max_buffer_size",
                "name"
            ],
            "MultiDeviceIteratorInit": [
                "dataset",
                "multi_device_iterator",
                "max_buffer_size",
                "name"
            ],
            "multi_device_iterator_init_eager_fallback": [
                "dataset",
                "multi_device_iterator",
                "max_buffer_size",
                "name",
                "ctx"
            ],
            "multi_device_iterator_to_string_handle": [
                "multi_device_iterator",
                "name"
            ],
            "MultiDeviceIteratorToStringHandle": [
                "multi_device_iterator",
                "name"
            ],
            "multi_device_iterator_to_string_handle_eager_fallback": [
                "multi_device_iterator",
                "name",
                "ctx"
            ],
            "one_shot_iterator": [
                "dataset_factory",
                "output_types",
                "output_shapes",
                "container",
                "shared_name",
                "name"
            ],
            "OneShotIterator": [
                "dataset_factory",
                "output_types",
                "output_shapes",
                "container",
                "shared_name",
                "name"
            ],
            "one_shot_iterator_eager_fallback": [
                "dataset_factory",
                "output_types",
                "output_shapes",
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "optimize_dataset": [
                "input_dataset",
                "optimizations",
                "output_types",
                "output_shapes",
                "optimization_configs",
                "name"
            ],
            "OptimizeDataset": [
                "input_dataset",
                "optimizations",
                "output_types",
                "output_shapes",
                "optimization_configs",
                "name"
            ],
            "optimize_dataset_eager_fallback": [
                "input_dataset",
                "optimizations",
                "output_types",
                "output_shapes",
                "optimization_configs",
                "name",
                "ctx"
            ],
            "optional_from_value": [
                "components",
                "name"
            ],
            "OptionalFromValue": [
                "components",
                "name"
            ],
            "optional_from_value_eager_fallback": [
                "components",
                "name",
                "ctx"
            ],
            "optional_get_value": [
                "optional",
                "output_types",
                "output_shapes",
                "name"
            ],
            "OptionalGetValue": [
                "optional",
                "output_types",
                "output_shapes",
                "name"
            ],
            "optional_get_value_eager_fallback": [
                "optional",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "optional_has_value": [
                "optional",
                "name"
            ],
            "OptionalHasValue": [
                "optional",
                "name"
            ],
            "optional_has_value_eager_fallback": [
                "optional",
                "name",
                "ctx"
            ],
            "optional_none": [
                "name"
            ],
            "OptionalNone": [
                "name"
            ],
            "optional_none_eager_fallback": [
                "name",
                "ctx"
            ],
            "padded_batch_dataset": [
                "input_dataset",
                "batch_size",
                "padded_shapes",
                "padding_values",
                "output_shapes",
                "name"
            ],
            "PaddedBatchDataset": [
                "input_dataset",
                "batch_size",
                "padded_shapes",
                "padding_values",
                "output_shapes",
                "name"
            ],
            "padded_batch_dataset_eager_fallback": [
                "input_dataset",
                "batch_size",
                "padded_shapes",
                "padding_values",
                "output_shapes",
                "name",
                "ctx"
            ],
            "padded_batch_dataset_v2": [
                "input_dataset",
                "batch_size",
                "padded_shapes",
                "padding_values",
                "drop_remainder",
                "output_shapes",
                "parallel_copy",
                "name"
            ],
            "PaddedBatchDatasetV2": [
                "input_dataset",
                "batch_size",
                "padded_shapes",
                "padding_values",
                "drop_remainder",
                "output_shapes",
                "parallel_copy",
                "name"
            ],
            "padded_batch_dataset_v2_eager_fallback": [
                "input_dataset",
                "batch_size",
                "padded_shapes",
                "padding_values",
                "drop_remainder",
                "output_shapes",
                "parallel_copy",
                "name",
                "ctx"
            ],
            "parallel_interleave_dataset_v2": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "num_parallel_calls",
                "f",
                "output_types",
                "output_shapes",
                "sloppy",
                "name"
            ],
            "ParallelInterleaveDatasetV2": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "num_parallel_calls",
                "f",
                "output_types",
                "output_shapes",
                "sloppy",
                "name"
            ],
            "parallel_interleave_dataset_v2_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "cycle_length",
                "block_length",
                "num_parallel_calls",
                "f",
                "output_types",
                "output_shapes",
                "sloppy",
                "name",
                "ctx"
            ],
            "parallel_map_dataset": [
                "input_dataset",
                "other_arguments",
                "num_parallel_calls",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "sloppy",
                "preserve_cardinality",
                "name"
            ],
            "ParallelMapDataset": [
                "input_dataset",
                "other_arguments",
                "num_parallel_calls",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "sloppy",
                "preserve_cardinality",
                "name"
            ],
            "parallel_map_dataset_eager_fallback": [
                "input_dataset",
                "other_arguments",
                "num_parallel_calls",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "sloppy",
                "preserve_cardinality",
                "name",
                "ctx"
            ],
            "prefetch_dataset": [
                "input_dataset",
                "buffer_size",
                "output_types",
                "output_shapes",
                "slack_period",
                "legacy_autotune",
                "name"
            ],
            "PrefetchDataset": [
                "input_dataset",
                "buffer_size",
                "output_types",
                "output_shapes",
                "slack_period",
                "legacy_autotune",
                "name"
            ],
            "prefetch_dataset_eager_fallback": [
                "input_dataset",
                "buffer_size",
                "output_types",
                "output_shapes",
                "slack_period",
                "legacy_autotune",
                "name",
                "ctx"
            ],
            "range_dataset": [
                "start",
                "stop",
                "step",
                "output_types",
                "output_shapes",
                "name"
            ],
            "RangeDataset": [
                "start",
                "stop",
                "step",
                "output_types",
                "output_shapes",
                "name"
            ],
            "range_dataset_eager_fallback": [
                "start",
                "stop",
                "step",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "reduce_dataset": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "name"
            ],
            "ReduceDataset": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "name"
            ],
            "reduce_dataset_eager_fallback": [
                "input_dataset",
                "initial_state",
                "other_arguments",
                "f",
                "output_types",
                "output_shapes",
                "use_inter_op_parallelism",
                "name",
                "ctx"
            ],
            "repeat_dataset": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "RepeatDataset": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "repeat_dataset_eager_fallback": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "serialize_iterator": [
                "resource_handle",
                "name"
            ],
            "SerializeIterator": [
                "resource_handle",
                "name"
            ],
            "serialize_iterator_eager_fallback": [
                "resource_handle",
                "name",
                "ctx"
            ],
            "shard_dataset": [
                "input_dataset",
                "num_shards",
                "index",
                "output_types",
                "output_shapes",
                "require_non_empty",
                "name"
            ],
            "ShardDataset": [
                "input_dataset",
                "num_shards",
                "index",
                "output_types",
                "output_shapes",
                "require_non_empty",
                "name"
            ],
            "shard_dataset_eager_fallback": [
                "input_dataset",
                "num_shards",
                "index",
                "output_types",
                "output_shapes",
                "require_non_empty",
                "name",
                "ctx"
            ],
            "shuffle_and_repeat_dataset": [
                "input_dataset",
                "buffer_size",
                "seed",
                "seed2",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ShuffleAndRepeatDataset": [
                "input_dataset",
                "buffer_size",
                "seed",
                "seed2",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "shuffle_and_repeat_dataset_eager_fallback": [
                "input_dataset",
                "buffer_size",
                "seed",
                "seed2",
                "count",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "shuffle_dataset": [
                "input_dataset",
                "buffer_size",
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "reshuffle_each_iteration",
                "name"
            ],
            "ShuffleDataset": [
                "input_dataset",
                "buffer_size",
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "reshuffle_each_iteration",
                "name"
            ],
            "shuffle_dataset_eager_fallback": [
                "input_dataset",
                "buffer_size",
                "seed",
                "seed2",
                "output_types",
                "output_shapes",
                "reshuffle_each_iteration",
                "name",
                "ctx"
            ],
            "shuffle_dataset_v2": [
                "input_dataset",
                "buffer_size",
                "seed_generator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ShuffleDatasetV2": [
                "input_dataset",
                "buffer_size",
                "seed_generator",
                "output_types",
                "output_shapes",
                "name"
            ],
            "shuffle_dataset_v2_eager_fallback": [
                "input_dataset",
                "buffer_size",
                "seed_generator",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "skip_dataset": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "SkipDataset": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "skip_dataset_eager_fallback": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "sparse_tensor_slice_dataset": [
                "indices",
                "values",
                "dense_shape",
                "name"
            ],
            "SparseTensorSliceDataset": [
                "indices",
                "values",
                "dense_shape",
                "name"
            ],
            "sparse_tensor_slice_dataset_eager_fallback": [
                "indices",
                "values",
                "dense_shape",
                "name",
                "ctx"
            ],
            "tf_record_dataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "name"
            ],
            "TFRecordDataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "name"
            ],
            "tf_record_dataset_eager_fallback": [
                "filenames",
                "compression_type",
                "buffer_size",
                "name",
                "ctx"
            ],
            "take_dataset": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "TakeDataset": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name"
            ],
            "take_dataset_eager_fallback": [
                "input_dataset",
                "count",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "tensor_dataset": [
                "components",
                "output_shapes",
                "name"
            ],
            "TensorDataset": [
                "components",
                "output_shapes",
                "name"
            ],
            "tensor_dataset_eager_fallback": [
                "components",
                "output_shapes",
                "name",
                "ctx"
            ],
            "tensor_slice_dataset": [
                "components",
                "output_shapes",
                "name"
            ],
            "TensorSliceDataset": [
                "components",
                "output_shapes",
                "name"
            ],
            "tensor_slice_dataset_eager_fallback": [
                "components",
                "output_shapes",
                "name",
                "ctx"
            ],
            "text_line_dataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "name"
            ],
            "TextLineDataset": [
                "filenames",
                "compression_type",
                "buffer_size",
                "name"
            ],
            "text_line_dataset_eager_fallback": [
                "filenames",
                "compression_type",
                "buffer_size",
                "name",
                "ctx"
            ],
            "unwrap_dataset_variant": [
                "input_handle",
                "name"
            ],
            "UnwrapDatasetVariant": [
                "input_handle",
                "name"
            ],
            "unwrap_dataset_variant_eager_fallback": [
                "input_handle",
                "name",
                "ctx"
            ],
            "window_dataset": [
                "input_dataset",
                "size",
                "shift",
                "stride",
                "drop_remainder",
                "output_types",
                "output_shapes",
                "name"
            ],
            "WindowDataset": [
                "input_dataset",
                "size",
                "shift",
                "stride",
                "drop_remainder",
                "output_types",
                "output_shapes",
                "name"
            ],
            "window_dataset_eager_fallback": [
                "input_dataset",
                "size",
                "shift",
                "stride",
                "drop_remainder",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "wrap_dataset_variant": [
                "input_handle",
                "name"
            ],
            "WrapDatasetVariant": [
                "input_handle",
                "name"
            ],
            "wrap_dataset_variant_eager_fallback": [
                "input_handle",
                "name",
                "ctx"
            ],
            "zip_dataset": [
                "input_datasets",
                "output_types",
                "output_shapes",
                "name"
            ],
            "ZipDataset": [
                "input_datasets",
                "output_types",
                "output_shapes",
                "name"
            ],
            "zip_dataset_eager_fallback": [
                "input_datasets",
                "output_types",
                "output_shapes",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.unconnected_gradients": {
            "UnconnectedGradients": {}
        },
        "tensorflow_core.python.ops.gradients_impl": {
            "gradients": [
                "ys",
                "xs",
                "grad_ys",
                "name",
                "colocate_gradients_with_ops",
                "gate_gradients",
                "aggregation_method",
                "stop_gradients",
                "unconnected_gradients"
            ],
            "gradients_v2": [
                "ys",
                "xs",
                "grad_ys",
                "name",
                "gate_gradients",
                "aggregation_method",
                "stop_gradients",
                "unconnected_gradients"
            ],
            "_hessian_vector_product": [
                "ys",
                "xs",
                "v"
            ],
            "hessians": [
                "ys",
                "xs",
                "name",
                "colocate_gradients_with_ops",
                "gate_gradients",
                "aggregation_method"
            ],
            "HessiansV2": [
                "ys",
                "xs",
                "gate_gradients",
                "aggregation_method",
                "name"
            ]
        },
        "tensorflow_core.python.ops.numerics": {
            "verify_tensor_all_finite": [
                "t",
                "msg",
                "name",
                "x",
                "message"
            ],
            "verify_tensor_all_finite_v2": [
                "x",
                "message",
                "name"
            ],
            "add_check_numerics_ops": []
        },
        "tensorflow_core.python.ops.histogram_ops": {
            "histogram_fixed_width_bins": [
                "values",
                "value_range",
                "nbins",
                "dtype",
                "name"
            ],
            "histogram_fixed_width": [
                "values",
                "value_range",
                "nbins",
                "dtype",
                "name"
            ]
        },
        "tensorflow_core.python.ops.nn": {},
        "tensorflow_core.python.ops.gen_audio_ops": {
            "audio_spectrogram": [
                "input",
                "window_size",
                "stride",
                "magnitude_squared",
                "name"
            ],
            "AudioSpectrogram": [
                "input",
                "window_size",
                "stride",
                "magnitude_squared",
                "name"
            ],
            "audio_spectrogram_eager_fallback": [
                "input",
                "window_size",
                "stride",
                "magnitude_squared",
                "name",
                "ctx"
            ],
            "decode_wav": [
                "contents",
                "desired_channels",
                "desired_samples",
                "name"
            ],
            "DecodeWav": [
                "contents",
                "desired_channels",
                "desired_samples",
                "name"
            ],
            "decode_wav_eager_fallback": [
                "contents",
                "desired_channels",
                "desired_samples",
                "name",
                "ctx"
            ],
            "encode_wav": [
                "audio",
                "sample_rate",
                "name"
            ],
            "EncodeWav": [
                "audio",
                "sample_rate",
                "name"
            ],
            "encode_wav_eager_fallback": [
                "audio",
                "sample_rate",
                "name",
                "ctx"
            ],
            "mfcc": [
                "spectrogram",
                "sample_rate",
                "upper_frequency_limit",
                "lower_frequency_limit",
                "filterbank_channel_count",
                "dct_coefficient_count",
                "name"
            ],
            "Mfcc": [
                "spectrogram",
                "sample_rate",
                "upper_frequency_limit",
                "lower_frequency_limit",
                "filterbank_channel_count",
                "dct_coefficient_count",
                "name"
            ],
            "mfcc_eager_fallback": [
                "spectrogram",
                "sample_rate",
                "upper_frequency_limit",
                "lower_frequency_limit",
                "filterbank_channel_count",
                "dct_coefficient_count",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.batch_ops": {
            "batch_function": [
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "allowed_batch_sizes",
                "max_enqueued_batches",
                "autograph"
            ]
        },
        "tensorflow_core.python.ops.resource_variable_ops": {
            "get_resource_handle_data": [
                "graph_op"
            ],
            "get_eager_safe_handle_data": [
                "handle"
            ],
            "_set_handle_shapes_and_types": [
                "tensor",
                "handle_data",
                "graph_mode"
            ],
            "_combine_handle_data": [
                "handle",
                "initial_value"
            ],
            "variable_handle_from_shape_and_dtype": [
                "shape",
                "dtype",
                "shared_name",
                "name",
                "graph_mode",
                "extra_handle_data"
            ],
            "eager_safe_variable_handle": [
                "initial_value",
                "shape",
                "shared_name",
                "name",
                "graph_mode"
            ],
            "_handle_graph": [
                "handle"
            ],
            "shape_safe_assign_variable_handle": [
                "handle",
                "shape",
                "value",
                "name"
            ],
            "_maybe_set_handle_data": [
                "dtype",
                "handle",
                "tensor"
            ],
            "variable_accessed": [
                "variable"
            ],
            "_dense_var_to_tensor": [
                "var",
                "dtype",
                "name",
                "as_ref"
            ],
            "_ReadGrad": [
                "_",
                "grad"
            ],
            "variable_shape": [
                "handle",
                "out_type"
            ],
            "_GatherGrad": [
                "op",
                "grad"
            ],
            "_to_proto_fn": [
                "v",
                "export_scope"
            ],
            "_from_proto_fn": [
                "v",
                "import_scope"
            ],
            "is_resource_variable": [
                "var"
            ],
            "copy_to_graph_uninitialized": [
                "var"
            ],
            "EagerResourceDeleter": {
                "__init__": [
                    "self",
                    "handle",
                    "handle_device"
                ],
                "__del__": [
                    "self"
                ]
            },
            "BaseResourceVariable": {
                "__init__": [
                    "self",
                    "trainable",
                    "shape",
                    "dtype",
                    "handle",
                    "constraint",
                    "synchronization",
                    "aggregation",
                    "distribute_strategy",
                    "name",
                    "unique_id",
                    "handle_name",
                    "graph_element",
                    "initial_value",
                    "initializer_op",
                    "is_initialized_op",
                    "cached_value",
                    "save_slice_info",
                    "handle_deleter"
                ],
                "__repr__": [
                    "self"
                ],
                "_assign_dependencies": [
                    "self"
                ],
                "__nonzero__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "dtype": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_shape_as_list": [
                    "self"
                ],
                "_shape_tuple": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "initial_value": [
                    "self"
                ],
                "constraint": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "trainable": [
                    "self"
                ],
                "synchronization": [
                    "self"
                ],
                "aggregation": [
                    "self"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "numpy": [
                    "self"
                ],
                "count_up_to": [
                    "self",
                    "limit"
                ],
                "_read_variable_op": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "sparse_read": [
                    "self",
                    "indices",
                    "name"
                ],
                "gather_nd": [
                    "self",
                    "indices",
                    "name"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "variable_def",
                    "import_scope"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "is_initialized": [
                    "self",
                    "name"
                ],
                "assign_sub": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_add": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "_lazy_read": [
                    "self",
                    "op"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "__reduce__": [
                    "self"
                ],
                "scatter_sub": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_add": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_max": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_min": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_mul": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_div": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_update": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "batch_scatter_update": [
                    "self",
                    "sparse_delta",
                    "use_locking",
                    "name"
                ],
                "scatter_nd_sub": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "scatter_nd_add": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "scatter_nd_update": [
                    "self",
                    "indices",
                    "updates",
                    "name"
                ],
                "_strided_slice_assign": [
                    "self",
                    "begin",
                    "end",
                    "strides",
                    "value",
                    "name",
                    "begin_mask",
                    "end_mask",
                    "ellipsis_mask",
                    "new_axis_mask",
                    "shrink_axis_mask"
                ],
                "__int__": [
                    "self"
                ],
                "_dense_var_to_tensor": [
                    "self",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "__iadd__": [
                    "self",
                    "unused_other"
                ],
                "__isub__": [
                    "self",
                    "unused_other"
                ],
                "__imul__": [
                    "self",
                    "unused_other"
                ],
                "__idiv__": [
                    "self",
                    "unused_other"
                ],
                "__itruediv__": [
                    "self",
                    "unused_other"
                ],
                "__irealdiv__": [
                    "self",
                    "unused_other"
                ],
                "__ipow__": [
                    "self",
                    "unused_other"
                ]
            },
            "ResourceVariable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "dtype",
                    "variable_def",
                    "import_scope",
                    "constraint",
                    "distribute_strategy",
                    "synchronization",
                    "aggregation",
                    "shape"
                ],
                "_init_from_args": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "caching_device",
                    "name",
                    "dtype",
                    "constraint",
                    "synchronization",
                    "aggregation",
                    "distribute_strategy",
                    "shape"
                ],
                "_init_from_proto": [
                    "self",
                    "variable_def",
                    "import_scope"
                ]
            },
            "UninitializedVariable": {
                "__init__": [
                    "self",
                    "trainable",
                    "caching_device",
                    "name",
                    "shape",
                    "dtype",
                    "constraint",
                    "synchronization",
                    "aggregation",
                    "extra_handle_data",
                    "distribute_strategy"
                ]
            },
            "_UnreadVariable": {
                "__init__": [
                    "self",
                    "handle",
                    "dtype",
                    "shape",
                    "in_graph_mode",
                    "deleter",
                    "parent_op",
                    "unique_id"
                ],
                "name": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "_read_variable_op": [
                    "self"
                ],
                "op": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.manip_ops": {
            "roll": [
                "input",
                "shift",
                "axis",
                "name"
            ]
        },
        "tensorflow_core.python.ops.nn_impl": {
            "log_poisson_loss": [
                "targets",
                "log_input",
                "compute_full_loss",
                "name"
            ],
            "sigmoid_cross_entropy_with_logits": [
                "_sentinel",
                "labels",
                "logits",
                "name"
            ],
            "sigmoid_cross_entropy_with_logits_v2": [
                "labels",
                "logits",
                "name"
            ],
            "weighted_cross_entropy_with_logits_v2": [
                "labels",
                "logits",
                "pos_weight",
                "name"
            ],
            "weighted_cross_entropy_with_logits": [
                "labels",
                "logits",
                "pos_weight",
                "name",
                "targets"
            ],
            "compute_average_loss": [
                "per_example_loss",
                "sample_weight",
                "global_batch_size"
            ],
            "scale_regularization_loss": [
                "regularization_loss"
            ],
            "relu_layer": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "swish": [
                "features"
            ],
            "normalize": [
                "tensor",
                "ord",
                "axis",
                "name"
            ],
            "l2_normalize": [
                "x",
                "axis",
                "epsilon",
                "name",
                "dim"
            ],
            "l2_normalize_v2": [
                "x",
                "axis",
                "epsilon",
                "name"
            ],
            "_count_nonzero": [
                "input_tensor",
                "dtype"
            ],
            "zero_fraction": [
                "value",
                "name"
            ],
            "_enclosing_tpu_context": [],
            "depthwise_conv2d": [
                "input",
                "filter",
                "strides",
                "padding",
                "rate",
                "name",
                "data_format",
                "dilations"
            ],
            "depthwise_conv2d_v2": [
                "input",
                "filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "separable_conv2d": [
                "input",
                "depthwise_filter",
                "pointwise_filter",
                "strides",
                "padding",
                "rate",
                "name",
                "data_format",
                "dilations"
            ],
            "separable_conv2d_v2": [
                "input",
                "depthwise_filter",
                "pointwise_filter",
                "strides",
                "padding",
                "data_format",
                "dilations",
                "name"
            ],
            "sufficient_statistics": [
                "x",
                "axes",
                "shift",
                "keep_dims",
                "name",
                "keepdims"
            ],
            "sufficient_statistics_v2": [
                "x",
                "axes",
                "shift",
                "keepdims",
                "name"
            ],
            "normalize_moments": [
                "counts",
                "mean_ss",
                "variance_ss",
                "shift",
                "name"
            ],
            "moments": [
                "x",
                "axes",
                "shift",
                "name",
                "keep_dims",
                "keepdims"
            ],
            "moments_v2": [
                "x",
                "axes",
                "shift",
                "keepdims",
                "name"
            ],
            "weighted_moments": [
                "x",
                "axes",
                "frequency_weights",
                "name",
                "keep_dims",
                "keepdims"
            ],
            "weighted_moments_v2": [
                "x",
                "axes",
                "frequency_weights",
                "keepdims",
                "name"
            ],
            "batch_normalization": [
                "x",
                "mean",
                "variance",
                "offset",
                "scale",
                "variance_epsilon",
                "name"
            ],
            "fused_batch_norm": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "batch_norm_with_global_normalization": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name",
                "input",
                "mean",
                "variance"
            ],
            "batch_norm_with_global_normalization_v2": [
                "input",
                "mean",
                "variance",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_sum_rows": [
                "x"
            ],
            "_compute_sampled_logits": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "subtract_log_q",
                "remove_accidental_hits",
                "partition_strategy",
                "name",
                "seed"
            ],
            "nce_loss_v2": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "name"
            ],
            "nce_loss": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ],
            "sampled_softmax_loss_v2": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "seed",
                "name"
            ],
            "sampled_softmax_loss": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "partition_strategy",
                "name",
                "seed"
            ]
        },
        "tensorflow_core.python.ops.state_ops": {
            "variable_op": [
                "shape",
                "dtype",
                "name",
                "set_shape",
                "container",
                "shared_name"
            ],
            "variable_op_v2": [
                "shape",
                "dtype",
                "name",
                "container",
                "shared_name"
            ],
            "init_variable": [
                "v",
                "init",
                "name"
            ],
            "is_variable_initialized": [
                "ref",
                "name"
            ],
            "assign_sub": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "assign_add": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "assign": [
                "ref",
                "value",
                "validate_shape",
                "use_locking",
                "name"
            ],
            "count_up_to": [
                "ref",
                "limit",
                "name"
            ],
            "scatter_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_mul": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_div": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_max": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_min": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "batch_scatter_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ]
        },
        "tensorflow_core.python.ops.rnn_cell_impl": {
            "_hasattr": [
                "obj",
                "attr_name"
            ],
            "assert_like_rnncell": [
                "cell_name",
                "cell"
            ],
            "_concat": [
                "prefix",
                "suffix",
                "static"
            ],
            "_zero_state_tensors": [
                "state_size",
                "batch_size",
                "dtype"
            ],
            "_check_rnn_cell_input_dtypes": [
                "inputs"
            ],
            "_check_supported_dtypes": [
                "dtype"
            ],
            "RNNCell": {
                "__init__": [
                    "self",
                    "trainable",
                    "name",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_rnn_get_variable": [
                    "self",
                    "getter"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "get_initial_state": [
                    "self",
                    "inputs",
                    "batch_size",
                    "dtype"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "get_config": [
                    "self"
                ]
            },
            "LayerRNNCell": {
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "activation",
                    "reuse",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "get_config": [
                    "self"
                ]
            },
            "GRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "activation",
                    "reuse",
                    "kernel_initializer",
                    "bias_initializer",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "get_config": [
                    "self"
                ]
            },
            "LSTMStateTuple": {
                "dtype": [
                    "self"
                ]
            },
            "BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "state_is_tuple",
                    "activation",
                    "reuse",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "get_config": [
                    "self"
                ]
            },
            "LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation",
                    "reuse",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "get_config": [
                    "self"
                ]
            },
            "_RNNCellWrapperV1": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "_call_wrapped_cell": [
                    "self",
                    "inputs",
                    "state",
                    "cell_call_fn"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "DropoutWrapper": {
                "__init__": [
                    "self"
                ]
            },
            "ResidualWrapper": {
                "__init__": [
                    "self"
                ]
            },
            "DeviceWrapper": {
                "__init__": [
                    "self"
                ]
            },
            "MultiRNNCell": {
                "__init__": [
                    "self",
                    "cells",
                    "state_is_tuple"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            }
        },
        "tensorflow_core.python.ops.candidate_sampling_ops": {
            "uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "log_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "learned_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "fixed_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "name"
            ],
            "all_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "name"
            ],
            "compute_accidental_hits": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "name"
            ]
        },
        "tensorflow_core.python.ops.cudnn_rnn_grad": {
            "_cudnn_rnn_backward": [
                "op"
            ],
            "_cudnn_rnn_backward_v2": [
                "op"
            ],
            "_cudnn_rnn_backwardv3": [
                "op"
            ]
        },
        "tensorflow_core.python.ops.embedding_ops": {
            "_clip": [
                "params",
                "ids",
                "max_norm"
            ],
            "_embedding_lookup_and_transform": [
                "params",
                "ids",
                "partition_strategy",
                "name",
                "max_norm",
                "transform_fn"
            ],
            "embedding_lookup": [
                "params",
                "ids",
                "partition_strategy",
                "name",
                "validate_indices",
                "max_norm"
            ],
            "embedding_lookup_v2": [
                "params",
                "ids",
                "max_norm",
                "name"
            ],
            "embedding_lookup_sparse": [
                "params",
                "sp_ids",
                "sp_weights",
                "partition_strategy",
                "name",
                "combiner",
                "max_norm"
            ],
            "embedding_lookup_sparse_v2": [
                "params",
                "sp_ids",
                "sp_weights",
                "combiner",
                "max_norm",
                "name"
            ],
            "safe_embedding_lookup_sparse_v2": [
                "embedding_weights",
                "sparse_ids",
                "sparse_weights",
                "combiner",
                "default_id",
                "max_norm",
                "name"
            ],
            "safe_embedding_lookup_sparse": [
                "embedding_weights",
                "sparse_ids",
                "sparse_weights",
                "combiner",
                "default_id",
                "name",
                "partition_strategy",
                "max_norm"
            ],
            "_prune_invalid_ids": [
                "sparse_ids",
                "sparse_weights"
            ],
            "_prune_invalid_weights": [
                "sparse_ids",
                "sparse_weights"
            ]
        },
        "tensorflow_core.python.ops.gradients_util": {
            "_MarkReachedOps": [
                "from_ops",
                "reached_ops",
                "func_graphs"
            ],
            "_PendingCount": [
                "to_ops",
                "from_ops",
                "colocate_gradients_with_ops",
                "func_graphs",
                "xs_set"
            ],
            "_AsList": [
                "x"
            ],
            "_DefaultGradYs": [
                "grad_ys",
                "ys",
                "colocate_gradients_with_ops",
                "gradient_uid"
            ],
            "IsTrainable": [
                "tensor_or_dtype"
            ],
            "_IsBackpropagatable": [
                "tensor"
            ],
            "_VerifyGeneratedGradients": [
                "grads",
                "op"
            ],
            "_StopOps": [
                "from_ops",
                "stop_gradient_ops",
                "pending_count",
                "xs_set"
            ],
            "_maybe_colocate_with": [
                "op",
                "gradient_uid",
                "colocate_gradients_with_ops"
            ],
            "_IsPartitionedCall": [
                "op"
            ],
            "_SymGrad": [
                "op",
                "out_grads"
            ],
            "_MaybeCompile": [
                "scope",
                "op",
                "func",
                "grad_fn"
            ],
            "_RaiseNoGradWrtInitialLoopValError": [
                "op",
                "from_ops",
                "xs_set"
            ],
            "_IsFunction": [
                "graph"
            ],
            "_Captures": [
                "func_graph"
            ],
            "_MaybeCaptured": [
                "t"
            ],
            "_NonEagerInputs": [
                "op",
                "xs_set"
            ],
            "_Inputs": [
                "op",
                "xs_set"
            ],
            "_Consumers": [
                "t",
                "func_graphs"
            ],
            "_GradientsHelper": [
                "ys",
                "xs",
                "grad_ys",
                "name",
                "colocate_gradients_with_ops",
                "gate_gradients",
                "aggregation_method",
                "stop_gradients",
                "unconnected_gradients",
                "src_graph"
            ],
            "_HasAnyNotNoneGrads": [
                "grads",
                "op"
            ],
            "_UpdatePendingAndEnqueueReady": [
                "grads",
                "op",
                "queue",
                "pending_count",
                "loop_state",
                "xs_set"
            ],
            "_SetGrad": [
                "grads",
                "t",
                "grad"
            ],
            "_GetGrad": [
                "grads",
                "t",
                "unconnected_gradients"
            ],
            "_GetGrads": [
                "grads",
                "op"
            ],
            "_AccumulatorShape": [
                "inputs"
            ],
            "_LogOpGradients": [
                "op",
                "out_grads",
                "in_grads"
            ],
            "_MultiDeviceAddN": [
                "tensor_list",
                "gradient_uid"
            ],
            "_AggregatedGrads": [
                "grads",
                "op",
                "gradient_uid",
                "loop_state",
                "aggregation_method"
            ],
            "AggregationMethod": {}
        },
        "tensorflow_core.python.ops.gen_linalg_ops": {
            "batch_cholesky": [
                "input",
                "name"
            ],
            "BatchCholesky": [
                "input",
                "name"
            ],
            "batch_cholesky_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_cholesky_grad": [
                "l",
                "grad",
                "name"
            ],
            "BatchCholeskyGrad": [
                "l",
                "grad",
                "name"
            ],
            "batch_cholesky_grad_eager_fallback": [
                "l",
                "grad",
                "name",
                "ctx"
            ],
            "batch_matrix_determinant": [
                "input",
                "name"
            ],
            "BatchMatrixDeterminant": [
                "input",
                "name"
            ],
            "batch_matrix_determinant_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_matrix_inverse": [
                "input",
                "adjoint",
                "name"
            ],
            "BatchMatrixInverse": [
                "input",
                "adjoint",
                "name"
            ],
            "batch_matrix_inverse_eager_fallback": [
                "input",
                "adjoint",
                "name",
                "ctx"
            ],
            "batch_matrix_solve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "BatchMatrixSolve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "batch_matrix_solve_eager_fallback": [
                "matrix",
                "rhs",
                "adjoint",
                "name",
                "ctx"
            ],
            "batch_matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "BatchMatrixSolveLs": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "batch_matrix_solve_ls_eager_fallback": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name",
                "ctx"
            ],
            "batch_matrix_triangular_solve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "BatchMatrixTriangularSolve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "batch_matrix_triangular_solve_eager_fallback": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name",
                "ctx"
            ],
            "batch_self_adjoint_eig": [
                "input",
                "name"
            ],
            "BatchSelfAdjointEig": [
                "input",
                "name"
            ],
            "batch_self_adjoint_eig_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "batch_self_adjoint_eig_v2": [
                "input",
                "compute_v",
                "name"
            ],
            "BatchSelfAdjointEigV2": [
                "input",
                "compute_v",
                "name"
            ],
            "batch_self_adjoint_eig_v2_eager_fallback": [
                "input",
                "compute_v",
                "name",
                "ctx"
            ],
            "batch_svd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "BatchSvd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "batch_svd_eager_fallback": [
                "input",
                "compute_uv",
                "full_matrices",
                "name",
                "ctx"
            ],
            "cholesky": [
                "input",
                "name"
            ],
            "Cholesky": [
                "input",
                "name"
            ],
            "cholesky_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "cholesky_grad": [
                "l",
                "grad",
                "name"
            ],
            "CholeskyGrad": [
                "l",
                "grad",
                "name"
            ],
            "cholesky_grad_eager_fallback": [
                "l",
                "grad",
                "name",
                "ctx"
            ],
            "einsum": [
                "inputs",
                "equation",
                "name"
            ],
            "Einsum": [
                "inputs",
                "equation",
                "name"
            ],
            "einsum_eager_fallback": [
                "inputs",
                "equation",
                "name",
                "ctx"
            ],
            "log_matrix_determinant": [
                "input",
                "name"
            ],
            "LogMatrixDeterminant": [
                "input",
                "name"
            ],
            "log_matrix_determinant_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "lu": [
                "input",
                "output_idx_type",
                "name"
            ],
            "Lu": [
                "input",
                "output_idx_type",
                "name"
            ],
            "lu_eager_fallback": [
                "input",
                "output_idx_type",
                "name",
                "ctx"
            ],
            "matrix_determinant": [
                "input",
                "name"
            ],
            "MatrixDeterminant": [
                "input",
                "name"
            ],
            "matrix_determinant_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "matrix_exponential": [
                "input",
                "name"
            ],
            "MatrixExponential": [
                "input",
                "name"
            ],
            "matrix_exponential_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "matrix_inverse": [
                "input",
                "adjoint",
                "name"
            ],
            "MatrixInverse": [
                "input",
                "adjoint",
                "name"
            ],
            "matrix_inverse_eager_fallback": [
                "input",
                "adjoint",
                "name",
                "ctx"
            ],
            "matrix_logarithm": [
                "input",
                "name"
            ],
            "MatrixLogarithm": [
                "input",
                "name"
            ],
            "matrix_logarithm_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "matrix_solve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "MatrixSolve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "matrix_solve_eager_fallback": [
                "matrix",
                "rhs",
                "adjoint",
                "name",
                "ctx"
            ],
            "matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "MatrixSolveLs": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "matrix_solve_ls_eager_fallback": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name",
                "ctx"
            ],
            "matrix_square_root": [
                "input",
                "name"
            ],
            "MatrixSquareRoot": [
                "input",
                "name"
            ],
            "matrix_square_root_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "matrix_triangular_solve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "MatrixTriangularSolve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "matrix_triangular_solve_eager_fallback": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name",
                "ctx"
            ],
            "qr": [
                "input",
                "full_matrices",
                "name"
            ],
            "Qr": [
                "input",
                "full_matrices",
                "name"
            ],
            "qr_eager_fallback": [
                "input",
                "full_matrices",
                "name",
                "ctx"
            ],
            "self_adjoint_eig": [
                "input",
                "name"
            ],
            "SelfAdjointEig": [
                "input",
                "name"
            ],
            "self_adjoint_eig_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "self_adjoint_eig_v2": [
                "input",
                "compute_v",
                "name"
            ],
            "SelfAdjointEigV2": [
                "input",
                "compute_v",
                "name"
            ],
            "self_adjoint_eig_v2_eager_fallback": [
                "input",
                "compute_v",
                "name",
                "ctx"
            ],
            "svd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "Svd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "svd_eager_fallback": [
                "input",
                "compute_uv",
                "full_matrices",
                "name",
                "ctx"
            ],
            "tridiagonal_mat_mul": [
                "superdiag",
                "maindiag",
                "subdiag",
                "rhs",
                "name"
            ],
            "TridiagonalMatMul": [
                "superdiag",
                "maindiag",
                "subdiag",
                "rhs",
                "name"
            ],
            "tridiagonal_mat_mul_eager_fallback": [
                "superdiag",
                "maindiag",
                "subdiag",
                "rhs",
                "name",
                "ctx"
            ],
            "tridiagonal_solve": [
                "diagonals",
                "rhs",
                "partial_pivoting",
                "name"
            ],
            "TridiagonalSolve": [
                "diagonals",
                "rhs",
                "partial_pivoting",
                "name"
            ],
            "tridiagonal_solve_eager_fallback": [
                "diagonals",
                "rhs",
                "partial_pivoting",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gen_boosted_trees_ops": {
            "boosted_trees_aggregate_stats": [
                "node_ids",
                "gradients",
                "hessians",
                "feature",
                "max_splits",
                "num_buckets",
                "name"
            ],
            "BoostedTreesAggregateStats": [
                "node_ids",
                "gradients",
                "hessians",
                "feature",
                "max_splits",
                "num_buckets",
                "name"
            ],
            "boosted_trees_aggregate_stats_eager_fallback": [
                "node_ids",
                "gradients",
                "hessians",
                "feature",
                "max_splits",
                "num_buckets",
                "name",
                "ctx"
            ],
            "boosted_trees_bucketize": [
                "float_values",
                "bucket_boundaries",
                "name"
            ],
            "BoostedTreesBucketize": [
                "float_values",
                "bucket_boundaries",
                "name"
            ],
            "boosted_trees_bucketize_eager_fallback": [
                "float_values",
                "bucket_boundaries",
                "name",
                "ctx"
            ],
            "boosted_trees_calculate_best_feature_split": [
                "node_id_range",
                "stats_summary",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "logits_dimension",
                "split_type",
                "name"
            ],
            "BoostedTreesCalculateBestFeatureSplit": [
                "node_id_range",
                "stats_summary",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "logits_dimension",
                "split_type",
                "name"
            ],
            "boosted_trees_calculate_best_feature_split_eager_fallback": [
                "node_id_range",
                "stats_summary",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "logits_dimension",
                "split_type",
                "name",
                "ctx"
            ],
            "boosted_trees_calculate_best_gains_per_feature": [
                "node_id_range",
                "stats_summary_list",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "max_splits",
                "name"
            ],
            "BoostedTreesCalculateBestGainsPerFeature": [
                "node_id_range",
                "stats_summary_list",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "max_splits",
                "name"
            ],
            "boosted_trees_calculate_best_gains_per_feature_eager_fallback": [
                "node_id_range",
                "stats_summary_list",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "max_splits",
                "name",
                "ctx"
            ],
            "boosted_trees_center_bias": [
                "tree_ensemble_handle",
                "mean_gradients",
                "mean_hessians",
                "l1",
                "l2",
                "name"
            ],
            "BoostedTreesCenterBias": [
                "tree_ensemble_handle",
                "mean_gradients",
                "mean_hessians",
                "l1",
                "l2",
                "name"
            ],
            "boosted_trees_center_bias_eager_fallback": [
                "tree_ensemble_handle",
                "mean_gradients",
                "mean_hessians",
                "l1",
                "l2",
                "name",
                "ctx"
            ],
            "boosted_trees_create_ensemble": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_serialized",
                "name"
            ],
            "BoostedTreesCreateEnsemble": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_serialized",
                "name"
            ],
            "boosted_trees_create_ensemble_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_serialized",
                "name",
                "ctx"
            ],
            "boosted_trees_create_quantile_stream_resource": [
                "quantile_stream_resource_handle",
                "epsilon",
                "num_streams",
                "max_elements",
                "name"
            ],
            "BoostedTreesCreateQuantileStreamResource": [
                "quantile_stream_resource_handle",
                "epsilon",
                "num_streams",
                "max_elements",
                "name"
            ],
            "boosted_trees_create_quantile_stream_resource_eager_fallback": [
                "quantile_stream_resource_handle",
                "epsilon",
                "num_streams",
                "max_elements",
                "name",
                "ctx"
            ],
            "boosted_trees_deserialize_ensemble": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_serialized",
                "name"
            ],
            "BoostedTreesDeserializeEnsemble": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_serialized",
                "name"
            ],
            "boosted_trees_deserialize_ensemble_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_serialized",
                "name",
                "ctx"
            ],
            "boosted_trees_ensemble_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "BoostedTreesEnsembleResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "boosted_trees_ensemble_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "boosted_trees_example_debug_outputs": [
                "tree_ensemble_handle",
                "bucketized_features",
                "logits_dimension",
                "name"
            ],
            "BoostedTreesExampleDebugOutputs": [
                "tree_ensemble_handle",
                "bucketized_features",
                "logits_dimension",
                "name"
            ],
            "boosted_trees_example_debug_outputs_eager_fallback": [
                "tree_ensemble_handle",
                "bucketized_features",
                "logits_dimension",
                "name",
                "ctx"
            ],
            "boosted_trees_flush_quantile_summaries": [
                "quantile_stream_resource_handle",
                "num_features",
                "name"
            ],
            "BoostedTreesFlushQuantileSummaries": [
                "quantile_stream_resource_handle",
                "num_features",
                "name"
            ],
            "boosted_trees_flush_quantile_summaries_eager_fallback": [
                "quantile_stream_resource_handle",
                "num_features",
                "name",
                "ctx"
            ],
            "boosted_trees_get_ensemble_states": [
                "tree_ensemble_handle",
                "name"
            ],
            "BoostedTreesGetEnsembleStates": [
                "tree_ensemble_handle",
                "name"
            ],
            "boosted_trees_get_ensemble_states_eager_fallback": [
                "tree_ensemble_handle",
                "name",
                "ctx"
            ],
            "boosted_trees_make_quantile_summaries": [
                "float_values",
                "example_weights",
                "epsilon",
                "name"
            ],
            "BoostedTreesMakeQuantileSummaries": [
                "float_values",
                "example_weights",
                "epsilon",
                "name"
            ],
            "boosted_trees_make_quantile_summaries_eager_fallback": [
                "float_values",
                "example_weights",
                "epsilon",
                "name",
                "ctx"
            ],
            "boosted_trees_make_stats_summary": [
                "node_ids",
                "gradients",
                "hessians",
                "bucketized_features_list",
                "max_splits",
                "num_buckets",
                "name"
            ],
            "BoostedTreesMakeStatsSummary": [
                "node_ids",
                "gradients",
                "hessians",
                "bucketized_features_list",
                "max_splits",
                "num_buckets",
                "name"
            ],
            "boosted_trees_make_stats_summary_eager_fallback": [
                "node_ids",
                "gradients",
                "hessians",
                "bucketized_features_list",
                "max_splits",
                "num_buckets",
                "name",
                "ctx"
            ],
            "boosted_trees_predict": [
                "tree_ensemble_handle",
                "bucketized_features",
                "logits_dimension",
                "name"
            ],
            "BoostedTreesPredict": [
                "tree_ensemble_handle",
                "bucketized_features",
                "logits_dimension",
                "name"
            ],
            "boosted_trees_predict_eager_fallback": [
                "tree_ensemble_handle",
                "bucketized_features",
                "logits_dimension",
                "name",
                "ctx"
            ],
            "boosted_trees_quantile_stream_resource_add_summaries": [
                "quantile_stream_resource_handle",
                "summaries",
                "name"
            ],
            "BoostedTreesQuantileStreamResourceAddSummaries": [
                "quantile_stream_resource_handle",
                "summaries",
                "name"
            ],
            "boosted_trees_quantile_stream_resource_add_summaries_eager_fallback": [
                "quantile_stream_resource_handle",
                "summaries",
                "name",
                "ctx"
            ],
            "boosted_trees_quantile_stream_resource_deserialize": [
                "quantile_stream_resource_handle",
                "bucket_boundaries",
                "name"
            ],
            "BoostedTreesQuantileStreamResourceDeserialize": [
                "quantile_stream_resource_handle",
                "bucket_boundaries",
                "name"
            ],
            "boosted_trees_quantile_stream_resource_deserialize_eager_fallback": [
                "quantile_stream_resource_handle",
                "bucket_boundaries",
                "name",
                "ctx"
            ],
            "boosted_trees_quantile_stream_resource_flush": [
                "quantile_stream_resource_handle",
                "num_buckets",
                "generate_quantiles",
                "name"
            ],
            "BoostedTreesQuantileStreamResourceFlush": [
                "quantile_stream_resource_handle",
                "num_buckets",
                "generate_quantiles",
                "name"
            ],
            "boosted_trees_quantile_stream_resource_flush_eager_fallback": [
                "quantile_stream_resource_handle",
                "num_buckets",
                "generate_quantiles",
                "name",
                "ctx"
            ],
            "boosted_trees_quantile_stream_resource_get_bucket_boundaries": [
                "quantile_stream_resource_handle",
                "num_features",
                "name"
            ],
            "BoostedTreesQuantileStreamResourceGetBucketBoundaries": [
                "quantile_stream_resource_handle",
                "num_features",
                "name"
            ],
            "boosted_trees_quantile_stream_resource_get_bucket_boundaries_eager_fallback": [
                "quantile_stream_resource_handle",
                "num_features",
                "name",
                "ctx"
            ],
            "boosted_trees_quantile_stream_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "BoostedTreesQuantileStreamResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "boosted_trees_quantile_stream_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "boosted_trees_serialize_ensemble": [
                "tree_ensemble_handle",
                "name"
            ],
            "BoostedTreesSerializeEnsemble": [
                "tree_ensemble_handle",
                "name"
            ],
            "boosted_trees_serialize_ensemble_eager_fallback": [
                "tree_ensemble_handle",
                "name",
                "ctx"
            ],
            "boosted_trees_sparse_aggregate_stats": [
                "node_ids",
                "gradients",
                "hessians",
                "feature_indices",
                "feature_values",
                "feature_shape",
                "max_splits",
                "num_buckets",
                "name"
            ],
            "BoostedTreesSparseAggregateStats": [
                "node_ids",
                "gradients",
                "hessians",
                "feature_indices",
                "feature_values",
                "feature_shape",
                "max_splits",
                "num_buckets",
                "name"
            ],
            "boosted_trees_sparse_aggregate_stats_eager_fallback": [
                "node_ids",
                "gradients",
                "hessians",
                "feature_indices",
                "feature_values",
                "feature_shape",
                "max_splits",
                "num_buckets",
                "name",
                "ctx"
            ],
            "boosted_trees_sparse_calculate_best_feature_split": [
                "node_id_range",
                "stats_summary_indices",
                "stats_summary_values",
                "stats_summary_shape",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "logits_dimension",
                "split_type",
                "name"
            ],
            "BoostedTreesSparseCalculateBestFeatureSplit": [
                "node_id_range",
                "stats_summary_indices",
                "stats_summary_values",
                "stats_summary_shape",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "logits_dimension",
                "split_type",
                "name"
            ],
            "boosted_trees_sparse_calculate_best_feature_split_eager_fallback": [
                "node_id_range",
                "stats_summary_indices",
                "stats_summary_values",
                "stats_summary_shape",
                "l1",
                "l2",
                "tree_complexity",
                "min_node_weight",
                "logits_dimension",
                "split_type",
                "name",
                "ctx"
            ],
            "boosted_trees_training_predict": [
                "tree_ensemble_handle",
                "cached_tree_ids",
                "cached_node_ids",
                "bucketized_features",
                "logits_dimension",
                "name"
            ],
            "BoostedTreesTrainingPredict": [
                "tree_ensemble_handle",
                "cached_tree_ids",
                "cached_node_ids",
                "bucketized_features",
                "logits_dimension",
                "name"
            ],
            "boosted_trees_training_predict_eager_fallback": [
                "tree_ensemble_handle",
                "cached_tree_ids",
                "cached_node_ids",
                "bucketized_features",
                "logits_dimension",
                "name",
                "ctx"
            ],
            "boosted_trees_update_ensemble": [
                "tree_ensemble_handle",
                "feature_ids",
                "node_ids",
                "gains",
                "thresholds",
                "left_node_contribs",
                "right_node_contribs",
                "max_depth",
                "learning_rate",
                "pruning_mode",
                "name"
            ],
            "BoostedTreesUpdateEnsemble": [
                "tree_ensemble_handle",
                "feature_ids",
                "node_ids",
                "gains",
                "thresholds",
                "left_node_contribs",
                "right_node_contribs",
                "max_depth",
                "learning_rate",
                "pruning_mode",
                "name"
            ],
            "boosted_trees_update_ensemble_eager_fallback": [
                "tree_ensemble_handle",
                "feature_ids",
                "node_ids",
                "gains",
                "thresholds",
                "left_node_contribs",
                "right_node_contribs",
                "max_depth",
                "learning_rate",
                "pruning_mode",
                "name",
                "ctx"
            ],
            "boosted_trees_update_ensemble_v2": [
                "tree_ensemble_handle",
                "feature_ids",
                "dimension_ids",
                "node_ids",
                "gains",
                "thresholds",
                "left_node_contribs",
                "right_node_contribs",
                "split_types",
                "max_depth",
                "learning_rate",
                "pruning_mode",
                "name"
            ],
            "BoostedTreesUpdateEnsembleV2": [
                "tree_ensemble_handle",
                "feature_ids",
                "dimension_ids",
                "node_ids",
                "gains",
                "thresholds",
                "left_node_contribs",
                "right_node_contribs",
                "split_types",
                "max_depth",
                "learning_rate",
                "pruning_mode",
                "name"
            ],
            "boosted_trees_update_ensemble_v2_eager_fallback": [
                "tree_ensemble_handle",
                "feature_ids",
                "dimension_ids",
                "node_ids",
                "gains",
                "thresholds",
                "left_node_contribs",
                "right_node_contribs",
                "split_types",
                "max_depth",
                "learning_rate",
                "pruning_mode",
                "name",
                "ctx"
            ],
            "is_boosted_trees_ensemble_initialized": [
                "tree_ensemble_handle",
                "name"
            ],
            "IsBoostedTreesEnsembleInitialized": [
                "tree_ensemble_handle",
                "name"
            ],
            "is_boosted_trees_ensemble_initialized_eager_fallback": [
                "tree_ensemble_handle",
                "name",
                "ctx"
            ],
            "is_boosted_trees_quantile_stream_resource_initialized": [
                "quantile_stream_resource_handle",
                "name"
            ],
            "IsBoostedTreesQuantileStreamResourceInitialized": [
                "quantile_stream_resource_handle",
                "name"
            ],
            "is_boosted_trees_quantile_stream_resource_initialized_eager_fallback": [
                "quantile_stream_resource_handle",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.gradient_checker_v2": {
            "_product": [
                "t"
            ],
            "_eval_indexed_slices": [
                "a"
            ],
            "_to_numpy": [
                "a"
            ],
            "_prepare": [
                "f",
                "xs_dtypes"
            ],
            "_compute_theoretical_jacobian": [
                "f",
                "y_shape",
                "y_dtype",
                "xs",
                "param"
            ],
            "_compute_numeric_jacobian": [
                "f",
                "y_size",
                "y_dtype",
                "xs",
                "param",
                "delta"
            ],
            "_compute_gradient": [
                "f",
                "y_shape",
                "y_dtype",
                "xs",
                "param",
                "delta"
            ],
            "_compute_gradient_list": [
                "f",
                "xs",
                "delta"
            ],
            "compute_gradient": [
                "f",
                "x",
                "delta"
            ],
            "max_error": [
                "grad1",
                "grad2"
            ]
        },
        "tensorflow_core.python.ops.stateful_random_ops": {
            "non_deterministic_ints": [
                "shape",
                "dtype"
            ],
            "_uint_to_int": [
                "n"
            ],
            "_make_1d_state": [
                "state_size",
                "seed"
            ],
            "_get_state_size": [
                "alg"
            ],
            "_make_state_from_seed": [
                "seed",
                "alg"
            ],
            "create_rng_state": [
                "seed",
                "algorithm"
            ],
            "_shape_tensor": [
                "shape"
            ],
            "_convert_to_state_tensor": [
                "t"
            ],
            "get_global_generator": [],
            "set_global_generator": [
                "generator"
            ],
            "Generator": {
                "__init__": [
                    "self",
                    "copy_from",
                    "state",
                    "alg"
                ],
                "from_state": [
                    "cls",
                    "state",
                    "alg"
                ],
                "from_seed": [
                    "cls",
                    "seed",
                    "alg"
                ],
                "from_non_deterministic_state": [
                    "cls",
                    "alg"
                ],
                "from_key_counter": [
                    "cls",
                    "key",
                    "counter",
                    "alg"
                ],
                "reset": [
                    "self",
                    "state"
                ],
                "reset_from_seed": [
                    "self",
                    "seed"
                ],
                "reset_from_key_counter": [
                    "self",
                    "key",
                    "counter"
                ],
                "state": [
                    "self"
                ],
                "algorithm": [
                    "self"
                ],
                "_standard_normal": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "key": [
                    "self"
                ],
                "skip": [
                    "self",
                    "delta"
                ],
                "normal": [
                    "self",
                    "shape",
                    "mean",
                    "stddev",
                    "dtype",
                    "name"
                ],
                "_truncated_normal": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "truncated_normal": [
                    "self",
                    "shape",
                    "mean",
                    "stddev",
                    "dtype",
                    "name"
                ],
                "_uniform": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "uniform": [
                    "self",
                    "shape",
                    "minval",
                    "maxval",
                    "dtype",
                    "name"
                ],
                "uniform_full_int": [
                    "self",
                    "shape",
                    "dtype",
                    "name"
                ],
                "binomial": [
                    "self",
                    "shape",
                    "counts",
                    "probs",
                    "dtype",
                    "name"
                ],
                "_make_int64_keys": [
                    "self",
                    "shape"
                ],
                "make_seeds": [
                    "self",
                    "count"
                ],
                "split": [
                    "self",
                    "count"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg_ops": {
            "_RegularizedGramianCholesky": [
                "matrix",
                "l2_regularizer",
                "first_kind"
            ],
            "cholesky_solve": [
                "chol",
                "rhs",
                "name"
            ],
            "eye": [
                "num_rows",
                "num_columns",
                "batch_shape",
                "dtype",
                "name"
            ],
            "matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "self_adjoint_eig": [
                "tensor",
                "name"
            ],
            "self_adjoint_eigvals": [
                "tensor",
                "name"
            ],
            "svd": [
                "tensor",
                "full_matrices",
                "compute_uv",
                "name"
            ],
            "norm_v2": [
                "tensor",
                "ord",
                "axis",
                "keepdims",
                "name"
            ],
            "norm": [
                "tensor",
                "ord",
                "axis",
                "keepdims",
                "name",
                "keep_dims"
            ]
        },
        "tensorflow_core.python.ops.critical_section_ops": {
            "_identity": [
                "x"
            ],
            "_get_colocation": [
                "op"
            ],
            "_ExecutionSignature": {},
            "CriticalSection": {
                "__init__": [
                    "self",
                    "name",
                    "shared_name",
                    "critical_section_def",
                    "import_scope"
                ],
                "_init_from_proto": [
                    "self",
                    "critical_section_def",
                    "import_scope"
                ],
                "_init_from_args": [
                    "self",
                    "name",
                    "shared_name"
                ],
                "name": [
                    "self"
                ],
                "execute": [
                    "self",
                    "fn",
                    "exclusive_resource_access",
                    "name"
                ],
                "_add_control_dependencies_to_lock": [
                    "self",
                    "created_ops",
                    "lock_op"
                ],
                "_is_self_handle": [
                    "self",
                    "x"
                ],
                "_check_multiple_access_to_resources": [
                    "self",
                    "captured_resources",
                    "exclusive_resource_access"
                ]
            }
        },
        "tensorflow_core.python.ops.initializers_ns": {},
        "tensorflow_core.python.ops.control_flow_v2_toggles": {
            "enable_control_flow_v2": [],
            "disable_control_flow_v2": [],
            "control_flow_v2_enabled": [],
            "output_all_intermediates": [
                "state"
            ]
        },
        "tensorflow_core.python.ops.logging_ops": {
            "Print": [
                "input_",
                "data",
                "message",
                "first_n",
                "summarize",
                "name"
            ],
            "_generate_placeholder_string": [
                "x",
                "default_placeholder"
            ],
            "_is_filepath": [
                "output_stream"
            ],
            "print_v2": [],
            "_PrintGrad": [
                "op"
            ],
            "_Collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "histogram_summary": [
                "tag",
                "values",
                "collections",
                "name"
            ],
            "image_summary": [
                "tag",
                "tensor",
                "max_images",
                "collections",
                "name"
            ],
            "audio_summary": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "collections",
                "name"
            ],
            "merge_summary": [
                "inputs",
                "collections",
                "name"
            ],
            "merge_all_summaries": [
                "key"
            ],
            "get_summary_op": [],
            "scalar_summary": [
                "tags",
                "values",
                "collections",
                "name"
            ]
        },
        "tensorflow_core.python.ops.gen_summary_ops": {
            "close_summary_writer": [
                "writer",
                "name"
            ],
            "CloseSummaryWriter": [
                "writer",
                "name"
            ],
            "close_summary_writer_eager_fallback": [
                "writer",
                "name",
                "ctx"
            ],
            "create_summary_db_writer": [
                "writer",
                "db_uri",
                "experiment_name",
                "run_name",
                "user_name",
                "name"
            ],
            "CreateSummaryDbWriter": [
                "writer",
                "db_uri",
                "experiment_name",
                "run_name",
                "user_name",
                "name"
            ],
            "create_summary_db_writer_eager_fallback": [
                "writer",
                "db_uri",
                "experiment_name",
                "run_name",
                "user_name",
                "name",
                "ctx"
            ],
            "create_summary_file_writer": [
                "writer",
                "logdir",
                "max_queue",
                "flush_millis",
                "filename_suffix",
                "name"
            ],
            "CreateSummaryFileWriter": [
                "writer",
                "logdir",
                "max_queue",
                "flush_millis",
                "filename_suffix",
                "name"
            ],
            "create_summary_file_writer_eager_fallback": [
                "writer",
                "logdir",
                "max_queue",
                "flush_millis",
                "filename_suffix",
                "name",
                "ctx"
            ],
            "flush_summary_writer": [
                "writer",
                "name"
            ],
            "FlushSummaryWriter": [
                "writer",
                "name"
            ],
            "flush_summary_writer_eager_fallback": [
                "writer",
                "name",
                "ctx"
            ],
            "import_event": [
                "writer",
                "event",
                "name"
            ],
            "ImportEvent": [
                "writer",
                "event",
                "name"
            ],
            "import_event_eager_fallback": [
                "writer",
                "event",
                "name",
                "ctx"
            ],
            "summary_writer": [
                "shared_name",
                "container",
                "name"
            ],
            "SummaryWriter": [
                "shared_name",
                "container",
                "name"
            ],
            "summary_writer_eager_fallback": [
                "shared_name",
                "container",
                "name",
                "ctx"
            ],
            "write_audio_summary": [
                "writer",
                "step",
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "WriteAudioSummary": [
                "writer",
                "step",
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "write_audio_summary_eager_fallback": [
                "writer",
                "step",
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name",
                "ctx"
            ],
            "write_graph_summary": [
                "writer",
                "step",
                "tensor",
                "name"
            ],
            "WriteGraphSummary": [
                "writer",
                "step",
                "tensor",
                "name"
            ],
            "write_graph_summary_eager_fallback": [
                "writer",
                "step",
                "tensor",
                "name",
                "ctx"
            ],
            "write_histogram_summary": [
                "writer",
                "step",
                "tag",
                "values",
                "name"
            ],
            "WriteHistogramSummary": [
                "writer",
                "step",
                "tag",
                "values",
                "name"
            ],
            "write_histogram_summary_eager_fallback": [
                "writer",
                "step",
                "tag",
                "values",
                "name",
                "ctx"
            ],
            "write_image_summary": [
                "writer",
                "step",
                "tag",
                "tensor",
                "bad_color",
                "max_images",
                "name"
            ],
            "WriteImageSummary": [
                "writer",
                "step",
                "tag",
                "tensor",
                "bad_color",
                "max_images",
                "name"
            ],
            "write_image_summary_eager_fallback": [
                "writer",
                "step",
                "tag",
                "tensor",
                "bad_color",
                "max_images",
                "name",
                "ctx"
            ],
            "write_raw_proto_summary": [
                "writer",
                "step",
                "tensor",
                "name"
            ],
            "WriteRawProtoSummary": [
                "writer",
                "step",
                "tensor",
                "name"
            ],
            "write_raw_proto_summary_eager_fallback": [
                "writer",
                "step",
                "tensor",
                "name",
                "ctx"
            ],
            "write_scalar_summary": [
                "writer",
                "step",
                "tag",
                "value",
                "name"
            ],
            "WriteScalarSummary": [
                "writer",
                "step",
                "tag",
                "value",
                "name"
            ],
            "write_scalar_summary_eager_fallback": [
                "writer",
                "step",
                "tag",
                "value",
                "name",
                "ctx"
            ],
            "write_summary": [
                "writer",
                "step",
                "tensor",
                "tag",
                "summary_metadata",
                "name"
            ],
            "WriteSummary": [
                "writer",
                "step",
                "tensor",
                "tag",
                "summary_metadata",
                "name"
            ],
            "write_summary_eager_fallback": [
                "writer",
                "step",
                "tensor",
                "tag",
                "summary_metadata",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.sparse_grad": {
            "_SparseReorderGrad": [
                "op",
                "unused_output_indices_grad",
                "output_values_grad"
            ],
            "_SparseAddGrad": [
                "op"
            ],
            "_SparseTensorDenseAddGrad": [
                "op",
                "out_grad"
            ],
            "_SparseReduceSumGrad": [
                "op",
                "out_grad"
            ],
            "_SparseSliceGrad": [
                "op"
            ],
            "_SparseTensorDenseMatMulGrad": [
                "op",
                "grad"
            ],
            "_SparseDenseCwiseAddGrad": [
                "unused_op",
                "unused_grad"
            ],
            "_SparseDenseCwiseMulOrDivGrad": [
                "op",
                "grad",
                "is_mul"
            ],
            "_SparseDenseCwiseMulGrad": [
                "op",
                "grad"
            ],
            "_SparseDenseCwiseDivGrad": [
                "op",
                "grad"
            ],
            "_SparseSoftmaxGrad": [
                "op",
                "grad"
            ],
            "_SparseSparseMaximumGrad": [
                "unused_op",
                "unused_grad"
            ],
            "_SparseSparseMinimumGrad": [
                "unused_op",
                "unused_grad"
            ],
            "_SparseFillEmptyRowsGrad": [
                "op",
                "unused_grad_output_indices",
                "output_grad_values",
                "unused_grad_empty_row_indicator",
                "unused_grad_reverse_index_map"
            ],
            "_SparseToDenseGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops.tensor_forest_ops": {
            "tree_variable": [
                "tree_config",
                "name",
                "container"
            ],
            "TreeVariableSaveable": {
                "__init__": [
                    "self",
                    "type_name",
                    "name",
                    "container",
                    "config",
                    "resource_handle_func",
                    "create_op_func",
                    "is_initialized_op_func",
                    "serialize_op_func",
                    "deserialize_op_func"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ],
                "resource": [
                    "self"
                ]
            },
            "ForestVariables": {
                "__init__": [
                    "self",
                    "params",
                    "tree_configs"
                ],
                "__getitem__": [
                    "self",
                    "t"
                ]
            }
        },
        "tensorflow_core.python.ops.parsing_ops": {
            "_features_to_raw_params": [
                "features",
                "types"
            ],
            "_construct_sparse_tensors_for_sparse_features": [
                "features",
                "tensor_dict"
            ],
            "_prepend_none_dimension": [
                "features"
            ],
            "parse_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "parse_example_v2": [
                "serialized",
                "features",
                "example_names",
                "name"
            ],
            "_parse_example_raw": [
                "serialized",
                "names",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_defaults",
                "dense_shapes",
                "name"
            ],
            "_process_raw_parameters": [
                "names",
                "dense_defaults",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_shapes"
            ],
            "parse_single_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "parse_single_example_v2_unoptimized": [
                "serialized",
                "features",
                "example_names",
                "name"
            ],
            "_parse_single_example_raw": [
                "serialized",
                "names",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_defaults",
                "dense_shapes",
                "name"
            ],
            "parse_sequence_example": [
                "serialized",
                "context_features",
                "sequence_features",
                "example_names",
                "name"
            ],
            "_parse_sequence_example_raw": [
                "serialized",
                "debug_name",
                "context_sparse_keys",
                "context_sparse_types",
                "context_dense_keys",
                "context_dense_types",
                "context_dense_defaults",
                "context_dense_shapes",
                "feature_list_sparse_keys",
                "feature_list_sparse_types",
                "feature_list_dense_keys",
                "feature_list_dense_types",
                "feature_list_dense_shapes",
                "feature_list_dense_defaults",
                "name"
            ],
            "parse_single_sequence_example": [
                "serialized",
                "context_features",
                "sequence_features",
                "example_name",
                "name"
            ],
            "_parse_single_sequence_example_raw": [
                "serialized",
                "context_sparse_keys",
                "context_sparse_types",
                "context_dense_keys",
                "context_dense_types",
                "context_dense_defaults",
                "context_dense_shapes",
                "feature_list_sparse_keys",
                "feature_list_sparse_types",
                "feature_list_dense_keys",
                "feature_list_dense_types",
                "feature_list_dense_shapes",
                "feature_list_dense_defaults",
                "debug_name",
                "name"
            ],
            "decode_raw": [
                "input_bytes",
                "out_type",
                "little_endian",
                "fixed_length",
                "name"
            ],
            "decode_raw_v1": [
                "input_bytes",
                "out_type",
                "little_endian",
                "name",
                "bytes"
            ],
            "decode_csv": [
                "records",
                "record_defaults",
                "field_delim",
                "use_quote_delim",
                "name",
                "na_value",
                "select_cols"
            ],
            "decode_csv_v2": [
                "records",
                "record_defaults",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "select_cols",
                "name"
            ],
            "parse_single_example_v2": [
                "serialized",
                "features",
                "name"
            ],
            "_parse_single_example_v2_raw": [
                "serialized",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_defaults",
                "dense_shapes",
                "name"
            ],
            "VarLenFeature": {},
            "SparseFeature": {
                "__new__": [
                    "cls",
                    "index_key",
                    "value_key",
                    "dtype",
                    "size",
                    "already_sorted"
                ]
            },
            "FixedLenFeature": {
                "__new__": [
                    "cls",
                    "shape",
                    "dtype",
                    "default_value"
                ]
            },
            "FixedLenSequenceFeature": {
                "__new__": [
                    "cls",
                    "shape",
                    "dtype",
                    "allow_missing",
                    "default_value"
                ]
            }
        },
        "tensorflow_core.python.ops.boosted_trees_ops": {
            "PruningMode": {
                "from_str": [
                    "cls",
                    "mode"
                ]
            },
            "QuantileAccumulatorSaveable": {
                "__init__": [
                    "self",
                    "resource_handle",
                    "create_op",
                    "num_streams",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_tensor_shapes"
                ]
            },
            "QuantileAccumulator": {
                "__init__": [
                    "self",
                    "epsilon",
                    "num_streams",
                    "num_quantiles",
                    "name",
                    "max_elements"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "saveable": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "add_summaries": [
                    "self",
                    "float_columns",
                    "example_weights"
                ],
                "flush": [
                    "self"
                ],
                "get_bucket_boundaries": [
                    "self"
                ]
            },
            "_TreeEnsembleSavable": {
                "__init__": [
                    "self",
                    "resource_handle",
                    "create_op",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ]
            },
            "TreeEnsemble": {
                "__init__": [
                    "self",
                    "name",
                    "stamp_token",
                    "is_local",
                    "serialized_proto"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "get_stamp_token": [
                    "self"
                ],
                "get_states": [
                    "self"
                ],
                "serialize": [
                    "self"
                ],
                "deserialize": [
                    "self",
                    "stamp_token",
                    "serialized_proto"
                ]
            }
        },
        "tensorflow_core.python.ops.random_grad": {
            "add_leading_unit_dimensions": [
                "x",
                "num_dimensions"
            ],
            "_RandomGammaGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.python.ops": {},
        "tensorflow_core.python.ops.string_ops": {
            "regex_full_match": [
                "input",
                "pattern",
                "name"
            ],
            "regex_replace": [
                "input",
                "pattern",
                "rewrite",
                "replace_global",
                "name"
            ],
            "string_format": [
                "template",
                "inputs",
                "placeholder",
                "summarize",
                "name"
            ],
            "string_split": [
                "source",
                "sep",
                "skip_empty",
                "delimiter"
            ],
            "string_split_v2": [
                "source",
                "sep",
                "maxsplit"
            ],
            "_reduce_join_reduction_dims": [
                "x",
                "axis"
            ],
            "reduce_join": [
                "inputs",
                "axis",
                "keep_dims",
                "separator",
                "name",
                "reduction_indices",
                "keepdims"
            ],
            "reduce_join_v2": [
                "inputs",
                "axis",
                "keepdims",
                "separator",
                "name"
            ],
            "string_length": [
                "input",
                "name",
                "unit"
            ],
            "string_length_v2": [
                "input",
                "unit",
                "name"
            ],
            "substr_deprecated": [
                "input",
                "pos",
                "len",
                "name",
                "unit"
            ],
            "substr": [
                "input",
                "pos",
                "len",
                "name",
                "unit"
            ],
            "substr_v2": [
                "input",
                "pos",
                "len",
                "unit",
                "name"
            ],
            "string_to_number": [
                "input",
                "out_type",
                "name"
            ],
            "string_to_number_v1": [
                "string_tensor",
                "out_type",
                "name",
                "input"
            ],
            "string_to_hash_bucket": [
                "input",
                "num_buckets",
                "name"
            ],
            "string_to_hash_bucket_v1": [
                "string_tensor",
                "num_buckets",
                "name",
                "input"
            ]
        },
        "tensorflow_core.python.ops.sets": {},
        "tensorflow_core.python.ops.gen_bitwise_ops": {
            "bitwise_and": [
                "x",
                "y",
                "name"
            ],
            "BitwiseAnd": [
                "x",
                "y",
                "name"
            ],
            "bitwise_and_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "bitwise_or": [
                "x",
                "y",
                "name"
            ],
            "BitwiseOr": [
                "x",
                "y",
                "name"
            ],
            "bitwise_or_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "bitwise_xor": [
                "x",
                "y",
                "name"
            ],
            "BitwiseXor": [
                "x",
                "y",
                "name"
            ],
            "bitwise_xor_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "invert": [
                "x",
                "name"
            ],
            "Invert": [
                "x",
                "name"
            ],
            "invert_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "left_shift": [
                "x",
                "y",
                "name"
            ],
            "LeftShift": [
                "x",
                "y",
                "name"
            ],
            "left_shift_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "population_count": [
                "x",
                "name"
            ],
            "PopulationCount": [
                "x",
                "name"
            ],
            "population_count_eager_fallback": [
                "x",
                "name",
                "ctx"
            ],
            "right_shift": [
                "x",
                "y",
                "name"
            ],
            "RightShift": [
                "x",
                "y",
                "name"
            ],
            "right_shift_eager_fallback": [
                "x",
                "y",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.io_ops": {
            "_save": [
                "filename",
                "tensor_names",
                "tensors",
                "tensor_slices",
                "name"
            ],
            "_restore_slice": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "tensor_type",
                "name",
                "preferred_shard"
            ],
            "ReaderBase": {
                "__init__": [
                    "self",
                    "reader_ref",
                    "supports_serialize"
                ],
                "reader_ref": [
                    "self"
                ],
                "read": [
                    "self",
                    "queue",
                    "name"
                ],
                "read_up_to": [
                    "self",
                    "queue",
                    "num_records",
                    "name"
                ],
                "num_records_produced": [
                    "self",
                    "name"
                ],
                "num_work_units_completed": [
                    "self",
                    "name"
                ],
                "serialize_state": [
                    "self",
                    "name"
                ],
                "restore_state": [
                    "self",
                    "state",
                    "name"
                ],
                "supports_serialize": [
                    "self"
                ],
                "reset": [
                    "self",
                    "name"
                ]
            },
            "WholeFileReader": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "TextLineReader": {
                "__init__": [
                    "self",
                    "skip_header_lines",
                    "name"
                ]
            },
            "FixedLengthRecordReader": {
                "__init__": [
                    "self",
                    "record_bytes",
                    "header_bytes",
                    "footer_bytes",
                    "hop_bytes",
                    "name",
                    "encoding"
                ]
            },
            "TFRecordReader": {
                "__init__": [
                    "self",
                    "name",
                    "options"
                ]
            },
            "LMDBReader": {
                "__init__": [
                    "self",
                    "name",
                    "options"
                ]
            },
            "IdentityReader": {
                "__init__": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.summary_ops_v2": {
            "_should_record_summaries_internal": [
                "default_state"
            ],
            "_should_record_summaries_v2": [],
            "should_record_summaries": [],
            "record_if": [
                "condition"
            ],
            "record_summaries_every_n_global_steps": [
                "n",
                "global_step"
            ],
            "always_record_summaries": [],
            "never_record_summaries": [],
            "get_step": [],
            "set_step": [
                "step"
            ],
            "initialize": [
                "graph",
                "session"
            ],
            "create_file_writer_v2": [
                "logdir",
                "max_queue",
                "flush_millis",
                "filename_suffix",
                "name"
            ],
            "create_file_writer": [
                "logdir",
                "max_queue",
                "flush_millis",
                "filename_suffix",
                "name"
            ],
            "create_db_writer": [
                "db_uri",
                "experiment_name",
                "run_name",
                "user_name",
                "name"
            ],
            "create_noop_writer": [],
            "_cleanse_string": [
                "name",
                "pattern",
                "value"
            ],
            "_nothing": [],
            "all_v2_summary_ops": [],
            "summary_writer_initializer_op": [],
            "summary_scope": [
                "name",
                "default_name",
                "values"
            ],
            "write": [
                "tag",
                "tensor",
                "step",
                "metadata",
                "name"
            ],
            "write_raw_pb": [
                "tensor",
                "step",
                "name"
            ],
            "summary_writer_function": [
                "name",
                "tensor",
                "function",
                "family"
            ],
            "generic": [
                "name",
                "tensor",
                "metadata",
                "family",
                "step"
            ],
            "scalar": [
                "name",
                "tensor",
                "family",
                "step"
            ],
            "histogram": [
                "name",
                "tensor",
                "family",
                "step"
            ],
            "image": [
                "name",
                "tensor",
                "bad_color",
                "max_images",
                "family",
                "step"
            ],
            "audio": [
                "name",
                "tensor",
                "sample_rate",
                "max_outputs",
                "family",
                "step"
            ],
            "graph": [
                "param",
                "step",
                "name"
            ],
            "import_event": [
                "tensor",
                "name"
            ],
            "flush": [
                "writer",
                "name"
            ],
            "eval_dir": [
                "model_dir",
                "name"
            ],
            "create_summary_file_writer": [],
            "_serialize_graph": [
                "arbitrary_graph"
            ],
            "_choose_step": [
                "step"
            ],
            "_check_create_file_writer_args": [
                "inside_function"
            ],
            "run_metadata": [
                "name",
                "data",
                "step"
            ],
            "run_metadata_graphs": [
                "name",
                "data",
                "step"
            ],
            "keras_model": [
                "name",
                "data",
                "step"
            ],
            "trace_on": [
                "graph",
                "profiler"
            ],
            "trace_export": [
                "name",
                "step",
                "profiler_outdir"
            ],
            "trace_off": [],
            "SummaryWriter": {
                "set_as_default": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "ResourceSummaryWriter": {
                "__init__": [
                    "self",
                    "shared_name",
                    "init_op_fn",
                    "name",
                    "v2"
                ],
                "set_as_default": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "NoopSummaryWriter": {
                "set_as_default": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.clustering_ops": {
            "KMeans": {
                "__init__": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "initial_clusters",
                    "distance_metric",
                    "use_mini_batch",
                    "mini_batch_steps_per_iteration",
                    "random_seed",
                    "kmeans_plus_plus_num_retries",
                    "kmc2_chain_length"
                ],
                "_distance_graph": [
                    "cls",
                    "inputs",
                    "clusters",
                    "distance_metric"
                ],
                "_compute_euclidean_distance": [
                    "cls",
                    "inputs",
                    "clusters"
                ],
                "_compute_cosine_distance": [
                    "cls",
                    "inputs",
                    "clusters",
                    "inputs_normalized"
                ],
                "_infer_graph": [
                    "self",
                    "inputs",
                    "clusters"
                ],
                "_clusters_l2_normalized": [
                    "self"
                ],
                "_create_variables": [
                    "self",
                    "num_clusters"
                ],
                "_l2_normalize_data": [
                    "cls",
                    "inputs"
                ],
                "training_graph": [
                    "self"
                ],
                "_mini_batch_sync_updates_op": [
                    "self",
                    "update_in_steps",
                    "cluster_centers_var",
                    "cluster_centers_updated",
                    "total_counts"
                ],
                "_mini_batch_training_op": [
                    "self",
                    "inputs",
                    "cluster_idx_list",
                    "cluster_centers",
                    "total_counts"
                ],
                "_full_batch_training_op": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "cluster_idx_list",
                    "cluster_centers"
                ]
            },
            "_InitializeClustersOpFactory": {
                "__init__": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "initial_clusters",
                    "distance_metric",
                    "random_seed",
                    "kmeans_plus_plus_num_retries",
                    "kmc2_chain_length",
                    "cluster_centers",
                    "cluster_centers_updated",
                    "cluster_centers_initialized"
                ],
                "_random": [
                    "self"
                ],
                "_kmeans_plus_plus": [
                    "self"
                ],
                "_kmc2_multiple_centers": [
                    "self"
                ],
                "_greedy_batch_sampler": [
                    "self",
                    "sampler"
                ],
                "_single_batch_sampler": [
                    "self",
                    "sampler"
                ],
                "_choose_initial_centers": [
                    "self"
                ],
                "_add_new_centers": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "op": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.spectral_ops_test_util": {
            "_use_eigen_kernels": [],
            "fft_kernel_label_map": []
        },
        "tensorflow_core.python.ops.sparse_ops": {
            "_convert_to_sparse_tensor": [
                "sp_input"
            ],
            "_convert_to_sparse_tensors": [
                "sp_inputs"
            ],
            "_make_int64_tensor": [
                "value",
                "name"
            ],
            "from_dense": [
                "tensor",
                "name"
            ],
            "sparse_expand_dims": [
                "sp_input",
                "axis",
                "name"
            ],
            "sparse_eye": [
                "num_rows",
                "num_columns",
                "dtype",
                "name"
            ],
            "sparse_concat": [
                "axis",
                "sp_inputs",
                "name",
                "expand_nonconcat_dim",
                "concat_dim",
                "expand_nonconcat_dims"
            ],
            "sparse_concat_v2": [
                "axis",
                "sp_inputs",
                "expand_nonconcat_dims",
                "name"
            ],
            "sparse_add": [
                "a",
                "b",
                "threshold",
                "thresh"
            ],
            "sparse_add_v2": [
                "a",
                "b",
                "threshold"
            ],
            "sparse_cross": [
                "inputs",
                "name"
            ],
            "sparse_cross_hashed": [
                "inputs",
                "num_buckets",
                "hash_key",
                "name"
            ],
            "_sparse_cross_internal": [
                "inputs",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "name"
            ],
            "sparse_dense_cwise_add": [
                "sp_t",
                "dense_t"
            ],
            "sparse_reorder": [
                "sp_input",
                "name"
            ],
            "sparse_reshape": [
                "sp_input",
                "shape",
                "name"
            ],
            "sparse_split": [
                "keyword_required",
                "sp_input",
                "num_split",
                "axis",
                "name",
                "split_dim"
            ],
            "sparse_split_v2": [
                "sp_input",
                "num_split",
                "axis",
                "name"
            ],
            "sparse_slice": [
                "sp_input",
                "start",
                "size",
                "name"
            ],
            "sparse_to_dense": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name"
            ],
            "sparse_reduce_max_v2": [
                "sp_input",
                "axis",
                "keepdims",
                "output_is_sparse",
                "name"
            ],
            "sparse_reduce_max": [
                "sp_input",
                "axis",
                "keepdims",
                "reduction_axes",
                "keep_dims"
            ],
            "sparse_reduce_max_sparse": [
                "sp_input",
                "axis",
                "keepdims",
                "reduction_axes",
                "keep_dims"
            ],
            "sparse_reduce_sum_v2": [
                "sp_input",
                "axis",
                "keepdims",
                "output_is_sparse",
                "name"
            ],
            "sparse_reduce_sum": [
                "sp_input",
                "axis",
                "keepdims",
                "reduction_axes",
                "keep_dims"
            ],
            "sparse_reduce_sum_sparse": [
                "sp_input",
                "axis",
                "keepdims",
                "reduction_axes",
                "keep_dims"
            ],
            "sparse_tensor_to_dense": [
                "sp_input",
                "default_value",
                "validate_indices",
                "name"
            ],
            "sparse_to_indicator": [
                "sp_input",
                "vocab_size",
                "name"
            ],
            "sparse_merge": [
                "sp_ids",
                "sp_values",
                "vocab_size",
                "name",
                "already_sorted"
            ],
            "sparse_merge_impl": [
                "sp_ids",
                "sp_values",
                "vocab_size",
                "name",
                "already_sorted"
            ],
            "sparse_retain": [
                "sp_input",
                "to_retain"
            ],
            "sparse_reset_shape": [
                "sp_input",
                "new_shape"
            ],
            "sparse_fill_empty_rows": [
                "sp_input",
                "default_value",
                "name"
            ],
            "serialize_sparse": [
                "sp_input",
                "name",
                "out_type"
            ],
            "serialize_sparse_v2": [
                "sp_input",
                "out_type",
                "name"
            ],
            "serialize_many_sparse": [
                "sp_input",
                "name",
                "out_type"
            ],
            "serialize_many_sparse_v2": [
                "sp_input",
                "out_type",
                "name"
            ],
            "deserialize_sparse": [
                "serialized_sparse",
                "dtype",
                "rank",
                "name"
            ],
            "deserialize_many_sparse": [
                "serialized_sparse",
                "dtype",
                "rank",
                "name"
            ],
            "sparse_tensor_dense_matmul": [
                "sp_a",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name"
            ],
            "sparse_softmax": [
                "sp_input",
                "name"
            ],
            "sparse_maximum": [
                "sp_a",
                "sp_b",
                "name"
            ],
            "sparse_minimum": [
                "sp_a",
                "sp_b",
                "name"
            ],
            "sparse_transpose": [
                "sp_input",
                "perm",
                "name"
            ],
            "_add_sparse_to_tensors_map": [
                "sp_input",
                "container",
                "shared_name",
                "name"
            ],
            "_add_many_sparse_to_tensors_map": [
                "sp_input",
                "container",
                "shared_name",
                "name"
            ],
            "_take_many_sparse_from_tensors_map": [
                "sparse_map_op",
                "sparse_handles",
                "rank",
                "name"
            ],
            "KeywordRequired": {
                "__repr__": [
                    "self"
                ]
            },
            "_UnaryMapValueDispatcher": {
                "__init__": [
                    "self",
                    "original_func"
                ],
                "handle": [
                    "self",
                    "args",
                    "kwargs"
                ]
            }
        },
        "tensorflow_core.python.ops.gen_cudnn_rnn_ops": {
            "cudnn_rnn": [
                "input",
                "input_h",
                "input_c",
                "params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "is_training",
                "name"
            ],
            "CudnnRNN": [
                "input",
                "input_h",
                "input_c",
                "params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "is_training",
                "name"
            ],
            "cudnn_rnn_eager_fallback": [
                "input",
                "input_h",
                "input_c",
                "params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "is_training",
                "name",
                "ctx"
            ],
            "cudnn_rnn_backprop": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "CudnnRNNBackprop": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "cudnn_rnn_backprop_eager_fallback": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "cudnn_rnn_backprop_v2": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "host_reserved",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "CudnnRNNBackpropV2": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "host_reserved",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "cudnn_rnn_backprop_v2_eager_fallback": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "host_reserved",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "cudnn_rnn_backprop_v3": [
                "input",
                "input_h",
                "input_c",
                "params",
                "sequence_lengths",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "host_reserved",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "time_major",
                "name"
            ],
            "CudnnRNNBackpropV3": [
                "input",
                "input_h",
                "input_c",
                "params",
                "sequence_lengths",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "host_reserved",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "time_major",
                "name"
            ],
            "cudnn_rnn_backprop_v3_eager_fallback": [
                "input",
                "input_h",
                "input_c",
                "params",
                "sequence_lengths",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "host_reserved",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "time_major",
                "name",
                "ctx"
            ],
            "cudnn_rnn_canonical_to_params": [
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "CudnnRNNCanonicalToParams": [
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "cudnn_rnn_canonical_to_params_eager_fallback": [
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "cudnn_rnn_canonical_to_params_v2": [
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name"
            ],
            "CudnnRNNCanonicalToParamsV2": [
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name"
            ],
            "cudnn_rnn_canonical_to_params_v2_eager_fallback": [
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name",
                "ctx"
            ],
            "cudnn_rnn_params_size": [
                "num_layers",
                "num_units",
                "input_size",
                "T",
                "S",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name"
            ],
            "CudnnRNNParamsSize": [
                "num_layers",
                "num_units",
                "input_size",
                "T",
                "S",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name"
            ],
            "cudnn_rnn_params_size_eager_fallback": [
                "num_layers",
                "num_units",
                "input_size",
                "T",
                "S",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name",
                "ctx"
            ],
            "cudnn_rnn_params_to_canonical": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "num_params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "CudnnRNNParamsToCanonical": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "num_params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name"
            ],
            "cudnn_rnn_params_to_canonical_eager_fallback": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "num_params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "cudnn_rnn_params_to_canonical_v2": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "num_params_weights",
                "num_params_biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name"
            ],
            "CudnnRNNParamsToCanonicalV2": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "num_params_weights",
                "num_params_biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name"
            ],
            "cudnn_rnn_params_to_canonical_v2_eager_fallback": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "num_params_weights",
                "num_params_biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "name",
                "ctx"
            ],
            "cudnn_rnnv2": [
                "input",
                "input_h",
                "input_c",
                "params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "is_training",
                "name"
            ],
            "CudnnRNNV2": [
                "input",
                "input_h",
                "input_c",
                "params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "is_training",
                "name"
            ],
            "cudnn_rnnv2_eager_fallback": [
                "input",
                "input_h",
                "input_c",
                "params",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "is_training",
                "name",
                "ctx"
            ],
            "cudnn_rnnv3": [
                "input",
                "input_h",
                "input_c",
                "params",
                "sequence_lengths",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "is_training",
                "time_major",
                "name"
            ],
            "CudnnRNNV3": [
                "input",
                "input_h",
                "input_c",
                "params",
                "sequence_lengths",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "is_training",
                "time_major",
                "name"
            ],
            "cudnn_rnnv3_eager_fallback": [
                "input",
                "input_h",
                "input_c",
                "params",
                "sequence_lengths",
                "rnn_mode",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "seed2",
                "num_proj",
                "is_training",
                "time_major",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.ops.resources": {
            "register_resource": [
                "handle",
                "create_op",
                "is_initialized_op",
                "is_shared"
            ],
            "shared_resources": [],
            "local_resources": [],
            "report_uninitialized_resources": [
                "resource_list",
                "name"
            ],
            "initialize_resources": [
                "resource_list",
                "name"
            ]
        },
        "tensorflow_core.python.ops.losses.loss_reduction": {
            "ReductionV2": {
                "all": [
                    "cls"
                ],
                "validate": [
                    "cls",
                    "key"
                ]
            }
        },
        "tensorflow_core.python.ops.losses.losses_impl": {
            "_safe_mean": [
                "losses",
                "num_present"
            ],
            "_num_present": [
                "losses",
                "weights",
                "per_batch"
            ],
            "_num_elements": [
                "losses"
            ],
            "compute_weighted_loss": [
                "losses",
                "weights",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "absolute_difference": [
                "labels",
                "predictions",
                "weights",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "cosine_distance": [
                "labels",
                "predictions",
                "axis",
                "weights",
                "scope",
                "loss_collection",
                "reduction",
                "dim"
            ],
            "hinge_loss": [
                "labels",
                "logits",
                "weights",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "huber_loss": [
                "labels",
                "predictions",
                "weights",
                "delta",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "log_loss": [
                "labels",
                "predictions",
                "weights",
                "epsilon",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "mean_pairwise_squared_error": [
                "labels",
                "predictions",
                "weights",
                "scope",
                "loss_collection"
            ],
            "mean_squared_error": [
                "labels",
                "predictions",
                "weights",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "sigmoid_cross_entropy": [
                "multi_class_labels",
                "logits",
                "weights",
                "label_smoothing",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "softmax_cross_entropy": [
                "onehot_labels",
                "logits",
                "weights",
                "label_smoothing",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "_remove_squeezable_dimensions": [
                "labels",
                "predictions",
                "weights",
                "expected_rank_diff"
            ],
            "sparse_softmax_cross_entropy": [
                "labels",
                "logits",
                "weights",
                "scope",
                "loss_collection",
                "reduction"
            ],
            "Reduction": {
                "all": [
                    "cls"
                ],
                "validate": [
                    "cls",
                    "key"
                ]
            }
        },
        "tensorflow_core.python.ops.losses.losses": {},
        "tensorflow_core.python.ops.losses.util": {
            "squeeze_or_expand_dimensions": [
                "y_pred",
                "y_true",
                "sample_weight"
            ],
            "scale_losses_by_sample_weight": [
                "losses",
                "sample_weight"
            ],
            "check_per_example_loss_rank": [
                "per_example_loss"
            ],
            "add_loss": [
                "loss",
                "loss_collection"
            ],
            "get_losses": [
                "scope",
                "loss_collection"
            ],
            "get_regularization_losses": [
                "scope"
            ],
            "get_regularization_loss": [
                "scope",
                "name"
            ],
            "get_total_loss": [
                "add_regularization_losses",
                "name",
                "scope"
            ]
        },
        "tensorflow_core.python.ops.losses": {},
        "tensorflow_core.python.ops.parallel_for.test_util": {
            "PForTestCase": {
                "_run_targets": [
                    "self",
                    "targets1",
                    "targets2",
                    "run_init"
                ],
                "run_and_assert_equal": [
                    "self",
                    "targets1",
                    "targets2"
                ],
                "_test_loop_fn": [
                    "self",
                    "loop_fn",
                    "iters",
                    "loop_fn_dtypes",
                    "parallel_iterations"
                ]
            }
        },
        "tensorflow_core.python.ops.parallel_for.gradients": {
            "jacobian": [
                "output",
                "inputs",
                "use_pfor",
                "parallel_iterations"
            ],
            "batch_jacobian": [
                "output",
                "inp",
                "use_pfor",
                "parallel_iterations"
            ]
        },
        "tensorflow_core.python.ops.parallel_for.control_flow_ops": {
            "for_loop": [
                "loop_fn",
                "loop_fn_dtypes",
                "iters",
                "parallel_iterations"
            ],
            "_flatten_first_two_dims": [
                "x"
            ],
            "_is_under_xla_context": [],
            "pfor": [
                "loop_fn",
                "iters",
                "parallel_iterations"
            ],
            "_loop_fn_has_config": [
                "loop_fn"
            ],
            "_pfor_impl": [
                "loop_fn",
                "iters",
                "parallel_iterations",
                "pfor_config"
            ],
            "vectorized_map": [
                "fn",
                "elems"
            ]
        },
        "tensorflow_core.python.ops.parallel_for.pfor": {
            "_stack": [
                "t",
                "length"
            ],
            "_is_stateful_pfor_op": [
                "op"
            ],
            "_create_op": [
                "op_type",
                "inputs",
                "op_dtypes",
                "attrs"
            ],
            "wrap": [
                "tensor",
                "is_stacked",
                "is_sparse_stacked"
            ],
            "_fallback_converter": [
                "pfor_input"
            ],
            "_flatten_first_two_dims": [
                "x"
            ],
            "_unflatten_first_dim": [
                "x",
                "first_dim"
            ],
            "_inputs_with_flattening": [
                "pfor_input",
                "input_indices"
            ],
            "_convert_flatten_batch": [
                "pfor_input",
                "op_type",
                "dims"
            ],
            "_channel_flatten_input": [
                "x",
                "data_format"
            ],
            "_convert_fused_batch_norm": [
                "pfor_input"
            ],
            "_convert_fused_batch_norm_grad": [
                "pfor_input"
            ],
            "_convert_flatten_batch_shape_input": [
                "pfor_input",
                "op_type",
                "flatten_dims",
                "shape_dim"
            ],
            "_convert_conv2d_backprop_filter": [
                "pfor_input"
            ],
            "_convert_softmax": [
                "pfor_input",
                "op_type",
                "op_func"
            ],
            "_convert_identity": [
                "pfor_input",
                "op_type",
                "op_func"
            ],
            "_convert_identity_n": [
                "pfor_input"
            ],
            "_convert_reshape": [
                "pfor_input"
            ],
            "_convert_broadcast_to": [
                "pfor_input"
            ],
            "_convert_expanddims": [
                "pfor_input"
            ],
            "_convert_searchsorted": [
                "pfor_input",
                "_",
                "op_func"
            ],
            "_convert_matrix_band_part": [
                "pfor_input"
            ],
            "_convert_matrix_set_diag": [
                "pfor_input"
            ],
            "_convert_matrix_diag_v2": [
                "pfor_input"
            ],
            "_convert_matrix_diag_part_v2": [
                "pfor_input"
            ],
            "_convert_matrix_set_diag_v2": [
                "pfor_input"
            ],
            "_convert_one_hot": [
                "pfor_input"
            ],
            "_convert_slice": [
                "pfor_input"
            ],
            "_convert_tile": [
                "pfor_input"
            ],
            "_convert_pack": [
                "pfor_input"
            ],
            "_convert_unpack": [
                "pfor_input"
            ],
            "_convert_pad": [
                "pfor_input"
            ],
            "_convert_split": [
                "pfor_input"
            ],
            "_convert_split_v": [
                "pfor_input"
            ],
            "_convert_squeeze": [
                "pfor_input"
            ],
            "_convert_transpose": [
                "pfor_input"
            ],
            "_convert_zeroslike": [
                "pfor_input"
            ],
            "_convert_gather": [
                "pfor_input"
            ],
            "_convert_concatv2": [
                "pfor_input"
            ],
            "_convert_strided_slice": [
                "pfor_input"
            ],
            "_convert_strided_slice_grad": [
                "pfor_input"
            ],
            "_convert_matmul": [
                "pfor_input"
            ],
            "_convert_batch_mat_mul": [
                "pfor_input"
            ],
            "_convert_batch_mat_mul_v2": [
                "pfor_input"
            ],
            "_convert_reduction": [
                "pfor_input",
                "_",
                "op_func"
            ],
            "_convert_cumfoo": [
                "pfor_input",
                "_",
                "op_func"
            ],
            "_convert_biasadd": [
                "pfor_input"
            ],
            "_convert_unsortedsegmentsum": [
                "pfor_input"
            ],
            "_convert_cast": [
                "pfor_input"
            ],
            "_convert_cwise": [
                "pfor_input",
                "op_type",
                "op_func"
            ],
            "_convert_approximate_equal": [
                "pfor_input"
            ],
            "_convert_shape": [
                "pfor_input"
            ],
            "_convert_shape_n": [
                "pfor_input"
            ],
            "_convert_size": [
                "pfor_input"
            ],
            "_convert_rank": [
                "pfor_input"
            ],
            "_convert_addn": [
                "pfor_input"
            ],
            "_convert_cross": [
                "pfor_input"
            ],
            "_convert_biasaddgrad": [
                "pfor_input"
            ],
            "_convert_grads": [
                "pfor_input",
                "op_type"
            ],
            "_convert_select": [
                "pfor_input"
            ],
            "_convert_selectv2": [
                "pfor_input"
            ],
            "_transpose_dim_to_front": [
                "x",
                "dim"
            ],
            "_convert_random": [
                "pfor_input",
                "op_type"
            ],
            "_convert_random_with_param": [
                "pfor_input"
            ],
            "_convert_multinomial": [
                "pfor_input"
            ],
            "_convert_cholesky": [
                "pfor_input"
            ],
            "_convert_log_matrix_determinant": [
                "pfor_input"
            ],
            "_convert_matrix_triangular_solve": [
                "pfor_input"
            ],
            "_convert_assert": [
                "pfor_input"
            ],
            "_convert_print": [
                "pfor_input"
            ],
            "_convert_tensor_array_v3": [
                "pfor_input"
            ],
            "_convert_tensor_array_size_v3": [
                "pfor_input"
            ],
            "_handle_inside_pfor": [
                "pfor_input",
                "handle"
            ],
            "_unstack_flow": [
                "value"
            ],
            "_convert_tensor_array_read_v3": [
                "pfor_input"
            ],
            "_convert_tensor_array_write_v3": [
                "pfor_input"
            ],
            "_transpose_first_two_dims": [
                "value"
            ],
            "_convert_tensor_array_gather_v3": [
                "pfor_input"
            ],
            "_convert_tensor_array_scatter_v3": [
                "pfor_input"
            ],
            "_convert_tensor_array_grad_v3": [
                "pfor_input"
            ],
            "_stack_cache_key": [
                "pfor_input"
            ],
            "_stack_handle_inside_pfor": [
                "handle",
                "pfor_input"
            ],
            "_convert_stack_push_v2": [
                "pfor_input"
            ],
            "_convert_stack_pop_v2": [
                "pfor_input"
            ],
            "_convert_decode_csv": [
                "pfor_input"
            ],
            "_convert_parse_single_example": [
                "pfor_input"
            ],
            "_convert_partitioned_call": [
                "pfor_input"
            ],
            "WhileOp": {
                "__init__": [
                    "self",
                    "exit_node",
                    "pfor_ops",
                    "pfor_config"
                ],
                "__str__": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "control_inputs": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "is_inside_loop": [
                    "self"
                ],
                "op_is_inside_loop": [
                    "self",
                    "op"
                ],
                "is_stateful": [
                    "self"
                ],
                "pfor_converter": [
                    "self"
                ],
                "_init_pfor": [
                    "self",
                    "parent_pfor",
                    "indices",
                    "cond_stacked",
                    "inputs",
                    "inputs_stacked"
                ],
                "_convert_enter": [
                    "self",
                    "parent_pfor",
                    "enter"
                ],
                "_maybe_stacked": [
                    "self",
                    "cache",
                    "inp"
                ],
                "_create_init_values": [
                    "self",
                    "pfor_input"
                ],
                "_process_cond_unstacked": [
                    "self",
                    "conditions",
                    "indices",
                    "inputs",
                    "output_tas"
                ],
                "_process_cond_stacked": [
                    "self",
                    "conditions",
                    "indices",
                    "inputs",
                    "inputs_stacked",
                    "output_tas"
                ],
                "_process_body": [
                    "self",
                    "pfor_input",
                    "inputs_stacked",
                    "new_indices",
                    "cond_stacked",
                    "new_inputs",
                    "not_all_done"
                ],
                "__call__": [
                    "self",
                    "pfor_input"
                ]
            },
            "_PforInput": {
                "__init__": [
                    "self",
                    "pfor",
                    "op",
                    "inputs"
                ],
                "stack_inputs": [
                    "self",
                    "stack_indices"
                ],
                "expanddim_inputs_for_broadcast": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "num_inputs": [
                    "self"
                ],
                "input": [
                    "self",
                    "index"
                ],
                "stacked_input": [
                    "self",
                    "index"
                ],
                "unstacked_input": [
                    "self",
                    "index"
                ],
                "op": [
                    "self"
                ],
                "op_type": [
                    "self"
                ],
                "get_attr": [
                    "self",
                    "attr"
                ],
                "outputs": [
                    "self"
                ],
                "output": [
                    "self",
                    "index"
                ]
            },
            "RegisterPFor": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "converter"
                ]
            },
            "RegisterPForWithArgs": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "converter"
                ]
            },
            "PForConfig": {
                "__init__": [
                    "self"
                ],
                "_has_reductions": [
                    "self"
                ],
                "_set_iters": [
                    "self",
                    "iters"
                ],
                "reduce_concat": [
                    "self",
                    "x"
                ],
                "reduce_mean": [
                    "self",
                    "x"
                ],
                "reduce_sum": [
                    "self",
                    "x"
                ],
                "_lookup_reduction": [
                    "self",
                    "pl"
                ]
            },
            "PFor": {
                "__init__": [
                    "self",
                    "loop_var",
                    "loop_len",
                    "pfor_ops",
                    "all_indices",
                    "all_indices_partitioned",
                    "pfor_config"
                ],
                "op_is_inside_loop": [
                    "self",
                    "op"
                ],
                "_convert_sparse": [
                    "self",
                    "y"
                ],
                "_restack_sparse_tensor_logically": [
                    "self",
                    "indices",
                    "values",
                    "shape"
                ],
                "_unwrap_or_tile": [
                    "self",
                    "wrapped_tensor"
                ],
                "convert": [
                    "self",
                    "y"
                ],
                "_was_converted": [
                    "self",
                    "t"
                ],
                "_add_conversion": [
                    "self",
                    "old_output",
                    "new_output"
                ],
                "_convert_helper": [
                    "self",
                    "op_or_tensor"
                ],
                "loop_len_vector": [
                    "self"
                ],
                "loop_var": [
                    "self"
                ],
                "pfor_ops": [
                    "self"
                ],
                "pfor_config": [
                    "self"
                ],
                "all_indices_partitioned": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.parallel_for": {},
        "tensorflow_core.python.ops.linalg.linear_operator_diag": {
            "LinearOperatorDiag": {
                "__init__": [
                    "self",
                    "diag",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_check_diag": [
                    "self",
                    "diag"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_matvec": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_to_dense": [
                    "self"
                ],
                "_diag_part": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "x"
                ],
                "diag": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_zeros": {
            "LinearOperatorZeros": {
                "__init__": [
                    "self",
                    "num_rows",
                    "num_columns",
                    "batch_shape",
                    "dtype",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "assert_proper_shapes",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_possibly_broadcast_batch_shape": [
                    "self",
                    "x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_trace": [
                    "self"
                ],
                "_diag_part": [
                    "self"
                ],
                "add_to_tensor": [
                    "self",
                    "mat",
                    "name"
                ],
                "_check_domain_range_possibly_add_asserts": [
                    "self"
                ],
                "_check_batch_shape_possibly_add_asserts": [
                    "self"
                ],
                "_min_matrix_dim": [
                    "self"
                ],
                "_min_matrix_dim_tensor": [
                    "self"
                ],
                "_zeros_diag": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linalg": {},
        "tensorflow_core.python.ops.linalg.registrations_util": {
            "combined_commuting_self_adjoint_hint": [
                "operator_a",
                "operator_b"
            ],
            "is_square": [
                "operator_a",
                "operator_b"
            ],
            "combined_commuting_positive_definite_hint": [
                "operator_a",
                "operator_b"
            ],
            "combined_non_singular_hint": [
                "operator_a",
                "operator_b"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_full_matrix": {
            "LinearOperatorFullMatrix": {
                "__init__": [
                    "self",
                    "matrix",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_check_matrix": [
                    "self",
                    "matrix"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.solve_registrations": {
            "_solve_linear_operator": [
                "linop_a",
                "linop_b"
            ],
            "_solve_inverse_linear_operator": [
                "linop_a",
                "linop_b"
            ],
            "_solve_linear_operator_identity_left": [
                "identity",
                "linop"
            ],
            "_solve_linear_operator_diag": [
                "linop_a",
                "linop_b"
            ],
            "_solve_linear_operator_diag_scaled_identity_right": [
                "linop_diag",
                "linop_scaled_identity"
            ],
            "_solve_linear_operator_diag_scaled_identity_left": [
                "linop_scaled_identity",
                "linop_diag"
            ],
            "_solve_linear_operator_diag_tril": [
                "linop_diag",
                "linop_triangular"
            ],
            "_solve_linear_operator_circulant_circulant": [
                "linop_a",
                "linop_b"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_block_diag": {
            "LinearOperatorBlockDiag": {
                "__init__": [
                    "self",
                    "operators",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "operators": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_diag_part": [
                    "self"
                ],
                "_trace": [
                    "self"
                ],
                "_to_dense": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_split_input_into_blocks": [
                    "self",
                    "x",
                    "axis"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_toeplitz": {
            "_to_complex": [
                "x"
            ],
            "LinearOperatorToeplitz": {
                "__init__": [
                    "self",
                    "col",
                    "row",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_check_row_col": [
                    "self",
                    "row",
                    "col"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_trace": [
                    "self"
                ],
                "_diag_part": [
                    "self"
                ],
                "col": [
                    "self"
                ],
                "row": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.inverse_registrations": {
            "_inverse_linear_operator": [
                "linop"
            ],
            "_inverse_inverse_linear_operator": [
                "linop_inversion"
            ],
            "_inverse_diag": [
                "diag_operator"
            ],
            "_inverse_identity": [
                "identity_operator"
            ],
            "_inverse_scaled_identity": [
                "identity_operator"
            ],
            "_inverse_block_diag": [
                "block_diag_operator"
            ],
            "_inverse_kronecker": [
                "kronecker_operator"
            ],
            "_inverse_circulant": [
                "circulant_operator"
            ],
            "_inverse_householder": [
                "householder_operator"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_kronecker": {
            "_vec": [
                "x"
            ],
            "_unvec_by": [
                "y",
                "num_col"
            ],
            "_rotate_last_dim": [
                "x",
                "rotate_right"
            ],
            "LinearOperatorKronecker": {
                "__init__": [
                    "self",
                    "operators",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "operators": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_trace": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_diag_part": [
                    "self"
                ],
                "_to_dense": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linalg_impl": {
            "logdet": [
                "matrix",
                "name"
            ],
            "adjoint": [
                "matrix",
                "name"
            ],
            "_matrix_exp_pade3": [
                "matrix"
            ],
            "_matrix_exp_pade5": [
                "matrix"
            ],
            "_matrix_exp_pade7": [
                "matrix"
            ],
            "_matrix_exp_pade9": [
                "matrix"
            ],
            "_matrix_exp_pade13": [
                "matrix"
            ],
            "matrix_exponential": [
                "input",
                "name"
            ],
            "tridiagonal_solve": [
                "diagonals",
                "rhs",
                "diagonals_format",
                "transpose_rhs",
                "conjugate_rhs",
                "name",
                "partial_pivoting"
            ],
            "_tridiagonal_solve_compact_format": [
                "diagonals",
                "rhs",
                "transpose_rhs",
                "conjugate_rhs",
                "partial_pivoting",
                "name"
            ],
            "tridiagonal_matmul": [
                "diagonals",
                "rhs",
                "diagonals_format",
                "name"
            ],
            "_maybe_validate_matrix": [
                "a",
                "validate_args"
            ],
            "matrix_rank": [
                "a",
                "tol",
                "validate_args",
                "name"
            ],
            "pinv": [
                "a",
                "rcond",
                "validate_args",
                "name"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_util": {
            "convert_nonref_to_tensor": [
                "value",
                "dtype",
                "dtype_hint",
                "name"
            ],
            "base_dtype": [
                "dtype"
            ],
            "dtype_name": [
                "dtype"
            ],
            "is_ref": [
                "x"
            ],
            "assert_not_ref_type": [
                "x",
                "arg_name"
            ],
            "assert_no_entries_with_modulus_zero": [
                "x",
                "message",
                "name"
            ],
            "assert_zero_imag_part": [
                "x",
                "message",
                "name"
            ],
            "assert_compatible_matrix_dimensions": [
                "operator",
                "x"
            ],
            "assert_is_batch_matrix": [
                "tensor"
            ],
            "shape_tensor": [
                "shape",
                "name"
            ],
            "broadcast_matrix_batch_dims": [
                "batch_matrices",
                "name"
            ],
            "cholesky_solve_with_broadcast": [
                "chol",
                "rhs",
                "name"
            ],
            "matrix_solve_with_broadcast": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "matrix_triangular_solve_with_broadcast": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "_reshape_for_efficiency": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "adjoint_a",
                "adjoint_b"
            ],
            "use_operator_or_provided_hint_unless_contradicting": [
                "operator",
                "hint_attr_name",
                "provided_hint_value",
                "message"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_addition": {
            "add_operators": [
                "operators",
                "operator_name",
                "addition_tiers",
                "name"
            ],
            "_pop_a_match_at_tier": [
                "op1",
                "operator_list",
                "tier"
            ],
            "_infer_hints_allowing_override": [
                "op1",
                "op2",
                "hints"
            ],
            "_static_check_for_same_dimensions": [
                "operators"
            ],
            "_static_check_for_broadcastable_batch_shape": [
                "operators"
            ],
            "_type": [
                "operator"
            ],
            "_Hints": {
                "__init__": [
                    "self",
                    "is_non_singular",
                    "is_positive_definite",
                    "is_self_adjoint"
                ]
            },
            "_Adder": {
                "name": [
                    "self"
                ],
                "can_add": [
                    "self",
                    "op1",
                    "op2"
                ],
                "_add": [
                    "self",
                    "op1",
                    "op2",
                    "operator_name",
                    "hints"
                ],
                "add": [
                    "self",
                    "op1",
                    "op2",
                    "operator_name",
                    "hints"
                ]
            },
            "_AddAndReturnScaledIdentity": {
                "can_add": [
                    "self",
                    "op1",
                    "op2"
                ],
                "_add": [
                    "self",
                    "op1",
                    "op2",
                    "operator_name",
                    "hints"
                ]
            },
            "_AddAndReturnDiag": {
                "can_add": [
                    "self",
                    "op1",
                    "op2"
                ],
                "_add": [
                    "self",
                    "op1",
                    "op2",
                    "operator_name",
                    "hints"
                ]
            },
            "_AddAndReturnTriL": {
                "can_add": [
                    "self",
                    "op1",
                    "op2"
                ],
                "_add": [
                    "self",
                    "op1",
                    "op2",
                    "operator_name",
                    "hints"
                ]
            },
            "_AddAndReturnMatrix": {
                "can_add": [
                    "self",
                    "op1",
                    "op2"
                ],
                "_add": [
                    "self",
                    "op1",
                    "op2",
                    "operator_name",
                    "hints"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator": {
            "_adjoint": [
                "matrix",
                "name"
            ],
            "_cholesky": [
                "input",
                "name"
            ],
            "_diag_part": [
                "input",
                "name",
                "k",
                "padding_value"
            ],
            "_det": [
                "input",
                "name"
            ],
            "_inverse": [
                "input",
                "adjoint",
                "name"
            ],
            "_logdet": [
                "matrix",
                "name"
            ],
            "_matmul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "adjoint_a",
                "adjoint_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "_solve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "_trace": [
                "x",
                "name"
            ],
            "LinearOperator": {
                "__init__": [
                    "self",
                    "dtype",
                    "graph_parents",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "graph_parents": [
                    "self"
                ],
                "is_non_singular": [
                    "self"
                ],
                "is_self_adjoint": [
                    "self"
                ],
                "is_positive_definite": [
                    "self"
                ],
                "is_square": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "shape_tensor": [
                    "self",
                    "name"
                ],
                "batch_shape": [
                    "self"
                ],
                "batch_shape_tensor": [
                    "self",
                    "name"
                ],
                "tensor_rank": [
                    "self",
                    "name"
                ],
                "tensor_rank_tensor": [
                    "self",
                    "name"
                ],
                "domain_dimension": [
                    "self"
                ],
                "domain_dimension_tensor": [
                    "self",
                    "name"
                ],
                "range_dimension": [
                    "self"
                ],
                "range_dimension_tensor": [
                    "self",
                    "name"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_max_condition_number_to_be_non_singular": [
                    "self"
                ],
                "assert_non_singular": [
                    "self",
                    "name"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "assert_positive_definite": [
                    "self",
                    "name"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "assert_self_adjoint": [
                    "self",
                    "name"
                ],
                "_check_input_dtype": [
                    "self",
                    "arg"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg",
                    "name"
                ],
                "_matvec": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "matvec": [
                    "self",
                    "x",
                    "adjoint",
                    "name"
                ],
                "_determinant": [
                    "self"
                ],
                "determinant": [
                    "self",
                    "name"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "log_abs_determinant": [
                    "self",
                    "name"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg",
                    "name"
                ],
                "_solvevec": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "solvevec": [
                    "self",
                    "rhs",
                    "adjoint",
                    "name"
                ],
                "adjoint": [
                    "self",
                    "name"
                ],
                "inverse": [
                    "self",
                    "name"
                ],
                "cholesky": [
                    "self",
                    "name"
                ],
                "_to_dense": [
                    "self"
                ],
                "to_dense": [
                    "self",
                    "name"
                ],
                "_diag_part": [
                    "self"
                ],
                "diag_part": [
                    "self",
                    "name"
                ],
                "_trace": [
                    "self"
                ],
                "trace": [
                    "self",
                    "name"
                ],
                "_add_to_tensor": [
                    "self",
                    "x"
                ],
                "add_to_tensor": [
                    "self",
                    "x",
                    "name"
                ],
                "_can_use_cholesky": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_lower_triangular": {
            "LinearOperatorLowerTriangular": {
                "__init__": [
                    "self",
                    "tril",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_check_tril": [
                    "self",
                    "tril"
                ],
                "_get_tril": [
                    "self"
                ],
                "_get_diag": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_composition": {
            "LinearOperatorComposition": {
                "__init__": [
                    "self",
                    "operators",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "operators": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_inversion": {
            "LinearOperatorInversion": {
                "__init__": [
                    "self",
                    "operator",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "operator": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.adjoint_registrations": {
            "_adjoint_linear_operator": [
                "linop"
            ],
            "_adjoint_adjoint_linear_operator": [
                "linop"
            ],
            "_adjoint_identity": [
                "identity_operator"
            ],
            "_adjoint_scaled_identity": [
                "identity_operator"
            ],
            "_adjoint_diag": [
                "diag_operator"
            ],
            "_adjoint_block_diag": [
                "block_diag_operator"
            ],
            "_adjoint_kronecker": [
                "kronecker_operator"
            ],
            "_adjoint_circulant": [
                "circulant_operator"
            ],
            "_adjoint_householder": [
                "householder_operator"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_circulant": {
            "_to_complex": [
                "x"
            ],
            "_BaseLinearOperatorCirculant": {
                "__init__": [
                    "self",
                    "spectrum",
                    "block_depth",
                    "input_output_dtype",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_check_spectrum_and_return_tensor": [
                    "self",
                    "spectrum"
                ],
                "block_depth": [
                    "self"
                ],
                "block_shape_tensor": [
                    "self"
                ],
                "block_shape": [
                    "self"
                ],
                "spectrum": [
                    "self"
                ],
                "_vectorize_then_blockify": [
                    "self",
                    "matrix"
                ],
                "_unblockify_then_matricize": [
                    "self",
                    "vec"
                ],
                "_fft": [
                    "self",
                    "x"
                ],
                "_ifft": [
                    "self",
                    "x"
                ],
                "convolution_kernel": [
                    "self",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "assert_hermitian_spectrum": [
                    "self",
                    "name"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_broadcast_batch_dims": [
                    "self",
                    "x",
                    "spectrum"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_diag_part": [
                    "self"
                ],
                "_trace": [
                    "self"
                ]
            },
            "LinearOperatorCirculant": {
                "__init__": [
                    "self",
                    "spectrum",
                    "input_output_dtype",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ]
            },
            "LinearOperatorCirculant2D": {
                "__init__": [
                    "self",
                    "spectrum",
                    "input_output_dtype",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ]
            },
            "LinearOperatorCirculant3D": {
                "__init__": [
                    "self",
                    "spectrum",
                    "input_output_dtype",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_adjoint": {
            "LinearOperatorAdjoint": {
                "__init__": [
                    "self",
                    "operator",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "operator": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_matvec": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_trace": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_solvevec": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_algebra": {
            "_registered_function": [
                "type_list",
                "registry"
            ],
            "_registered_adjoint": [
                "type_a"
            ],
            "_registered_cholesky": [
                "type_a"
            ],
            "_registered_matmul": [
                "type_a",
                "type_b"
            ],
            "_registered_solve": [
                "type_a",
                "type_b"
            ],
            "_registered_inverse": [
                "type_a"
            ],
            "adjoint": [
                "lin_op_a",
                "name"
            ],
            "cholesky": [
                "lin_op_a",
                "name"
            ],
            "matmul": [
                "lin_op_a",
                "lin_op_b",
                "name"
            ],
            "solve": [
                "lin_op_a",
                "lin_op_b",
                "name"
            ],
            "inverse": [
                "lin_op_a",
                "name"
            ],
            "RegisterAdjoint": {
                "__init__": [
                    "self",
                    "lin_op_cls_a"
                ],
                "__call__": [
                    "self",
                    "adjoint_fn"
                ]
            },
            "RegisterCholesky": {
                "__init__": [
                    "self",
                    "lin_op_cls_a"
                ],
                "__call__": [
                    "self",
                    "cholesky_fn"
                ]
            },
            "RegisterMatmul": {
                "__init__": [
                    "self",
                    "lin_op_cls_a",
                    "lin_op_cls_b"
                ],
                "__call__": [
                    "self",
                    "matmul_fn"
                ]
            },
            "RegisterSolve": {
                "__init__": [
                    "self",
                    "lin_op_cls_a",
                    "lin_op_cls_b"
                ],
                "__call__": [
                    "self",
                    "solve_fn"
                ]
            },
            "RegisterInverse": {
                "__init__": [
                    "self",
                    "lin_op_cls_a"
                ],
                "__call__": [
                    "self",
                    "inverse_fn"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.cholesky_registrations": {
            "_cholesky_linear_operator": [
                "linop"
            ],
            "_cholesky_diag": [
                "diag_operator"
            ],
            "_cholesky_identity": [
                "identity_operator"
            ],
            "_cholesky_scaled_identity": [
                "identity_operator"
            ],
            "_cholesky_block_diag": [
                "block_diag_operator"
            ],
            "_cholesky_kronecker": [
                "kronecker_operator"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_identity": {
            "BaseLinearOperatorIdentity": {
                "_check_num_rows_possibly_add_asserts": [
                    "self"
                ],
                "_min_matrix_dim": [
                    "self"
                ],
                "_min_matrix_dim_tensor": [
                    "self"
                ],
                "_ones_diag": [
                    "self"
                ]
            },
            "LinearOperatorIdentity": {
                "__init__": [
                    "self",
                    "num_rows",
                    "batch_shape",
                    "dtype",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "assert_proper_shapes",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_possibly_broadcast_batch_shape": [
                    "self",
                    "x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_trace": [
                    "self"
                ],
                "_diag_part": [
                    "self"
                ],
                "add_to_tensor": [
                    "self",
                    "mat",
                    "name"
                ],
                "_check_num_rows_possibly_add_asserts": [
                    "self"
                ],
                "_check_batch_shape_possibly_add_asserts": [
                    "self"
                ]
            },
            "LinearOperatorScaledIdentity": {
                "__init__": [
                    "self",
                    "num_rows",
                    "multiplier",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "assert_proper_shapes",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_make_multiplier_matrix": [
                    "self",
                    "conjugate"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_trace": [
                    "self"
                ],
                "_diag_part": [
                    "self"
                ],
                "add_to_tensor": [
                    "self",
                    "mat",
                    "name"
                ],
                "multiplier": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_low_rank_update": {
            "LinearOperatorLowRankUpdate": {
                "__init__": [
                    "self",
                    "base_operator",
                    "u",
                    "diag_update",
                    "v",
                    "is_diag_update_positive",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_check_shapes": [
                    "self"
                ],
                "_set_diag_operators": [
                    "self",
                    "diag_update",
                    "is_diag_update_positive"
                ],
                "u": [
                    "self"
                ],
                "v": [
                    "self"
                ],
                "is_diag_update_positive": [
                    "self"
                ],
                "diag_update": [
                    "self"
                ],
                "diag_operator": [
                    "self"
                ],
                "base_operator": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_make_capacitance": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg": {},
        "tensorflow_core.python.ops.linalg.matmul_registrations": {
            "_matmul_linear_operator": [
                "linop_a",
                "linop_b"
            ],
            "_matmul_linear_operator_identity_left": [
                "identity",
                "linop"
            ],
            "_matmul_linear_operator_identity_right": [
                "linop",
                "identity"
            ],
            "_matmul_linear_operator_zeros_right": [
                "linop",
                "zeros"
            ],
            "_matmul_linear_operator_zeros_left": [
                "zeros",
                "linop"
            ],
            "_matmul_linear_operator_diag": [
                "linop_a",
                "linop_b"
            ],
            "_matmul_linear_operator_diag_scaled_identity_right": [
                "linop_diag",
                "linop_scaled_identity"
            ],
            "_matmul_linear_operator_diag_scaled_identity_left": [
                "linop_scaled_identity",
                "linop_diag"
            ],
            "_matmul_linear_operator_diag_tril": [
                "linop_diag",
                "linop_triangular"
            ],
            "_matmul_linear_operator_tril_diag": [
                "linop_triangular",
                "linop_diag"
            ],
            "_matmul_linear_operator_circulant_circulant": [
                "linop_a",
                "linop_b"
            ]
        },
        "tensorflow_core.python.ops.linalg.linear_operator_householder": {
            "LinearOperatorHouseholder": {
                "__init__": [
                    "self",
                    "reflection_axis",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "is_square",
                    "name"
                ],
                "_check_reflection_axis": [
                    "self",
                    "reflection_axis"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_tensor": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_trace": [
                    "self"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "adjoint_arg"
                ],
                "_to_dense": [
                    "self"
                ],
                "_diag_part": [
                    "self"
                ],
                "reflection_axis": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.linalg.linear_operator_test_util": {
            "_test_to_dense": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_det": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_log_abs_det": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_matmul_base": [
                "self",
                "use_placeholder",
                "shapes_info",
                "dtype",
                "adjoint",
                "adjoint_arg",
                "with_batch"
            ],
            "_test_matmul": [
                "use_placeholder",
                "shapes_info",
                "dtype",
                "adjoint",
                "adjoint_arg"
            ],
            "_test_matmul_with_broadcast": [
                "use_placeholder",
                "shapes_info",
                "dtype",
                "adjoint",
                "adjoint_arg"
            ],
            "_test_adjoint": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_cholesky": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_solve_base": [
                "self",
                "use_placeholder",
                "shapes_info",
                "dtype",
                "adjoint",
                "adjoint_arg",
                "with_batch"
            ],
            "_test_solve": [
                "use_placeholder",
                "shapes_info",
                "dtype",
                "adjoint",
                "adjoint_arg"
            ],
            "_test_solve_with_broadcast": [
                "use_placeholder",
                "shapes_info",
                "dtype",
                "adjoint",
                "adjoint_arg"
            ],
            "_test_inverse": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_trace": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_add_to_tensor": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "_test_diag_part": [
                "use_placeholder",
                "shapes_info",
                "dtype"
            ],
            "add_tests": [
                "test_cls"
            ],
            "random_positive_definite_matrix": [
                "shape",
                "dtype",
                "force_well_conditioned"
            ],
            "random_tril_matrix": [
                "shape",
                "dtype",
                "force_well_conditioned",
                "remove_upper"
            ],
            "random_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed"
            ],
            "random_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed"
            ],
            "random_sign_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed"
            ],
            "random_normal_correlated_columns": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "eps",
                "seed"
            ],
            "OperatorShapesInfo": {
                "__init__": [
                    "self",
                    "shape"
                ]
            },
            "CheckTapeSafeSkipOptions": {},
            "LinearOperatorDerivedClassTest": {
                "assertAC": [
                    "self",
                    "x",
                    "y"
                ],
                "adjoint_options": [],
                "adjoint_arg_options": [],
                "dtypes_to_test": [],
                "use_placeholder_options": [],
                "operator_shapes_infos": [],
                "operator_and_matrix": [
                    "self",
                    "shapes_info",
                    "dtype",
                    "use_placeholder",
                    "ensure_self_adjoint_and_pd"
                ],
                "make_rhs": [
                    "self",
                    "operator",
                    "adjoint",
                    "with_batch"
                ],
                "make_x": [
                    "self",
                    "operator",
                    "adjoint",
                    "with_batch"
                ],
                "skip_these_tests": [],
                "assertRaisesError": [
                    "self",
                    "msg"
                ],
                "check_tape_safe": [
                    "self",
                    "operator",
                    "skip_options"
                ]
            },
            "SquareLinearOperatorDerivedClassTest": {
                "operator_shapes_infos": [],
                "make_rhs": [
                    "self",
                    "operator",
                    "adjoint",
                    "with_batch"
                ],
                "make_x": [
                    "self",
                    "operator",
                    "adjoint",
                    "with_batch"
                ],
                "_get_num_systems": [
                    "self",
                    "operator"
                ]
            },
            "NonSquareLinearOperatorDerivedClassTest": {
                "skip_these_tests": [],
                "operator_shapes_infos": [],
                "make_rhs": [
                    "self",
                    "operator",
                    "adjoint",
                    "with_batch"
                ],
                "make_x": [
                    "self",
                    "operator",
                    "adjoint",
                    "with_batch"
                ],
                "_get_num_systems": [
                    "self",
                    "operator"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.categorical": {
            "_broadcast_cat_event_and_params": [
                "event",
                "params",
                "base_dtype"
            ],
            "_kl_categorical_categorical": [
                "a",
                "b",
                "name"
            ],
            "Categorical": {
                "__init__": [
                    "self",
                    "logits",
                    "probs",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "event_size": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_cdf": [
                    "self",
                    "k"
                ],
                "_log_prob": [
                    "self",
                    "k"
                ],
                "_entropy": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.laplace": {
            "Laplace": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_log_survival_function": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_median": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ]
            },
            "LaplaceWithSoftplusScale": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.special_math": {
            "ndtr": [
                "x",
                "name"
            ],
            "_ndtr": [
                "x"
            ],
            "ndtri": [
                "p",
                "name"
            ],
            "_ndtri": [
                "p"
            ],
            "log_ndtr": [
                "x",
                "series_order",
                "name"
            ],
            "_log_ndtr_lower": [
                "x",
                "series_order"
            ],
            "_log_ndtr_asymptotic_series": [
                "x",
                "series_order"
            ],
            "erfinv": [
                "x",
                "name"
            ],
            "_double_factorial": [
                "n"
            ],
            "log_cdf_laplace": [
                "x",
                "name"
            ]
        },
        "tensorflow_core.python.ops.distributions.normal": {
            "_kl_normal_normal": [
                "n_a",
                "n_b",
                "name"
            ],
            "Normal": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_survival_function": [
                    "self",
                    "x"
                ],
                "_survival_function": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_quantile": [
                    "self",
                    "p"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ],
                "_inv_z": [
                    "self",
                    "z"
                ]
            },
            "NormalWithSoftplusScale": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.student_t": {
            "StudentT": {
                "__init__": [
                    "self",
                    "df",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "df": [
                    "self"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "StudentTWithAbsDfSoftplusScale": {
                "__init__": [
                    "self",
                    "df",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.beta": {
            "_kl_beta_beta": [
                "d1",
                "d2",
                "name"
            ],
            "Beta": {
                "__init__": [
                    "self",
                    "concentration1",
                    "concentration0",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "concentration1": [
                    "self"
                ],
                "concentration0": [
                    "self"
                ],
                "total_concentration": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_maybe_assert_valid_concentration": [
                    "self",
                    "concentration",
                    "validate_args"
                ],
                "_maybe_assert_valid_sample": [
                    "self",
                    "x"
                ]
            },
            "BetaWithSoftplusConcentration": {
                "__init__": [
                    "self",
                    "concentration1",
                    "concentration0",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.uniform": {
            "Uniform": {
                "__init__": [
                    "self",
                    "low",
                    "high",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "low": [
                    "self"
                ],
                "high": [
                    "self"
                ],
                "range": [
                    "self",
                    "name"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.bijector_test_util": {
            "assert_finite": [
                "array"
            ],
            "assert_strictly_increasing": [
                "array"
            ],
            "assert_strictly_decreasing": [
                "array"
            ],
            "assert_strictly_monotonic": [
                "array"
            ],
            "assert_scalar_congruency": [
                "bijector",
                "lower_x",
                "upper_x",
                "n",
                "rtol",
                "sess"
            ],
            "assert_bijective_and_finite": [
                "bijector",
                "x",
                "y",
                "event_ndims",
                "atol",
                "rtol",
                "sess"
            ]
        },
        "tensorflow_core.python.ops.distributions.kullback_leibler": {
            "_registered_kl": [
                "type_a",
                "type_b"
            ],
            "kl_divergence": [
                "distribution_a",
                "distribution_b",
                "allow_nan_stats",
                "name"
            ],
            "cross_entropy": [
                "ref",
                "other",
                "allow_nan_stats",
                "name"
            ],
            "RegisterKL": {
                "__init__": [
                    "self",
                    "dist_cls_a",
                    "dist_cls_b"
                ],
                "__call__": [
                    "self",
                    "kl_fn"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.distribution": {
            "_copy_fn": [
                "fn"
            ],
            "_update_docstring": [
                "old_str",
                "append_str"
            ],
            "_convert_to_tensor": [
                "value",
                "name",
                "preferred_dtype"
            ],
            "_BaseDistribution": {},
            "_DistributionMeta": {
                "__new__": [
                    "mcs",
                    "classname",
                    "baseclasses",
                    "attrs"
                ]
            },
            "ReparameterizationType": {
                "__init__": [
                    "self",
                    "rep_type"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "Distribution": {
                "__init__": [
                    "self",
                    "dtype",
                    "reparameterization_type",
                    "validate_args",
                    "allow_nan_stats",
                    "parameters",
                    "graph_parents",
                    "name"
                ],
                "_parameters": [
                    "self",
                    "value"
                ],
                "param_shapes": [
                    "cls",
                    "sample_shape",
                    "name"
                ],
                "param_static_shapes": [
                    "cls",
                    "sample_shape"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "parameters": [
                    "self"
                ],
                "reparameterization_type": [
                    "self"
                ],
                "allow_nan_stats": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "batch_shape_tensor": [
                    "self",
                    "name"
                ],
                "_batch_shape": [
                    "self"
                ],
                "batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "event_shape_tensor": [
                    "self",
                    "name"
                ],
                "_event_shape": [
                    "self"
                ],
                "event_shape": [
                    "self"
                ],
                "is_scalar_event": [
                    "self",
                    "name"
                ],
                "is_scalar_batch": [
                    "self",
                    "name"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_call_sample_n": [
                    "self",
                    "sample_shape",
                    "seed",
                    "name"
                ],
                "sample": [
                    "self",
                    "sample_shape",
                    "seed",
                    "name"
                ],
                "_log_prob": [
                    "self",
                    "value"
                ],
                "_call_log_prob": [
                    "self",
                    "value",
                    "name"
                ],
                "log_prob": [
                    "self",
                    "value",
                    "name"
                ],
                "_prob": [
                    "self",
                    "value"
                ],
                "_call_prob": [
                    "self",
                    "value",
                    "name"
                ],
                "prob": [
                    "self",
                    "value",
                    "name"
                ],
                "_log_cdf": [
                    "self",
                    "value"
                ],
                "_call_log_cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "log_cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "_cdf": [
                    "self",
                    "value"
                ],
                "_call_cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "_log_survival_function": [
                    "self",
                    "value"
                ],
                "_call_log_survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "log_survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "_survival_function": [
                    "self",
                    "value"
                ],
                "_call_survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "_entropy": [
                    "self"
                ],
                "entropy": [
                    "self",
                    "name"
                ],
                "_mean": [
                    "self"
                ],
                "mean": [
                    "self",
                    "name"
                ],
                "_quantile": [
                    "self",
                    "value"
                ],
                "_call_quantile": [
                    "self",
                    "value",
                    "name"
                ],
                "quantile": [
                    "self",
                    "value",
                    "name"
                ],
                "_variance": [
                    "self"
                ],
                "variance": [
                    "self",
                    "name"
                ],
                "_stddev": [
                    "self"
                ],
                "stddev": [
                    "self",
                    "name"
                ],
                "_covariance": [
                    "self"
                ],
                "covariance": [
                    "self",
                    "name"
                ],
                "_mode": [
                    "self"
                ],
                "mode": [
                    "self",
                    "name"
                ],
                "_cross_entropy": [
                    "self",
                    "other"
                ],
                "cross_entropy": [
                    "self",
                    "other",
                    "name"
                ],
                "_kl_divergence": [
                    "self",
                    "other"
                ],
                "kl_divergence": [
                    "self",
                    "other",
                    "name"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_expand_sample_shape_to_vector": [
                    "self",
                    "x",
                    "name"
                ],
                "_set_sample_static_shape": [
                    "self",
                    "x",
                    "sample_shape"
                ],
                "_is_scalar_helper": [
                    "self",
                    "static_shape",
                    "dynamic_shape_fn"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.distributions": {},
        "tensorflow_core.python.ops.distributions.dirichlet": {
            "_kl_dirichlet_dirichlet": [
                "d1",
                "d2",
                "name"
            ],
            "Dirichlet": {
                "__init__": [
                    "self",
                    "concentration",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "concentration": [
                    "self"
                ],
                "total_concentration": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_variance_scale_term": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_maybe_assert_valid_concentration": [
                    "self",
                    "concentration",
                    "validate_args"
                ],
                "_maybe_assert_valid_sample": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.exponential": {
            "Exponential": {
                "__init__": [
                    "self",
                    "rate",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "rate": [
                    "self"
                ],
                "_log_survival_function": [
                    "self",
                    "value"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ]
            },
            "ExponentialWithSoftplusRate": {
                "__init__": [
                    "self",
                    "rate",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.identity_bijector": {
            "Identity": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.util": {
            "assert_integer_form": [
                "x",
                "data",
                "summarize",
                "message",
                "int_dtype",
                "name"
            ],
            "assert_symmetric": [
                "matrix"
            ],
            "embed_check_nonnegative_integer_form": [
                "x",
                "name"
            ],
            "same_dynamic_shape": [
                "a",
                "b"
            ],
            "maybe_get_static_value": [
                "x",
                "dtype"
            ],
            "get_logits_and_probs": [
                "logits",
                "probs",
                "multidimensional",
                "validate_args",
                "name",
                "dtype"
            ],
            "_is_known_unsigned_by_dtype": [
                "dt"
            ],
            "_is_known_signed_by_dtype": [
                "dt"
            ],
            "_is_known_dtype": [
                "dt"
            ],
            "_largest_integer_by_dtype": [
                "dt"
            ],
            "_smallest_integer_by_dtype": [
                "dt"
            ],
            "_is_integer_like_by_dtype": [
                "dt"
            ],
            "embed_check_categorical_event_shape": [
                "categorical_param",
                "name"
            ],
            "embed_check_integer_casting_closed": [
                "x",
                "target_dtype",
                "assert_nonnegative",
                "name"
            ],
            "log_combinations": [
                "n",
                "counts",
                "name"
            ],
            "matrix_diag_transform": [
                "matrix",
                "transform",
                "name"
            ],
            "rotate_transpose": [
                "x",
                "shift",
                "name"
            ],
            "pick_vector": [
                "cond",
                "true_vector",
                "false_vector",
                "name"
            ],
            "prefer_static_broadcast_shape": [
                "shape1",
                "shape2",
                "name"
            ],
            "prefer_static_rank": [
                "x"
            ],
            "prefer_static_shape": [
                "x"
            ],
            "prefer_static_value": [
                "x"
            ],
            "gen_new_seed": [
                "seed",
                "salt"
            ],
            "fill_triangular": [
                "x",
                "upper",
                "name"
            ],
            "fill_triangular_inverse": [
                "x",
                "upper",
                "name"
            ],
            "tridiag": [
                "below",
                "diag",
                "above",
                "name"
            ],
            "reduce_weighted_logsumexp": [
                "logx",
                "w",
                "axis",
                "keep_dims",
                "return_sign",
                "name"
            ],
            "softplus_inverse": [
                "x",
                "name"
            ],
            "dimension_size": [
                "x",
                "axis"
            ],
            "process_quadrature_grid_and_probs": [
                "quadrature_grid_and_probs",
                "dtype",
                "validate_args",
                "name"
            ],
            "pad": [
                "x",
                "axis",
                "front",
                "back",
                "value",
                "count",
                "name"
            ],
            "parent_frame_arguments": [],
            "AppendDocstring": {
                "__init__": [
                    "self",
                    "additional_note",
                    "kwargs_dict"
                ],
                "__call__": [
                    "self",
                    "fn"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.dirichlet_multinomial": {
            "DirichletMultinomial": {
                "__init__": [
                    "self",
                    "total_count",
                    "concentration",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "total_count": [
                    "self"
                ],
                "concentration": [
                    "self"
                ],
                "total_concentration": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_variance_scale_term": [
                    "self"
                ],
                "_maybe_assert_valid_concentration": [
                    "self",
                    "concentration",
                    "validate_args"
                ],
                "_maybe_assert_valid_sample": [
                    "self",
                    "counts"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.gamma": {
            "_kl_gamma_gamma": [
                "g0",
                "g1",
                "name"
            ],
            "Gamma": {
                "__init__": [
                    "self",
                    "concentration",
                    "rate",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "concentration": [
                    "self"
                ],
                "rate": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_maybe_assert_valid_sample": [
                    "self",
                    "x"
                ]
            },
            "GammaWithSoftplusConcentrationRate": {
                "__init__": [
                    "self",
                    "concentration",
                    "rate",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.bijector": {},
        "tensorflow_core.python.ops.distributions.multinomial": {
            "Multinomial": {
                "__init__": [
                    "self",
                    "total_count",
                    "logits",
                    "probs",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "total_count": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "counts"
                ],
                "_log_normalization": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_maybe_assert_valid_sample": [
                    "self",
                    "counts"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.bernoulli": {
            "_kl_bernoulli_bernoulli": [
                "a",
                "b",
                "name"
            ],
            "Bernoulli": {
                "__init__": [
                    "self",
                    "logits",
                    "probs",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "event"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.transformed_distribution": {
            "_static_value": [
                "x"
            ],
            "_logical_and": [],
            "_logical_equal": [
                "x",
                "y"
            ],
            "_logical_not": [
                "x"
            ],
            "_concat_vectors": [],
            "_pick_scalar_condition": [
                "pred",
                "cond_true",
                "cond_false"
            ],
            "_ones_like": [
                "x"
            ],
            "_ndims_from_shape": [
                "shape"
            ],
            "_is_scalar_from_shape": [
                "shape"
            ],
            "TransformedDistribution": {
                "__init__": [
                    "self",
                    "distribution",
                    "bijector",
                    "batch_shape",
                    "event_shape",
                    "validate_args",
                    "name"
                ],
                "distribution": [
                    "self"
                ],
                "bijector": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_call_sample_n": [
                    "self",
                    "sample_shape",
                    "seed",
                    "name"
                ],
                "_log_prob": [
                    "self",
                    "y"
                ],
                "_finish_log_prob_for_one_fiber": [
                    "self",
                    "y",
                    "x",
                    "ildj",
                    "event_ndims"
                ],
                "_prob": [
                    "self",
                    "y"
                ],
                "_finish_prob_for_one_fiber": [
                    "self",
                    "y",
                    "x",
                    "ildj",
                    "event_ndims"
                ],
                "_log_cdf": [
                    "self",
                    "y"
                ],
                "_cdf": [
                    "self",
                    "y"
                ],
                "_log_survival_function": [
                    "self",
                    "y"
                ],
                "_survival_function": [
                    "self",
                    "y"
                ],
                "_quantile": [
                    "self",
                    "value"
                ],
                "_entropy": [
                    "self"
                ],
                "_maybe_validate_shape_override": [
                    "self",
                    "override_shape",
                    "base_is_scalar",
                    "validate_args",
                    "name"
                ],
                "_maybe_rotate_dims": [
                    "self",
                    "x",
                    "rotate_right"
                ],
                "_maybe_get_static_event_ndims": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions.bijector_impl": {
            "_Mapping": {
                "__new__": [
                    "cls",
                    "x",
                    "y",
                    "ildj_map",
                    "kwargs"
                ],
                "x_key": [
                    "self"
                ],
                "y_key": [
                    "self"
                ],
                "merge": [
                    "self",
                    "x",
                    "y",
                    "ildj_map",
                    "kwargs",
                    "mapping"
                ],
                "_merge_dicts": [
                    "self",
                    "old",
                    "new"
                ],
                "_merge": [
                    "self",
                    "old",
                    "new"
                ],
                "_deep_tuple": [
                    "self",
                    "x"
                ]
            },
            "Bijector": {
                "__init__": [
                    "self",
                    "graph_parents",
                    "is_constant_jacobian",
                    "validate_args",
                    "dtype",
                    "forward_min_event_ndims",
                    "inverse_min_event_ndims",
                    "name"
                ],
                "graph_parents": [
                    "self"
                ],
                "forward_min_event_ndims": [
                    "self"
                ],
                "inverse_min_event_ndims": [
                    "self"
                ],
                "is_constant_jacobian": [
                    "self"
                ],
                "_is_injective": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape"
                ],
                "forward_event_shape_tensor": [
                    "self",
                    "input_shape",
                    "name"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape"
                ],
                "inverse_event_shape_tensor": [
                    "self",
                    "output_shape",
                    "name"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_call_forward": [
                    "self",
                    "x",
                    "name"
                ],
                "forward": [
                    "self",
                    "x",
                    "name"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_call_inverse": [
                    "self",
                    "y",
                    "name"
                ],
                "inverse": [
                    "self",
                    "y",
                    "name"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_call_inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "event_ndims",
                    "name"
                ],
                "inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "event_ndims",
                    "name"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_call_forward_log_det_jacobian": [
                    "self",
                    "x",
                    "event_ndims",
                    "name"
                ],
                "forward_log_det_jacobian": [
                    "self",
                    "x",
                    "event_ndims",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_maybe_assert_dtype": [
                    "self",
                    "x"
                ],
                "_cache": [
                    "self",
                    "mapping"
                ],
                "_lookup": [
                    "self",
                    "x",
                    "y",
                    "kwargs"
                ],
                "_reduce_jacobian_det_over_event": [
                    "self",
                    "y",
                    "ildj",
                    "min_event_ndims",
                    "event_ndims"
                ],
                "_get_event_reduce_dims": [
                    "self",
                    "min_event_ndims",
                    "event_ndims"
                ],
                "_check_valid_event_ndims": [
                    "self",
                    "min_event_ndims",
                    "event_ndims"
                ],
                "_maybe_get_static_event_ndims": [
                    "self",
                    "event_ndims"
                ]
            }
        },
        "tensorflow_core.python.ops.distributions": {},
        "tensorflow_core.python.ops.signal.shape_ops": {
            "_infer_frame_shape": [
                "signal",
                "frame_length",
                "frame_step",
                "pad_end",
                "axis"
            ],
            "frame": [
                "signal",
                "frame_length",
                "frame_step",
                "pad_end",
                "pad_value",
                "axis",
                "name"
            ]
        },
        "tensorflow_core.python.ops.signal.fft_ops": {
            "_infer_fft_length_for_rfft": [
                "input_tensor",
                "fft_rank"
            ],
            "_infer_fft_length_for_irfft": [
                "input_tensor",
                "fft_rank"
            ],
            "_maybe_pad_for_rfft": [
                "input_tensor",
                "fft_rank",
                "fft_length",
                "is_reverse"
            ],
            "_rfft_wrapper": [
                "fft_fn",
                "fft_rank",
                "default_name"
            ],
            "_irfft_wrapper": [
                "ifft_fn",
                "fft_rank",
                "default_name"
            ],
            "_fft_size_for_grad": [
                "grad",
                "rank"
            ],
            "_fft_grad": [
                "_",
                "grad"
            ],
            "_ifft_grad": [
                "_",
                "grad"
            ],
            "_fft2d_grad": [
                "_",
                "grad"
            ],
            "_ifft2d_grad": [
                "_",
                "grad"
            ],
            "_fft3d_grad": [
                "_",
                "grad"
            ],
            "_ifft3d_grad": [
                "_",
                "grad"
            ],
            "_rfft_grad_helper": [
                "rank",
                "irfft_fn"
            ],
            "_irfft_grad_helper": [
                "rank",
                "rfft_fn"
            ],
            "fftshift": [
                "x",
                "axes",
                "name"
            ],
            "ifftshift": [
                "x",
                "axes",
                "name"
            ]
        },
        "tensorflow_core.python.ops.signal.reconstruction_ops": {
            "overlap_and_add": [
                "signal",
                "frame_step",
                "name"
            ]
        },
        "tensorflow_core.python.ops.signal.mfcc_ops": {
            "mfccs_from_log_mel_spectrograms": [
                "log_mel_spectrograms",
                "name"
            ]
        },
        "tensorflow_core.python.ops.signal.window_ops": {
            "hann_window": [
                "window_length",
                "periodic",
                "dtype",
                "name"
            ],
            "hamming_window": [
                "window_length",
                "periodic",
                "dtype",
                "name"
            ],
            "_raised_cosine_window": [
                "name",
                "default_name",
                "window_length",
                "periodic",
                "dtype",
                "a",
                "b"
            ]
        },
        "tensorflow_core.python.ops.signal.mel_ops": {
            "_mel_to_hertz": [
                "mel_values",
                "name"
            ],
            "_hertz_to_mel": [
                "frequencies_hertz",
                "name"
            ],
            "_validate_arguments": [
                "num_mel_bins",
                "sample_rate",
                "lower_edge_hertz",
                "upper_edge_hertz",
                "dtype"
            ],
            "linear_to_mel_weight_matrix": [
                "num_mel_bins",
                "num_spectrogram_bins",
                "sample_rate",
                "lower_edge_hertz",
                "upper_edge_hertz",
                "dtype",
                "name"
            ]
        },
        "tensorflow_core.python.ops.signal.dct_ops": {
            "_validate_dct_arguments": [
                "input_tensor",
                "dct_type",
                "n",
                "axis",
                "norm"
            ],
            "dct": [
                "input",
                "type",
                "n",
                "axis",
                "norm",
                "name"
            ],
            "idct": [
                "input",
                "type",
                "n",
                "axis",
                "norm",
                "name"
            ]
        },
        "tensorflow_core.python.ops.signal.util_ops": {
            "gcd": [
                "a",
                "b",
                "name"
            ]
        },
        "tensorflow_core.python.ops.signal.signal": {},
        "tensorflow_core.python.ops.signal.spectral_ops": {
            "stft": [
                "signals",
                "frame_length",
                "frame_step",
                "fft_length",
                "window_fn",
                "pad_end",
                "name"
            ],
            "inverse_stft_window_fn": [
                "frame_step",
                "forward_window_fn",
                "name"
            ],
            "inverse_stft": [
                "stfts",
                "frame_length",
                "frame_step",
                "fft_length",
                "window_fn",
                "name"
            ],
            "_enclosing_power_of_two": [
                "value"
            ]
        },
        "tensorflow_core.python.ops.signal": {},
        "tensorflow_core.python.ops.ragged.ragged_batch_gather_with_default_op": {
            "batch_gather_with_default": [
                "params",
                "indices",
                "default_value",
                "name"
            ],
            "_get_pad_shape": [
                "params",
                "indices",
                "row_splits_dtype"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_batch_gather_ops": {
            "batch_gather": [
                "params",
                "indices",
                "name"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_tensor": {
            "is_ragged": [
                "value"
            ],
            "match_row_splits_dtypes": [],
            "convert_to_tensor_or_ragged_tensor": [
                "value",
                "dtype",
                "preferred_dtype",
                "name"
            ],
            "_ragged_tensor_value_from_components": [
                "components"
            ],
            "_ragged_tensor_session_fetch": [
                "rt"
            ],
            "_ragged_tensor_session_feed": [
                "feed_key",
                "feed_val"
            ],
            "_ragged_tensor_session_feed_for_partial_run": [
                "feed_key"
            ],
            "_assert_sparse_indices_are_ragged_right": [
                "indices"
            ],
            "_ragged_tensor_to_sparse_gradient": [
                "op",
                "unused_sparse_indices_grad",
                "sparse_values_grad",
                "unused_sparse_shape_grad"
            ],
            "_assert_monotonic_increasing": [
                "tensor",
                "message"
            ],
            "_assert_zero": [
                "tensor",
                "message"
            ],
            "_nrows": [
                "tensor",
                "out_type"
            ],
            "RaggedTensor": {
                "__init__": [
                    "self",
                    "values",
                    "row_splits",
                    "cached_row_lengths",
                    "cached_value_rowids",
                    "cached_nrows",
                    "internal"
                ],
                "from_value_rowids": [
                    "cls",
                    "values",
                    "value_rowids",
                    "nrows",
                    "name",
                    "validate"
                ],
                "from_row_splits": [
                    "cls",
                    "values",
                    "row_splits",
                    "name",
                    "validate"
                ],
                "from_row_lengths": [
                    "cls",
                    "values",
                    "row_lengths",
                    "name",
                    "validate"
                ],
                "from_row_starts": [
                    "cls",
                    "values",
                    "row_starts",
                    "name",
                    "validate"
                ],
                "from_row_limits": [
                    "cls",
                    "values",
                    "row_limits",
                    "name",
                    "validate"
                ],
                "from_nested_value_rowids": [
                    "cls",
                    "flat_values",
                    "nested_value_rowids",
                    "nested_nrows",
                    "name",
                    "validate"
                ],
                "from_nested_row_splits": [
                    "cls",
                    "flat_values",
                    "nested_row_splits",
                    "name",
                    "validate"
                ],
                "from_nested_row_lengths": [
                    "cls",
                    "flat_values",
                    "nested_row_lengths",
                    "name",
                    "validate"
                ],
                "_convert_values_and_row_partition": [
                    "cls",
                    "values",
                    "partition",
                    "name"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "ragged_rank": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "row_splits": [
                    "self"
                ],
                "flat_values": [
                    "self"
                ],
                "nested_row_splits": [
                    "self"
                ],
                "value_rowids": [
                    "self",
                    "name"
                ],
                "nested_value_rowids": [
                    "self",
                    "name"
                ],
                "nrows": [
                    "self",
                    "out_type",
                    "name"
                ],
                "row_starts": [
                    "self",
                    "name"
                ],
                "row_limits": [
                    "self",
                    "name"
                ],
                "row_lengths": [
                    "self",
                    "axis",
                    "name"
                ],
                "nested_row_lengths": [
                    "self",
                    "name"
                ],
                "bounding_shape": [
                    "self",
                    "axis",
                    "name",
                    "out_type"
                ],
                "with_values": [
                    "self",
                    "new_values"
                ],
                "with_flat_values": [
                    "self",
                    "new_values"
                ],
                "with_row_splits_dtype": [
                    "self",
                    "dtype"
                ],
                "from_tensor": [
                    "cls",
                    "tensor",
                    "lengths",
                    "padding",
                    "ragged_rank",
                    "name",
                    "row_splits_dtype"
                ],
                "to_tensor": [
                    "self",
                    "default_value",
                    "name"
                ],
                "from_sparse": [
                    "cls",
                    "st_input",
                    "name",
                    "row_splits_dtype"
                ],
                "to_sparse": [
                    "self",
                    "name"
                ],
                "_from_variant": [
                    "cls",
                    "variant",
                    "dtype",
                    "output_ragged_rank",
                    "input_ragged_rank",
                    "name"
                ],
                "_to_variant": [
                    "self",
                    "batched_input",
                    "name"
                ],
                "__repr__": [
                    "self"
                ],
                "to_list": [
                    "self"
                ],
                "_eager_value": [
                    "self"
                ],
                "_is_eager": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "_type_spec": [
                    "self"
                ],
                "_shape_invariant_to_type_spec": [
                    "self",
                    "shape"
                ],
                "consumers": [
                    "self"
                ]
            },
            "RaggedTensorSpec": {
                "value_type": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "shape",
                    "dtype",
                    "ragged_rank",
                    "row_splits_dtype"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "tensor_list"
                ],
                "_flat_tensor_specs": [
                    "self"
                ],
                "_to_tensor_list": [
                    "self",
                    "value"
                ],
                "_to_batched_tensor_list": [
                    "self",
                    "value"
                ],
                "_from_compatible_tensor_list": [
                    "self",
                    "tensor_list"
                ],
                "_batch": [
                    "self",
                    "batch_size"
                ],
                "_unbatch": [
                    "self"
                ],
                "_to_legacy_output_types": [
                    "self"
                ],
                "_to_legacy_output_shapes": [
                    "self"
                ],
                "_to_legacy_output_classes": [
                    "self"
                ],
                "from_value": [
                    "cls",
                    "value"
                ]
            },
            "RaggedTensorType": {
                "__init__": [
                    "self",
                    "dtype",
                    "ragged_rank",
                    "row_splits_dtype"
                ]
            }
        },
        "tensorflow_core.python.ops.ragged.ragged_where_op": {
            "where": [
                "condition",
                "x",
                "y",
                "name"
            ],
            "_elementwise_where": [
                "condition",
                "x",
                "y"
            ],
            "_coordinate_where": [
                "condition"
            ],
            "_nrows": [
                "rt_input",
                "out_type"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_functional_ops": {
            "map_flat_values": [
                "op"
            ],
            "_replace_ragged_with_flat_values": [
                "value",
                "nested_splits_lists"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_getitem": {
            "ragged_tensor_getitem": [
                "self",
                "key"
            ],
            "_ragged_getitem": [
                "rt_input",
                "key_list"
            ],
            "_slice_ragged_row_dimension": [
                "rt_input",
                "row_key"
            ],
            "_ragged_getitem_inner_dimensions": [
                "rt_input",
                "key_list"
            ],
            "_expand_ellipsis": [
                "key_list",
                "num_remaining_dims"
            ],
            "_tensors_in_key_list": [
                "key_list"
            ],
            "_build_ragged_tensor_from_value_ranges": [
                "starts",
                "limits",
                "step",
                "values"
            ],
            "_add_offset_to_ranges": [
                "offset",
                "starts",
                "limits"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_factory_ops": {
            "constant": [
                "pylist",
                "dtype",
                "ragged_rank",
                "inner_shape",
                "name",
                "row_splits_dtype"
            ],
            "constant_value": [
                "pylist",
                "dtype",
                "ragged_rank",
                "inner_shape",
                "row_splits_dtype"
            ],
            "_constant_value": [
                "ragged_factory",
                "inner_factory",
                "pylist",
                "dtype",
                "ragged_rank",
                "inner_shape"
            ],
            "_find_scalar_and_max_depth": [
                "pylist"
            ],
            "_default_inner_shape_for_pylist": [
                "pylist",
                "ragged_rank"
            ],
            "placeholder": [
                "dtype",
                "ragged_rank",
                "value_shape",
                "name"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_dispatch": {
            "_get_arg_infos": [
                "func",
                "arg_names"
            ],
            "_is_convertible_to_tensor": [
                "value"
            ],
            "_ragged_gather_v1": [
                "params",
                "indices",
                "validate_indices",
                "name",
                "axis",
                "batch_dims"
            ],
            "_ragged_gather_nd_v1": [
                "params",
                "indices",
                "name",
                "batch_dims"
            ],
            "_ragged_expand_dims_v1": [
                "input",
                "axis",
                "name",
                "dim"
            ],
            "_ragged_size_v1": [
                "input",
                "name",
                "out_type"
            ],
            "_ragged_squeeze_v1": [
                "input",
                "axis",
                "name",
                "squeeze_dims"
            ],
            "_ragged_dynamic_partition": [
                "data",
                "partitions",
                "num_partitions",
                "name"
            ],
            "register_dispatchers": [],
            "_ragged_op_signature": [
                "op",
                "ragged_args"
            ],
            "_op_is_in_tf_version": [
                "op",
                "version"
            ],
            "ragged_op_list": [
                "tf_version"
            ],
            "UnaryRaggedElementwiseDispatcher": {
                "__init__": [
                    "self",
                    "original_op",
                    "arg_is_list"
                ],
                "handle": [
                    "self",
                    "args",
                    "kwargs"
                ]
            },
            "BinaryRaggedElementwiseDispatcher": {
                "__init__": [
                    "self",
                    "original_op"
                ],
                "handle": [
                    "self",
                    "args",
                    "kwargs"
                ]
            },
            "RaggedDispatcher": {
                "__init__": [
                    "self",
                    "original_op",
                    "ragged_op",
                    "ragged_args"
                ],
                "handle": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "is_supported": [
                    "self",
                    "args",
                    "kwargs"
                ]
            }
        },
        "tensorflow_core.python.ops.ragged.segment_id_ops": {
            "row_splits_to_segment_ids": [
                "splits",
                "name",
                "out_type"
            ],
            "segment_ids_to_row_splits": [
                "segment_ids",
                "num_segments",
                "out_type",
                "name"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_math_ops": {
            "range": [
                "starts",
                "limits",
                "deltas",
                "dtype",
                "name",
                "row_splits_dtype"
            ],
            "_infer_matching_dtype": [
                "tensors",
                "dtype_hierarchy"
            ],
            "_ragged_segment_aggregate": [
                "unsorted_segment_op",
                "data",
                "segment_ids",
                "num_segments",
                "separator",
                "name"
            ],
            "segment_sum": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "segment_prod": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "segment_min": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "segment_max": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "segment_mean": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "segment_sqrt_n": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "_set_ragged_segment_docstring": [
                "func",
                "combination",
                "combined"
            ],
            "ragged_reduce_aggregate": [
                "reduce_op",
                "unsorted_segment_op",
                "rt_input",
                "axis",
                "keepdims",
                "separator",
                "name"
            ],
            "reduce_sum": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_prod": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_min": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_max": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_mean": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "_cast": [
                "input_tensor",
                "dtype"
            ],
            "reduce_all": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "reduce_any": [
                "input_tensor",
                "axis",
                "keepdims",
                "name"
            ],
            "_set_ragged_reduce_docstring": [
                "func",
                "combination",
                "combined",
                "default",
                "example"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_conversion_ops": {
            "from_tensor": [
                "tensor",
                "lengths",
                "padding",
                "ragged_rank",
                "row_splits_dtype",
                "name"
            ],
            "to_tensor": [
                "rt_input",
                "default_value",
                "name"
            ],
            "_get_row_partition_type_tensor_pairs_tail": [
                "rt_value"
            ],
            "_get_row_partition_type_tensor_pairs": [
                "rt_input"
            ],
            "_shape_as_tensor": [
                "shape",
                "dtype"
            ],
            "ragged_to_dense": [
                "rt_input",
                "default_value",
                "shape"
            ],
            "to_sparse": [
                "rt_input",
                "name"
            ],
            "from_sparse": [
                "st_input",
                "name"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_gather_ops": {
            "gather": [
                "params",
                "indices",
                "validate_indices",
                "axis",
                "batch_dims",
                "name"
            ],
            "gather_nd": [
                "params",
                "indices",
                "batch_dims",
                "name"
            ],
            "_ragged_gather_grad": [
                "op"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_map_ops": {
            "map_fn": [
                "fn",
                "elems",
                "dtype",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "infer_shape",
                "name"
            ],
            "_concat_ragged_tensor_components": [
                "rt_ta"
            ],
            "_maybe_decompose_tensor": [
                "rt"
            ],
            "_maybe_recompose_tensor": [
                "t"
            ],
            "_maybe_decompose_dtype": [
                "d"
            ],
            "_convert_declared": [
                "fn_output_flat",
                "output_declared"
            ],
            "_convert_declared_ragged": [
                "current",
                "declared"
            ],
            "_RaggedTensorComponents": {}
        },
        "tensorflow_core.python.ops.ragged.ragged_squeeze_op": {
            "squeeze": [
                "input",
                "axis",
                "name"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_tensor_shape": {
            "broadcast_dynamic_shape": [
                "shape_x",
                "shape_y"
            ],
            "broadcast_to": [
                "rt_input",
                "shape",
                "broadcast_inner_dimensions"
            ],
            "_broadcast_to_uniform_shape": [
                "rt_input",
                "shape",
                "broadcast_inner_dimensions"
            ],
            "_broadcast_to_ragged_shape": [
                "rt_input",
                "dst_shape",
                "broadcast_inner_dimensions"
            ],
            "_ragged_tile_axis": [
                "rt_input",
                "axis",
                "repeats",
                "row_splits_dtype"
            ],
            "RaggedTensorDynamicShape": {
                "__init__": [
                    "self",
                    "partitioned_dim_sizes",
                    "inner_dim_sizes",
                    "dim_size_dtype"
                ],
                "__repr__": [
                    "self"
                ],
                "from_dim_sizes": [
                    "dim_sizes"
                ],
                "from_tensor": [
                    "cls",
                    "rt_input",
                    "dim_size_dtype"
                ],
                "dimension_size": [
                    "self",
                    "axis"
                ],
                "is_ragged": [
                    "self",
                    "axis"
                ],
                "rank": [
                    "self"
                ],
                "partitioned_dim_sizes": [
                    "self"
                ],
                "inner_dim_sizes": [
                    "self"
                ],
                "num_partitioned_dimensions": [
                    "self"
                ],
                "num_inner_dimensions": [
                    "self"
                ],
                "dim_size_dtype": [
                    "self"
                ],
                "broadcast_to_rank": [
                    "self",
                    "rank"
                ],
                "broadcast_dimension": [
                    "self",
                    "axis",
                    "lengths"
                ],
                "num_slices_in_dimension": [
                    "self",
                    "axis"
                ],
                "_broadcast_uniform_partitioned_dimension": [
                    "self",
                    "axis",
                    "lengths"
                ],
                "_broadcast_inner_dimension_to_uniform": [
                    "self",
                    "axis",
                    "length"
                ],
                "_broadcast_inner_dimension_to_ragged": [
                    "self",
                    "axis",
                    "lengths"
                ],
                "with_dim_size_dtype": [
                    "self",
                    "dtype"
                ]
            }
        },
        "tensorflow_core.python.ops.ragged.ragged_concat_ops": {
            "concat": [
                "values",
                "axis",
                "name"
            ],
            "stack": [
                "values",
                "axis",
                "name"
            ],
            "_ragged_stack_concat_helper": [
                "rt_inputs",
                "axis",
                "stack_values"
            ],
            "_ragged_stack_concat_axis_0": [
                "rt_inputs",
                "stack_values"
            ],
            "_ragged_stack_concat_axis_1": [
                "rt_inputs",
                "stack_values"
            ],
            "_copy_row_shape": [
                "rt_inputs",
                "splits"
            ],
            "_increase_ragged_rank_to": [
                "rt_input",
                "ragged_rank",
                "row_splits_dtype"
            ],
            "_concat_ragged_splits": [
                "splits_list"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_string_ops": {
            "string_bytes_split": [
                "input",
                "name"
            ],
            "unicode_encode": [
                "input",
                "output_encoding",
                "errors",
                "replacement_char",
                "name"
            ],
            "unicode_decode": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "name"
            ],
            "unicode_decode_with_offsets": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "name"
            ],
            "unicode_split": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "name"
            ],
            "unicode_split_with_offsets": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "name"
            ],
            "_unicode_decode": [
                "input",
                "input_encoding",
                "errors",
                "replacement_char",
                "replace_control_characters",
                "with_offsets"
            ],
            "string_split_v2": [
                "input",
                "sep",
                "maxsplit",
                "name"
            ],
            "string_split": [
                "source",
                "sep",
                "skip_empty",
                "delimiter",
                "result_type",
                "name"
            ],
            "strings_split_v1": [
                "input",
                "sep",
                "maxsplit",
                "result_type",
                "source",
                "name"
            ],
            "reduce_join": [
                "inputs",
                "axis",
                "keepdims",
                "separator",
                "name"
            ],
            "ngrams": [
                "data",
                "ngram_width",
                "separator",
                "pad_values",
                "padding_width",
                "preserve_short_sequences",
                "name"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_operators": {
            "_right": [
                "operator"
            ],
            "_dummy_bool": [
                "_"
            ]
        },
        "tensorflow_core.python.ops.ragged.ragged_config": {
            "auto_cast_partition_dtype": []
        },
        "tensorflow_core.python.ops.ragged.ragged_tensor_value": {
            "RaggedTensorValue": {
                "__init__": [
                    "self",
                    "values",
                    "row_splits"
                ],
                "flat_values": [
                    "self"
                ],
                "nested_row_splits": [
                    "self"
                ],
                "ragged_rank": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "to_list": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.ops.ragged.ragged_util": {
            "assert_splits_match": [
                "nested_splits_lists"
            ],
            "lengths_to_splits": [
                "lengths"
            ],
            "repeat_ranges": [
                "params",
                "splits",
                "repeats"
            ]
        },
        "tensorflow_core.python.ops.ragged": {},
        "tensorflow_core.python.ops.ragged.ragged_array_ops": {
            "boolean_mask": [
                "data",
                "mask",
                "name"
            ],
            "tile": [
                "input",
                "multiples",
                "name"
            ],
            "_tile_ragged_values": [
                "rt_input",
                "multiples",
                "const_multiples"
            ],
            "_tile_ragged_splits": [
                "rt_input",
                "multiples",
                "const_multiples"
            ],
            "expand_dims": [
                "input",
                "axis",
                "name"
            ],
            "size": [
                "input",
                "out_type",
                "name"
            ],
            "rank": [
                "input",
                "name"
            ],
            "ragged_one_hot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "dtype",
                "name"
            ],
            "stack_dynamic_partitions": [
                "data",
                "partitions",
                "num_partitions",
                "name"
            ]
        },
        "tensorflow_core.python.summary.summary_iterator": {
            "summary_iterator": [
                "path"
            ]
        },
        "tensorflow_core.python.summary.plugin_asset": {
            "get_plugin_asset": [
                "plugin_asset_cls",
                "graph"
            ],
            "get_all_plugin_assets": [
                "graph"
            ],
            "PluginAsset": {
                "assets": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.summary.summary": {
            "scalar": [
                "name",
                "tensor",
                "collections",
                "family"
            ],
            "image": [
                "name",
                "tensor",
                "max_outputs",
                "collections",
                "family"
            ],
            "histogram": [
                "name",
                "values",
                "collections",
                "family"
            ],
            "audio": [
                "name",
                "tensor",
                "sample_rate",
                "max_outputs",
                "collections",
                "family"
            ],
            "text": [
                "name",
                "tensor",
                "collections"
            ],
            "tensor_summary": [
                "name",
                "tensor",
                "summary_description",
                "collections",
                "summary_metadata",
                "family",
                "display_name"
            ],
            "merge": [
                "inputs",
                "collections",
                "name"
            ],
            "merge_all": [
                "key",
                "scope",
                "name"
            ],
            "get_summary_description": [
                "node_def"
            ]
        },
        "tensorflow_core.python.summary": {},
        "tensorflow_core.python.summary.writer.event_file_writer_v2": {
            "EventFileWriterV2": {
                "__init__": [
                    "self",
                    "session",
                    "logdir",
                    "max_queue",
                    "flush_secs",
                    "filename_suffix"
                ],
                "get_logdir": [
                    "self"
                ],
                "reopen": [
                    "self"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.summary.writer.writer": {
            "SummaryToEventTransformer": {
                "__init__": [
                    "self",
                    "event_writer",
                    "graph",
                    "graph_def"
                ],
                "add_summary": [
                    "self",
                    "summary",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "_add_graph_def": [
                    "self",
                    "graph_def",
                    "global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "_write_plugin_assets": [
                    "self",
                    "graph"
                ],
                "add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "global_step"
                ],
                "add_run_metadata": [
                    "self",
                    "run_metadata",
                    "tag",
                    "global_step"
                ],
                "_add_event": [
                    "self",
                    "event",
                    "step"
                ]
            },
            "FileWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "graph",
                    "max_queue",
                    "flush_secs",
                    "graph_def",
                    "filename_suffix",
                    "session"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "get_logdir": [
                    "self"
                ],
                "_warn_if_event_writer_is_closed": [
                    "self"
                ],
                "_add_event": [
                    "self",
                    "event",
                    "step"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "reopen": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.summary.writer.event_file_writer": {
            "EventFileWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "max_queue",
                    "flush_secs",
                    "filename_suffix"
                ],
                "_get_sentinel_event": [
                    "self"
                ],
                "get_logdir": [
                    "self"
                ],
                "reopen": [
                    "self"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "_EventLoggerThread": {
                "__init__": [
                    "self",
                    "queue",
                    "ev_writer",
                    "flush_secs",
                    "sentinel_event"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.summary.writer.writer_cache": {
            "FileWriterCache": {
                "clear": [],
                "get": [
                    "logdir"
                ]
            }
        },
        "tensorflow_core.python.summary.writer": {},
        "tensorflow_core.python.saved_model.main_op_impl": {
            "main_op": [],
            "main_op_with_restore": [
                "restore_op_name"
            ]
        },
        "tensorflow_core.python.saved_model.signature_def_utils_impl": {
            "build_signature_def": [
                "inputs",
                "outputs",
                "method_name"
            ],
            "regression_signature_def": [
                "examples",
                "predictions"
            ],
            "classification_signature_def": [
                "examples",
                "classes",
                "scores"
            ],
            "predict_signature_def": [
                "inputs",
                "outputs"
            ],
            "supervised_train_signature_def": [
                "inputs",
                "loss",
                "predictions",
                "metrics"
            ],
            "supervised_eval_signature_def": [
                "inputs",
                "loss",
                "predictions",
                "metrics"
            ],
            "_supervised_signature_def": [
                "method_name",
                "inputs",
                "loss",
                "predictions",
                "metrics"
            ],
            "is_valid_signature": [
                "signature_def"
            ],
            "_is_valid_predict_signature": [
                "signature_def"
            ],
            "_is_valid_regression_signature": [
                "signature_def"
            ],
            "_is_valid_classification_signature": [
                "signature_def"
            ],
            "op_signature_def": [
                "op",
                "key"
            ],
            "load_op_from_signature_def": [
                "signature_def",
                "key",
                "import_scope"
            ]
        },
        "tensorflow_core.python.saved_model.function_deserialization": {
            "_is_tensor": [
                "t"
            ],
            "_call_concrete_function": [
                "function",
                "inputs"
            ],
            "_try_convert_to_tensor_spec": [
                "arg",
                "dtype_hint"
            ],
            "_concrete_function_callable_with": [
                "function",
                "inputs",
                "allow_conversion"
            ],
            "_deserialize_function_spec_as_nonmethod": [
                "function_spec_proto",
                "coder"
            ],
            "setup_bare_concrete_function": [
                "saved_bare_concrete_function",
                "concrete_functions"
            ],
            "recreate_function": [
                "saved_function",
                "concrete_functions"
            ],
            "load_function_def_library": [
                "library",
                "load_shared_name_suffix"
            ],
            "_sort_function_defs": [
                "library",
                "library_function_names"
            ],
            "fix_node_def": [
                "node_def",
                "functions",
                "shared_name_suffix",
                "debug_name"
            ],
            "_fix_fdef": [
                "orig_fdef",
                "functions",
                "shared_name_suffix"
            ],
            "_list_function_deps": [
                "fdef",
                "library_function_names"
            ],
            "_clean_function_name": [
                "name"
            ],
            "RestoredFunction": {
                "__init__": [
                    "self",
                    "python_function",
                    "name",
                    "function_spec",
                    "concrete_functions"
                ],
                "_list_all_concrete_functions_for_serialization": [
                    "self"
                ],
                "_defun_with_scope": [
                    "self",
                    "scope"
                ]
            }
        },
        "tensorflow_core.python.saved_model.load_v1_in_v2": {
            "load": [
                "export_dir",
                "tags"
            ],
            "_Initializer": {
                "__init__": [
                    "self",
                    "init_fn",
                    "asset_paths"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ]
            },
            "_EagerSavedModelLoader": {
                "get_meta_graph_def_from_tags": [
                    "self",
                    "tags"
                ],
                "load_graph": [
                    "self",
                    "returns",
                    "meta_graph_def"
                ],
                "restore_variables": [
                    "self",
                    "wrapped",
                    "saver"
                ],
                "_extract_signatures": [
                    "self",
                    "wrapped",
                    "meta_graph_def"
                ],
                "load": [
                    "self",
                    "tags"
                ]
            }
        },
        "tensorflow_core.python.saved_model.signature_constants": {},
        "tensorflow_core.python.saved_model.revived_types": {
            "register_revived_type": [
                "identifier",
                "predicate",
                "versions"
            ],
            "serialize": [
                "obj"
            ],
            "deserialize": [
                "proto"
            ],
            "registered_identifiers": [],
            "VersionedTypeRegistration": {
                "__init__": [
                    "self",
                    "object_factory",
                    "version",
                    "min_producer_version",
                    "min_consumer_version",
                    "bad_consumers",
                    "setter"
                ],
                "to_proto": [
                    "self"
                ],
                "from_proto": [
                    "self",
                    "proto"
                ],
                "should_load": [
                    "self",
                    "proto"
                ]
            }
        },
        "tensorflow_core.python.saved_model.loader_impl": {
            "parse_saved_model": [
                "export_dir"
            ],
            "get_asset_tensors": [
                "export_dir",
                "meta_graph_def_to_load",
                "import_scope"
            ],
            "_get_main_op_tensor": [
                "meta_graph_def_to_load",
                "init_op_key"
            ],
            "_get_op_from_collection": [
                "meta_graph_def",
                "op_key"
            ],
            "_get_op_from_signature_def": [
                "meta_graph_def",
                "op_signature_key",
                "import_scope"
            ],
            "get_init_op": [
                "meta_graph_def",
                "import_scope"
            ],
            "get_train_op": [
                "meta_graph_def",
                "import_scope"
            ],
            "maybe_saved_model_directory": [
                "export_dir"
            ],
            "contains_saved_model": [
                "export_dir"
            ],
            "load": [
                "sess",
                "tags",
                "export_dir",
                "import_scope"
            ],
            "SavedModelLoader": {
                "__init__": [
                    "self",
                    "export_dir"
                ],
                "export_dir": [
                    "self"
                ],
                "variables_path": [
                    "self"
                ],
                "saved_model": [
                    "self"
                ],
                "get_meta_graph_def_from_tags": [
                    "self",
                    "tags"
                ],
                "load_graph": [
                    "self",
                    "graph",
                    "tags",
                    "import_scope"
                ],
                "restore_variables": [
                    "self",
                    "sess",
                    "saver",
                    "import_scope"
                ],
                "run_init_ops": [
                    "self",
                    "sess",
                    "tags",
                    "import_scope"
                ],
                "load": [
                    "self",
                    "sess",
                    "tags",
                    "import_scope"
                ]
            }
        },
        "tensorflow_core.python.saved_model.builder_impl": {
            "_maybe_save_assets": [
                "write_fn",
                "assets_to_add"
            ],
            "get_asset_filename_to_add": [
                "asset_filepath",
                "asset_filename_map"
            ],
            "_get_unique_asset_filename": [
                "asset_filename",
                "asset_filename_map"
            ],
            "_asset_path_from_tensor": [
                "path_tensor"
            ],
            "_add_asset_to_metagraph": [
                "meta_graph_def",
                "asset_filename",
                "asset_tensor"
            ],
            "copy_assets_to_destination_dir": [
                "asset_filename_map",
                "destination_dir"
            ],
            "_add_asset_to_collection": [
                "asset_filename",
                "asset_tensor"
            ],
            "_add_op_to_signature_def_map": [
                "signature_def_map",
                "op",
                "key"
            ],
            "_SavedModelBuilder": {
                "__init__": [
                    "self",
                    "export_dir"
                ],
                "_save_and_write_assets": [
                    "self",
                    "meta_graph_def",
                    "assets_list"
                ],
                "_tag_and_add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "tags",
                    "signature_def_map"
                ],
                "_validate_tensor_info": [
                    "self",
                    "tensor_info"
                ],
                "_validate_signature_def_map": [
                    "self",
                    "signature_def_map"
                ],
                "_maybe_create_saver": [
                    "self",
                    "saver"
                ],
                "add_meta_graph": [
                    "self",
                    "tags",
                    "signature_def_map",
                    "assets_list",
                    "clear_devices",
                    "init_op",
                    "train_op",
                    "saver"
                ],
                "add_meta_graph_and_variables": [
                    "self",
                    "sess",
                    "tags",
                    "signature_def_map",
                    "assets_list",
                    "clear_devices",
                    "init_op",
                    "train_op",
                    "strip_default_attrs",
                    "saver"
                ],
                "save": [
                    "self",
                    "as_text"
                ]
            },
            "SavedModelBuilder": {
                "__init__": [
                    "self",
                    "export_dir"
                ],
                "_add_collections": [
                    "self",
                    "assets_collection",
                    "main_op",
                    "train_op"
                ],
                "_save_and_write_assets": [
                    "self",
                    "assets_collection_to_add"
                ],
                "_maybe_add_main_op": [
                    "self",
                    "main_op"
                ],
                "_add_train_op": [
                    "self",
                    "train_op"
                ],
                "add_meta_graph": [
                    "self",
                    "tags",
                    "signature_def_map",
                    "assets_collection",
                    "legacy_init_op",
                    "clear_devices",
                    "main_op",
                    "strip_default_attrs",
                    "saver"
                ],
                "add_meta_graph_and_variables": [
                    "self",
                    "sess",
                    "tags",
                    "signature_def_map",
                    "assets_collection",
                    "legacy_init_op",
                    "clear_devices",
                    "main_op",
                    "strip_default_attrs",
                    "saver"
                ]
            }
        },
        "tensorflow_core.python.saved_model.tag_constants": {},
        "tensorflow_core.python.saved_model.saved_model": {},
        "tensorflow_core.python.saved_model.utils": {},
        "tensorflow_core.python.saved_model.nested_structure_coder": {
            "_is_tuple": [
                "obj"
            ],
            "_is_named_tuple": [
                "instance"
            ],
            "NotEncodableError": {},
            "StructureCoder": {
                "register_codec": [
                    "cls",
                    "x"
                ],
                "_get_encoders": [
                    "cls"
                ],
                "_get_decoders": [
                    "cls"
                ],
                "_map_structure": [
                    "self",
                    "pyobj",
                    "coders"
                ],
                "encode_structure": [
                    "self",
                    "nested_structure"
                ],
                "can_encode": [
                    "self",
                    "nested_structure"
                ],
                "decode_proto": [
                    "self",
                    "proto"
                ]
            },
            "_ListCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "list_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_TupleCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "tuple_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_DictCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "dict_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_NamedTupleCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "named_tuple_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_Float64Codec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "float64_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_Int64Codec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "int_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_StringCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "string_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_NoneCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "none_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_BoolCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "bool_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_TensorShapeCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "tensor_shape_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_TensorTypeCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "tensor_dtype_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_TensorSpecCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "tensor_spec_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            },
            "_TypeSpecCodec": {
                "can_encode": [
                    "self",
                    "pyobj"
                ],
                "do_encode": [
                    "self",
                    "type_spec_value",
                    "encode_fn"
                ],
                "can_decode": [
                    "self",
                    "value"
                ],
                "do_decode": [
                    "self",
                    "value",
                    "decode_fn"
                ]
            }
        },
        "tensorflow_core.python.saved_model.signature_serialization": {
            "_get_signature": [
                "function"
            ],
            "_valid_signature": [
                "concrete_function"
            ],
            "find_function_to_export": [
                "saveable_view"
            ],
            "canonicalize_signatures": [
                "signatures"
            ],
            "_is_flat": [
                "sequence"
            ],
            "_normalize_outputs": [
                "outputs",
                "function_name",
                "signature_key"
            ],
            "create_signature_map": [
                "signatures"
            ],
            "validate_saveable_view": [
                "saveable_view"
            ],
            "_SignatureMap": {
                "__init__": [
                    "self"
                ],
                "_add_signature": [
                    "self",
                    "name",
                    "concrete_function"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "unused_serialization_cache"
                ]
            }
        },
        "tensorflow_core.python.saved_model.simple_save": {
            "simple_save": [
                "session",
                "export_dir",
                "inputs",
                "outputs",
                "legacy_init_op"
            ]
        },
        "tensorflow_core.python.saved_model.signature_def_utils": {},
        "tensorflow_core.python.saved_model.save": {
            "_tensor_dict_to_tensorinfo": [
                "tensor_dict"
            ],
            "_map_captures_to_created_tensors": [
                "original_captures",
                "resource_map"
            ],
            "_map_function_arguments_to_created_inputs": [
                "function_arguments",
                "signature_key",
                "function_name"
            ],
            "_call_function_with_mapped_captures": [
                "function",
                "args",
                "resource_map"
            ],
            "_generate_signatures": [
                "signature_functions",
                "resource_map"
            ],
            "_trace_resource_initializers": [
                "accessible_objects"
            ],
            "_process_asset": [
                "trackable_asset",
                "asset_info",
                "resource_map"
            ],
            "_fill_meta_graph_def": [
                "meta_graph_def",
                "saveable_view",
                "signature_functions"
            ],
            "_serialize_object_graph": [
                "saveable_view",
                "asset_file_def_index"
            ],
            "_write_object_proto": [
                "obj",
                "proto",
                "asset_file_def_index"
            ],
            "save": [
                "obj",
                "export_dir",
                "signatures"
            ],
            "_AugmentedGraphView": {
                "__init__": [
                    "self",
                    "root"
                ],
                "add_object": [
                    "self",
                    "parent_node",
                    "name_in_parent",
                    "subgraph_root"
                ],
                "list_dependencies": [
                    "self",
                    "obj"
                ],
                "list_extra_dependencies": [
                    "self",
                    "obj"
                ],
                "list_functions": [
                    "self",
                    "obj"
                ]
            },
            "_SaveableView": {
                "__init__": [
                    "self",
                    "checkpoint_view"
                ],
                "root": [
                    "self"
                ],
                "fill_object_graph_proto": [
                    "self",
                    "proto"
                ],
                "map_resources": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.saved_model.function_serialization": {
            "_serialize_function_spec": [
                "function_spec",
                "coder"
            ],
            "serialize_concrete_function": [
                "concrete_function",
                "node_ids",
                "coder"
            ],
            "serialize_bare_concrete_function": [
                "concrete_function"
            ],
            "serialize_function": [
                "function"
            ]
        },
        "tensorflow_core.python.saved_model.builder": {},
        "tensorflow_core.python.saved_model.constants": {},
        "tensorflow_core.python.saved_model.main_op": {},
        "tensorflow_core.python.saved_model.utils_impl": {
            "build_tensor_info": [
                "tensor"
            ],
            "build_tensor_info_internal": [
                "tensor"
            ],
            "_build_composite_tensor_info_internal": [
                "tensor"
            ],
            "build_tensor_info_from_op": [
                "op"
            ],
            "get_tensor_from_tensor_info": [
                "tensor_info",
                "graph",
                "import_scope"
            ],
            "get_element_from_tensor_info": [
                "tensor_info",
                "graph",
                "import_scope"
            ],
            "get_or_create_variables_dir": [
                "export_dir"
            ],
            "get_variables_dir": [
                "export_dir"
            ],
            "get_variables_path": [
                "export_dir"
            ],
            "get_or_create_assets_dir": [
                "export_dir"
            ],
            "get_assets_dir": [
                "export_dir"
            ]
        },
        "tensorflow_core.python.saved_model.loader": {},
        "tensorflow_core.python.saved_model": {},
        "tensorflow_core.python.saved_model.load": {
            "_unused_handle": [],
            "_call_attribute": [
                "instance"
            ],
            "load": [
                "export_dir",
                "tags"
            ],
            "load_internal": [
                "export_dir",
                "tags",
                "loader_cls"
            ],
            "_WrapperFunction": {
                "__init__": [
                    "self",
                    "concrete_function"
                ],
                "_call_flat": [
                    "self",
                    "args",
                    "captured_inputs",
                    "cancellation_manager"
                ]
            },
            "Loader": {
                "__init__": [
                    "self",
                    "object_graph_proto",
                    "saved_model_proto",
                    "export_dir"
                ],
                "_setup_functions_structures": [
                    "self"
                ],
                "_setup_functions_captures": [
                    "self"
                ],
                "_get_tensor_from_node": [
                    "self",
                    "node_id"
                ],
                "_load_all": [
                    "self"
                ],
                "_restore_checkpoint": [
                    "self"
                ],
                "get": [
                    "self",
                    "node_id"
                ],
                "_recreate": [
                    "self",
                    "proto"
                ],
                "_recreate_user_object": [
                    "self",
                    "proto"
                ],
                "_recreate_base_user_object": [
                    "self",
                    "proto"
                ],
                "_recreate_asset": [
                    "self",
                    "proto"
                ],
                "_recreate_function": [
                    "self",
                    "proto"
                ],
                "_recreate_bare_concrete_function": [
                    "self",
                    "proto"
                ],
                "_recreate_variable": [
                    "self",
                    "proto"
                ],
                "_recreate_constant": [
                    "self",
                    "proto"
                ],
                "_recreate_resource": [
                    "self",
                    "proto"
                ]
            },
            "_RestoredResource": {
                "__init__": [
                    "self",
                    "device"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "_destroy_resource": [
                    "self",
                    "destroy_resource_fn"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "unused_serialization_cache"
                ]
            }
        },
        "tensorflow_core.python.saved_model.model_utils.mode_keys": {
            "is_predict": [
                "mode"
            ],
            "is_eval": [
                "mode"
            ],
            "is_train": [
                "mode"
            ],
            "KerasModeKeys": {},
            "EstimatorModeKeys": {},
            "ModeKeyMap": {
                "__init__": [
                    "self"
                ],
                "_get_internal_key": [
                    "self",
                    "key"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.saved_model.model_utils.export_output": {
            "ExportOutput": {
                "as_signature_def": [
                    "self",
                    "receiver_tensors"
                ],
                "_check_output_key": [
                    "self",
                    "key",
                    "error_label"
                ],
                "_wrap_and_check_outputs": [
                    "self",
                    "outputs",
                    "single_output_default_name",
                    "error_label"
                ]
            },
            "ClassificationOutput": {
                "__init__": [
                    "self",
                    "scores",
                    "classes"
                ],
                "scores": [
                    "self"
                ],
                "classes": [
                    "self"
                ],
                "as_signature_def": [
                    "self",
                    "receiver_tensors"
                ]
            },
            "RegressionOutput": {
                "__init__": [
                    "self",
                    "value"
                ],
                "value": [
                    "self"
                ],
                "as_signature_def": [
                    "self",
                    "receiver_tensors"
                ]
            },
            "PredictOutput": {
                "__init__": [
                    "self",
                    "outputs"
                ],
                "outputs": [
                    "self"
                ],
                "as_signature_def": [
                    "self",
                    "receiver_tensors"
                ]
            },
            "_SupervisedOutput": {
                "__init__": [
                    "self",
                    "loss",
                    "predictions",
                    "metrics"
                ],
                "_prefix_output_keys": [
                    "self",
                    "output_dict",
                    "output_name"
                ],
                "_prefix_key": [
                    "self",
                    "key",
                    "output_name"
                ],
                "_wrap_and_check_metrics": [
                    "self",
                    "metrics"
                ],
                "loss": [
                    "self"
                ],
                "predictions": [
                    "self"
                ],
                "metrics": [
                    "self"
                ],
                "_get_signature_def_fn": [
                    "self"
                ],
                "as_signature_def": [
                    "self",
                    "receiver_tensors"
                ]
            },
            "TrainOutput": {
                "_get_signature_def_fn": [
                    "self"
                ]
            },
            "EvalOutput": {
                "_get_signature_def_fn": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.saved_model.model_utils": {},
        "tensorflow_core.python.saved_model.model_utils.export_utils": {
            "build_all_signature_defs": [
                "receiver_tensors",
                "export_outputs",
                "receiver_tensors_alternatives",
                "serving_only"
            ],
            "_log_signature_report": [
                "signature_def_map",
                "excluded_signatures"
            ],
            "get_timestamped_export_dir": [
                "export_dir_base"
            ],
            "get_temp_export_dir": [
                "timestamped_export_dir"
            ],
            "export_outputs_for_mode": [
                "mode",
                "serving_export_outputs",
                "predictions",
                "loss",
                "metrics"
            ],
            "get_export_outputs": [
                "export_outputs",
                "predictions"
            ],
            "_maybe_add_default_serving_output": [
                "export_outputs"
            ]
        },
        "tensorflow_core.python.module.module": {
            "_is_variable": [
                "obj"
            ],
            "_is_trainable_variable": [
                "obj"
            ],
            "_is_module": [
                "obj"
            ],
            "valid_identifier": [
                "name"
            ],
            "camel_to_snake": [
                "value"
            ],
            "_flatten_module": [
                "module",
                "recursive",
                "predicate",
                "attribute_traversal_key",
                "attributes_to_ignore",
                "with_path",
                "module_path",
                "seen"
            ],
            "Module": {
                "__init__": [
                    "self",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "name_scope": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "submodules": [
                    "self"
                ],
                "_flatten": [
                    "self",
                    "recursive",
                    "predicate",
                    "attribute_traversal_key",
                    "with_path"
                ],
                "with_name_scope": [
                    "cls",
                    "method"
                ]
            }
        },
        "tensorflow_core.python.module": {},
        "tensorflow_core.python.framework.op_def_registry": {
            "register_op_list": [
                "op_list"
            ],
            "get_registered_ops": []
        },
        "tensorflow_core.python.framework.composite_tensor_utils": {
            "is_composite_or_composite_value": [
                "tensor"
            ],
            "get_shape": [
                "tensor"
            ],
            "_append_sparse_tensor_value": [
                "target",
                "to_append"
            ],
            "_append_ragged_tensor_value": [
                "target",
                "to_append"
            ],
            "append_composite_tensor": [
                "target",
                "to_append"
            ]
        },
        "tensorflow_core.python.framework.error_interpolation": {
            "parse_message": [
                "message"
            ],
            "_compute_device_summary_from_list": [
                "name",
                "device_assignment_list",
                "prefix"
            ],
            "_compute_device_assignment_summary_from_op": [
                "op",
                "prefix"
            ],
            "_compute_colocation_summary_from_dict": [
                "name",
                "colocation_dict",
                "prefix"
            ],
            "_compute_colocation_summary_from_op": [
                "op",
                "prefix"
            ],
            "_find_index_of_defining_frame_for_op": [
                "op"
            ],
            "_get_defining_frame_from_op": [
                "op"
            ],
            "_compute_useful_frames": [
                "op",
                "num"
            ],
            "create_graph_debug_info_def": [
                "operations"
            ],
            "compute_field_dict": [
                "op",
                "strip_file_prefix"
            ],
            "traceback_files_common_prefix": [
                "all_ops"
            ],
            "_sources_for_node": [
                "node",
                "graph"
            ],
            "_build_error_message": [
                "op",
                "input_ops",
                "common_prefix"
            ],
            "interpolate": [
                "error_message",
                "graph"
            ]
        },
        "tensorflow_core.python.framework.test_util": {
            "is_xla_enabled": [],
            "gpu_device_name": [],
            "assert_ops_in_graph": [
                "expected_ops",
                "graph"
            ],
            "assert_equal_graph_def_v2": [
                "expected",
                "actual"
            ],
            "assert_equal_graph_def_v1": [
                "actual",
                "expected",
                "checkpoint_v2",
                "hash_table_shared_name"
            ],
            "assert_equal_graph_def": [
                "actual",
                "expected",
                "checkpoint_v2",
                "hash_table_shared_name"
            ],
            "assert_meta_graph_protos_equal": [
                "tester",
                "a",
                "b"
            ],
            "_strip_checkpoint_v2_randomized": [
                "graph_def"
            ],
            "_strip_hash_table_shared_name": [
                "graph_def"
            ],
            "IsGoogleCudaEnabled": [],
            "IsBuiltWithROCm": [],
            "GpuSupportsHalfMatMulAndConv": [],
            "IsMklEnabled": [],
            "InstallStackTraceHandler": [],
            "NHWCToNCHW": [
                "input_tensor"
            ],
            "NHWCToNCHW_VECT_C": [
                "input_shape_or_tensor"
            ],
            "NCHW_VECT_CToNHWC": [
                "input_shape_or_tensor"
            ],
            "NCHWToNHWC": [
                "input_tensor"
            ],
            "skip_if": [
                "condition"
            ],
            "enable_c_shapes": [
                "fn"
            ],
            "with_c_shapes": [
                "cls"
            ],
            "enable_control_flow_v2": [
                "fn"
            ],
            "with_control_flow_v2": [
                "cls"
            ],
            "disable_control_flow_v2": [
                "unused_msg"
            ],
            "enable_output_all_intermediates": [
                "fn"
            ],
            "assert_no_new_pyobjects_executing_eagerly": [
                "f"
            ],
            "assert_no_new_tensors": [
                "f"
            ],
            "_find_reference_cycle": [
                "objects",
                "idx"
            ],
            "assert_no_garbage_created": [
                "f"
            ],
            "_combine_named_parameters": [],
            "generate_combinations_with_testcase_name": [],
            "run_all_in_graph_and_eager_modes": [
                "cls"
            ],
            "build_as_function_and_v1_graph": [
                "func"
            ],
            "run_in_graph_and_eager_modes": [
                "func",
                "config",
                "use_gpu",
                "reset_test",
                "assert_no_eager_garbage"
            ],
            "py_func_if_in_function": [
                "f"
            ],
            "also_run_as_tf_function": [
                "f"
            ],
            "deprecated_graph_mode_only": [
                "func"
            ],
            "run_v1_only": [
                "reason",
                "func"
            ],
            "run_v2_only": [
                "func"
            ],
            "run_gpu_only": [
                "func"
            ],
            "run_cuda_only": [
                "func"
            ],
            "is_gpu_available": [
                "cuda_only",
                "min_cuda_compute_capability"
            ],
            "device": [
                "use_gpu"
            ],
            "use_gpu": [],
            "force_gpu": [],
            "force_cpu": [],
            "use_deterministic_cudnn": [
                "func"
            ],
            "enable_tf_xla_constant_folding": [
                "description"
            ],
            "disable_xla": [
                "description"
            ],
            "for_all_test_methods": [
                "decorator"
            ],
            "no_xla_auto_jit": [
                "description"
            ],
            "xla_allow_fallback": [
                "description"
            ],
            "create_local_cluster": [
                "num_workers",
                "num_ps",
                "protocol",
                "worker_config",
                "ps_config"
            ],
            "get_node_def_from_graph": [
                "node_name",
                "graph_def"
            ],
            "set_producer_version": [
                "graph",
                "producer_version"
            ],
            "CapturedWrites": {
                "__init__": [
                    "self",
                    "capture_location"
                ],
                "contents": [
                    "self"
                ]
            },
            "FakeEagerSession": {
                "__init__": [
                    "self",
                    "test_case"
                ],
                "run": [
                    "self",
                    "fetches"
                ]
            },
            "ErrorLoggingSession": {
                "run": [
                    "self"
                ]
            },
            "EagerSessionWarner": {
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "TensorFlowTestCase": {
                "__init__": [
                    "self",
                    "methodName"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_ClearCachedSession": [
                    "self"
                ],
                "get_temp_dir": [
                    "self"
                ],
                "captureWritesToStream": [
                    "self",
                    "stream"
                ],
                "_AssertProtoEquals": [
                    "self",
                    "a",
                    "b",
                    "msg"
                ],
                "assertProtoEquals": [
                    "self",
                    "expected_message_maybe_ascii",
                    "message",
                    "msg"
                ],
                "assertProtoEqualsVersion": [
                    "self",
                    "expected",
                    "actual",
                    "producer",
                    "min_consumer",
                    "msg"
                ],
                "assertStartsWith": [
                    "self",
                    "actual",
                    "expected_start",
                    "msg"
                ],
                "_eval_tensor": [
                    "self",
                    "tensor"
                ],
                "_eval_helper": [
                    "self",
                    "tensors"
                ],
                "evaluate": [
                    "self",
                    "tensors"
                ],
                "session": [
                    "self",
                    "graph",
                    "config",
                    "use_gpu",
                    "force_gpu"
                ],
                "cached_session": [
                    "self",
                    "graph",
                    "config",
                    "use_gpu",
                    "force_gpu"
                ],
                "test_session": [
                    "self",
                    "graph",
                    "config",
                    "use_gpu",
                    "force_gpu"
                ],
                "checkedThread": [
                    "self",
                    "target",
                    "args",
                    "kwargs"
                ],
                "assertNear": [
                    "self",
                    "f1",
                    "f2",
                    "err",
                    "msg"
                ],
                "assertArrayNear": [
                    "self",
                    "farray1",
                    "farray2",
                    "err",
                    "msg"
                ],
                "_NDArrayNear": [
                    "self",
                    "ndarray1",
                    "ndarray2",
                    "err"
                ],
                "assertNDArrayNear": [
                    "self",
                    "ndarray1",
                    "ndarray2",
                    "err",
                    "msg"
                ],
                "_GetNdArray": [
                    "self",
                    "a"
                ],
                "_assertArrayLikeAllClose": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol",
                    "msg"
                ],
                "_assertAllCloseRecursive": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol",
                    "path",
                    "msg"
                ],
                "assertAllClose": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol",
                    "msg"
                ],
                "assertAllCloseAccordingToType": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol",
                    "float_rtol",
                    "float_atol",
                    "half_rtol",
                    "half_atol",
                    "bfloat16_rtol",
                    "bfloat16_atol",
                    "msg"
                ],
                "assertNotAllClose": [
                    "self",
                    "a",
                    "b"
                ],
                "assertAllEqual": [
                    "self",
                    "a",
                    "b",
                    "msg"
                ],
                "assertNotAllEqual": [
                    "self",
                    "a",
                    "b",
                    "msg"
                ],
                "assertAllGreater": [
                    "self",
                    "a",
                    "comparison_target"
                ],
                "assertAllLess": [
                    "self",
                    "a",
                    "comparison_target"
                ],
                "assertAllGreaterEqual": [
                    "self",
                    "a",
                    "comparison_target"
                ],
                "assertAllLessEqual": [
                    "self",
                    "a",
                    "comparison_target"
                ],
                "_format_subscripts": [
                    "self",
                    "subscripts",
                    "value",
                    "limit",
                    "indent"
                ],
                "assertAllInRange": [
                    "self",
                    "target",
                    "lower_bound",
                    "upper_bound",
                    "open_lower_bound",
                    "open_upper_bound"
                ],
                "assertAllInSet": [
                    "self",
                    "target",
                    "expected_set"
                ],
                "assertDTypeEqual": [
                    "self",
                    "target",
                    "expected_dtype"
                ],
                "assertRaisesWithPredicateMatch": [
                    "self",
                    "exception_type",
                    "expected_err_re_or_predicate"
                ],
                "assertRaisesOpError": [
                    "self",
                    "expected_err_re_or_predicate"
                ],
                "assertShapeEqual": [
                    "self",
                    "np_array",
                    "tf_tensor",
                    "msg"
                ],
                "assertDeviceEqual": [
                    "self",
                    "device1",
                    "device2",
                    "msg"
                ],
                "_GetPyList": [
                    "self",
                    "a"
                ],
                "_assertRaggedEqual": [
                    "self",
                    "a",
                    "b",
                    "msg"
                ],
                "_assertRaggedClose": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol",
                    "msg"
                ],
                "_assertListCloseRecursive": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol",
                    "msg",
                    "path"
                ],
                "_constrain_devices_and_set_default": [
                    "self",
                    "sess",
                    "use_gpu",
                    "force_gpu"
                ],
                "_create_session": [
                    "self",
                    "graph",
                    "config",
                    "force_gpu"
                ],
                "_get_cached_session": [
                    "self",
                    "graph",
                    "config",
                    "force_gpu",
                    "crash_if_inconsistent_args"
                ]
            }
        },
        "tensorflow_core.python.framework.sparse_tensor": {
            "convert_to_tensor_or_sparse_tensor": [
                "value",
                "dtype",
                "name"
            ],
            "is_sparse": [
                "x"
            ],
            "SparseTensor": {
                "from_value": [
                    "cls",
                    "sparse_tensor_value"
                ],
                "__init__": [
                    "self",
                    "indices",
                    "values",
                    "dense_shape"
                ],
                "get_shape": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "dense_shape": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "eval": [
                    "self",
                    "feed_dict",
                    "session"
                ],
                "_override_operator": [
                    "operator",
                    "func"
                ],
                "_type_spec": [
                    "self"
                ],
                "_shape_invariant_to_type_spec": [
                    "self",
                    "shape"
                ],
                "consumers": [
                    "self"
                ]
            },
            "SparseTensorSpec": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "_serialize": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "tensor_list"
                ],
                "_flat_tensor_specs": [
                    "self"
                ],
                "_to_tensor_list": [
                    "self",
                    "value"
                ],
                "_to_batched_tensor_list": [
                    "self",
                    "value"
                ],
                "_from_compatible_tensor_list": [
                    "self",
                    "tensor_list"
                ],
                "_batch": [
                    "self",
                    "batch_size"
                ],
                "_unbatch": [
                    "self"
                ],
                "_to_legacy_output_types": [
                    "self"
                ],
                "_to_legacy_output_shapes": [
                    "self"
                ],
                "_to_legacy_output_classes": [
                    "self"
                ],
                "from_value": [
                    "cls",
                    "value"
                ]
            }
        },
        "tensorflow_core.python.framework.framework_lib": {},
        "tensorflow_core.python.framework.op_def_library": {
            "_Attr": [
                "op_def",
                "name"
            ],
            "_AttrValue": [
                "attr_protos",
                "name"
            ],
            "_SatisfiesTypeConstraint": [
                "dtype",
                "attr_def",
                "param_name"
            ],
            "_IsListParameter": [
                "arg"
            ],
            "_NumTypeFields": [
                "arg"
            ],
            "_IsListValue": [
                "v"
            ],
            "_Flatten": [
                "l"
            ],
            "_Restructure": [
                "l",
                "structure"
            ],
            "_MakeFloat": [
                "v",
                "arg_name"
            ],
            "_MakeInt": [
                "v",
                "arg_name"
            ],
            "_MakeStr": [
                "v",
                "arg_name"
            ],
            "_MakeBool": [
                "v",
                "arg_name"
            ],
            "_MakeType": [
                "v",
                "attr_def"
            ],
            "_MakeShape": [
                "v",
                "arg_name"
            ],
            "_MakeTensor": [
                "v",
                "arg_name"
            ],
            "_MakeFunc": [
                "v",
                "arg_name"
            ],
            "_MaybeColocateWith": [
                "inputs"
            ],
            "_OpInfo": {
                "__init__": [
                    "self",
                    "op_def"
                ]
            },
            "OpDefLibrary": {
                "__init__": [
                    "self"
                ],
                "add_op": [
                    "self",
                    "op_def"
                ],
                "add_op_list": [
                    "self",
                    "op_list"
                ],
                "apply_op": [
                    "self",
                    "op_type_name",
                    "name"
                ],
                "_apply_op_helper": [
                    "self",
                    "op_type_name",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.framework.kernels": {
            "get_all_registered_kernels": [],
            "get_registered_kernels_for_op": [
                "name"
            ]
        },
        "tensorflow_core.python.framework.type_spec": {
            "type_spec_from_value": [
                "value"
            ],
            "_type_spec_from_value": [
                "value"
            ],
            "register_type_spec_from_value_converter": [
                "type_object",
                "converter_fn",
                "allow_subclass"
            ],
            "TypeSpec": {
                "value_type": [
                    "self"
                ],
                "is_compatible_with": [
                    "self",
                    "spec_or_value"
                ],
                "most_specific_compatible_type": [
                    "self",
                    "other"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "components"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_tensor_list": [
                    "self",
                    "value"
                ],
                "_from_tensor_list": [
                    "self",
                    "tensor_list"
                ],
                "_from_compatible_tensor_list": [
                    "self",
                    "tensor_list"
                ],
                "_flat_tensor_specs": [
                    "self"
                ],
                "_serialize": [
                    "self"
                ],
                "_deserialize": [
                    "cls",
                    "serialization"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_to_legacy_output_types": [
                    "self"
                ],
                "_to_legacy_output_shapes": [
                    "self"
                ],
                "_to_legacy_output_classes": [
                    "self"
                ],
                "__check_tensor_list": [
                    "self",
                    "tensor_list"
                ],
                "__get_cmp_key": [
                    "self"
                ],
                "__make_cmp_key": [
                    "self",
                    "value"
                ],
                "__nested_list_to_tuple": [
                    "value"
                ],
                "__is_compatible": [
                    "a",
                    "b"
                ],
                "__most_specific_compatible_type_serialization": [
                    "a",
                    "b"
                ]
            },
            "BatchableTypeSpec": {
                "_batch": [
                    "self",
                    "batch_size"
                ],
                "_unbatch": [
                    "self"
                ],
                "_to_batched_tensor_list": [
                    "self",
                    "value"
                ]
            }
        },
        "tensorflow_core.python.framework.device_spec": {
            "_as_str_or_none": [
                "inp"
            ],
            "_as_int_or_none": [
                "inp"
            ],
            "_as_device_str_or_none": [
                "device_type"
            ],
            "DeviceSpecV2": {
                "__init__": [
                    "self",
                    "job",
                    "replica",
                    "task",
                    "device_type",
                    "device_index"
                ],
                "to_string": [
                    "self"
                ],
                "from_string": [
                    "cls",
                    "spec"
                ],
                "parse_from_string": [
                    "self",
                    "spec"
                ],
                "make_merged_spec": [
                    "self",
                    "dev"
                ],
                "replace": [
                    "self"
                ],
                "job": [
                    "self"
                ],
                "replica": [
                    "self"
                ],
                "task": [
                    "self"
                ],
                "device_type": [
                    "self"
                ],
                "device_index": [
                    "self"
                ],
                "_get_combined_properties": [
                    "self",
                    "dev"
                ],
                "_string_to_components": [
                    "spec"
                ],
                "_components_to_string": [
                    "job",
                    "replica",
                    "task",
                    "device_type",
                    "device_index"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ]
            },
            "DeviceSpecV1": {
                "job": [
                    "self",
                    "job"
                ],
                "replica": [
                    "self",
                    "replica"
                ],
                "task": [
                    "self",
                    "task"
                ],
                "device_type": [
                    "self",
                    "device_type"
                ],
                "device_index": [
                    "self",
                    "device_index"
                ],
                "__hash__": [
                    "self"
                ],
                "to_string": [
                    "self"
                ],
                "parse_from_string": [
                    "self",
                    "spec"
                ],
                "merge_from": [
                    "self",
                    "dev"
                ]
            }
        },
        "tensorflow_core.python.framework.common_shapes": {
            "has_fully_defined_shape": [
                "tensor"
            ],
            "rank": [
                "tensor"
            ],
            "scalar_shape": [
                "unused_op"
            ],
            "unchanged_shape": [
                "op"
            ],
            "unchanged_shape_with_rank": [
                "rank"
            ],
            "unchanged_shape_with_rank_at_least": [
                "rank"
            ],
            "unchanged_shape_with_rank_at_most": [
                "rank"
            ],
            "matmul_shape": [
                "op"
            ],
            "get_conv_output_size": [
                "input_size",
                "filter_size",
                "strides",
                "padding_type"
            ],
            "get2d_conv_output_size": [
                "input_height",
                "input_width",
                "filter_height",
                "filter_width",
                "row_stride",
                "col_stride",
                "padding_type"
            ],
            "conv2d_shape": [
                "op"
            ],
            "depthwise_conv2d_native_shape": [
                "op"
            ],
            "separable_conv2d_shape": [
                "op"
            ],
            "avg_pool_shape": [
                "op"
            ],
            "max_pool_shape": [
                "op"
            ],
            "no_outputs": [
                "unused_op"
            ],
            "unknown_shape": [
                "op"
            ],
            "_broadcast_shape_helper": [
                "shape_x",
                "shape_y"
            ],
            "is_broadcast_compatible": [
                "shape_x",
                "shape_y"
            ],
            "broadcast_shape": [
                "shape_x",
                "shape_y"
            ],
            "call_cpp_shape_fn": [
                "op",
                "require_shape_fn"
            ],
            "_call_cpp_shape_fn_impl": [
                "op",
                "input_tensors_needed",
                "input_tensors_as_shapes_needed",
                "require_shape_fn"
            ]
        },
        "tensorflow_core.python.framework.tensor_shape": {
            "enable_v2_tensorshape": [],
            "disable_v2_tensorshape": [],
            "dimension_value": [
                "dimension"
            ],
            "dimension_at_index": [
                "shape",
                "index"
            ],
            "as_dimension": [
                "value"
            ],
            "as_shape": [
                "shape"
            ],
            "unknown_shape": [
                "rank"
            ],
            "scalar": [],
            "vector": [
                "length"
            ],
            "matrix": [
                "rows",
                "cols"
            ],
            "Dimension": {
                "__init__": [
                    "self",
                    "value"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__int__": [
                    "self"
                ],
                "__long__": [
                    "self"
                ],
                "__index__": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "assert_is_compatible_with": [
                    "self",
                    "other"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__rfloordiv__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__reduce__": [
                    "self"
                ]
            },
            "TensorShape": {
                "__init__": [
                    "self",
                    "dims"
                ],
                "_v2_behavior": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "rank": [
                    "self"
                ],
                "dims": [
                    "self"
                ],
                "ndims": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "num_elements": [
                    "self"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "concatenate": [
                    "self",
                    "other"
                ],
                "assert_same_rank": [
                    "self",
                    "other"
                ],
                "assert_has_rank": [
                    "self",
                    "rank"
                ],
                "with_rank": [
                    "self",
                    "rank"
                ],
                "with_rank_at_least": [
                    "self",
                    "rank"
                ],
                "with_rank_at_most": [
                    "self",
                    "rank"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "assert_is_compatible_with": [
                    "self",
                    "other"
                ],
                "most_specific_compatible_shape": [
                    "self",
                    "other"
                ],
                "is_fully_defined": [
                    "self"
                ],
                "assert_is_fully_defined": [
                    "self"
                ],
                "as_list": [
                    "self"
                ],
                "as_proto": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__reduce__": [
                    "self"
                ],
                "__concat__": [
                    "self",
                    "other"
                ]
            }
        },
        "tensorflow_core.python.framework.test_combinations": {
            "generate": [
                "combinations",
                "test_combinations"
            ],
            "_augment_with_special_arguments": [
                "test_method",
                "test_combinations"
            ],
            "combine": [],
            "times": [],
            "_get_name": [
                "value",
                "index"
            ],
            "TestCombination": {
                "should_execute_combination": [
                    "self",
                    "kwargs"
                ],
                "parameter_modifiers": [
                    "self"
                ],
                "context_managers": [
                    "self",
                    "kwargs"
                ]
            },
            "ParameterModifier": {
                "__init__": [
                    "self",
                    "parameter_name"
                ],
                "modified_arguments": [
                    "self",
                    "kwargs",
                    "requested_parameters"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ]
            },
            "OptionalParameter": {
                "modified_arguments": [
                    "self",
                    "kwargs",
                    "requested_parameters"
                ]
            },
            "NamedObject": {
                "__init__": [
                    "self",
                    "name",
                    "obj"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__call__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.graph_io": {
            "write_graph": [
                "graph_or_graph_def",
                "logdir",
                "name",
                "as_text"
            ]
        },
        "tensorflow_core.python.framework.composite_tensor": {
            "replace_composites_with_components": [
                "structure"
            ],
            "CompositeTensor": {
                "_type_spec": [
                    "self"
                ],
                "_to_components": [
                    "self"
                ],
                "_component_metadata": [
                    "self"
                ],
                "_from_components": [
                    "components",
                    "metadata"
                ],
                "_shape_invariant_to_type_spec": [
                    "self",
                    "shape"
                ],
                "_is_graph_tensor": [
                    "self"
                ],
                "_consumers": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.random_seed": {
            "_truncate_seed": [
                "seed"
            ],
            "get_seed": [
                "op_seed"
            ],
            "set_random_seed": [
                "seed"
            ],
            "set_seed": [
                "seed"
            ]
        },
        "tensorflow_core.python.framework.auto_control_deps": {
            "op_is_stateful": [
                "op"
            ],
            "automatic_control_dependencies": [
                "f"
            ],
            "AutomaticControlDependencies": {
                "__init__": [
                    "self"
                ],
                "mark_as_return": [
                    "self",
                    "tensor"
                ],
                "__enter__": [
                    "self"
                ],
                "_process_switch": [
                    "self",
                    "switch_op",
                    "ops_which_must_run",
                    "last_op_using_resource_tensor",
                    "merge_for_resource"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ]
            }
        },
        "tensorflow_core.python.framework.convert_to_constants": {
            "disable_lower_using_switch_merge": [
                "graph_def"
            ],
            "_run_inline_graph_optimization": [
                "func",
                "lower_control_flow"
            ],
            "_get_tensor_name": [
                "name"
            ],
            "_get_new_function_name": [
                "name"
            ],
            "_get_node_defs_list": [
                "graph_def"
            ],
            "_get_tensor_data": [
                "func"
            ],
            "_get_control_flow_function_data": [
                "node_defs",
                "tensor_data"
            ],
            "_populate_const_op": [
                "output_node",
                "node_name",
                "dtype",
                "data",
                "data_shape"
            ],
            "_populate_identity_op": [
                "output_node",
                "input_node"
            ],
            "_populate_if_op": [
                "output_node",
                "input_node",
                "function_data"
            ],
            "_populate_while_op": [
                "output_node",
                "input_node",
                "function_data"
            ],
            "_construct_concrete_function": [
                "func",
                "output_graph_def",
                "converted_input_indices"
            ],
            "convert_variables_to_constants_v2": [
                "func",
                "lower_control_flow"
            ]
        },
        "tensorflow_core.python.framework.test_ops": {
            "a": [
                "name"
            ],
            "A": [
                "name"
            ],
            "a_eager_fallback": [
                "name",
                "ctx"
            ],
            "attr": [
                "a",
                "name"
            ],
            "Attr": [
                "a",
                "name"
            ],
            "attr_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_bool": [
                "a",
                "name"
            ],
            "AttrBool": [
                "a",
                "name"
            ],
            "attr_bool_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_bool_list": [
                "a",
                "name"
            ],
            "AttrBoolList": [
                "a",
                "name"
            ],
            "attr_bool_list_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_default": [
                "a",
                "name"
            ],
            "AttrDefault": [
                "a",
                "name"
            ],
            "attr_default_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_empty_list_default": [
                "a",
                "name"
            ],
            "AttrEmptyListDefault": [
                "a",
                "name"
            ],
            "attr_empty_list_default_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_enum": [
                "a",
                "name"
            ],
            "AttrEnum": [
                "a",
                "name"
            ],
            "attr_enum_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_enum_list": [
                "a",
                "name"
            ],
            "AttrEnumList": [
                "a",
                "name"
            ],
            "attr_enum_list_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_float": [
                "a",
                "name"
            ],
            "AttrFloat": [
                "a",
                "name"
            ],
            "attr_float_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_list_default": [
                "a",
                "name"
            ],
            "AttrListDefault": [
                "a",
                "name"
            ],
            "attr_list_default_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_list_min": [
                "a",
                "name"
            ],
            "AttrListMin": [
                "a",
                "name"
            ],
            "attr_list_min_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_list_type_default": [
                "a",
                "b",
                "name"
            ],
            "AttrListTypeDefault": [
                "a",
                "b",
                "name"
            ],
            "attr_list_type_default_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "attr_min": [
                "a",
                "name"
            ],
            "AttrMin": [
                "a",
                "name"
            ],
            "attr_min_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_partial_shape": [
                "a",
                "name"
            ],
            "AttrPartialShape": [
                "a",
                "name"
            ],
            "attr_partial_shape_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_partial_shape_list": [
                "a",
                "name"
            ],
            "AttrPartialShapeList": [
                "a",
                "name"
            ],
            "attr_partial_shape_list_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_shape": [
                "a",
                "name"
            ],
            "AttrShape": [
                "a",
                "name"
            ],
            "attr_shape_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_shape_list": [
                "a",
                "name"
            ],
            "AttrShapeList": [
                "a",
                "name"
            ],
            "attr_shape_list_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "attr_type_default": [
                "a",
                "name"
            ],
            "AttrTypeDefault": [
                "a",
                "name"
            ],
            "attr_type_default_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "b": [
                "name"
            ],
            "B": [
                "name"
            ],
            "b_eager_fallback": [
                "name",
                "ctx"
            ],
            "binary": [
                "a",
                "b",
                "name"
            ],
            "Binary": [
                "a",
                "b",
                "name"
            ],
            "binary_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "complex_struct": [
                "n_a",
                "n_b",
                "t_c",
                "name"
            ],
            "ComplexStruct": [
                "n_a",
                "n_b",
                "t_c",
                "name"
            ],
            "complex_struct_eager_fallback": [
                "n_a",
                "n_b",
                "t_c",
                "name",
                "ctx"
            ],
            "copy_op": [
                "a",
                "name"
            ],
            "CopyOp": [
                "a",
                "name"
            ],
            "copy_op_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "default_attrs": [
                "string_val",
                "string_list_val",
                "int_val",
                "int_list_val",
                "float_val",
                "float_list_val",
                "bool_val",
                "bool_list_val",
                "type_val",
                "type_list_val",
                "shape_val",
                "shape_list_val",
                "tensor_val",
                "tensor_list_val",
                "name"
            ],
            "DefaultAttrs": [
                "string_val",
                "string_list_val",
                "int_val",
                "int_list_val",
                "float_val",
                "float_list_val",
                "bool_val",
                "bool_list_val",
                "type_val",
                "type_list_val",
                "shape_val",
                "shape_list_val",
                "tensor_val",
                "tensor_list_val",
                "name"
            ],
            "default_attrs_eager_fallback": [
                "string_val",
                "string_list_val",
                "int_val",
                "int_list_val",
                "float_val",
                "float_list_val",
                "bool_val",
                "bool_list_val",
                "type_val",
                "type_list_val",
                "shape_val",
                "shape_list_val",
                "tensor_val",
                "tensor_list_val",
                "name",
                "ctx"
            ],
            "device_placement_op": [
                "name"
            ],
            "DevicePlacementOp": [
                "name"
            ],
            "device_placement_op_eager_fallback": [
                "name",
                "ctx"
            ],
            "five_float_outputs": [
                "name"
            ],
            "FiveFloatOutputs": [
                "name"
            ],
            "five_float_outputs_eager_fallback": [
                "name",
                "ctx"
            ],
            "float_input": [
                "a",
                "name"
            ],
            "FloatInput": [
                "a",
                "name"
            ],
            "float_input_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "float_output": [
                "name"
            ],
            "FloatOutput": [
                "name"
            ],
            "float_output_eager_fallback": [
                "name",
                "ctx"
            ],
            "float_output_string_output": [
                "name"
            ],
            "FloatOutputStringOutput": [
                "name"
            ],
            "float_output_string_output_eager_fallback": [
                "name",
                "ctx"
            ],
            "foo1": [
                "a",
                "b",
                "c",
                "name"
            ],
            "Foo1": [
                "a",
                "b",
                "c",
                "name"
            ],
            "foo1_eager_fallback": [
                "a",
                "b",
                "c",
                "name",
                "ctx"
            ],
            "foo2": [
                "a",
                "b",
                "c",
                "name"
            ],
            "Foo2": [
                "a",
                "b",
                "c",
                "name"
            ],
            "foo2_eager_fallback": [
                "a",
                "b",
                "c",
                "name",
                "ctx"
            ],
            "foo3": [
                "a",
                "b",
                "c",
                "name"
            ],
            "Foo3": [
                "a",
                "b",
                "c",
                "name"
            ],
            "foo3_eager_fallback": [
                "a",
                "b",
                "c",
                "name",
                "ctx"
            ],
            "func_attr": [
                "f",
                "name"
            ],
            "FuncAttr": [
                "f",
                "name"
            ],
            "func_attr_eager_fallback": [
                "f",
                "name",
                "ctx"
            ],
            "func_list_attr": [
                "f",
                "name"
            ],
            "FuncListAttr": [
                "f",
                "name"
            ],
            "func_list_attr_eager_fallback": [
                "f",
                "name",
                "ctx"
            ],
            "graph_def_version": [
                "name"
            ],
            "GraphDefVersion": [
                "name"
            ],
            "graph_def_version_eager_fallback": [
                "name",
                "ctx"
            ],
            "in_polymorphic_twice": [
                "a",
                "b",
                "name"
            ],
            "InPolymorphicTwice": [
                "a",
                "b",
                "name"
            ],
            "in_polymorphic_twice_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "int64_output": [
                "name"
            ],
            "Int64Output": [
                "name"
            ],
            "int64_output_eager_fallback": [
                "name",
                "ctx"
            ],
            "int_attr": [
                "foo",
                "name"
            ],
            "IntAttr": [
                "foo",
                "name"
            ],
            "int_attr_eager_fallback": [
                "foo",
                "name",
                "ctx"
            ],
            "int_input": [
                "a",
                "name"
            ],
            "IntInput": [
                "a",
                "name"
            ],
            "int_input_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "int_input_float_input": [
                "a",
                "b",
                "name"
            ],
            "IntInputFloatInput": [
                "a",
                "b",
                "name"
            ],
            "int_input_float_input_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "int_input_int_output": [
                "a",
                "name"
            ],
            "IntInputIntOutput": [
                "a",
                "name"
            ],
            "int_input_int_output_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "int_output": [
                "name"
            ],
            "IntOutput": [
                "name"
            ],
            "int_output_eager_fallback": [
                "name",
                "ctx"
            ],
            "int_output_float_output": [
                "name"
            ],
            "IntOutputFloatOutput": [
                "name"
            ],
            "int_output_float_output_eager_fallback": [
                "name",
                "ctx"
            ],
            "kernel_label": [
                "name"
            ],
            "KernelLabel": [
                "name"
            ],
            "kernel_label_eager_fallback": [
                "name",
                "ctx"
            ],
            "kernel_label_required": [
                "input",
                "name"
            ],
            "KernelLabelRequired": [
                "input",
                "name"
            ],
            "kernel_label_required_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "list_input": [
                "a",
                "name"
            ],
            "ListInput": [
                "a",
                "name"
            ],
            "list_input_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "list_output": [
                "T",
                "name"
            ],
            "ListOutput": [
                "T",
                "name"
            ],
            "list_output_eager_fallback": [
                "T",
                "name",
                "ctx"
            ],
            "mixed_struct": [
                "n_a",
                "name"
            ],
            "MixedStruct": [
                "n_a",
                "name"
            ],
            "mixed_struct_eager_fallback": [
                "n_a",
                "name",
                "ctx"
            ],
            "n_in_polymorphic_twice": [
                "a",
                "b",
                "name"
            ],
            "NInPolymorphicTwice": [
                "a",
                "b",
                "name"
            ],
            "n_in_polymorphic_twice_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "n_in_twice": [
                "a",
                "b",
                "name"
            ],
            "NInTwice": [
                "a",
                "b",
                "name"
            ],
            "n_in_twice_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "n_in_two_type_variables": [
                "a",
                "b",
                "name"
            ],
            "NInTwoTypeVariables": [
                "a",
                "b",
                "name"
            ],
            "n_in_two_type_variables_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "n_ints_in": [
                "a",
                "name"
            ],
            "NIntsIn": [
                "a",
                "name"
            ],
            "n_ints_in_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "n_ints_out": [
                "N",
                "name"
            ],
            "NIntsOut": [
                "N",
                "name"
            ],
            "n_ints_out_eager_fallback": [
                "N",
                "name",
                "ctx"
            ],
            "n_ints_out_default": [
                "N",
                "name"
            ],
            "NIntsOutDefault": [
                "N",
                "name"
            ],
            "n_ints_out_default_eager_fallback": [
                "N",
                "name",
                "ctx"
            ],
            "n_polymorphic_in": [
                "a",
                "name"
            ],
            "NPolymorphicIn": [
                "a",
                "name"
            ],
            "n_polymorphic_in_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "n_polymorphic_out": [
                "T",
                "N",
                "name"
            ],
            "NPolymorphicOut": [
                "T",
                "N",
                "name"
            ],
            "n_polymorphic_out_eager_fallback": [
                "T",
                "N",
                "name",
                "ctx"
            ],
            "n_polymorphic_out_default": [
                "T",
                "N",
                "name"
            ],
            "NPolymorphicOutDefault": [
                "T",
                "N",
                "name"
            ],
            "n_polymorphic_out_default_eager_fallback": [
                "T",
                "N",
                "name",
                "ctx"
            ],
            "n_polymorphic_restrict_in": [
                "a",
                "name"
            ],
            "NPolymorphicRestrictIn": [
                "a",
                "name"
            ],
            "n_polymorphic_restrict_in_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "n_polymorphic_restrict_out": [
                "T",
                "N",
                "name"
            ],
            "NPolymorphicRestrictOut": [
                "T",
                "N",
                "name"
            ],
            "n_polymorphic_restrict_out_eager_fallback": [
                "T",
                "N",
                "name",
                "ctx"
            ],
            "none": [
                "name"
            ],
            "None_": [
                "name"
            ],
            "none_eager_fallback": [
                "name",
                "ctx"
            ],
            "old": [
                "name"
            ],
            "Old": [
                "name"
            ],
            "old_eager_fallback": [
                "name",
                "ctx"
            ],
            "op_with_default_attr": [
                "default_float",
                "name"
            ],
            "OpWithDefaultAttr": [
                "default_float",
                "name"
            ],
            "op_with_default_attr_eager_fallback": [
                "default_float",
                "name",
                "ctx"
            ],
            "op_with_future_default_attr": [
                "name"
            ],
            "OpWithFutureDefaultAttr": [
                "name"
            ],
            "op_with_future_default_attr_eager_fallback": [
                "name",
                "ctx"
            ],
            "out_t": [
                "T",
                "name"
            ],
            "OutT": [
                "T",
                "name"
            ],
            "out_t_eager_fallback": [
                "T",
                "name",
                "ctx"
            ],
            "out_type_list": [
                "T",
                "name"
            ],
            "OutTypeList": [
                "T",
                "name"
            ],
            "out_type_list_eager_fallback": [
                "T",
                "name",
                "ctx"
            ],
            "out_type_list_restrict": [
                "t",
                "name"
            ],
            "OutTypeListRestrict": [
                "t",
                "name"
            ],
            "out_type_list_restrict_eager_fallback": [
                "t",
                "name",
                "ctx"
            ],
            "polymorphic": [
                "a",
                "name"
            ],
            "Polymorphic": [
                "a",
                "name"
            ],
            "polymorphic_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "polymorphic_default_out": [
                "T",
                "name"
            ],
            "PolymorphicDefaultOut": [
                "T",
                "name"
            ],
            "polymorphic_default_out_eager_fallback": [
                "T",
                "name",
                "ctx"
            ],
            "polymorphic_out": [
                "T",
                "name"
            ],
            "PolymorphicOut": [
                "T",
                "name"
            ],
            "polymorphic_out_eager_fallback": [
                "T",
                "name",
                "ctx"
            ],
            "ref_in": [
                "a",
                "name"
            ],
            "RefIn": [
                "a",
                "name"
            ],
            "ref_in_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "ref_input_float_input": [
                "a",
                "b",
                "name"
            ],
            "RefInputFloatInput": [
                "a",
                "b",
                "name"
            ],
            "ref_input_float_input_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "ref_input_float_input_int_output": [
                "a",
                "b",
                "name"
            ],
            "RefInputFloatInputIntOutput": [
                "a",
                "b",
                "name"
            ],
            "ref_input_float_input_int_output_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "ref_input_int_input": [
                "a",
                "b",
                "name"
            ],
            "RefInputIntInput": [
                "a",
                "b",
                "name"
            ],
            "ref_input_int_input_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "ref_out": [
                "T",
                "name"
            ],
            "RefOut": [
                "T",
                "name"
            ],
            "ref_out_eager_fallback": [
                "T",
                "name",
                "ctx"
            ],
            "ref_output": [
                "name"
            ],
            "RefOutput": [
                "name"
            ],
            "ref_output_eager_fallback": [
                "name",
                "ctx"
            ],
            "ref_output_float_output": [
                "name"
            ],
            "RefOutputFloatOutput": [
                "name"
            ],
            "ref_output_float_output_eager_fallback": [
                "name",
                "ctx"
            ],
            "requires_older_graph_version": [
                "name"
            ],
            "RequiresOlderGraphVersion": [
                "name"
            ],
            "requires_older_graph_version_eager_fallback": [
                "name",
                "ctx"
            ],
            "reserved_attr": [
                "range",
                "name"
            ],
            "ReservedAttr": [
                "range",
                "name"
            ],
            "reserved_attr_eager_fallback": [
                "range",
                "name",
                "ctx"
            ],
            "reserved_input": [
                "input",
                "name"
            ],
            "ReservedInput": [
                "input",
                "name"
            ],
            "reserved_input_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "resource_create_op": [
                "resource",
                "name"
            ],
            "ResourceCreateOp": [
                "resource",
                "name"
            ],
            "resource_create_op_eager_fallback": [
                "resource",
                "name",
                "ctx"
            ],
            "resource_initialized_op": [
                "resource",
                "name"
            ],
            "ResourceInitializedOp": [
                "resource",
                "name"
            ],
            "resource_initialized_op_eager_fallback": [
                "resource",
                "name",
                "ctx"
            ],
            "resource_using_op": [
                "resource",
                "name"
            ],
            "ResourceUsingOp": [
                "resource",
                "name"
            ],
            "resource_using_op_eager_fallback": [
                "resource",
                "name",
                "ctx"
            ],
            "restrict": [
                "a",
                "name"
            ],
            "Restrict": [
                "a",
                "name"
            ],
            "restrict_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "simple": [
                "a",
                "name"
            ],
            "Simple": [
                "a",
                "name"
            ],
            "simple_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "simple_struct": [
                "n_a",
                "name"
            ],
            "SimpleStruct": [
                "n_a",
                "name"
            ],
            "simple_struct_eager_fallback": [
                "n_a",
                "name",
                "ctx"
            ],
            "string_list_attr": [
                "a",
                "b",
                "name"
            ],
            "StringListAttr": [
                "a",
                "b",
                "name"
            ],
            "string_list_attr_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "stub_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "StubResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "stub_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "test_attr": [
                "T",
                "name"
            ],
            "TestAttr": [
                "T",
                "name"
            ],
            "test_attr_eager_fallback": [
                "T",
                "name",
                "ctx"
            ],
            "test_string_output": [
                "input",
                "name"
            ],
            "TestStringOutput": [
                "input",
                "name"
            ],
            "test_string_output_eager_fallback": [
                "input",
                "name",
                "ctx"
            ],
            "two_float_inputs": [
                "a",
                "b",
                "name"
            ],
            "TwoFloatInputs": [
                "a",
                "b",
                "name"
            ],
            "two_float_inputs_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "two_float_inputs_float_output": [
                "a",
                "b",
                "name"
            ],
            "TwoFloatInputsFloatOutput": [
                "a",
                "b",
                "name"
            ],
            "two_float_inputs_float_output_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "two_float_inputs_int_output": [
                "a",
                "b",
                "name"
            ],
            "TwoFloatInputsIntOutput": [
                "a",
                "b",
                "name"
            ],
            "two_float_inputs_int_output_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "two_float_outputs": [
                "name"
            ],
            "TwoFloatOutputs": [
                "name"
            ],
            "two_float_outputs_eager_fallback": [
                "name",
                "ctx"
            ],
            "two_int_inputs": [
                "a",
                "b",
                "name"
            ],
            "TwoIntInputs": [
                "a",
                "b",
                "name"
            ],
            "two_int_inputs_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "two_int_outputs": [
                "name"
            ],
            "TwoIntOutputs": [
                "name"
            ],
            "two_int_outputs_eager_fallback": [
                "name",
                "ctx"
            ],
            "two_refs_in": [
                "a",
                "b",
                "name"
            ],
            "TwoRefsIn": [
                "a",
                "b",
                "name"
            ],
            "two_refs_in_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "type_list": [
                "a",
                "name"
            ],
            "TypeList": [
                "a",
                "name"
            ],
            "type_list_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "type_list_restrict": [
                "a",
                "name"
            ],
            "TypeListRestrict": [
                "a",
                "name"
            ],
            "type_list_restrict_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "type_list_twice": [
                "a",
                "b",
                "name"
            ],
            "TypeListTwice": [
                "a",
                "b",
                "name"
            ],
            "type_list_twice_eager_fallback": [
                "a",
                "b",
                "name",
                "ctx"
            ],
            "unary": [
                "a",
                "name"
            ],
            "Unary": [
                "a",
                "name"
            ],
            "unary_eager_fallback": [
                "a",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.framework.smart_cond": {
            "smart_cond": [
                "pred",
                "true_fn",
                "false_fn",
                "name"
            ],
            "smart_constant_value": [
                "pred"
            ],
            "smart_case": [
                "pred_fn_pairs",
                "default",
                "exclusive",
                "name"
            ]
        },
        "tensorflow_core.python.framework.ops": {
            "tensor_id": [
                "tensor"
            ],
            "_override_helper": [
                "clazz_object",
                "operator",
                "func"
            ],
            "_as_graph_element": [
                "obj"
            ],
            "is_dense_tensor_like": [
                "t"
            ],
            "register_dense_tensor_like_type": [
                "tensor_type"
            ],
            "uid": [],
            "numpy_text": [
                "tensor",
                "is_repr"
            ],
            "enable_tensor_equality": [],
            "disable_tensor_equality": [],
            "convert_to_tensor": [
                "value",
                "dtype",
                "name",
                "preferred_dtype",
                "dtype_hint"
            ],
            "convert_to_tensor_v2": [
                "value",
                "dtype",
                "dtype_hint",
                "name"
            ],
            "_error_prefix": [
                "name"
            ],
            "internal_convert_to_tensor": [
                "value",
                "dtype",
                "name",
                "as_ref",
                "preferred_dtype",
                "ctx",
                "accepted_result_types"
            ],
            "internal_convert_n_to_tensor": [
                "values",
                "dtype",
                "name",
                "as_ref",
                "preferred_dtype",
                "ctx"
            ],
            "convert_n_to_tensor": [
                "values",
                "dtype",
                "name",
                "preferred_dtype"
            ],
            "convert_to_tensor_or_composite": [
                "value",
                "dtype",
                "name"
            ],
            "internal_convert_to_tensor_or_composite": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "internal_convert_n_to_tensor_or_composite": [
                "values",
                "dtype",
                "name",
                "as_ref"
            ],
            "convert_n_to_tensor_or_composite": [
                "values",
                "dtype",
                "name"
            ],
            "_device_string": [
                "dev_spec"
            ],
            "_NodeDef": [
                "op_type",
                "name",
                "device",
                "attrs"
            ],
            "_create_c_op": [
                "graph",
                "node_def",
                "inputs",
                "control_inputs"
            ],
            "no_gradient": [
                "op_type"
            ],
            "get_gradient_function": [
                "op"
            ],
            "_set_call_cpp_shape_fn": [
                "call_cpp_shape_fn"
            ],
            "set_shape_and_handle_data_for_outputs": [
                "_"
            ],
            "get_stats_for_node_def": [
                "graph",
                "node",
                "statistic_type"
            ],
            "name_from_scope_name": [
                "name"
            ],
            "device": [
                "device_name_or_function"
            ],
            "device_v2": [
                "device_name"
            ],
            "container": [
                "container_name"
            ],
            "_colocate_with_for_gradient": [
                "op",
                "gradient_uid",
                "ignore_existing"
            ],
            "colocate_with": [
                "op",
                "ignore_existing"
            ],
            "_colocate_with": [
                "op",
                "ignore_existing"
            ],
            "control_dependencies": [
                "control_inputs"
            ],
            "default_session": [
                "session"
            ],
            "get_default_session": [],
            "_eval_using_default_session": [
                "tensors",
                "feed_dict",
                "graph",
                "session"
            ],
            "_run_using_default_session": [
                "operation",
                "feed_dict",
                "graph",
                "session"
            ],
            "_get_outer_context_and_inner_device_stack": [],
            "init_scope": [],
            "executing_eagerly_outside_functions": [],
            "inside_function": [],
            "enable_eager_execution": [
                "config",
                "device_policy",
                "execution_mode"
            ],
            "disable_eager_execution": [],
            "enable_eager_execution_internal": [
                "config",
                "device_policy",
                "execution_mode",
                "server_def"
            ],
            "eager_run": [
                "main",
                "argv"
            ],
            "reset_default_graph": [],
            "get_default_graph": [],
            "has_default_graph": [],
            "get_name_scope": [],
            "_assert_same_graph": [
                "original_item",
                "item"
            ],
            "_get_graph_from_inputs": [
                "op_input_list",
                "graph"
            ],
            "dismantle_graph": [
                "graph"
            ],
            "add_to_collection": [
                "name",
                "value"
            ],
            "add_to_collections": [
                "names",
                "value"
            ],
            "get_collection_ref": [
                "key"
            ],
            "get_collection": [
                "key",
                "scope"
            ],
            "get_all_collection_keys": [],
            "enter_eager_name_scope": [
                "ctx",
                "name"
            ],
            "strip_name_scope": [
                "name",
                "export_scope"
            ],
            "prepend_name_scope": [
                "name",
                "import_scope"
            ],
            "op_scope": [
                "values",
                "name",
                "default_name"
            ],
            "register_proto_function": [
                "collection_name",
                "proto_type",
                "to_proto",
                "from_proto"
            ],
            "get_collection_proto_type": [
                "collection_name"
            ],
            "get_to_proto_function": [
                "collection_name"
            ],
            "get_from_proto_function": [
                "collection_name"
            ],
            "_operation_conversion_error": [
                "op",
                "dtype",
                "name",
                "as_ref"
            ],
            "_op_to_colocate_with": [
                "v",
                "graph"
            ],
            "_is_keras_symbolic_tensor": [
                "x"
            ],
            "_UserDeviceSpec": {
                "__init__": [
                    "self",
                    "device_name_or_function"
                ],
                "string_merge": [
                    "self",
                    "node_def"
                ]
            },
            "NullContextmanager": {
                "__init__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type_arg",
                    "value_arg",
                    "traceback_arg"
                ]
            },
            "Tensor": {
                "__init__": [
                    "self",
                    "op",
                    "value_index",
                    "dtype"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_get_input_ops_without_shapes": [
                    "self",
                    "target_op"
                ],
                "_c_api_shape": [
                    "self"
                ],
                "_shape": [
                    "self",
                    "value"
                ],
                "_disallow_when_autograph_disabled": [
                    "self",
                    "task"
                ],
                "_disallow_when_autograph_enabled": [
                    "self",
                    "task"
                ],
                "_disallow_in_graph_mode": [
                    "self",
                    "task"
                ],
                "_disallow_bool_casting": [
                    "self"
                ],
                "_disallow_iteration": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "_shape_as_list": [
                    "self"
                ],
                "_shape_tuple": [
                    "self"
                ],
                "_rank": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "value_index": [
                    "self"
                ],
                "consumers": [
                    "self"
                ],
                "_as_node_def_input": [
                    "self"
                ],
                "_as_tf_output": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "__array__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "_override_operator": [
                    "operator",
                    "func"
                ],
                "__bool__": [
                    "self"
                ],
                "__nonzero__": [
                    "self"
                ],
                "eval": [
                    "self",
                    "feed_dict",
                    "session"
                ],
                "experimental_ref": [
                    "self"
                ]
            },
            "_EagerTensorBase": {
                "__int__": [
                    "self"
                ],
                "__long__": [
                    "self"
                ],
                "__float__": [
                    "self"
                ],
                "__index__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__format__": [
                    "self",
                    "format_spec"
                ],
                "__reduce__": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "_numpy": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "numpy": [
                    "self"
                ],
                "backing_device": [
                    "self"
                ],
                "_datatype_enum": [
                    "self"
                ],
                "_shape_tuple": [
                    "self"
                ],
                "_rank": [
                    "self"
                ],
                "_num_elements": [
                    "self"
                ],
                "_copy_to_device": [
                    "self",
                    "device_name"
                ],
                "_override_operator": [
                    "name",
                    "func"
                ],
                "_copy_nograd": [
                    "self",
                    "ctx",
                    "device_name"
                ],
                "_copy": [
                    "self",
                    "ctx",
                    "device_name"
                ],
                "shape": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape_as_list": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "cpu": [
                    "self"
                ],
                "gpu": [
                    "self",
                    "gpu_index"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "op": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "value_index": [
                    "self"
                ],
                "consumers": [
                    "self"
                ],
                "_add_consumer": [
                    "self",
                    "consumer"
                ],
                "_as_node_def_input": [
                    "self"
                ],
                "_as_tf_output": [
                    "self"
                ],
                "eval": [
                    "self",
                    "feed_dict",
                    "session"
                ]
            },
            "Operation": {
                "__init__": [
                    "self",
                    "node_def",
                    "g",
                    "inputs",
                    "output_types",
                    "control_inputs",
                    "input_types",
                    "original_op",
                    "op_def"
                ],
                "_control_flow_post_processing": [
                    "self"
                ],
                "_reconstruct_sequence_inputs": [
                    "self",
                    "op_def",
                    "inputs",
                    "attrs"
                ],
                "colocation_groups": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_get_control_flow_context": [
                    "self"
                ],
                "_set_control_flow_context": [
                    "self",
                    "ctx"
                ],
                "name": [
                    "self"
                ],
                "_id": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "_device_assignments": [
                    "self"
                ],
                "_colocation_dict": [
                    "self"
                ],
                "_output_types": [
                    "self"
                ],
                "_tf_output": [
                    "self",
                    "output_idx"
                ],
                "_tf_input": [
                    "self",
                    "input_idx"
                ],
                "_set_device": [
                    "self",
                    "device"
                ],
                "_set_device_from_string": [
                    "self",
                    "device_str"
                ],
                "_update_input": [
                    "self",
                    "index",
                    "tensor"
                ],
                "_add_while_inputs": [
                    "self",
                    "tensors"
                ],
                "_add_control_inputs": [
                    "self",
                    "ops"
                ],
                "_add_control_input": [
                    "self",
                    "op"
                ],
                "_remove_all_control_inputs": [
                    "self"
                ],
                "_add_outputs": [
                    "self",
                    "types",
                    "shapes"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "_inputs": [
                    "self",
                    "value"
                ],
                "_input_types": [
                    "self",
                    "value"
                ],
                "control_inputs": [
                    "self"
                ],
                "_control_outputs": [
                    "self"
                ],
                "_control_inputs": [
                    "self",
                    "value"
                ],
                "type": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "node_def": [
                    "self"
                ],
                "_node_def": [
                    "self"
                ],
                "op_def": [
                    "self"
                ],
                "_op_def": [
                    "self"
                ],
                "traceback": [
                    "self"
                ],
                "traceback_with_start_lines": [
                    "self"
                ],
                "_set_attr": [
                    "self",
                    "attr_name",
                    "attr_value"
                ],
                "_set_func_attr": [
                    "self",
                    "attr_name",
                    "func_name"
                ],
                "_set_func_list_attr": [
                    "self",
                    "attr_name",
                    "func_names"
                ],
                "_set_type_list_attr": [
                    "self",
                    "attr_name",
                    "types"
                ],
                "_set_shape_list_attr": [
                    "self",
                    "attr_name",
                    "shapes"
                ],
                "_clear_attr": [
                    "self",
                    "attr_name"
                ],
                "get_attr": [
                    "self",
                    "name"
                ],
                "_get_attr_type": [
                    "self",
                    "name"
                ],
                "run": [
                    "self",
                    "feed_dict",
                    "session"
                ]
            },
            "RegisterGradient": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "RegisterShape": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "OpStats": {
                "__init__": [
                    "self",
                    "statistic_type",
                    "value"
                ],
                "statistic_type": [
                    "self",
                    "statistic_type"
                ],
                "value": [
                    "self",
                    "value"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ]
            },
            "RegisterStatistics": {
                "__init__": [
                    "self",
                    "op_type",
                    "statistic_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "Graph": {
                "__init__": [
                    "self"
                ],
                "_variable_creator_scope": [
                    "self",
                    "creator",
                    "priority"
                ],
                "_variable_creator_stack": [
                    "self",
                    "variable_creator_stack"
                ],
                "_check_not_finalized": [
                    "self"
                ],
                "_add_op": [
                    "self",
                    "op"
                ],
                "_c_graph": [
                    "self"
                ],
                "version": [
                    "self"
                ],
                "graph_def_versions": [
                    "self"
                ],
                "seed": [
                    "self",
                    "seed"
                ],
                "finalized": [
                    "self"
                ],
                "finalize": [
                    "self"
                ],
                "_unsafe_unfinalize": [
                    "self"
                ],
                "_get_control_flow_context": [
                    "self"
                ],
                "_set_control_flow_context": [
                    "self",
                    "ctx"
                ],
                "_copy_functions_to_graph_def": [
                    "self",
                    "graph_def",
                    "starting_bytesize"
                ],
                "_as_graph_def": [
                    "self",
                    "from_version",
                    "add_shapes"
                ],
                "as_graph_def": [
                    "self",
                    "from_version",
                    "add_shapes"
                ],
                "_is_function": [
                    "self",
                    "name"
                ],
                "_get_function": [
                    "self",
                    "name"
                ],
                "_add_function": [
                    "self",
                    "function"
                ],
                "building_function": [
                    "self"
                ],
                "create_op": [
                    "self",
                    "op_type",
                    "inputs",
                    "dtypes",
                    "input_types",
                    "name",
                    "attrs",
                    "op_def",
                    "compute_shapes",
                    "compute_device"
                ],
                "_create_op_internal": [
                    "self",
                    "op_type",
                    "inputs",
                    "dtypes",
                    "input_types",
                    "name",
                    "attrs",
                    "op_def",
                    "compute_device"
                ],
                "_create_op_from_tf_operation": [
                    "self",
                    "c_op",
                    "compute_device"
                ],
                "_create_op_helper": [
                    "self",
                    "op",
                    "compute_device"
                ],
                "_add_new_tf_operations": [
                    "self",
                    "compute_devices"
                ],
                "as_graph_element": [
                    "self",
                    "obj",
                    "allow_tensor",
                    "allow_operation"
                ],
                "_as_graph_element_locked": [
                    "self",
                    "obj",
                    "allow_tensor",
                    "allow_operation"
                ],
                "get_operations": [
                    "self"
                ],
                "get_operation_by_name": [
                    "self",
                    "name"
                ],
                "_get_operation_by_name_unsafe": [
                    "self",
                    "name"
                ],
                "_get_operation_by_tf_operation": [
                    "self",
                    "tf_oper"
                ],
                "get_tensor_by_name": [
                    "self",
                    "name"
                ],
                "_get_tensor_by_tf_output": [
                    "self",
                    "tf_output"
                ],
                "_next_id": [
                    "self"
                ],
                "_last_id": [
                    "self"
                ],
                "_get_op_def": [
                    "self",
                    "type"
                ],
                "as_default": [
                    "self"
                ],
                "collections": [
                    "self"
                ],
                "add_to_collection": [
                    "self",
                    "name",
                    "value"
                ],
                "add_to_collections": [
                    "self",
                    "names",
                    "value"
                ],
                "get_collection_ref": [
                    "self",
                    "name"
                ],
                "get_collection": [
                    "self",
                    "name",
                    "scope"
                ],
                "get_all_collection_keys": [
                    "self"
                ],
                "clear_collection": [
                    "self",
                    "name"
                ],
                "_original_op": [
                    "self",
                    "op"
                ],
                "_name_stack": [
                    "self",
                    "name_stack"
                ],
                "name_scope": [
                    "self",
                    "name"
                ],
                "unique_name": [
                    "self",
                    "name",
                    "mark_as_used"
                ],
                "get_name_scope": [
                    "self"
                ],
                "_colocate_with_for_gradient": [
                    "self",
                    "op",
                    "gradient_uid",
                    "ignore_existing"
                ],
                "colocate_with": [
                    "self",
                    "op",
                    "ignore_existing"
                ],
                "_add_device_to_stack": [
                    "self",
                    "device_name_or_function",
                    "offset"
                ],
                "device": [
                    "self",
                    "device_name_or_function"
                ],
                "_apply_device_functions": [
                    "self",
                    "op"
                ],
                "container": [
                    "self",
                    "container_name"
                ],
                "_push_control_dependencies_controller": [
                    "self",
                    "controller"
                ],
                "_pop_control_dependencies_controller": [
                    "self",
                    "controller"
                ],
                "_current_control_dependencies": [
                    "self"
                ],
                "_control_dependencies_for_inputs": [
                    "self",
                    "input_ops"
                ],
                "_record_op_seen_by_control_dependencies": [
                    "self",
                    "op"
                ],
                "control_dependencies": [
                    "self",
                    "control_inputs"
                ],
                "_attr_scope": [
                    "self",
                    "attr_map"
                ],
                "_kernel_label_map": [
                    "self",
                    "op_to_kernel_label_map"
                ],
                "gradient_override_map": [
                    "self",
                    "op_type_map"
                ],
                "prevent_feeding": [
                    "self",
                    "tensor"
                ],
                "is_feedable": [
                    "self",
                    "tensor"
                ],
                "prevent_fetching": [
                    "self",
                    "op"
                ],
                "is_fetchable": [
                    "self",
                    "tensor_or_op"
                ],
                "switch_to_thread_local": [
                    "self"
                ],
                "_device_function_stack": [
                    "self",
                    "device_function_stack"
                ],
                "_device_functions_outer_to_inner": [
                    "self"
                ],
                "_snapshot_device_function_stack_metadata": [
                    "self"
                ],
                "_colocation_stack": [
                    "self",
                    "colocation_stack"
                ],
                "_snapshot_colocation_stack_metadata": [
                    "self"
                ],
                "_control_dependencies_stack": [
                    "self",
                    "control_dependencies"
                ],
                "_distribution_strategy_stack": [
                    "self",
                    "_distribution_strategy_stack"
                ],
                "_global_distribute_strategy_scope": [
                    "self",
                    "distribute_strategy_scope"
                ],
                "_auto_cast_variable_read_dtype": [
                    "self",
                    "dtype"
                ],
                "_enable_auto_casting_variables": [
                    "self",
                    "dtype"
                ],
                "_mutation_lock": [
                    "self"
                ],
                "_session_run_lock": [
                    "self"
                ]
            },
            "_DefaultStack": {
                "__init__": [
                    "self"
                ],
                "get_default": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "is_cleared": [
                    "self"
                ],
                "enforce_nesting": [
                    "self",
                    "value"
                ],
                "get_controller": [
                    "self",
                    "default"
                ]
            },
            "_DefaultGraphStack": {
                "__init__": [
                    "self"
                ],
                "get_default": [
                    "self"
                ],
                "_GetGlobalDefaultGraph": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "get_controller": [
                    "self",
                    "default"
                ]
            },
            "GraphKeys": {
                "VARIABLES": [
                    "cls"
                ]
            },
            "name_scope": {
                "name": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "name",
                    "default_name",
                    "values"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type_arg",
                    "value_arg",
                    "traceback_arg"
                ]
            },
            "name_scope_v2": {
                "__init__": [
                    "self",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type_arg",
                    "value_arg",
                    "traceback_arg"
                ]
            }
        },
        "tensorflow_core.python.framework.meta_graph": {
            "_node_def": [
                "from_node_def",
                "export_scope",
                "unbound_inputs",
                "clear_devices"
            ],
            "_read_file": [
                "filename"
            ],
            "ops_used_by_graph_def": [
                "graph_def"
            ],
            "stripped_op_list_for_graph": [
                "graph_def"
            ],
            "_get_kind_name": [
                "item"
            ],
            "_op_name": [
                "tensor_name"
            ],
            "_get_scope": [
                "node_name"
            ],
            "_find_extraneous_saver_nodes": [
                "graph_def",
                "saver_def"
            ],
            "_should_include_node": [
                "node_or_node_name",
                "export_scope",
                "exclude_nodes"
            ],
            "add_collection_def": [
                "meta_graph_def",
                "key",
                "graph",
                "export_scope",
                "exclude_nodes",
                "override_contents"
            ],
            "_is_default_attr_value": [
                "op_def",
                "attr_name",
                "attr_value"
            ],
            "strip_graph_default_valued_attrs": [
                "meta_graph_def"
            ],
            "create_meta_graph_def": [
                "meta_info_def",
                "graph_def",
                "saver_def",
                "collection_list",
                "graph",
                "export_scope",
                "exclude_nodes",
                "clear_extraneous_savers",
                "strip_default_attrs"
            ],
            "read_meta_graph_file": [
                "filename"
            ],
            "import_scoped_meta_graph": [
                "meta_graph_or_file",
                "clear_devices",
                "graph",
                "import_scope",
                "input_map",
                "unbound_inputs_col_name",
                "restore_collections_predicate"
            ],
            "import_scoped_meta_graph_with_return_elements": [
                "meta_graph_or_file",
                "clear_devices",
                "graph",
                "import_scope",
                "input_map",
                "unbound_inputs_col_name",
                "restore_collections_predicate",
                "return_elements"
            ],
            "export_scoped_meta_graph": [
                "filename",
                "graph_def",
                "graph",
                "export_scope",
                "as_text",
                "unbound_inputs_col_name",
                "clear_devices",
                "saver_def",
                "clear_extraneous_savers",
                "strip_default_attrs",
                "save_debug_info"
            ],
            "copy_scoped_meta_graph": [
                "from_scope",
                "to_scope",
                "from_graph",
                "to_graph"
            ]
        },
        "tensorflow_core.python.framework.tensor_util": {
            "ExtractBitsFromFloat16": [
                "x"
            ],
            "SlowAppendFloat16ArrayToTensorProto": [
                "tensor_proto",
                "proto_values"
            ],
            "_MediumAppendFloat16ArrayToTensorProto": [
                "tensor_proto",
                "proto_values"
            ],
            "ExtractBitsFromBFloat16": [
                "x"
            ],
            "SlowAppendBFloat16ArrayToTensorProto": [
                "tensor_proto",
                "proto_values"
            ],
            "FastAppendBFloat16ArrayToTensorProto": [
                "tensor_proto",
                "proto_values"
            ],
            "GetFromNumpyDTypeDict": [
                "dtype_dict",
                "dtype"
            ],
            "GetNumpyAppendFn": [
                "dtype"
            ],
            "TensorShapeProtoToList": [
                "shape"
            ],
            "_GetDenseDimensions": [
                "list_of_lists"
            ],
            "_FlattenToStrings": [
                "nested_strings"
            ],
            "_check_failed": [
                "v"
            ],
            "_check_quantized": [
                "values"
            ],
            "_generate_isinstance_check": [
                "expected_types"
            ],
            "_check_not_tensor": [
                "values"
            ],
            "_AssertCompatible": [
                "values",
                "dtype"
            ],
            "_is_array_like": [
                "obj"
            ],
            "make_tensor_proto": [
                "values",
                "dtype",
                "shape",
                "verify_shape",
                "allow_broadcast"
            ],
            "MakeNdarray": [
                "tensor"
            ],
            "ShapeEquals": [
                "tensor_proto",
                "shape"
            ],
            "_ConstantValue": [
                "tensor",
                "partial"
            ],
            "constant_value": [
                "tensor",
                "partial"
            ],
            "constant_value_as_shape": [
                "tensor"
            ],
            "is_tensor": [
                "x"
            ],
            "shape_tensor": [
                "shape"
            ],
            "maybe_set_static_shape": [
                "tensor",
                "shape"
            ]
        },
        "tensorflow_core.python.framework.traceable_stack": {
            "TraceableObject": {
                "__init__": [
                    "self",
                    "obj",
                    "filename",
                    "lineno"
                ],
                "set_filename_and_line_from_caller": [
                    "self",
                    "offset"
                ],
                "copy_metadata": [
                    "self"
                ]
            },
            "TraceableStack": {
                "__init__": [
                    "self",
                    "existing_stack"
                ],
                "push_obj": [
                    "self",
                    "obj",
                    "offset"
                ],
                "pop_obj": [
                    "self"
                ],
                "peek_top_obj": [
                    "self"
                ],
                "peek_objs": [
                    "self"
                ],
                "peek_traceable_objs": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "copy": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.load_library": {
            "load_op_library": [
                "library_filename"
            ],
            "load_file_system_library": [
                "library_filename"
            ],
            "_is_shared_object": [
                "filename"
            ],
            "load_library": [
                "library_location"
            ]
        },
        "tensorflow_core.python.framework.function_def_to_graph": {
            "function_def_to_graph": [
                "fdef",
                "input_shapes",
                "copy_functions"
            ],
            "is_function": [
                "fname"
            ],
            "function_def_to_graph_def": [
                "fdef",
                "input_shapes",
                "copy_functions"
            ],
            "_get_num_args": [
                "arg_def",
                "node_def"
            ]
        },
        "tensorflow_core.python.framework.tensor_conversion_registry": {
            "_default_conversion_function": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "register_tensor_conversion_function": [
                "base_type",
                "conversion_func",
                "priority"
            ],
            "get": [
                "query"
            ]
        },
        "tensorflow_core.python.framework.graph_util_impl": {
            "_is_variable_op": [
                "op"
            ],
            "must_run_on_cpu": [
                "node",
                "pin_variables_on_cpu"
            ],
            "_node_name": [
                "n"
            ],
            "_extract_graph_summary": [
                "graph_def"
            ],
            "_assert_nodes_are_present": [
                "name_to_node",
                "nodes"
            ],
            "_bfs_for_reachable_nodes": [
                "target_nodes",
                "name_to_input_name"
            ],
            "extract_sub_graph": [
                "graph_def",
                "dest_nodes"
            ],
            "tensor_shape_from_node_def_name": [
                "graph",
                "input_name"
            ],
            "convert_variables_to_constants": [
                "sess",
                "input_graph_def",
                "output_node_names",
                "variable_names_whitelist",
                "variable_names_blacklist"
            ],
            "remove_training_nodes": [
                "input_graph",
                "protected_nodes"
            ]
        },
        "tensorflow_core.python.framework.importer": {
            "_IsControlInput": [
                "input_name"
            ],
            "_ParseTensorName": [
                "tensor_name"
            ],
            "_MaybeDevice": [
                "device"
            ],
            "_ProcessGraphDefParam": [
                "graph_def",
                "op_dict"
            ],
            "_ProcessInputMapParam": [
                "input_map"
            ],
            "_ProcessReturnElementsParam": [
                "return_elements"
            ],
            "_FindAttrInOpDef": [
                "attr_name",
                "op_def"
            ],
            "_RemoveDefaultAttrs": [
                "op_dict",
                "producer_op_list",
                "graph_def"
            ],
            "_ConvertInputMapValues": [
                "name",
                "input_map"
            ],
            "_PopulateTFImportGraphDefOptions": [
                "options",
                "prefix",
                "input_map",
                "return_elements",
                "validate_colocation_constraints"
            ],
            "_ProcessNewOps": [
                "graph"
            ],
            "_GetColocationNames": [
                "op"
            ],
            "_GatherReturnElements": [
                "requested_return_elements",
                "graph",
                "results"
            ],
            "_SetDefaultAttrValues": [
                "node_def",
                "op_def"
            ],
            "import_graph_def": [
                "graph_def",
                "input_map",
                "return_elements",
                "name",
                "op_dict",
                "producer_op_list"
            ],
            "import_graph_def_for_function": [
                "graph_def",
                "name"
            ],
            "_import_graph_def_internal": [
                "graph_def",
                "input_map",
                "return_elements",
                "validate_colocation_constraints",
                "name",
                "op_dict",
                "producer_op_list"
            ]
        },
        "tensorflow_core.python.framework.tensor_spec": {
            "TensorSpec": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype",
                    "name"
                ],
                "from_spec": [
                    "cls",
                    "spec",
                    "name"
                ],
                "from_tensor": [
                    "cls",
                    "tensor",
                    "name"
                ],
                "shape": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "is_compatible_with": [
                    "self",
                    "spec_or_tensor"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "most_specific_compatible_type": [
                    "self",
                    "other"
                ],
                "_serialize": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "components"
                ],
                "_from_compatible_tensor_list": [
                    "self",
                    "tensor_list"
                ],
                "_to_batchable_tensor_list": [
                    "self",
                    "value",
                    "batched"
                ],
                "_batch": [
                    "self",
                    "batch_size"
                ],
                "_unbatch": [
                    "self"
                ],
                "_to_legacy_output_types": [
                    "self"
                ],
                "_to_legacy_output_shapes": [
                    "self"
                ],
                "_to_legacy_output_classes": [
                    "self"
                ]
            },
            "BoundedTensorSpec": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype",
                    "minimum",
                    "maximum",
                    "name"
                ],
                "from_spec": [
                    "cls",
                    "spec"
                ],
                "minimum": [
                    "self"
                ],
                "maximum": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__reduce__": [
                    "self"
                ],
                "_serialize": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.cpp_shape_inference_pb2": {},
        "tensorflow_core.python.framework.config": {
            "get_intra_op_parallelism_threads": [],
            "set_intra_op_parallelism_threads": [
                "num_threads"
            ],
            "get_inter_op_parallelism_threads": [],
            "set_inter_op_parallelism_threads": [
                "num_threads"
            ],
            "get_optimizer_jit": [],
            "set_optimizer_jit": [
                "enabled"
            ],
            "get_optimizer_experimental_options": [],
            "set_optimizer_experimental_options": [
                "options"
            ],
            "get_soft_device_placement": [],
            "set_soft_device_placement": [
                "enabled"
            ],
            "get_device_policy": [],
            "set_device_policy": [
                "device_policy"
            ],
            "get_synchronous_execution": [],
            "set_synchronous_execution": [
                "enable"
            ],
            "list_physical_devices": [
                "device_type"
            ],
            "list_logical_devices": [
                "device_type"
            ],
            "get_visible_devices": [
                "device_type"
            ],
            "set_visible_devices": [
                "devices",
                "device_type"
            ],
            "get_memory_growth": [
                "device"
            ],
            "set_memory_growth": [
                "device",
                "enable"
            ],
            "get_virtual_device_configuration": [
                "device"
            ],
            "set_virtual_device_configuration": [
                "device",
                "virtual_devices"
            ]
        },
        "tensorflow_core.python.framework.errors_impl": {
            "_compact_stack_trace": [
                "op"
            ],
            "exception_type_from_error_code": [
                "error_code"
            ],
            "error_code_from_exception_type": [
                "cls"
            ],
            "_make_specific_exception": [
                "node_def",
                "op",
                "message",
                "error_code"
            ],
            "InaccessibleTensorError": {},
            "OperatorNotAllowedInGraphError": {},
            "OpError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message",
                    "error_code"
                ],
                "__reduce__": [
                    "self"
                ],
                "message": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "error_code": [
                    "self"
                ],
                "node_def": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "CancelledError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnknownError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message",
                    "error_code"
                ]
            },
            "InvalidArgumentError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "DeadlineExceededError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "NotFoundError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "AlreadyExistsError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "PermissionDeniedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnauthenticatedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "ResourceExhaustedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "FailedPreconditionError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "AbortedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "OutOfRangeError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnimplementedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "InternalError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnavailableError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "DataLossError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "raise_exception_on_not_ok_status": {
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type_arg",
                    "value_arg",
                    "traceback_arg"
                ]
            }
        },
        "tensorflow_core.python.framework.device": {
            "check_valid": [
                "spec"
            ],
            "is_device_spec": [
                "obj"
            ],
            "canonical_name": [
                "device"
            ],
            "merge_device": [
                "spec"
            ],
            "MergeDevice": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "__call__": [
                    "self",
                    "node_def"
                ],
                "shortcut_string_merge": [
                    "self",
                    "node_def"
                ],
                "__repr__": [
                    "self"
                ],
                "is_null_merge": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.func_graph": {
            "convert_structure_to_signature": [
                "structure",
                "arg_names"
            ],
            "func_graph_from_py_func": [
                "name",
                "python_func",
                "args",
                "kwargs",
                "signature",
                "func_graph",
                "autograph",
                "autograph_options",
                "add_control_dependencies",
                "arg_names",
                "op_return_value",
                "collections",
                "capture_by_value",
                "override_flat_arg_shapes"
            ],
            "maybe_captured": [
                "tensor"
            ],
            "device_stack_has_callable": [
                "device_stack"
            ],
            "check_mutation": [
                "n1",
                "n2"
            ],
            "flatten": [
                "sequence"
            ],
            "pack_sequence_as": [
                "structure",
                "flat_sequence"
            ],
            "_create_substitute_placeholder": [
                "value",
                "name",
                "dtype"
            ],
            "_get_defun_inputs_from_args": [
                "args",
                "names",
                "flat_shapes"
            ],
            "_get_defun_inputs": [
                "args",
                "names",
                "structure",
                "flat_shapes"
            ],
            "_get_defun_inputs_from_kwargs": [
                "kwargs",
                "flat_shapes"
            ],
            "dismantle_func_graph": [
                "func_graph"
            ],
            "UnknownArgument": {},
            "FuncGraph": {
                "__init__": [
                    "self",
                    "name",
                    "collections",
                    "capture_by_value"
                ],
                "__str__": [
                    "self"
                ],
                "watch_variable": [
                    "self",
                    "v"
                ],
                "capture_call_time_value": [
                    "self",
                    "closure",
                    "spec",
                    "key"
                ],
                "control_dependencies": [
                    "self",
                    "control_inputs"
                ],
                "as_default": [
                    "self"
                ],
                "output_types": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "variables": [
                    "self",
                    "var_list"
                ],
                "_capture_by_value": [
                    "self",
                    "op_type",
                    "inputs",
                    "dtypes",
                    "input_types",
                    "name",
                    "attrs",
                    "op_def",
                    "compute_device"
                ],
                "create_op": [
                    "self",
                    "op_type",
                    "inputs",
                    "dtypes",
                    "input_types",
                    "name",
                    "attrs",
                    "op_def",
                    "compute_shapes",
                    "compute_device"
                ],
                "capture": [
                    "self",
                    "tensor",
                    "name"
                ],
                "_capture_helper": [
                    "self",
                    "tensor",
                    "name"
                ],
                "captures": [
                    "self"
                ],
                "add_capture": [
                    "self",
                    "tensor",
                    "placeholder"
                ],
                "reset_captures": [
                    "self",
                    "capture_list"
                ],
                "pop_capture": [
                    "self",
                    "tensor"
                ],
                "clear_captures": [
                    "self"
                ],
                "capture_distributed_variable": [
                    "self",
                    "variable",
                    "placeholder"
                ],
                "capture_eager_tensor": [
                    "self",
                    "tensor",
                    "name"
                ],
                "external_captures": [
                    "self"
                ],
                "internal_captures": [
                    "self"
                ],
                "deferred_external_captures": [
                    "self"
                ],
                "deferred_internal_captures": [
                    "self"
                ],
                "variable_captures": [
                    "self"
                ],
                "mark_as_unsaveable": [
                    "self",
                    "error_message"
                ],
                "saveable": [
                    "self"
                ],
                "saving_errors": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.op_callbacks": {
            "op_callback": [
                "callback_fn"
            ],
            "should_invoke_op_callbacks": [],
            "invoke_op_callbacks": [
                "op_type",
                "inputs",
                "attrs",
                "outputs",
                "op_name",
                "graph"
            ],
            "_OpCallbackContextManager": {
                "__init__": [
                    "self",
                    "callback_fn"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exec_type",
                    "exec_value",
                    "exec_traceback"
                ]
            }
        },
        "tensorflow_core.python.framework.combinations": {
            "EagerGraphCombination": {
                "context_managers": [
                    "self",
                    "kwargs"
                ],
                "parameter_modifiers": [
                    "self"
                ]
            },
            "TFVersionCombination": {
                "should_execute_combination": [
                    "self",
                    "kwargs"
                ],
                "parameter_modifiers": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.graph_util": {},
        "tensorflow_core.python.framework.function": {
            "func_graph_from_py_func": [
                "func",
                "arg_names",
                "arg_types",
                "name",
                "capture_by_value",
                "device",
                "colocation_stack",
                "container",
                "collections_ref",
                "arg_shapes",
                "whitelisted_stateful_ops",
                "capture_resource_var_by_value"
            ],
            "_is_guaranteed_const": [
                "tensor"
            ],
            "_call": [
                "sig"
            ],
            "_from_definition": [
                "fdef",
                "grad_func"
            ],
            "from_library": [
                "lib"
            ],
            "_get_experimental_kwarg_as_attr": [
                "attr_name",
                "value"
            ],
            "_get_kwarg_as_str_attr": [
                "attr_name",
                "value"
            ],
            "_parse_kwargs_as_attrs": [
                "func_name"
            ],
            "get_extra_vars": [],
            "get_extra_inputs": [],
            "get_extra_args": [],
            "_type_list_to_str": [
                "types"
            ],
            "function_def_from_tf_function": [
                "c_func"
            ],
            "Defun": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            },
            "_DefinedFunctionDeleter": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__del__": [
                    "self"
                ]
            },
            "_DefinedFunction": {
                "__init__": [
                    "self",
                    "func",
                    "argnames",
                    "input_types",
                    "func_name",
                    "grad_func",
                    "python_grad_func",
                    "out_names",
                    "shape_func",
                    "capture_by_value",
                    "whitelisted_stateful_ops",
                    "capture_resource_var_by_value"
                ],
                "name": [
                    "self"
                ],
                "definition": [
                    "self"
                ],
                "_signature": [
                    "self"
                ],
                "set_grad_func": [
                    "self",
                    "grad_func"
                ],
                "grad_func_name": [
                    "self"
                ],
                "python_grad_func": [
                    "self"
                ],
                "declared_input_types": [
                    "self"
                ],
                "captured_inputs": [
                    "self"
                ],
                "stateful_ops": [
                    "self"
                ],
                "_create_definition_if_needed": [
                    "self"
                ],
                "_create_definition_if_needed_impl": [
                    "self"
                ],
                "_set_c_attrs": [
                    "self",
                    "attrs"
                ],
                "_create_hash_str": [
                    "self",
                    "input_arg",
                    "output_arg",
                    "node_def"
                ],
                "add_to_graph": [
                    "self",
                    "g"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_OverloadedFunction": {
                "__init__": [
                    "self",
                    "func",
                    "argnames",
                    "func_name",
                    "grad_func",
                    "python_grad_func",
                    "out_names"
                ],
                "instantiate": [
                    "self",
                    "input_types"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_FuncGraph": {
                "__init__": [
                    "self",
                    "name",
                    "capture_by_value",
                    "whitelisted_stateful_ops",
                    "capture_resource_var_by_value"
                ],
                "container": [
                    "self",
                    "container_name"
                ],
                "getvar": [
                    "self",
                    "getter",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "reuse",
                    "trainable",
                    "collections",
                    "use_resource"
                ],
                "create_op": [
                    "self",
                    "op_type",
                    "inputs",
                    "dtypes"
                ],
                "capture": [
                    "self",
                    "tensor",
                    "name"
                ],
                "_capture_tensor_as_extra_input": [
                    "self",
                    "tensor",
                    "name"
                ],
                "_add_tensor_and_parents": [
                    "self",
                    "tensor"
                ],
                "_add_op_and_parents": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow_core.python.framework.dtypes": {
            "as_dtype": [
                "type_value"
            ],
            "DType": {
                "__init__": [
                    "self",
                    "type_enum"
                ],
                "_is_ref_dtype": [
                    "self"
                ],
                "_as_ref": [
                    "self"
                ],
                "base_dtype": [
                    "self"
                ],
                "real_dtype": [
                    "self"
                ],
                "is_numpy_compatible": [
                    "self"
                ],
                "as_numpy_dtype": [
                    "self"
                ],
                "as_datatype_enum": [
                    "self"
                ],
                "is_bool": [
                    "self"
                ],
                "is_integer": [
                    "self"
                ],
                "is_floating": [
                    "self"
                ],
                "is_complex": [
                    "self"
                ],
                "is_quantized": [
                    "self"
                ],
                "is_unsigned": [
                    "self"
                ],
                "min": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "limits": [
                    "self",
                    "clip_negative"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "name": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ],
                "size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.indexed_slices": {
            "convert_to_tensor_or_indexed_slices": [
                "value",
                "dtype",
                "name"
            ],
            "internal_convert_to_tensor_or_indexed_slices": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "internal_convert_n_to_tensor_or_indexed_slices": [
                "values",
                "dtype",
                "name",
                "as_ref"
            ],
            "convert_n_to_tensor_or_indexed_slices": [
                "values",
                "dtype",
                "name"
            ],
            "_indexed_slices_to_tensor": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "IndexedSlices": {
                "__init__": [
                    "self",
                    "values",
                    "indices",
                    "dense_shape"
                ],
                "values": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "dense_shape": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "_type_spec": [
                    "self"
                ],
                "_shape_invariant_to_type_spec": [
                    "self",
                    "shape"
                ],
                "consumers": [
                    "self"
                ]
            },
            "IndexedSlicesSpec": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype",
                    "indices_dtype",
                    "dense_shape_dtype",
                    "indices_shape"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "tensor_list"
                ]
            }
        },
        "tensorflow_core.python.framework.constant_op": {
            "_eager_reshape": [
                "tensor",
                "shape",
                "ctx"
            ],
            "_eager_fill": [
                "dims",
                "value",
                "ctx"
            ],
            "_eager_identity": [
                "tensor",
                "ctx"
            ],
            "convert_to_eager_tensor": [
                "value",
                "ctx",
                "dtype"
            ],
            "constant_v1": [
                "value",
                "dtype",
                "shape",
                "name",
                "verify_shape"
            ],
            "constant": [
                "value",
                "dtype",
                "shape",
                "name"
            ],
            "_constant_impl": [
                "value",
                "dtype",
                "shape",
                "name",
                "verify_shape",
                "allow_broadcast"
            ],
            "is_constant": [
                "tensor_or_op"
            ],
            "_constant_tensor_conversion_function": [
                "v",
                "dtype",
                "name",
                "as_ref"
            ],
            "_tensor_shape_tensor_conversion_function": [
                "s",
                "dtype",
                "name",
                "as_ref"
            ],
            "_dimension_tensor_conversion_function": [
                "d",
                "dtype",
                "name",
                "as_ref"
            ]
        },
        "tensorflow_core.python.framework.graph_to_function_def": {
            "_make_argname_from_tensor_name": [
                "name"
            ],
            "_tensor_to_argdef": [
                "t",
                "name",
                "used_names"
            ],
            "_is_in_placeholders": [
                "op",
                "func_arg_placeholders"
            ],
            "_get_node_def": [
                "op"
            ],
            "_get_op_def": [
                "op"
            ],
            "_create_input_dict": [
                "function_graph",
                "func_arg_placeholders",
                "initial_value"
            ],
            "_add_op_node": [
                "op",
                "func",
                "input_dict"
            ],
            "graph_to_function_def": [
                "graph",
                "operations",
                "inputs",
                "outputs",
                "out_names"
            ]
        },
        "tensorflow_core.python.framework.c_api_util": {
            "tf_buffer": [
                "data"
            ],
            "tf_output": [
                "c_op",
                "index"
            ],
            "tf_operations": [
                "graph"
            ],
            "new_tf_operations": [
                "graph"
            ],
            "ScopedTFStatus": {
                "__init__": [
                    "self"
                ],
                "__del__": [
                    "self"
                ]
            },
            "ScopedTFGraph": {
                "__init__": [
                    "self"
                ],
                "__del__": [
                    "self"
                ]
            },
            "ScopedTFImportGraphDefOptions": {
                "__init__": [
                    "self"
                ],
                "__del__": [
                    "self"
                ]
            },
            "ScopedTFImportGraphDefResults": {
                "__init__": [
                    "self",
                    "results"
                ],
                "__del__": [
                    "self"
                ]
            },
            "ScopedTFFunction": {
                "__init__": [
                    "self",
                    "func"
                ],
                "__del__": [
                    "self"
                ]
            },
            "ApiDefMap": {
                "__init__": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "put_api_def": [
                    "self",
                    "text"
                ],
                "get_api_def": [
                    "self",
                    "op_name"
                ],
                "get_op_def": [
                    "self",
                    "op_name"
                ],
                "op_names": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.framework.subscribe": {
            "_recursive_apply": [
                "tensors",
                "apply_fn"
            ],
            "_subscribe_new": [
                "tensor",
                "side_effects",
                "control_cache"
            ],
            "_subscribe_extend": [
                "tensor",
                "side_effects"
            ],
            "_is_subscribed_identity": [
                "tensor"
            ],
            "_subscribe": [
                "tensor",
                "side_effects",
                "control_cache"
            ],
            "_preserve_control_flow_context": [
                "tensor"
            ],
            "_scoped_subscribe": [
                "tensor",
                "side_effects",
                "control_cache"
            ],
            "subscribe": [
                "tensors",
                "side_effects"
            ],
            "_ControlOutputCache": {
                "__init__": [
                    "self"
                ],
                "calc_control_outputs": [
                    "self",
                    "graph"
                ],
                "get_control_outputs": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow_core.python.framework.tensor_like": {
            "_TensorLike": {}
        },
        "tensorflow_core.python.framework.registry": {
            "Registry": {
                "__init__": [
                    "self",
                    "name"
                ],
                "register": [
                    "self",
                    "candidate",
                    "name"
                ],
                "list": [
                    "self"
                ],
                "lookup": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.framework": {},
        "tensorflow_core.python.framework.errors": {},
        "tensorflow_core.python.framework.versions": {},
        "tensorflow_core.python.client.device_lib": {
            "list_local_devices": [
                "session_config"
            ]
        },
        "tensorflow_core.python.client.client_lib": {},
        "tensorflow_core.python.client.timeline": {
            "AllocationMaximum": {},
            "StepStatsAnalysis": {},
            "_ChromeTraceFormatter": {
                "__init__": [
                    "self",
                    "show_memory"
                ],
                "_create_event": [
                    "self",
                    "ph",
                    "category",
                    "name",
                    "pid",
                    "tid",
                    "timestamp"
                ],
                "emit_pid": [
                    "self",
                    "name",
                    "pid"
                ],
                "emit_tid": [
                    "self",
                    "name",
                    "pid",
                    "tid"
                ],
                "emit_region": [
                    "self",
                    "timestamp",
                    "duration",
                    "pid",
                    "tid",
                    "category",
                    "name",
                    "args"
                ],
                "emit_obj_create": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id"
                ],
                "emit_obj_delete": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id"
                ],
                "emit_obj_snapshot": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id",
                    "snapshot"
                ],
                "emit_flow_start": [
                    "self",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "flow_id"
                ],
                "emit_flow_end": [
                    "self",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "flow_id"
                ],
                "emit_counter": [
                    "self",
                    "category",
                    "name",
                    "pid",
                    "timestamp",
                    "counter",
                    "value"
                ],
                "emit_counters": [
                    "self",
                    "category",
                    "name",
                    "pid",
                    "timestamp",
                    "counters"
                ],
                "format_to_string": [
                    "self",
                    "pretty"
                ]
            },
            "_TensorTracker": {
                "__init__": [
                    "self",
                    "name",
                    "object_id",
                    "timestamp",
                    "pid",
                    "allocator",
                    "num_bytes"
                ],
                "name": [
                    "self"
                ],
                "pid": [
                    "self"
                ],
                "create_time": [
                    "self"
                ],
                "object_id": [
                    "self"
                ],
                "num_bytes": [
                    "self"
                ],
                "allocator": [
                    "self"
                ],
                "last_unref": [
                    "self"
                ],
                "add_ref": [
                    "self",
                    "timestamp"
                ],
                "add_unref": [
                    "self",
                    "timestamp"
                ]
            },
            "Timeline": {
                "__init__": [
                    "self",
                    "step_stats",
                    "graph"
                ],
                "_alloc_pid": [
                    "self"
                ],
                "_alloc_flow_id": [
                    "self"
                ],
                "_parse_op_label": [
                    "self",
                    "label"
                ],
                "_assign_lanes": [
                    "self"
                ],
                "_emit_op": [
                    "self",
                    "nodestats",
                    "pid",
                    "is_gputrace"
                ],
                "_emit_tensor_snapshot": [
                    "self",
                    "tensor",
                    "timestamp",
                    "pid",
                    "tid",
                    "value"
                ],
                "_produce_tensor": [
                    "self",
                    "name",
                    "timestamp",
                    "tensors_pid",
                    "allocator",
                    "num_bytes"
                ],
                "_is_gputrace_device": [
                    "self",
                    "device_name"
                ],
                "_allocate_pids": [
                    "self"
                ],
                "_analyze_tensors": [
                    "self",
                    "show_memory"
                ],
                "_show_compute": [
                    "self",
                    "show_dataflow"
                ],
                "_show_memory_counters": [
                    "self"
                ],
                "analyze_step_stats": [
                    "self",
                    "show_dataflow",
                    "show_memory"
                ],
                "generate_chrome_trace_format": [
                    "self",
                    "show_dataflow",
                    "show_memory"
                ]
            }
        },
        "tensorflow_core.python.client.session": {
            "_get_indexed_slices_value_from_fetches": [
                "fetched_vals"
            ],
            "_get_feeds_for_indexed_slices": [
                "feed",
                "feed_val"
            ],
            "_convert_to_numpy_obj": [
                "numpy_dtype",
                "obj"
            ],
            "register_session_run_conversion_functions": [
                "tensor_type",
                "fetch_function",
                "feed_function",
                "feed_function_for_partial_run"
            ],
            "_is_attrs_instance": [
                "obj"
            ],
            "_get_attrs_values": [
                "obj"
            ],
            "_uniquify_fetches": [
                "fetch_mappers"
            ],
            "_name_list": [
                "tensor_list"
            ],
            "SessionInterface": {
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ]
            },
            "_FetchMapper": {
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ],
                "for_fetch": [
                    "fetch"
                ]
            },
            "_ElementFetchMapper": {
                "__init__": [
                    "self",
                    "fetches",
                    "contraction_fn"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_ListFetchMapper": {
                "__init__": [
                    "self",
                    "fetches"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_DictFetchMapper": {
                "__init__": [
                    "self",
                    "fetches"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_AttrsFetchMapper": {
                "__init__": [
                    "self",
                    "fetches"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_FetchHandler": {
                "__init__": [
                    "self",
                    "graph",
                    "fetches",
                    "feeds",
                    "feed_handles"
                ],
                "_assert_fetchable": [
                    "self",
                    "graph",
                    "op"
                ],
                "fetches": [
                    "self"
                ],
                "targets": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "session",
                    "tensor_values"
                ]
            },
            "_DeviceAttributes": {
                "__init__": [
                    "self",
                    "name",
                    "device_type",
                    "memory_limit_bytes",
                    "incarnation"
                ],
                "name": [
                    "self"
                ],
                "device_type": [
                    "self"
                ],
                "memory_limit_bytes": [
                    "self"
                ],
                "incarnation": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "BaseSession": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "list_devices": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "graph_def": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "make_callable": [
                    "self",
                    "fetches",
                    "feed_list",
                    "accept_options"
                ],
                "_do_run": [
                    "self",
                    "handle",
                    "target_list",
                    "fetch_list",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_do_call": [
                    "self",
                    "fn"
                ],
                "_extend_graph": [
                    "self"
                ],
                "_register_dead_handle": [
                    "self",
                    "handle"
                ],
                "_update_with_movers": [
                    "self",
                    "feed_dict",
                    "feed_map"
                ],
                "_call_tf_sessionrun": [
                    "self",
                    "options",
                    "feed_dict",
                    "fetch_list",
                    "target_list",
                    "run_metadata"
                ],
                "_call_tf_sessionprun": [
                    "self",
                    "handle",
                    "feed_dict",
                    "fetch_list"
                ],
                "_make_callable_from_options": [
                    "self",
                    "callable_options"
                ]
            },
            "Session": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exec_type",
                    "exec_value",
                    "exec_tb"
                ],
                "reset": [
                    "target",
                    "containers",
                    "config"
                ]
            },
            "InteractiveSession": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.client": {},
        "tensorflow_core.python.util.lock_util": {
            "GroupLock": {
                "__init__": [
                    "self",
                    "num_groups"
                ],
                "group": [
                    "self",
                    "group_id"
                ],
                "acquire": [
                    "self",
                    "group_id"
                ],
                "release": [
                    "self",
                    "group_id"
                ],
                "_another_group_active": [
                    "self",
                    "group_id"
                ],
                "_validate_group_id": [
                    "self",
                    "group_id"
                ]
            }
        },
        "tensorflow_core.python.util.future_api": {},
        "tensorflow_core.python.util.tf_stack": {
            "extract_stack": [
                "limit"
            ],
            "convert_stack": [
                "stack",
                "include_func_start_lineno"
            ],
            "StackTraceTransform": {
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "reset": [
                    "self"
                ]
            },
            "StackTraceMapper": {
                "reset": [
                    "self"
                ],
                "get_effective_source_map": [
                    "self"
                ]
            },
            "StackTraceFilter": {
                "reset": [
                    "self"
                ],
                "get_filtered_filenames": [
                    "self"
                ]
            },
            "CurrentModuleFilter": {
                "__init__": [
                    "self"
                ],
                "get_filtered_filenames": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.util.lazy_loader": {
            "LazyLoader": {
                "__init__": [
                    "self",
                    "local_name",
                    "parent_module_globals",
                    "name",
                    "warning"
                ],
                "_load": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "item"
                ],
                "__dir__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.util.is_in_graph_mode": {},
        "tensorflow_core.python.util.deprecation_wrapper": {},
        "tensorflow_core.python.util.keyword_args": {
            "keyword_args_only": [
                "func"
            ]
        },
        "tensorflow_core.python.util.serialization": {
            "get_json_type": [
                "obj"
            ]
        },
        "tensorflow_core.python.util.decorator_utils": {
            "get_qualified_name": [
                "function"
            ],
            "_normalize_docstring": [
                "docstring"
            ],
            "add_notice_to_docstring": [
                "doc",
                "instructions",
                "no_doc_str",
                "suffix_str",
                "notice"
            ],
            "validate_callable": [
                "func",
                "decorator_name"
            ],
            "classproperty": {
                "__init__": [
                    "self",
                    "func"
                ],
                "__get__": [
                    "self",
                    "owner_self",
                    "owner_cls"
                ]
            }
        },
        "tensorflow_core.python.util.function_utils": {
            "_is_bound_method": [
                "fn"
            ],
            "_is_callable_object": [
                "obj"
            ],
            "fn_args": [
                "fn"
            ],
            "has_kwargs": [
                "fn"
            ],
            "get_func_name": [
                "func"
            ],
            "get_func_code": [
                "func"
            ],
            "get_disabled_rewriter_config": []
        },
        "tensorflow_core.python.util.example_parser_configuration": {
            "extract_example_parser_configuration": [
                "parse_example_op",
                "sess"
            ]
        },
        "tensorflow_core.python.util.tf_inspect": {
            "_convert_maybe_argspec_to_fullargspec": [
                "argspec"
            ],
            "currentframe": [],
            "getargspec": [
                "obj"
            ],
            "_get_argspec_for_partial": [
                "obj"
            ],
            "getfullargspec": [
                "obj"
            ],
            "getcallargs": [],
            "getframeinfo": [],
            "getdoc": [
                "object"
            ],
            "getfile": [
                "object"
            ],
            "getmembers": [
                "object",
                "predicate"
            ],
            "getmodule": [
                "object"
            ],
            "getmro": [
                "cls"
            ],
            "getsource": [
                "object"
            ],
            "getsourcefile": [
                "object"
            ],
            "getsourcelines": [
                "object"
            ],
            "isbuiltin": [
                "object"
            ],
            "isclass": [
                "object"
            ],
            "isfunction": [
                "object"
            ],
            "isframe": [
                "object"
            ],
            "isgenerator": [
                "object"
            ],
            "isgeneratorfunction": [
                "object"
            ],
            "ismethod": [
                "object"
            ],
            "ismodule": [
                "object"
            ],
            "isroutine": [
                "object"
            ],
            "stack": [
                "context"
            ]
        },
        "tensorflow_core.python.util.tf_should_use": {
            "_new__init__": [
                "self",
                "true_value",
                "tf_should_use_helper"
            ],
            "_new__setattr__": [
                "self",
                "key",
                "value"
            ],
            "_new__getattribute__": [
                "self",
                "key"
            ],
            "_new_mark_used": [
                "self"
            ],
            "_get_wrapper": [
                "x",
                "tf_should_use_helper"
            ],
            "_add_should_use_warning": [
                "x",
                "fatal_error"
            ],
            "should_use_result": [
                "fn"
            ],
            "must_use_result_or_fatal": [
                "fn"
            ],
            "_TFShouldUseHelper": {
                "__init__": [
                    "self",
                    "type_",
                    "repr_",
                    "stack_frame",
                    "fatal_error_if_unsated"
                ],
                "sate": [
                    "self"
                ],
                "__del__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.util.compat": {
            "as_bytes": [
                "bytes_or_text",
                "encoding"
            ],
            "as_text": [
                "bytes_or_text",
                "encoding"
            ],
            "as_str_any": [
                "value"
            ],
            "path_to_str": [
                "path"
            ]
        },
        "tensorflow_core.python.util.deprecation": {
            "_add_deprecated_function_notice_to_docstring": [
                "doc",
                "date",
                "instructions"
            ],
            "_add_deprecated_arg_notice_to_docstring": [
                "doc",
                "date",
                "instructions",
                "deprecated_names"
            ],
            "_add_deprecated_arg_value_notice_to_docstring": [
                "doc",
                "date",
                "instructions",
                "deprecated_name_value_dict"
            ],
            "_validate_deprecation_args": [
                "date",
                "instructions"
            ],
            "_call_location": [
                "outer"
            ],
            "_wrap_decorator": [
                "wrapped_function"
            ],
            "deprecated_alias": [
                "deprecated_name",
                "name",
                "func_or_class",
                "warn_once"
            ],
            "deprecated_endpoints": [],
            "deprecated": [
                "date",
                "instructions",
                "warn_once"
            ],
            "deprecated_args": [
                "date",
                "instructions"
            ],
            "deprecated_arg_values": [
                "date",
                "instructions",
                "warn_once"
            ],
            "deprecated_argument_lookup": [
                "new_name",
                "new_value",
                "old_name",
                "old_value"
            ],
            "rewrite_argument_docstring": [
                "old_doc",
                "old_argument",
                "new_argument"
            ],
            "silence": [],
            "DeprecatedNamesAlreadySet": {},
            "HiddenTfApiAttribute": {
                "__init__": [
                    "self",
                    "deprecation_message"
                ]
            }
        },
        "tensorflow_core.python.util.object_identity": {
            "_ObjectIdentityWrapper": {
                "__init__": [
                    "self",
                    "wrapped"
                ],
                "unwrapped": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_WeakObjectIdentityWrapper": {
                "__init__": [
                    "self",
                    "wrapped"
                ],
                "unwrapped": [
                    "self"
                ]
            },
            "Reference": {
                "deref": [
                    "self"
                ]
            },
            "ObjectIdentityDictionary": {
                "__init__": [
                    "self"
                ],
                "_wrap_key": [
                    "self",
                    "key"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ObjectIdentityWeakKeyDictionary": {
                "_wrap_key": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "ObjectIdentitySet": {
                "__init__": [
                    "self"
                ],
                "_from_storage": [
                    "storage"
                ],
                "_wrap_key": [
                    "self",
                    "key"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "discard": [
                    "self",
                    "key"
                ],
                "add": [
                    "self",
                    "key"
                ],
                "update": [
                    "self",
                    "items"
                ],
                "intersection": [
                    "self",
                    "items"
                ],
                "difference": [
                    "self",
                    "items"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "ObjectIdentityWeakSet": {
                "_wrap_key": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.util.tf_contextlib": {
            "contextmanager": [
                "target"
            ]
        },
        "tensorflow_core.python.util.compat_internal": {
            "path_to_str": [
                "path"
            ]
        },
        "tensorflow_core.python.util.tf_export": {
            "get_canonical_name_for_symbol": [
                "symbol",
                "api_name",
                "add_prefix_to_v1_names"
            ],
            "get_canonical_name": [
                "api_names",
                "deprecated_api_names"
            ],
            "get_v1_names": [
                "symbol"
            ],
            "get_v2_names": [
                "symbol"
            ],
            "get_v1_constants": [
                "module"
            ],
            "get_v2_constants": [
                "module"
            ],
            "kwarg_only": [
                "f"
            ],
            "SymbolAlreadyExposedError": {},
            "InvalidSymbolNameError": {},
            "api_export": {
                "__init__": [
                    "self"
                ],
                "_validate_symbol_names": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "func"
                ],
                "set_attr": [
                    "self",
                    "func",
                    "api_names_attr",
                    "names"
                ],
                "export_constant": [
                    "self",
                    "module_name",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.util.all_util": {
            "make_all": [
                "module_name",
                "doc_string_modules"
            ],
            "reveal_undocumented": [
                "symbol_name",
                "target_module"
            ],
            "remove_undocumented": [
                "module_name",
                "allowed_exception_list",
                "doc_string_modules"
            ]
        },
        "tensorflow_core.python.util.module_wrapper": {
            "get_rename_v2": [
                "name"
            ],
            "_call_location": [],
            "contains_deprecation_decorator": [
                "decorators"
            ],
            "has_deprecation_decorator": [
                "symbol"
            ],
            "TFModuleWrapper": {
                "__init__": [
                    "self",
                    "wrapped",
                    "module_name",
                    "public_apis",
                    "deprecation",
                    "has_lite"
                ],
                "_tfmw_add_deprecation_warning": [
                    "self",
                    "name",
                    "attr"
                ],
                "_tfmw_import_module": [
                    "self",
                    "name"
                ],
                "__getattribute__": [
                    "self",
                    "name"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "arg",
                    "val"
                ],
                "__dir__": [
                    "self"
                ],
                "__delattr__": [
                    "self",
                    "name"
                ],
                "__repr__": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "d"
                ]
            }
        },
        "tensorflow_core.python.util.dispatch": {
            "dispatch": [
                "op"
            ],
            "dispatch_for_types": [
                "op"
            ],
            "add_dispatch_list": [
                "target"
            ],
            "add_dispatch_support": [
                "target"
            ],
            "OpDispatcher": {
                "handle": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "register": [
                    "self",
                    "op"
                ]
            },
            "_TypeBasedDispatcher": {
                "__init__": [
                    "self",
                    "override_func",
                    "types"
                ],
                "_handles": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "handle": [
                    "self",
                    "args",
                    "kwargs"
                ]
            }
        },
        "tensorflow_core.python.util.nest": {
            "_get_attrs_items": [
                "obj"
            ],
            "_sorted": [
                "dict_"
            ],
            "_is_namedtuple": [
                "instance",
                "strict"
            ],
            "_sequence_like": [
                "instance",
                "args"
            ],
            "_yield_value": [
                "iterable"
            ],
            "_yield_sorted_items": [
                "iterable"
            ],
            "is_nested": [
                "seq"
            ],
            "flatten": [
                "structure",
                "expand_composites"
            ],
            "assert_same_structure": [
                "nest1",
                "nest2",
                "check_types",
                "expand_composites"
            ],
            "flatten_dict_items": [
                "dictionary"
            ],
            "_packed_nest_with_indices": [
                "structure",
                "flat",
                "index",
                "is_seq"
            ],
            "pack_sequence_as": [
                "structure",
                "flat_sequence",
                "expand_composites"
            ],
            "map_structure": [
                "func"
            ],
            "map_structure_with_paths": [
                "func"
            ],
            "map_structure_with_tuple_paths": [
                "func"
            ],
            "_yield_flat_up_to": [
                "shallow_tree",
                "input_tree",
                "is_seq",
                "path"
            ],
            "assert_shallow_structure": [
                "shallow_tree",
                "input_tree",
                "check_types",
                "expand_composites",
                "check_subtrees_length"
            ],
            "flatten_up_to": [
                "shallow_tree",
                "input_tree",
                "check_types",
                "expand_composites",
                "check_subtrees_length"
            ],
            "flatten_with_tuple_paths_up_to": [
                "shallow_tree",
                "input_tree",
                "check_types",
                "expand_composites",
                "check_subtrees_length"
            ],
            "map_structure_up_to": [
                "shallow_tree",
                "func"
            ],
            "map_structure_with_tuple_paths_up_to": [
                "shallow_tree",
                "func"
            ],
            "get_traverse_shallow_structure": [
                "traverse_fn",
                "structure",
                "expand_composites"
            ],
            "yield_flat_paths": [
                "nest",
                "expand_composites"
            ],
            "flatten_with_joined_string_paths": [
                "structure",
                "separator",
                "expand_composites"
            ],
            "flatten_with_tuple_paths": [
                "structure",
                "expand_composites"
            ],
            "_DotString": {
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.util.memory": {
            "dismantle_ordered_dict": [
                "ordered_dict"
            ]
        },
        "tensorflow_core.python.util": {},
        "tensorflow_core.python.util.tf_decorator": {
            "make_decorator": [
                "target",
                "decorator_func",
                "decorator_name",
                "decorator_doc",
                "decorator_argspec"
            ],
            "_has_tf_decorator_attr": [
                "obj"
            ],
            "rewrap": [
                "decorator_func",
                "previous_target",
                "new_target"
            ],
            "unwrap": [
                "maybe_tf_decorator"
            ],
            "TFDecorator": {
                "__init__": [
                    "self",
                    "decorator_name",
                    "target",
                    "decorator_doc",
                    "decorator_argspec"
                ],
                "__get__": [
                    "self",
                    "instance",
                    "owner"
                ],
                "__call__": [
                    "self"
                ],
                "decorated_target": [
                    "self",
                    "decorated_target"
                ],
                "decorator_name": [
                    "self"
                ],
                "decorator_doc": [
                    "self"
                ],
                "decorator_argspec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.util.protobuf.compare": {
            "assertProtoEqual": [
                "self",
                "a",
                "b",
                "check_initialized",
                "normalize_numbers",
                "msg"
            ],
            "NormalizeNumberFields": [
                "pb"
            ],
            "_IsMap": [
                "value"
            ],
            "_IsRepeatedContainer": [
                "value"
            ],
            "ProtoEq": [
                "a",
                "b"
            ],
            "ProtoAssertions": {
                "assertProtoEqual": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.util.protobuf": {},
        "tensorflow_core.python.debug": {},
        "tensorflow_core.python.debug.lib.debug_utils": {
            "add_debug_tensor_watch": [
                "run_options",
                "node_name",
                "output_slot",
                "debug_ops",
                "debug_urls",
                "tolerate_debug_op_creation_failures",
                "global_step"
            ],
            "watch_graph": [
                "run_options",
                "graph",
                "debug_ops",
                "debug_urls",
                "node_name_regex_whitelist",
                "op_type_regex_whitelist",
                "tensor_dtype_regex_whitelist",
                "tolerate_debug_op_creation_failures",
                "global_step",
                "reset_disk_byte_usage"
            ],
            "watch_graph_with_blacklists": [
                "run_options",
                "graph",
                "debug_ops",
                "debug_urls",
                "node_name_regex_blacklist",
                "op_type_regex_blacklist",
                "tensor_dtype_regex_blacklist",
                "tolerate_debug_op_creation_failures",
                "global_step",
                "reset_disk_byte_usage"
            ]
        },
        "tensorflow_core.python.debug.lib.source_utils": {
            "_norm_abs_path": [
                "file_path"
            ],
            "is_extension_uncompiled_python_source": [
                "file_path"
            ],
            "is_extension_compiled_python_source": [
                "file_path"
            ],
            "_convert_watch_key_to_tensor_name": [
                "watch_key"
            ],
            "guess_is_tensorflow_py_library": [
                "py_file_path"
            ],
            "load_source": [
                "source_file_path"
            ],
            "annotate_source": [
                "dump",
                "source_file_path",
                "do_dumped_tensors",
                "file_stack_top",
                "min_line",
                "max_line"
            ],
            "list_source_files_against_dump": [
                "dump",
                "path_regex_whitelist",
                "node_name_regex_whitelist"
            ],
            "annotate_source_against_profile": [
                "profile_data",
                "source_file_path",
                "node_name_filter",
                "op_type_filter",
                "min_line",
                "max_line"
            ]
        },
        "tensorflow_core.python.debug.lib.debug_graphs": {
            "parse_node_or_tensor_name": [
                "name"
            ],
            "get_node_name": [
                "element_name"
            ],
            "get_output_slot": [
                "element_name"
            ],
            "is_copy_node": [
                "node_name"
            ],
            "is_debug_node": [
                "node_name"
            ],
            "parse_debug_node_name": [
                "node_name"
            ],
            "_infer_device_name": [
                "graph_def"
            ],
            "reconstruct_non_debug_graph_def": [
                "debug_graph_def"
            ],
            "GraphTracingReachedDestination": {},
            "DFSGraphTracer": {
                "__init__": [
                    "self",
                    "input_lists",
                    "skip_node_names",
                    "destination_node_name"
                ],
                "trace": [
                    "self",
                    "graph_element_name"
                ],
                "inputs": [
                    "self"
                ],
                "depth_list": [
                    "self"
                ]
            },
            "DebugGraph": {
                "__init__": [
                    "self",
                    "debug_graph_def",
                    "device_name"
                ],
                "_process_debug_graph_node": [
                    "self",
                    "node"
                ],
                "_get_ref_args": [
                    "self",
                    "node"
                ],
                "_get_copy_nodes": [
                    "self"
                ],
                "_prune_non_control_edges_of_debug_ops": [
                    "self"
                ],
                "_prune_control_edges_of_debug_ops": [
                    "self"
                ],
                "_populate_recipient_maps": [
                    "self"
                ],
                "_prune_nodes_from_input_and_recipient_maps": [
                    "self",
                    "nodes_to_prune"
                ],
                "_reconstruct_non_debug_graph_def": [
                    "self"
                ],
                "device_name": [
                    "self"
                ],
                "debug_graph_def": [
                    "self"
                ],
                "non_debug_graph_def": [
                    "self"
                ],
                "node_devices": [
                    "self"
                ],
                "node_op_types": [
                    "self"
                ],
                "node_attributes": [
                    "self"
                ],
                "node_inputs": [
                    "self"
                ],
                "node_ctrl_inputs": [
                    "self"
                ],
                "node_reversed_ref_inputs": [
                    "self"
                ],
                "node_recipients": [
                    "self"
                ],
                "node_ctrl_recipients": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.debug.lib.common": {
            "get_graph_element_name": [
                "elem"
            ],
            "get_flattened_names": [
                "feeds_or_fetches"
            ],
            "get_run_key": [
                "feed_dict",
                "fetches"
            ]
        },
        "tensorflow_core.python.debug.lib.grpc_tensorflow_server": {
            "parse_cluster_spec": [
                "cluster_spec",
                "cluster",
                "verbose"
            ],
            "main": [
                "unused_args"
            ]
        },
        "tensorflow_core.python.debug.lib.session_debug_testlib": {
            "no_rewrite_session_config": [],
            "_RNNCellForTest": {
                "__init__": [
                    "self",
                    "input_output_size",
                    "state_size"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_",
                    "state",
                    "scope"
                ]
            },
            "SessionDebugTestBase": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_debug_urls": [
                    "self",
                    "run_number"
                ],
                "_debug_dump_dir": [
                    "self",
                    "run_number"
                ],
                "_debug_run_and_get_dump": [
                    "self",
                    "sess",
                    "fetches",
                    "feed_dict",
                    "debug_ops",
                    "tolerate_debug_op_creation_failures",
                    "global_step",
                    "validate",
                    "expected_partition_graph_count"
                ],
                "_generate_dump_from_simple_addition_graph": [
                    "self"
                ],
                "testCopyNodesHaveCorrectDebugOpsAndURLsAttributeValues": [
                    "self"
                ],
                "testConcurrentDumpingToPathsWithOverlappingParentDirsWorks": [
                    "self"
                ],
                "testGetOpTypeWorks": [
                    "self"
                ],
                "testDumpStringTensorsWorks": [
                    "self"
                ],
                "testDumpUninitializedVariable": [
                    "self"
                ],
                "testDebugWhileLoopGeneratesMultipleDumps": [
                    "self"
                ],
                "testDebugWhileLoopWatchingWholeGraphWorks": [
                    "self"
                ],
                "testDebugTrainingDynamicRNNWorks": [
                    "self"
                ],
                "testDebugCondWatchingWholeGraphWorks": [
                    "self"
                ],
                "testFindNodesWithBadTensorValues": [
                    "self"
                ],
                "testFindInfOrNanWithOpNameExclusion": [
                    "self"
                ],
                "_session_run_for_graph_structure_lookup": [
                    "self"
                ],
                "testGraphStructureLookupGivesDevicesAndNodesInfo": [
                    "self"
                ],
                "testGraphStructureLookupGivesNodesAndAttributes": [
                    "self"
                ],
                "testGraphStructureLookupGivesDebugWatchKeys": [
                    "self"
                ],
                "testGraphStructureLookupGivesNodeInputsAndRecipients": [
                    "self"
                ],
                "testGraphStructureLookupWithoutPartitionGraphsDoesNotErrorOut": [
                    "self"
                ],
                "testGraphPathFindingOnControlEdgesWorks": [
                    "self"
                ],
                "testGraphPathFindingReverseRefEdgeWorks": [
                    "self"
                ],
                "testCausalityCheckOnDumpsDetectsWrongTemporalOrder": [
                    "self"
                ],
                "testWatchingOnlyOneOfTwoOutputSlotsDoesNotLeadToCausalityFailure": [
                    "self"
                ],
                "testOutputSlotWithoutOutgoingEdgeCanBeWatched": [
                    "self"
                ],
                "testWatchingVariableUpdateOpsSeesUpdatedValues": [
                    "self"
                ],
                "testAllowsWatchingUnconnectedOutputTensor": [
                    "self"
                ],
                "testSuccessiveDebuggingRunsIncreasesCounters": [
                    "self"
                ],
                "testDebuggingDuringOpError": [
                    "self"
                ],
                "testDebugNumericSummaryOnInitializedTensorGivesCorrectResult": [
                    "self"
                ],
                "testDebugNumericSummaryOnUninitializedTensorGivesCorrectResult": [
                    "self"
                ],
                "testDebugNumericSummaryFailureIsToleratedWhenOrdered": [
                    "self"
                ],
                "testDebugNumericSummaryInvalidAttributesStringAreCaught": [
                    "self"
                ],
                "testDebugNumericSummaryMuteOnHealthyMutesOnlyHealthyTensorDumps": [
                    "self"
                ],
                "testDebugNumericSummaryMuteOnHealthyAndCustomBoundsWork": [
                    "self"
                ],
                "testDebugQueueOpsDoesNotoErrorOut": [
                    "self"
                ],
                "testLookUpNodePythonTracebackWorks": [
                    "self"
                ]
            },
            "DebugConcurrentRunCallsTest": {
                "_get_concurrent_debug_urls": [
                    "self"
                ],
                "testDebugConcurrentVariableUpdates": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.debug.lib.grpc_debug_server": {
            "_state_change": [
                "new_state",
                "node_name",
                "output_slot",
                "debug_op"
            ],
            "EventListenerBaseStreamHandler": {
                "__init__": [
                    "self"
                ],
                "on_core_metadata_event": [
                    "self",
                    "event"
                ],
                "on_graph_def": [
                    "self",
                    "graph_def",
                    "device_name",
                    "wall_time"
                ],
                "on_value_event": [
                    "self",
                    "event"
                ]
            },
            "EventListenerBaseServicer": {
                "__init__": [
                    "self",
                    "server_port",
                    "stream_handler_class"
                ],
                "SendEvents": [
                    "self",
                    "request_iterator",
                    "context"
                ],
                "_process_debug_op_state_changes": [
                    "self",
                    "event_reply"
                ],
                "_process_tensor_event_in_chunks": [
                    "self",
                    "event",
                    "tensor_chunks"
                ],
                "_process_encoded_graph_def_in_chunks": [
                    "self",
                    "event",
                    "graph_def_chunks"
                ],
                "_process_graph_def": [
                    "self",
                    "graph_def"
                ],
                "run_server": [
                    "self",
                    "blocking"
                ],
                "stop_server": [
                    "self",
                    "grace"
                ],
                "request_watch": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op",
                    "breakpoint"
                ],
                "request_unwatch": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ],
                "breakpoints": [
                    "self"
                ],
                "gated_grpc_debug_watches": [
                    "self"
                ],
                "SendTracebacks": [
                    "self",
                    "request",
                    "context"
                ],
                "SendSourceFiles": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.python.debug.lib.grpc_debug_test_server": {
            "_get_dump_file_path": [
                "dump_root",
                "device_name",
                "debug_node_name"
            ],
            "start_server_on_separate_thread": [
                "dump_to_filesystem",
                "server_start_delay_sec",
                "poll_server",
                "blocking",
                "toggle_watch_on_core_metadata"
            ],
            "_poll_server_till_success": [
                "max_attempts",
                "sleep_per_poll_sec",
                "debug_server_url",
                "dump_dir",
                "server",
                "gpu_memory_fraction"
            ],
            "EventListenerTestStreamHandler": {
                "__init__": [
                    "self",
                    "dump_dir",
                    "event_listener_servicer"
                ],
                "on_core_metadata_event": [
                    "self",
                    "event"
                ],
                "on_graph_def": [
                    "self",
                    "graph_def",
                    "device_name",
                    "wall_time"
                ],
                "on_value_event": [
                    "self",
                    "event"
                ],
                "_try_makedirs": [
                    "self",
                    "dir_path"
                ],
                "_write_core_metadata_event": [
                    "self",
                    "event"
                ],
                "_write_graph_def": [
                    "self",
                    "graph_def",
                    "device_name",
                    "wall_time"
                ],
                "_write_value_event": [
                    "self",
                    "event"
                ]
            },
            "EventListenerTestServicer": {
                "__init__": [
                    "self",
                    "server_port",
                    "dump_dir",
                    "toggle_watch_on_core_metadata"
                ],
                "_initialize_toggle_watch_state": [
                    "self",
                    "toggle_watches"
                ],
                "toggle_watch": [
                    "self"
                ],
                "clear_data": [
                    "self"
                ],
                "SendTracebacks": [
                    "self",
                    "request",
                    "context"
                ],
                "SendSourceFiles": [
                    "self",
                    "request",
                    "context"
                ],
                "query_op_traceback": [
                    "self",
                    "op_name"
                ],
                "query_origin_stack": [
                    "self"
                ],
                "query_call_types": [
                    "self"
                ],
                "query_call_keys": [
                    "self"
                ],
                "query_graph_versions": [
                    "self"
                ],
                "query_source_file_line": [
                    "self",
                    "file_path",
                    "lineno"
                ],
                "_code_def_to_traceback": [
                    "self",
                    "code_def",
                    "id_to_string"
                ]
            }
        },
        "tensorflow_core.python.debug.lib.source_remote": {
            "_load_debugged_source_file": [
                "file_path",
                "source_file_proto"
            ],
            "_string_to_id": [
                "string",
                "string_to_id"
            ],
            "_format_origin_stack": [
                "origin_stack",
                "call_traceback_proto"
            ],
            "_source_file_paths_outside_tensorflow_py_library": [
                "code_defs",
                "id_to_string"
            ],
            "_send_call_tracebacks": [
                "destinations",
                "origin_stack",
                "is_eager_execution",
                "call_key",
                "graph",
                "send_source"
            ],
            "send_graph_tracebacks": [
                "destinations",
                "run_key",
                "origin_stack",
                "graph",
                "send_source"
            ],
            "send_eager_tracebacks": [
                "destinations",
                "origin_stack",
                "send_source"
            ]
        },
        "tensorflow_core.python.debug.lib.profiling": {
            "ProfileDatum": {
                "__init__": [
                    "self",
                    "device_name",
                    "node_exec_stats",
                    "file_path",
                    "line_number",
                    "func_name",
                    "op_type"
                ],
                "exec_time": [
                    "self"
                ]
            },
            "AggregateProfile": {
                "__init__": [
                    "self",
                    "profile_datum"
                ],
                "add": [
                    "self",
                    "profile_datum"
                ],
                "node_count": [
                    "self"
                ],
                "node_exec_count": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.debug.lib.debug_data": {
            "_glob": [
                "glob_pattern"
            ],
            "load_tensor_from_event_file": [
                "event_file_path"
            ],
            "load_tensor_from_event": [
                "event"
            ],
            "_load_graph_def_from_event_file": [
                "event_file_path"
            ],
            "_load_log_message_from_event_file": [
                "event_file_path"
            ],
            "_is_graph_file": [
                "file_name"
            ],
            "_is_run_fetches_info_file": [
                "file_name"
            ],
            "_is_run_feed_keys_info_file": [
                "file_name"
            ],
            "_get_tensor_name": [
                "node_name",
                "output_slot"
            ],
            "_get_tensor_watch_key": [
                "node_name",
                "output_slot",
                "debug_op"
            ],
            "has_inf_or_nan": [
                "datum",
                "tensor"
            ],
            "extract_core_metadata_from_event_proto": [
                "event"
            ],
            "device_name_to_device_path": [
                "device_name"
            ],
            "device_path_to_device_name": [
                "device_dir"
            ],
            "InconvertibleTensorProto": {
                "__init__": [
                    "self",
                    "tensor_proto",
                    "initialized"
                ],
                "__str__": [
                    "self"
                ],
                "initialized": [
                    "self"
                ]
            },
            "DebugTensorDatum": {
                "__init__": [
                    "self",
                    "dump_root",
                    "debug_dump_rel_path"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "get_tensor": [
                    "self"
                ],
                "timestamp": [
                    "self"
                ],
                "extended_timestamp": [
                    "self"
                ],
                "debug_op": [
                    "self"
                ],
                "device_name": [
                    "self"
                ],
                "node_name": [
                    "self"
                ],
                "output_slot": [
                    "self"
                ],
                "tensor_name": [
                    "self"
                ],
                "watch_key": [
                    "self"
                ],
                "file_path": [
                    "self"
                ],
                "dump_size_bytes": [
                    "self"
                ]
            },
            "WatchKeyDoesNotExistInDebugDumpDirError": {},
            "DebugDumpDir": {
                "__init__": [
                    "self",
                    "dump_root",
                    "partition_graphs",
                    "validate"
                ],
                "_load_all_device_dumps": [
                    "self",
                    "partition_graphs",
                    "validate"
                ],
                "_load_device_dumps": [
                    "self",
                    "device_name",
                    "device_root"
                ],
                "_calculate_t0": [
                    "self"
                ],
                "_load_core_metadata": [
                    "self"
                ],
                "_load_fetches_info": [
                    "self"
                ],
                "_load_feeds_info": [
                    "self"
                ],
                "_dump_file_name_to_datum": [
                    "self",
                    "dir_name",
                    "file_name"
                ],
                "_create_tensor_watch_maps": [
                    "self",
                    "device_name"
                ],
                "set_python_graph": [
                    "self",
                    "python_graph"
                ],
                "python_graph": [
                    "self"
                ],
                "core_metadata": [
                    "self"
                ],
                "dumped_tensor_data": [
                    "self"
                ],
                "t0": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "_load_partition_graphs": [
                    "self",
                    "client_partition_graphs",
                    "validate"
                ],
                "_find_partition_graph": [
                    "self",
                    "partition_graphs",
                    "device_name"
                ],
                "_collect_node_devices": [
                    "self",
                    "debug_graph"
                ],
                "_validate_dump_with_graphs": [
                    "self",
                    "device_name"
                ],
                "_satisfied_at_timestamp": [
                    "self",
                    "device_name",
                    "pending",
                    "timestamp",
                    "start_i"
                ],
                "loaded_partition_graphs": [
                    "self"
                ],
                "partition_graphs": [
                    "self"
                ],
                "reconstructed_non_debug_partition_graphs": [
                    "self"
                ],
                "run_fetches_info": [
                    "self"
                ],
                "run_feed_keys_info": [
                    "self"
                ],
                "_infer_device_name": [
                    "self",
                    "device_name",
                    "node_name"
                ],
                "nodes": [
                    "self",
                    "device_name"
                ],
                "node_attributes": [
                    "self",
                    "node_name",
                    "device_name"
                ],
                "node_inputs": [
                    "self",
                    "node_name",
                    "is_control",
                    "device_name"
                ],
                "transitive_inputs": [
                    "self",
                    "node_name",
                    "include_control",
                    "include_reversed_ref",
                    "device_name"
                ],
                "_get_merge_node_names": [
                    "self",
                    "device_name"
                ],
                "find_some_path": [
                    "self",
                    "src_node_name",
                    "dst_node_name",
                    "include_control",
                    "include_reversed_ref",
                    "device_name"
                ],
                "node_recipients": [
                    "self",
                    "node_name",
                    "is_control",
                    "device_name"
                ],
                "devices": [
                    "self"
                ],
                "node_exists": [
                    "self",
                    "node_name",
                    "device_name"
                ],
                "node_device": [
                    "self",
                    "node_name"
                ],
                "node_op_type": [
                    "self",
                    "node_name",
                    "device_name"
                ],
                "debug_watch_keys": [
                    "self",
                    "node_name",
                    "device_name"
                ],
                "watch_key_to_data": [
                    "self",
                    "debug_watch_key",
                    "device_name"
                ],
                "find": [
                    "self",
                    "predicate",
                    "first_n",
                    "device_name",
                    "exclude_node_names"
                ],
                "get_tensor_file_paths": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op",
                    "device_name"
                ],
                "get_tensors": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op",
                    "device_name"
                ],
                "get_rel_timestamps": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op",
                    "device_name"
                ],
                "get_dump_sizes_bytes": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op",
                    "device_name"
                ],
                "node_traceback": [
                    "self",
                    "element_name"
                ]
            }
        },
        "tensorflow_core.python.debug.lib.debug_gradients": {
            "_tensor_to_grad_debug_op_name": [
                "tensor",
                "grad_debugger_uuid"
            ],
            "_parse_grad_debug_op_name": [
                "op_name"
            ],
            "clear_gradient_debuggers": [],
            "_identify_gradient_grad": [
                "op",
                "dy"
            ],
            "_identify_gradient_grad_ref": [
                "op",
                "dy"
            ],
            "gradient_values_from_dump": [
                "grad_debugger",
                "x_tensor",
                "dump"
            ],
            "GradientsDebugger": {
                "__init__": [
                    "self",
                    "y_tensor"
                ],
                "y_tensor": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "identify_gradient": [
                    "self",
                    "input_tensor"
                ],
                "watch_gradients_by_tensors": [
                    "self",
                    "graph",
                    "tensors"
                ],
                "watch_gradients_by_tensor_names": [
                    "self",
                    "graph",
                    "tensor_name_regex"
                ],
                "_check_same_graph": [
                    "self",
                    "tensor"
                ],
                "register_gradient_tensor": [
                    "self",
                    "x_tensor_name",
                    "gradient_tensor"
                ],
                "gradient_tensor": [
                    "self",
                    "x_tensor"
                ],
                "gradient_tensors": [
                    "self"
                ],
                "_get_tensor_name": [
                    "self",
                    "tensor"
                ]
            }
        },
        "tensorflow_core.python.debug.lib": {},
        "tensorflow_core.python.debug.lib.debug_service_pb2_grpc": {
            "add_EventListenerServicer_to_server": [
                "servicer",
                "server"
            ],
            "EventListenerStub": {
                "__init__": [
                    "self",
                    "channel"
                ]
            },
            "EventListenerServicer": {
                "SendEvents": [
                    "self",
                    "request_iterator",
                    "context"
                ],
                "SendTracebacks": [
                    "self",
                    "request",
                    "context"
                ],
                "SendSourceFiles": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.python.debug.wrappers.dumping_wrapper": {
            "DumpingDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "session_root",
                    "watch_fn",
                    "thread_name_filter",
                    "pass_through_operrors",
                    "log_usage"
                ],
                "prepare_run_debug_urls": [
                    "self",
                    "fetches",
                    "feed_dict"
                ]
            }
        },
        "tensorflow_core.python.debug.wrappers.grpc_wrapper": {
            "publish_traceback": [
                "debug_server_urls",
                "graph",
                "feed_dict",
                "fetches",
                "old_graph_version"
            ],
            "_signal_handler": [
                "unused_signal",
                "unused_frame"
            ],
            "register_signal_handler": [],
            "GrpcDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "grpc_debug_server_addresses",
                    "watch_fn",
                    "thread_name_filter",
                    "log_usage"
                ],
                "prepare_run_debug_urls": [
                    "self",
                    "fetches",
                    "feed_dict"
                ],
                "_normalize_grpc_url": [
                    "self",
                    "address"
                ]
            },
            "TensorBoardDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "grpc_debug_server_addresses",
                    "thread_name_filter",
                    "send_traceback_and_source_code",
                    "log_usage"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata",
                    "callable_runner",
                    "callable_runner_args",
                    "callable_options"
                ]
            }
        },
        "tensorflow_core.python.debug.wrappers.local_cli_wrapper": {
            "LocalCLIDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "dump_root",
                    "log_usage",
                    "ui_type",
                    "thread_name_filter",
                    "config_file_path"
                ],
                "_is_disk_usage_reset_each_run": [
                    "self"
                ],
                "_initialize_argparsers": [
                    "self"
                ],
                "add_tensor_filter": [
                    "self",
                    "filter_name",
                    "tensor_filter"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "_exit_if_requested_by_user": [
                    "self"
                ],
                "_prep_cli_for_run_start": [
                    "self"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ],
                "_remove_dump_root": [
                    "self"
                ],
                "_prep_debug_cli_for_run_end": [
                    "self",
                    "debug_dump",
                    "tf_error",
                    "passed_filter",
                    "passed_filter_exclude_node_names"
                ],
                "_prep_profile_cli_for_run_end": [
                    "self",
                    "py_graph",
                    "run_metadata"
                ],
                "_launch_cli": [
                    "self"
                ],
                "_run_info_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_print_feed_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_run_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_register_this_run_info": [
                    "self",
                    "curses_cli"
                ],
                "_get_run_debug_urls": [
                    "self"
                ],
                "_update_run_calls_state": [
                    "self",
                    "run_call_count",
                    "fetches",
                    "feed_dict",
                    "is_callable_runner"
                ]
            }
        },
        "tensorflow_core.python.debug.wrappers.hooks": {
            "LocalCLIDebugHook": {
                "__init__": [
                    "self",
                    "ui_type",
                    "dump_root",
                    "thread_name_filter",
                    "config_file_path"
                ],
                "add_tensor_filter": [
                    "self",
                    "filter_name",
                    "tensor_filter"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "DumpingDebugHook": {
                "__init__": [
                    "self",
                    "session_root",
                    "watch_fn",
                    "thread_name_filter",
                    "log_usage"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "GrpcDebugHook": {
                "__init__": [
                    "self",
                    "grpc_debug_server_addresses",
                    "watch_fn",
                    "thread_name_filter",
                    "log_usage"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "TensorBoardDebugHook": {
                "__init__": [
                    "self",
                    "grpc_debug_server_addresses",
                    "thread_name_filter",
                    "send_traceback_and_source_code",
                    "log_usage"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            }
        },
        "tensorflow_core.python.debug.wrappers": {},
        "tensorflow_core.python.debug.wrappers.framework": {
            "_check_type": [
                "obj",
                "expected_types"
            ],
            "OnSessionInitRequest": {
                "__init__": [
                    "self",
                    "sess"
                ]
            },
            "OnSessionInitAction": {},
            "OnSessionInitResponse": {
                "__init__": [
                    "self",
                    "action"
                ]
            },
            "OnRunStartRequest": {
                "__init__": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "run_options",
                    "run_metadata",
                    "run_call_count",
                    "is_callable_runner"
                ]
            },
            "OnRunStartAction": {},
            "OnRunStartResponse": {
                "__init__": [
                    "self",
                    "action",
                    "debug_urls",
                    "debug_ops",
                    "node_name_regex_whitelist",
                    "op_type_regex_whitelist",
                    "tensor_dtype_regex_whitelist",
                    "tolerate_debug_op_creation_failures"
                ]
            },
            "OnRunEndRequest": {
                "__init__": [
                    "self",
                    "performed_action",
                    "run_metadata",
                    "client_graph_def",
                    "tf_error"
                ]
            },
            "OnRunEndResponse": {
                "__init__": [
                    "self"
                ]
            },
            "BaseDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "thread_name_filter",
                    "pass_through_operrors"
                ],
                "graph": [
                    "self"
                ],
                "graph_def": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata",
                    "callable_runner",
                    "callable_runner_args",
                    "callable_options"
                ],
                "_run_with_debugging": [
                    "self",
                    "run_start_resp",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata",
                    "callable_runner",
                    "callable_runner_args",
                    "callable_options"
                ],
                "_run_with_profiling": [
                    "self",
                    "run_start_resp",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata",
                    "callable_runner",
                    "callable_runner_args",
                    "callable_options"
                ],
                "_is_disabled_thread": [
                    "self"
                ],
                "run_step_fn": [
                    "self",
                    "step_fn"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ],
                "list_devices": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "make_callable": [
                    "self",
                    "fetches",
                    "feed_list",
                    "accept_options"
                ],
                "_make_callable_from_options": [
                    "self",
                    "callable_options"
                ],
                "run_call_count": [
                    "self"
                ],
                "increment_run_call_count": [
                    "self"
                ],
                "_is_disk_usage_reset_each_run": [
                    "self"
                ],
                "_decorate_run_options_for_debug": [
                    "self",
                    "run_options",
                    "debug_urls",
                    "debug_ops",
                    "node_name_regex_whitelist",
                    "op_type_regex_whitelist",
                    "tensor_dtype_regex_whitelist",
                    "tolerate_debug_op_creation_failures"
                ],
                "_decorate_run_options_for_profile": [
                    "self",
                    "run_options"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ],
                "as_default": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exec_type",
                    "exec_value",
                    "exec_tb"
                ],
                "__del__": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "should_stop": [
                    "self"
                ]
            },
            "WatchOptions": {
                "__init__": [
                    "self",
                    "debug_ops",
                    "node_name_regex_whitelist",
                    "op_type_regex_whitelist",
                    "tensor_dtype_regex_whitelist",
                    "tolerate_debug_op_creation_failures"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "NonInteractiveDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "watch_fn",
                    "thread_name_filter",
                    "pass_through_operrors"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "prepare_run_debug_urls": [
                    "self",
                    "fetches",
                    "feed_dict"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "_prepare_run_watch_config": [
                    "self",
                    "fetches",
                    "feed_dict"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.offline_analyzer": {
            "main": [
                "_"
            ]
        },
        "tensorflow_core.python.debug.cli.readline_ui": {
            "ReadlineUI": {
                "__init__": [
                    "self",
                    "on_ui_exit",
                    "config"
                ],
                "_init_input": [
                    "self"
                ],
                "_readline_complete": [
                    "self",
                    "text",
                    "state"
                ],
                "run_ui": [
                    "self",
                    "init_command",
                    "title",
                    "title_color",
                    "enable_mouse_on_start"
                ],
                "_ui_loop": [
                    "self"
                ],
                "_get_user_command": [
                    "self"
                ],
                "_dispatch_command": [
                    "self",
                    "command"
                ],
                "_display_output": [
                    "self",
                    "screen_output"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.debugger_cli_common": {
            "rich_text_lines_from_rich_line_list": [
                "rich_text_list",
                "annotations"
            ],
            "get_tensorflow_version_lines": [
                "include_dependency_versions"
            ],
            "regex_find": [
                "orig_screen_output",
                "regex",
                "font_attr"
            ],
            "wrap_rich_text_lines": [
                "inp",
                "cols"
            ],
            "CommandLineExit": {
                "__init__": [
                    "self",
                    "exit_token"
                ],
                "exit_token": [
                    "self"
                ]
            },
            "RichLine": {
                "__init__": [
                    "self",
                    "text",
                    "font_attr"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__len__": [
                    "self"
                ]
            },
            "RichTextLines": {
                "__init__": [
                    "self",
                    "lines",
                    "font_attr_segs",
                    "annotations"
                ],
                "lines": [
                    "self"
                ],
                "font_attr_segs": [
                    "self"
                ],
                "annotations": [
                    "self"
                ],
                "num_lines": [
                    "self"
                ],
                "slice": [
                    "self",
                    "begin",
                    "end"
                ],
                "extend": [
                    "self",
                    "other"
                ],
                "_extend_before": [
                    "self",
                    "other"
                ],
                "append": [
                    "self",
                    "line",
                    "font_attr_segs"
                ],
                "append_rich_line": [
                    "self",
                    "rich_line"
                ],
                "prepend": [
                    "self",
                    "line",
                    "font_attr_segs"
                ],
                "write_to_file": [
                    "self",
                    "file_path"
                ]
            },
            "CommandHandlerRegistry": {
                "__init__": [
                    "self"
                ],
                "register_command_handler": [
                    "self",
                    "prefix",
                    "handler",
                    "help_info",
                    "prefix_aliases"
                ],
                "dispatch_command": [
                    "self",
                    "prefix",
                    "argv",
                    "screen_info"
                ],
                "is_registered": [
                    "self",
                    "prefix"
                ],
                "get_help": [
                    "self",
                    "cmd_prefix"
                ],
                "set_help_intro": [
                    "self",
                    "help_intro"
                ],
                "_help_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_version_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_resolve_prefix": [
                    "self",
                    "token"
                ],
                "_get_help_for_command_prefix": [
                    "self",
                    "cmd_prefix"
                ]
            },
            "TabCompletionRegistry": {
                "__init__": [
                    "self"
                ],
                "register_tab_comp_context": [
                    "self",
                    "context_words",
                    "comp_items"
                ],
                "deregister_context": [
                    "self",
                    "context_words"
                ],
                "extend_comp_items": [
                    "self",
                    "context_word",
                    "new_comp_items"
                ],
                "remove_comp_items": [
                    "self",
                    "context_word",
                    "comp_items"
                ],
                "get_completions": [
                    "self",
                    "context_word",
                    "prefix"
                ],
                "_common_prefix": [
                    "self",
                    "m"
                ]
            },
            "CommandHistory": {
                "__init__": [
                    "self",
                    "limit",
                    "history_file_path"
                ],
                "_load_history_from_file": [
                    "self"
                ],
                "_add_command_to_history_file": [
                    "self",
                    "command"
                ],
                "_get_default_history_file_path": [
                    "cls"
                ],
                "add_command": [
                    "self",
                    "command"
                ],
                "most_recent_n": [
                    "self",
                    "n"
                ],
                "lookup_prefix": [
                    "self",
                    "prefix",
                    "n"
                ]
            },
            "MenuItem": {
                "__init__": [
                    "self",
                    "caption",
                    "content",
                    "enabled"
                ],
                "caption": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "content": [
                    "self"
                ],
                "is_enabled": [
                    "self"
                ],
                "disable": [
                    "self"
                ],
                "enable": [
                    "self"
                ]
            },
            "Menu": {
                "__init__": [
                    "self",
                    "name"
                ],
                "append": [
                    "self",
                    "item"
                ],
                "insert": [
                    "self",
                    "index",
                    "item"
                ],
                "num_items": [
                    "self"
                ],
                "captions": [
                    "self"
                ],
                "caption_to_item": [
                    "self",
                    "caption"
                ],
                "format_as_single_line": [
                    "self",
                    "prefix",
                    "divider",
                    "enabled_item_attrs",
                    "disabled_item_attrs"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.evaluator": {
            "_parse_debug_tensor_name": [
                "debug_tensor_name"
            ],
            "ExpressionEvaluator": {
                "__init__": [
                    "self",
                    "dump"
                ],
                "evaluate": [
                    "self",
                    "expression"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.profile_analyzer_cli": {
            "_list_profile_filter": [
                "profile_datum",
                "node_name_regex",
                "file_path_regex",
                "op_type_regex",
                "op_time_interval",
                "exec_time_interval",
                "min_lineno",
                "max_lineno"
            ],
            "_list_profile_sort_key": [
                "profile_datum",
                "sort_by"
            ],
            "create_profiler_ui": [
                "graph",
                "run_metadata",
                "ui_type",
                "on_ui_exit",
                "config"
            ],
            "ProfileDataTableView": {
                "__init__": [
                    "self",
                    "profile_datum_list",
                    "time_unit"
                ],
                "value": [
                    "self",
                    "row",
                    "col",
                    "device_name_filter",
                    "node_name_filter",
                    "op_type_filter"
                ],
                "row_count": [
                    "self"
                ],
                "column_count": [
                    "self"
                ],
                "column_names": [
                    "self"
                ],
                "column_sort_id": [
                    "self",
                    "col"
                ]
            },
            "ProfileAnalyzer": {
                "__init__": [
                    "self",
                    "graph",
                    "run_metadata"
                ],
                "list_profile": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_get_profile_data_generator": [
                    "self"
                ],
                "_get_list_profile_lines": [
                    "self",
                    "device_name",
                    "device_index",
                    "device_count",
                    "profile_datum_list",
                    "sort_by",
                    "sort_reverse",
                    "time_unit",
                    "device_name_filter",
                    "node_name_filter",
                    "op_type_filter",
                    "screen_cols"
                ],
                "_measure_list_profile_column_widths": [
                    "self",
                    "profile_data"
                ],
                "print_source": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_get_total_cost": [
                    "self",
                    "aggregated_profile",
                    "cost_type"
                ],
                "_render_normalized_cost_bar": [
                    "self",
                    "cost",
                    "max_cost",
                    "length"
                ],
                "get_help": [
                    "self",
                    "handler_name"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.cli_config": {
            "CLIConfig": {
                "__init__": [
                    "self",
                    "config_file_path"
                ],
                "get": [
                    "self",
                    "property_name"
                ],
                "set": [
                    "self",
                    "property_name",
                    "property_val"
                ],
                "set_callback": [
                    "self",
                    "property_name",
                    "callback"
                ],
                "_default_config_file_path": [
                    "self"
                ],
                "_save_to_file": [
                    "self"
                ],
                "summarize": [
                    "self",
                    "highlight"
                ],
                "_load_from_file": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.tensor_format": {
            "format_tensor": [
                "tensor",
                "tensor_label",
                "include_metadata",
                "auxiliary_message",
                "include_numeric_summary",
                "np_printoptions",
                "highlight_options"
            ],
            "_annotate_ndarray_lines": [
                "array_lines",
                "tensor",
                "np_printoptions",
                "offset"
            ],
            "locate_tensor_element": [
                "formatted",
                "indices"
            ],
            "_validate_indices_list": [
                "indices_list",
                "formatted"
            ],
            "_locate_elements_in_line": [
                "line",
                "indices_list",
                "ref_indices"
            ],
            "_pad_string_to_length": [
                "string",
                "length"
            ],
            "numeric_summary": [
                "tensor"
            ],
            "HighlightOptions": {
                "__init__": [
                    "self",
                    "criterion",
                    "description",
                    "font_attr"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.ui_factory": {
            "get_ui": [
                "ui_type",
                "on_ui_exit",
                "available_ui_types",
                "config"
            ]
        },
        "tensorflow_core.python.debug.cli.cli_shared": {
            "bytes_to_readable_str": [
                "num_bytes",
                "include_b"
            ],
            "time_to_readable_str": [
                "value_us",
                "force_time_unit"
            ],
            "parse_ranges_highlight": [
                "ranges_string"
            ],
            "numpy_printoptions_from_screen_info": [
                "screen_info"
            ],
            "format_tensor": [
                "tensor",
                "tensor_name",
                "np_printoptions",
                "print_all",
                "tensor_slicing",
                "highlight_options",
                "include_numeric_summary",
                "write_path"
            ],
            "error": [
                "msg"
            ],
            "_recommend_command": [
                "command",
                "description",
                "indent",
                "create_link"
            ],
            "get_tfdbg_logo": [],
            "get_run_start_intro": [
                "run_call_count",
                "fetches",
                "feed_dict",
                "tensor_filters",
                "is_callable_runner"
            ],
            "get_run_short_description": [
                "run_call_count",
                "fetches",
                "feed_dict",
                "is_callable_runner"
            ],
            "get_error_intro": [
                "tf_error"
            ]
        },
        "tensorflow_core.python.debug.cli.analyzer_cli": {
            "_add_main_menu": [
                "output",
                "node_name",
                "enable_list_tensors",
                "enable_node_info",
                "enable_print_tensor",
                "enable_list_inputs",
                "enable_list_outputs"
            ],
            "create_analyzer_ui": [
                "debug_dump",
                "tensor_filters",
                "ui_type",
                "on_ui_exit",
                "config"
            ],
            "DebugAnalyzer": {
                "__init__": [
                    "self",
                    "debug_dump",
                    "config"
                ],
                "_build_argument_parsers": [
                    "self",
                    "config"
                ],
                "add_tensor_filter": [
                    "self",
                    "filter_name",
                    "filter_callable"
                ],
                "get_tensor_filter": [
                    "self",
                    "filter_name"
                ],
                "get_help": [
                    "self",
                    "handler_name"
                ],
                "list_tensors": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_measure_tensor_list_column_widths": [
                    "self",
                    "data"
                ],
                "_sort_dump_data_by": [
                    "self",
                    "data",
                    "sort_by",
                    "reverse"
                ],
                "_tensor_list_column_heads": [
                    "self",
                    "parsed",
                    "max_timestamp_width",
                    "max_dump_size_width",
                    "max_op_type_width"
                ],
                "node_info": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_exclude_blacklisted_ops": [
                    "self",
                    "node_names"
                ],
                "_render_node_traceback": [
                    "self",
                    "node_name"
                ],
                "list_inputs": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "print_tensor": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "list_outputs": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "evaluate_expression": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_reconstruct_print_source_command": [
                    "self",
                    "parsed",
                    "line_begin",
                    "max_elements_per_line_increase"
                ],
                "print_source": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_make_source_table": [
                    "self",
                    "source_list",
                    "is_tf_py_library"
                ],
                "list_source": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_list_inputs_or_outputs": [
                    "self",
                    "recursive",
                    "node_name",
                    "depth",
                    "control",
                    "op_type",
                    "do_outputs"
                ],
                "_dfs_from_node": [
                    "self",
                    "lines",
                    "attr_segs",
                    "node_name",
                    "tracker",
                    "max_depth",
                    "depth",
                    "unfinished",
                    "include_control",
                    "show_op_type",
                    "command_template"
                ],
                "_format_neighbors": [
                    "self",
                    "neighbor_type",
                    "non_ctrls",
                    "ctrls"
                ],
                "_list_node_attributes": [
                    "self",
                    "node_name"
                ],
                "_list_node_dumps": [
                    "self",
                    "node_name"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.command_parser": {
            "parse_command": [
                "command"
            ],
            "extract_output_file_path": [
                "args"
            ],
            "parse_tensor_name_with_slicing": [
                "in_str"
            ],
            "validate_slicing_string": [
                "slicing_string"
            ],
            "_parse_slices": [
                "slicing_string"
            ],
            "parse_indices": [
                "indices_string"
            ],
            "parse_ranges": [
                "range_string"
            ],
            "parse_memory_interval": [
                "interval_str"
            ],
            "parse_time_interval": [
                "interval_str"
            ],
            "_parse_interval": [
                "interval_str"
            ],
            "parse_readable_size_str": [
                "size_str"
            ],
            "parse_readable_time_str": [
                "time_str"
            ],
            "evaluate_tensor_slice": [
                "tensor",
                "tensor_slicing"
            ],
            "get_print_tensor_argparser": [
                "description"
            ],
            "Interval": {
                "__init__": [
                    "self",
                    "start",
                    "start_included",
                    "end",
                    "end_included"
                ],
                "contains": [
                    "self",
                    "value"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.curses_ui": {
            "_get_command_from_line_attr_segs": [
                "mouse_x",
                "attr_segs"
            ],
            "ScrollBar": {
                "__init__": [
                    "self",
                    "min_x",
                    "min_y",
                    "max_x",
                    "max_y",
                    "scroll_position",
                    "output_num_rows"
                ],
                "_block_y": [
                    "self",
                    "screen_coord_sys"
                ],
                "layout": [
                    "self"
                ],
                "get_click_command": [
                    "self",
                    "mouse_y"
                ]
            },
            "CursesUI": {
                "__init__": [
                    "self",
                    "on_ui_exit",
                    "config"
                ],
                "_init_layout": [
                    "self"
                ],
                "_screen_init": [
                    "self"
                ],
                "_screen_color_init": [
                    "self"
                ],
                "_screen_launch": [
                    "self",
                    "enable_mouse_on_start"
                ],
                "_screen_create_command_window": [
                    "self"
                ],
                "_screen_refresh": [
                    "self"
                ],
                "_screen_terminate": [
                    "self"
                ],
                "run_ui": [
                    "self",
                    "init_command",
                    "title",
                    "title_color",
                    "enable_mouse_on_start"
                ],
                "get_help": [
                    "self"
                ],
                "_addstr": [
                    "self"
                ],
                "_refresh_pad": [
                    "self",
                    "pad"
                ],
                "_screen_create_command_textbox": [
                    "self",
                    "existing_command"
                ],
                "_ui_loop": [
                    "self"
                ],
                "_get_user_command": [
                    "self"
                ],
                "_screen_get_user_command": [
                    "self"
                ],
                "_strip_terminator": [
                    "self",
                    "command"
                ],
                "_screen_refresh_size": [
                    "self"
                ],
                "_navigate_screen_output": [
                    "self",
                    "command"
                ],
                "_dispatch_command": [
                    "self",
                    "command"
                ],
                "_screen_gather_textbox_str": [
                    "self"
                ],
                "_on_textbox_keypress": [
                    "self",
                    "x"
                ],
                "_screen_getmouse": [
                    "self"
                ],
                "_redraw_output": [
                    "self"
                ],
                "_fetch_hyperlink_command": [
                    "self",
                    "mouse_x",
                    "mouse_y"
                ],
                "_title": [
                    "self",
                    "title",
                    "title_color"
                ],
                "_auto_key_in": [
                    "self",
                    "command",
                    "erase_existing"
                ],
                "_erase_existing_command": [
                    "self"
                ],
                "_screen_draw_text_line": [
                    "self",
                    "row",
                    "line",
                    "attr",
                    "color"
                ],
                "_screen_new_output_pad": [
                    "self",
                    "rows",
                    "cols"
                ],
                "_screen_display_output": [
                    "self",
                    "output"
                ],
                "_display_output": [
                    "self",
                    "output",
                    "is_refresh",
                    "highlight_regex"
                ],
                "_display_lines": [
                    "self",
                    "output",
                    "min_num_rows"
                ],
                "_display_nav_bar": [
                    "self"
                ],
                "_display_main_menu": [
                    "self",
                    "output"
                ],
                "_pad_line_end_with_whitespace": [
                    "self",
                    "pad",
                    "row",
                    "line_end_x"
                ],
                "_screen_add_line_to_output_pad": [
                    "self",
                    "pad",
                    "row",
                    "txt",
                    "color_segments"
                ],
                "_screen_scroll_output_pad": [
                    "self",
                    "pad",
                    "viewport_top",
                    "viewport_left",
                    "screen_location_top",
                    "screen_location_left",
                    "screen_location_bottom",
                    "screen_location_right"
                ],
                "_scroll_output": [
                    "self",
                    "direction",
                    "line_index"
                ],
                "_screen_render_nav_bar": [
                    "self"
                ],
                "_screen_render_menu_pad": [
                    "self"
                ],
                "_compile_ui_status_summary": [
                    "self"
                ],
                "_format_indices": [
                    "self",
                    "indices"
                ],
                "_show_array_indices": [
                    "self"
                ],
                "_show_array_index_at_line": [
                    "self",
                    "line_index"
                ],
                "_tab_complete": [
                    "self",
                    "command_str"
                ],
                "_display_candidates": [
                    "self",
                    "candidates"
                ],
                "_toast": [
                    "self",
                    "message",
                    "color",
                    "line_index"
                ],
                "_error_toast": [
                    "self",
                    "message"
                ],
                "_info_toast": [
                    "self",
                    "message"
                ],
                "_interrupt_handler": [
                    "self",
                    "signal_num",
                    "frame"
                ],
                "_mouse_mode_command_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_set_mouse_enabled": [
                    "self",
                    "enabled"
                ],
                "_screen_set_mousemask": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.curses_widgets": {
            "NavigationHistoryItem": {
                "__init__": [
                    "self",
                    "command",
                    "screen_output",
                    "scroll_position"
                ]
            },
            "CursesNavigationHistory": {
                "__init__": [
                    "self",
                    "capacity"
                ],
                "add_item": [
                    "self",
                    "command",
                    "screen_output",
                    "scroll_position"
                ],
                "update_scroll_position": [
                    "self",
                    "new_scroll_position"
                ],
                "size": [
                    "self"
                ],
                "pointer": [
                    "self"
                ],
                "go_back": [
                    "self"
                ],
                "go_forward": [
                    "self"
                ],
                "can_go_back": [
                    "self"
                ],
                "can_go_forward": [
                    "self"
                ],
                "render": [
                    "self",
                    "max_length",
                    "backward_command",
                    "forward_command",
                    "latest_command_attribute",
                    "old_command_attribute"
                ]
            }
        },
        "tensorflow_core.python.debug.cli.cli_test_utils": {
            "assert_lines_equal_ignoring_whitespace": [
                "test",
                "expected_lines",
                "actual_lines"
            ],
            "assert_array_lines_close": [
                "test",
                "expected_array",
                "array_lines"
            ]
        },
        "tensorflow_core.python.debug.cli.base_ui": {
            "BaseUI": {
                "__init__": [
                    "self",
                    "on_ui_exit",
                    "config"
                ],
                "set_help_intro": [
                    "self",
                    "help_intro"
                ],
                "register_command_handler": [
                    "self",
                    "prefix",
                    "handler",
                    "help_info",
                    "prefix_aliases"
                ],
                "register_tab_comp_context": [
                    "self"
                ],
                "run_ui": [
                    "self",
                    "init_command",
                    "title",
                    "title_color",
                    "enable_mouse_on_start"
                ],
                "_parse_command": [
                    "self",
                    "command"
                ],
                "_analyze_tab_complete_input": [
                    "self",
                    "text"
                ],
                "config": [
                    "self"
                ],
                "_config_command_handler": [
                    "self",
                    "args",
                    "screen_info"
                ]
            }
        },
        "tensorflow_core.python.debug.cli": {},
        "tensorflow_core.python.tools.freeze_graph": {
            "_has_no_variables": [
                "sess"
            ],
            "freeze_graph_with_def_protos": [
                "input_graph_def",
                "input_saver_def",
                "input_checkpoint",
                "output_node_names",
                "restore_op_name",
                "filename_tensor_name",
                "output_graph",
                "clear_devices",
                "initializer_nodes",
                "variable_names_whitelist",
                "variable_names_blacklist",
                "input_meta_graph_def",
                "input_saved_model_dir",
                "saved_model_tags",
                "checkpoint_version"
            ],
            "_parse_input_graph_proto": [
                "input_graph",
                "input_binary"
            ],
            "_parse_input_meta_graph_proto": [
                "input_graph",
                "input_binary"
            ],
            "_parse_input_saver_proto": [
                "input_saver",
                "input_binary"
            ],
            "freeze_graph": [
                "input_graph",
                "input_saver",
                "input_binary",
                "input_checkpoint",
                "output_node_names",
                "restore_op_name",
                "filename_tensor_name",
                "output_graph",
                "clear_devices",
                "initializer_nodes",
                "variable_names_whitelist",
                "variable_names_blacklist",
                "input_meta_graph",
                "input_saved_model_dir",
                "saved_model_tags",
                "checkpoint_version"
            ],
            "main": [
                "unused_args",
                "flags"
            ],
            "run_main": []
        },
        "tensorflow_core.python.tools.saved_model_utils": {
            "read_saved_model": [
                "saved_model_dir"
            ],
            "get_saved_model_tag_sets": [
                "saved_model_dir"
            ],
            "get_meta_graph_def": [
                "saved_model_dir",
                "tag_set"
            ]
        },
        "tensorflow_core.python.tools.saved_model_cli": {
            "_show_tag_sets": [
                "saved_model_dir"
            ],
            "_show_signature_def_map_keys": [
                "saved_model_dir",
                "tag_set"
            ],
            "_get_inputs_tensor_info_from_meta_graph_def": [
                "meta_graph_def",
                "signature_def_key"
            ],
            "_get_outputs_tensor_info_from_meta_graph_def": [
                "meta_graph_def",
                "signature_def_key"
            ],
            "_show_inputs_outputs": [
                "saved_model_dir",
                "tag_set",
                "signature_def_key",
                "indent"
            ],
            "_show_defined_functions": [
                "saved_model_dir"
            ],
            "_print_args": [
                "arguments",
                "argument_type",
                "indent"
            ],
            "_print_tensor_info": [
                "tensor_info",
                "indent"
            ],
            "_show_all": [
                "saved_model_dir"
            ],
            "get_meta_graph_def": [
                "saved_model_dir",
                "tag_set"
            ],
            "get_signature_def_map": [
                "saved_model_dir",
                "tag_set"
            ],
            "scan_meta_graph_def": [
                "meta_graph_def"
            ],
            "run_saved_model_with_feed_dict": [
                "saved_model_dir",
                "tag_set",
                "signature_def_key",
                "input_tensor_key_feed_dict",
                "outdir",
                "overwrite_flag",
                "worker",
                "init_tpu",
                "tf_debug"
            ],
            "preprocess_inputs_arg_string": [
                "inputs_str"
            ],
            "preprocess_input_exprs_arg_string": [
                "input_exprs_str"
            ],
            "preprocess_input_examples_arg_string": [
                "input_examples_str"
            ],
            "_create_example_string": [
                "example_dict"
            ],
            "load_inputs_from_input_arg_string": [
                "inputs_str",
                "input_exprs_str",
                "input_examples_str"
            ],
            "show": [
                "args"
            ],
            "run": [
                "args"
            ],
            "scan": [
                "args"
            ],
            "convert_with_tensorrt": [
                "args"
            ],
            "create_parser": [],
            "main": []
        },
        "tensorflow_core.python.tools.module_util": {
            "get_parent_dir": [
                "module"
            ]
        },
        "tensorflow_core.python.tools.optimize_for_inference_lib": {
            "optimize_for_inference": [
                "input_graph_def",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum",
                "toco_compatible"
            ],
            "ensure_graph_is_valid": [
                "graph_def"
            ],
            "node_name_from_input": [
                "node_name"
            ],
            "node_from_map": [
                "node_map",
                "name"
            ],
            "values_from_const": [
                "node_def"
            ],
            "scale_after_normalization": [
                "node"
            ],
            "fold_batch_norms": [
                "input_graph_def"
            ],
            "fuse_resize_and_conv": [
                "input_graph_def",
                "output_node_names"
            ]
        },
        "tensorflow_core.python.tools.selective_registration_header_lib": {
            "get_ops_and_kernels": [
                "proto_fileformat",
                "proto_files",
                "default_ops_str"
            ],
            "get_header_from_ops_and_kernels": [
                "ops_and_kernels",
                "include_all_ops_and_kernels"
            ],
            "get_header": [
                "graphs",
                "proto_fileformat",
                "default_ops"
            ]
        },
        "tensorflow_core.python.tools.strip_unused_lib": {
            "strip_unused": [
                "input_graph_def",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ],
            "strip_unused_from_files": [
                "input_graph",
                "input_binary",
                "output_graph",
                "output_binary",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ]
        },
        "tensorflow_core.python.tools.strip_unused": {
            "main": [
                "unused_args"
            ]
        },
        "tensorflow_core.python.tools.import_pb_to_tensorboard": {
            "import_to_tensorboard": [
                "model_dir",
                "log_dir"
            ],
            "main": [
                "unused_args"
            ]
        },
        "tensorflow_core.python.tools.print_selective_registration_header": {
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow_core.python.tools.optimize_for_inference": {
            "main": [
                "unused_args"
            ],
            "_parse_placeholder_types": [
                "values"
            ],
            "parse_args": []
        },
        "tensorflow_core.python.tools.inspect_checkpoint": {
            "_count_total_params": [
                "reader",
                "count_exclude_pattern"
            ],
            "print_tensors_in_checkpoint_file": [
                "file_name",
                "tensor_name",
                "all_tensors",
                "all_tensor_names",
                "count_exclude_pattern"
            ],
            "parse_numpy_printoption": [
                "kv_str"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow_core.python.tools": {},
        "tensorflow_core.python.tools.api": {},
        "tensorflow_core.python.tools.api.generator.doc_srcs": {
            "get_doc_sources": [
                "api_name"
            ]
        },
        "tensorflow_core.python.tools.api.generator.create_python_api": {
            "get_canonical_import": [
                "import_set"
            ],
            "_get_name_and_module": [
                "full_name"
            ],
            "_join_modules": [
                "module1",
                "module2"
            ],
            "add_imports_for_symbol": [
                "module_code_builder",
                "symbol",
                "source_module_name",
                "source_name",
                "api_name",
                "api_version",
                "output_module_prefix"
            ],
            "get_api_init_text": [
                "packages",
                "output_package",
                "api_name",
                "api_version",
                "compat_api_versions",
                "lazy_loading"
            ],
            "get_module": [
                "dir_path",
                "relative_to_dir"
            ],
            "get_module_docstring": [
                "module_name",
                "package",
                "api_name"
            ],
            "create_api_files": [
                "output_files",
                "packages",
                "root_init_template",
                "output_dir",
                "output_package",
                "api_name",
                "api_version",
                "compat_api_versions",
                "compat_init_templates",
                "lazy_loading"
            ],
            "main": [],
            "SymbolExposedTwiceError": {},
            "_ModuleInitCodeBuilder": {
                "__init__": [
                    "self",
                    "output_package",
                    "api_version",
                    "lazy_loading"
                ],
                "_check_already_imported": [
                    "self",
                    "symbol_id",
                    "api_name"
                ],
                "add_import": [
                    "self",
                    "symbol",
                    "source_module_name",
                    "source_name",
                    "dest_module_name",
                    "dest_name"
                ],
                "_import_submodules": [
                    "self"
                ],
                "build": [
                    "self"
                ],
                "format_import": [
                    "self",
                    "source_module_name",
                    "source_name",
                    "dest_name"
                ]
            }
        },
        "tensorflow_core.python.tools.api.generator": {},
        "tensorflow_core.python.user_ops.user_ops": {
            "my_fact": []
        },
        "tensorflow_core.python.user_ops": {},
        "tensorflow_core.python.data": {},
        "tensorflow_core.python.data.kernel_tests.test_base": {
            "default_test_combinations": [],
            "DatasetTestBase": {
                "setUpClass": [
                    "cls"
                ],
                "assert_op_cancelled": [
                    "self",
                    "op"
                ],
                "assertValuesEqual": [
                    "self",
                    "expected",
                    "actual"
                ],
                "getNext": [
                    "self",
                    "dataset",
                    "requires_initialization",
                    "shared_name"
                ],
                "_compareOutputToExpected": [
                    "self",
                    "result_values",
                    "expected_values",
                    "assert_items_equal"
                ],
                "assertDatasetProduces": [
                    "self",
                    "dataset",
                    "expected_output",
                    "expected_shapes",
                    "expected_error",
                    "requires_initialization",
                    "num_test_iterations",
                    "assert_items_equal",
                    "expected_error_iter"
                ],
                "assertDatasetsEqual": [
                    "self",
                    "dataset1",
                    "dataset2"
                ],
                "assertDatasetsRaiseSameError": [
                    "self",
                    "dataset1",
                    "dataset2",
                    "exception_class",
                    "replacements"
                ],
                "structuredDataset": [
                    "self",
                    "dataset_structure",
                    "shape",
                    "dtype"
                ],
                "structuredElement": [
                    "self",
                    "element_structure",
                    "shape",
                    "dtype"
                ]
            }
        },
        "tensorflow_core.python.data.kernel_tests": {},
        "tensorflow_core.python.data.ops.multi_device_iterator_ops": {
            "_create_device_dataset": [
                "prototype_ds",
                "incarnation_id",
                "prefetch_buffer_size",
                "experimental_slack"
            ],
            "_PerDeviceGenerator": {
                "__init__": [
                    "self",
                    "shard_num",
                    "multi_device_iterator_resource",
                    "incarnation_id",
                    "source_device",
                    "element_spec"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_ReincarnatedPerDeviceGenerator": {
                "__init__": [
                    "self",
                    "per_device_dataset",
                    "incarnation_id"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "MultiDeviceIterator": {
                "__init__": [
                    "self",
                    "dataset",
                    "devices",
                    "max_buffer_size",
                    "prefetch_buffer_size",
                    "source_device"
                ],
                "_create_device_dataset": [
                    "self",
                    "i"
                ],
                "get_next": [
                    "self",
                    "device"
                ],
                "get_next_as_optional": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "_eager_reset": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "MultiDeviceIteratorResourceDeleter": {
                "__init__": [
                    "self",
                    "multi_device_iterator",
                    "iterators",
                    "device",
                    "deleter"
                ],
                "__del__": [
                    "self"
                ]
            },
            "MultiDeviceIteratorSpec": {
                "__init__": [
                    "self",
                    "devices",
                    "source_device",
                    "element_spec"
                ],
                "value_type": [
                    "self"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "components"
                ],
                "from_value": [
                    "value"
                ]
            },
            "MultiDeviceIteratorV2": {
                "__init__": [
                    "self",
                    "dataset",
                    "devices",
                    "max_buffer_size",
                    "prefetch_buffer_size",
                    "source_device",
                    "components",
                    "element_spec"
                ],
                "get_next": [
                    "self",
                    "device"
                ],
                "__iter__": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "next": [
                    "self"
                ],
                "get_next_as_optional": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_type_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.ops.readers": {
            "_create_or_validate_filenames_dataset": [
                "filenames"
            ],
            "_create_dataset_reader": [
                "dataset_creator",
                "filenames",
                "num_parallel_reads"
            ],
            "_TextLineDataset": {
                "__init__": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "TextLineDatasetV2": {
                "__init__": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size",
                    "num_parallel_reads"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "TextLineDatasetV1": {
                "__init__": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size",
                    "num_parallel_reads"
                ],
                "_filenames": [
                    "self",
                    "value"
                ]
            },
            "_TFRecordDataset": {
                "__init__": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "ParallelInterleaveDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func",
                    "cycle_length",
                    "block_length",
                    "sloppy",
                    "buffer_output_elements",
                    "prefetch_input_elements"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "TFRecordDatasetV2": {
                "__init__": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size",
                    "num_parallel_reads"
                ],
                "_clone": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size",
                    "num_parallel_reads"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "TFRecordDatasetV1": {
                "__init__": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size",
                    "num_parallel_reads"
                ],
                "_clone": [
                    "self",
                    "filenames",
                    "compression_type",
                    "buffer_size",
                    "num_parallel_reads"
                ],
                "_filenames": [
                    "self",
                    "value"
                ]
            },
            "_FixedLengthRecordDataset": {
                "__init__": [
                    "self",
                    "filenames",
                    "record_bytes",
                    "header_bytes",
                    "footer_bytes",
                    "buffer_size",
                    "compression_type"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "FixedLengthRecordDatasetV2": {
                "__init__": [
                    "self",
                    "filenames",
                    "record_bytes",
                    "header_bytes",
                    "footer_bytes",
                    "buffer_size",
                    "compression_type",
                    "num_parallel_reads"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "FixedLengthRecordDatasetV1": {
                "__init__": [
                    "self",
                    "filenames",
                    "record_bytes",
                    "header_bytes",
                    "footer_bytes",
                    "buffer_size",
                    "compression_type",
                    "num_parallel_reads"
                ],
                "_filenames": [
                    "self",
                    "value"
                ]
            }
        },
        "tensorflow_core.python.data.ops.dataset_ops": {
            "_ensure_same_dataset_graph": [
                "dataset"
            ],
            "make_one_shot_iterator": [
                "dataset"
            ],
            "make_initializable_iterator": [
                "dataset",
                "shared_name"
            ],
            "get_structure": [
                "dataset_or_iterator"
            ],
            "get_legacy_output_classes": [
                "dataset_or_iterator"
            ],
            "get_legacy_output_shapes": [
                "dataset_or_iterator"
            ],
            "get_legacy_output_types": [
                "dataset_or_iterator"
            ],
            "from_variant": [
                "variant",
                "structure"
            ],
            "to_variant": [
                "dataset"
            ],
            "_is_padded_shape_compatible_with": [
                "padded_shape",
                "input_component_shape"
            ],
            "_padded_shape_to_tensor": [
                "padded_shape",
                "input_component_shape"
            ],
            "_padding_value_to_tensor": [
                "value",
                "output_type"
            ],
            "_default_padding": [
                "input_dataset"
            ],
            "_should_unpack_args": [
                "args"
            ],
            "AutotuneAlgorithm": {},
            "DatasetV2": {
                "__init__": [
                    "self",
                    "variant_tensor"
                ],
                "_variant_tensor": [
                    "self",
                    "_"
                ],
                "_as_serialized_graph": [
                    "self",
                    "stateful_whitelist"
                ],
                "_trace_variant_creation": [
                    "self"
                ],
                "_inputs": [
                    "self"
                ],
                "_graph": [
                    "self",
                    "_"
                ],
                "_has_captured_ref": [
                    "self"
                ],
                "_functions": [
                    "self"
                ],
                "options": [
                    "self"
                ],
                "_apply_options": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_flat_shapes": [
                    "self"
                ],
                "_flat_types": [
                    "self"
                ],
                "_flat_structure": [
                    "self"
                ],
                "_type_spec": [
                    "self"
                ],
                "from_tensors": [
                    "tensors"
                ],
                "from_tensor_slices": [
                    "tensors"
                ],
                "from_generator": [
                    "generator",
                    "output_types",
                    "output_shapes",
                    "args"
                ],
                "range": [],
                "zip": [
                    "datasets"
                ],
                "concatenate": [
                    "self",
                    "dataset"
                ],
                "prefetch": [
                    "self",
                    "buffer_size"
                ],
                "list_files": [
                    "file_pattern",
                    "shuffle",
                    "seed"
                ],
                "repeat": [
                    "self",
                    "count"
                ],
                "enumerate": [
                    "self",
                    "start"
                ],
                "shuffle": [
                    "self",
                    "buffer_size",
                    "seed",
                    "reshuffle_each_iteration"
                ],
                "cache": [
                    "self",
                    "filename"
                ],
                "take": [
                    "self",
                    "count"
                ],
                "skip": [
                    "self",
                    "count"
                ],
                "shard": [
                    "self",
                    "num_shards",
                    "index"
                ],
                "batch": [
                    "self",
                    "batch_size",
                    "drop_remainder"
                ],
                "padded_batch": [
                    "self",
                    "batch_size",
                    "padded_shapes",
                    "padding_values",
                    "drop_remainder"
                ],
                "map": [
                    "self",
                    "map_func",
                    "num_parallel_calls"
                ],
                "flat_map": [
                    "self",
                    "map_func"
                ],
                "interleave": [
                    "self",
                    "map_func",
                    "cycle_length",
                    "block_length",
                    "num_parallel_calls"
                ],
                "filter": [
                    "self",
                    "predicate"
                ],
                "apply": [
                    "self",
                    "transformation_func"
                ],
                "window": [
                    "self",
                    "size",
                    "shift",
                    "stride",
                    "drop_remainder"
                ],
                "reduce": [
                    "self",
                    "initial_state",
                    "reduce_func"
                ],
                "unbatch": [
                    "self"
                ],
                "with_options": [
                    "self",
                    "options"
                ]
            },
            "DatasetV1": {
                "__init__": [
                    "self"
                ],
                "_as_variant_tensor": [
                    "self"
                ],
                "make_one_shot_iterator": [
                    "self"
                ],
                "_make_one_shot_iterator": [
                    "self"
                ],
                "make_initializable_iterator": [
                    "self",
                    "shared_name"
                ],
                "_make_initializable_iterator": [
                    "self",
                    "shared_name"
                ],
                "output_classes": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "output_types": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "from_tensors": [
                    "tensors"
                ],
                "from_tensor_slices": [
                    "tensors"
                ],
                "from_sparse_tensor_slices": [
                    "sparse_tensor"
                ],
                "from_generator": [
                    "generator",
                    "output_types",
                    "output_shapes",
                    "args"
                ],
                "range": [],
                "zip": [
                    "datasets"
                ],
                "concatenate": [
                    "self",
                    "dataset"
                ],
                "prefetch": [
                    "self",
                    "buffer_size"
                ],
                "list_files": [
                    "file_pattern",
                    "shuffle",
                    "seed"
                ],
                "repeat": [
                    "self",
                    "count"
                ],
                "shuffle": [
                    "self",
                    "buffer_size",
                    "seed",
                    "reshuffle_each_iteration"
                ],
                "cache": [
                    "self",
                    "filename"
                ],
                "take": [
                    "self",
                    "count"
                ],
                "skip": [
                    "self",
                    "count"
                ],
                "shard": [
                    "self",
                    "num_shards",
                    "index"
                ],
                "batch": [
                    "self",
                    "batch_size",
                    "drop_remainder"
                ],
                "padded_batch": [
                    "self",
                    "batch_size",
                    "padded_shapes",
                    "padding_values",
                    "drop_remainder"
                ],
                "map": [
                    "self",
                    "map_func",
                    "num_parallel_calls"
                ],
                "map_with_legacy_function": [
                    "self",
                    "map_func",
                    "num_parallel_calls"
                ],
                "flat_map": [
                    "self",
                    "map_func"
                ],
                "interleave": [
                    "self",
                    "map_func",
                    "cycle_length",
                    "block_length",
                    "num_parallel_calls"
                ],
                "filter": [
                    "self",
                    "predicate"
                ],
                "filter_with_legacy_function": [
                    "self",
                    "predicate"
                ],
                "apply": [
                    "self",
                    "transformation_func"
                ],
                "window": [
                    "self",
                    "size",
                    "shift",
                    "stride",
                    "drop_remainder"
                ],
                "with_options": [
                    "self",
                    "options"
                ]
            },
            "DatasetV1Adapter": {
                "__init__": [
                    "self",
                    "dataset"
                ],
                "_as_variant_tensor": [
                    "self"
                ],
                "_has_captured_ref": [
                    "self"
                ],
                "_inputs": [
                    "self"
                ],
                "_functions": [
                    "self"
                ],
                "options": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "Options": {
                "_static_optimizations": [
                    "self"
                ],
                "_static_optimization_configs": [
                    "self"
                ],
                "merge": [
                    "self",
                    "options"
                ]
            },
            "DatasetSource": {
                "_inputs": [
                    "self"
                ]
            },
            "UnaryDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "variant_tensor"
                ],
                "_inputs": [
                    "self"
                ]
            },
            "UnaryUnchangedStructureDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "variant_tensor"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "TensorDataset": {
                "__init__": [
                    "self",
                    "element"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "TensorSliceDataset": {
                "__init__": [
                    "self",
                    "element"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "SparseTensorSliceDataset": {
                "__init__": [
                    "self",
                    "sparse_tensor"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_VariantDataset": {
                "__init__": [
                    "self",
                    "dataset_variant",
                    "structure"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_NestedVariant": {
                "__init__": [
                    "self",
                    "variant_tensor",
                    "element_spec",
                    "dataset_shape"
                ],
                "_type_spec": [
                    "self"
                ]
            },
            "DatasetSpec": {
                "__init__": [
                    "self",
                    "element_spec",
                    "dataset_shape"
                ],
                "value_type": [
                    "self"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "components"
                ],
                "_to_tensor_list": [
                    "self",
                    "value"
                ],
                "from_value": [
                    "value"
                ],
                "_batch": [
                    "self",
                    "batch_size"
                ],
                "_unbatch": [
                    "self"
                ],
                "_to_batched_tensor_list": [
                    "self",
                    "value"
                ],
                "_to_legacy_output_types": [
                    "self"
                ],
                "_to_legacy_output_shapes": [
                    "self"
                ],
                "_to_legacy_output_classes": [
                    "self"
                ]
            },
            "StructuredFunctionWrapper": {
                "__init__": [
                    "self",
                    "func",
                    "transformation_name",
                    "dataset",
                    "input_classes",
                    "input_shapes",
                    "input_types",
                    "input_structure",
                    "add_to_graph",
                    "use_legacy_function",
                    "defun_kwargs"
                ],
                "output_structure": [
                    "self"
                ],
                "output_classes": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "output_types": [
                    "self"
                ],
                "function": [
                    "self"
                ]
            },
            "_GeneratorDataset": {
                "__init__": [
                    "self",
                    "init_args",
                    "init_func",
                    "next_func",
                    "finalize_func"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "ZipDataset": {
                "__init__": [
                    "self",
                    "datasets"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "ConcatenateDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "dataset_to_concatenate"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "RepeatDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "count"
                ]
            },
            "RangeDataset": {
                "__init__": [
                    "self"
                ],
                "_parse_args": [
                    "self"
                ],
                "_build_tensor": [
                    "self",
                    "int64_value",
                    "name"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_MemoryCacheDeleter": {
                "__init__": [
                    "self",
                    "handle",
                    "device",
                    "deleter"
                ],
                "__del__": [
                    "self"
                ]
            },
            "_MemoryCache": {
                "__init__": [
                    "self"
                ],
                "handle": [
                    "self"
                ]
            },
            "CacheDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "filename"
                ]
            },
            "_RandomSeedGeneratorDeleter": {
                "__init__": [
                    "self",
                    "handle",
                    "device",
                    "deleter"
                ],
                "__del__": [
                    "self"
                ]
            },
            "_RandomSeedGenerator": {
                "__init__": [
                    "self",
                    "seed",
                    "seed2"
                ],
                "handle": [
                    "self"
                ]
            },
            "ShuffleDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "buffer_size",
                    "seed",
                    "reshuffle_each_iteration"
                ]
            },
            "TakeDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "count"
                ]
            },
            "SkipDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "count"
                ]
            },
            "ShardDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "num_shards",
                    "index"
                ]
            },
            "BatchDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "batch_size",
                    "drop_remainder"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_VariantTracker": {
                "__init__": [
                    "self",
                    "variant_tensor",
                    "resource_creator"
                ]
            },
            "PaddedBatchDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "batch_size",
                    "padded_shapes",
                    "padding_values",
                    "drop_remainder"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "MapDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func",
                    "use_inter_op_parallelism",
                    "preserve_cardinality",
                    "use_legacy_function"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "ParallelMapDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func",
                    "num_parallel_calls",
                    "use_inter_op_parallelism",
                    "preserve_cardinality",
                    "use_legacy_function"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "FlatMapDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "InterleaveDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func",
                    "cycle_length",
                    "block_length"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "ParallelInterleaveDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func",
                    "cycle_length",
                    "block_length",
                    "num_parallel_calls"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "FilterDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "predicate",
                    "use_legacy_function"
                ],
                "_functions": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "PrefetchDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "buffer_size",
                    "slack_period"
                ]
            },
            "WindowDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "size",
                    "shift",
                    "stride",
                    "drop_remainder"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_OptionsDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "options"
                ],
                "options": [
                    "self"
                ]
            },
            "_ModelDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "algorithm",
                    "cpu_budget"
                ]
            },
            "_OptimizeDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "optimizations",
                    "optimization_configs"
                ]
            },
            "_SetStatsAggregatorDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "aggregator",
                    "prefix",
                    "counter_prefix"
                ]
            },
            "_MaxIntraOpParallelismDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "max_intra_op_parallelism"
                ]
            },
            "_PrivateThreadPoolDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "num_threads"
                ]
            },
            "_RestructuredDataset": {
                "__init__": [
                    "self",
                    "dataset",
                    "structure"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_UnbatchDataset": {
                "__init__": [
                    "self",
                    "input_dataset"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.ops.optional_ops": {
            "Optional": {
                "has_value": [
                    "self",
                    "name"
                ],
                "get_value": [
                    "self",
                    "name"
                ],
                "value_structure": [
                    "self"
                ],
                "from_value": [
                    "value"
                ],
                "none_from_structure": [
                    "value_structure"
                ]
            },
            "_OptionalImpl": {
                "__init__": [
                    "self",
                    "variant_tensor",
                    "value_structure"
                ],
                "has_value": [
                    "self",
                    "name"
                ],
                "get_value": [
                    "self",
                    "name"
                ],
                "value_structure": [
                    "self"
                ],
                "_type_spec": [
                    "self"
                ]
            },
            "OptionalSpec": {
                "__init__": [
                    "self",
                    "value_structure"
                ],
                "value_type": [
                    "self"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "flat_value"
                ],
                "from_value": [
                    "value"
                ],
                "_to_legacy_output_types": [
                    "self"
                ],
                "_to_legacy_output_shapes": [
                    "self"
                ],
                "_to_legacy_output_classes": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.ops.iterator_ops": {
            "_device_stack_is_empty": [],
            "_generate_shared_name": [
                "prefix"
            ],
            "get_next_as_optional": [
                "iterator"
            ],
            "Iterator": {
                "__init__": [
                    "self",
                    "iterator_resource",
                    "initializer",
                    "output_types",
                    "output_shapes",
                    "output_classes"
                ],
                "from_structure": [
                    "output_types",
                    "output_shapes",
                    "shared_name",
                    "output_classes"
                ],
                "from_string_handle": [
                    "string_handle",
                    "output_types",
                    "output_shapes",
                    "output_classes"
                ],
                "initializer": [
                    "self"
                ],
                "make_initializer": [
                    "self",
                    "dataset",
                    "name"
                ],
                "get_next": [
                    "self",
                    "name"
                ],
                "string_handle": [
                    "self",
                    "name"
                ],
                "output_classes": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "output_types": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            },
            "IteratorResourceDeleter": {
                "__init__": [
                    "self",
                    "handle",
                    "device",
                    "deleter"
                ],
                "__del__": [
                    "self"
                ]
            },
            "IteratorV2": {
                "__init__": [
                    "self",
                    "dataset",
                    "components",
                    "element_spec"
                ],
                "_create_iterator": [
                    "self",
                    "dataset"
                ],
                "__iter__": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "_next_internal": [
                    "self"
                ],
                "_type_spec": [
                    "self"
                ],
                "next": [
                    "self"
                ],
                "output_classes": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "output_types": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "get_next": [
                    "self",
                    "name"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            },
            "IteratorSpec": {
                "__init__": [
                    "self",
                    "element_spec"
                ],
                "value_type": [
                    "self"
                ],
                "_serialize": [
                    "self"
                ],
                "_component_specs": [
                    "self"
                ],
                "_to_components": [
                    "self",
                    "value"
                ],
                "_from_components": [
                    "self",
                    "components"
                ],
                "from_value": [
                    "value"
                ]
            },
            "_IteratorSaveable": {
                "__init__": [
                    "self",
                    "iterator_resource",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            }
        },
        "tensorflow_core.python.data.ops": {},
        "tensorflow_core.python.data.util.sparse": {
            "any_sparse": [
                "classes"
            ],
            "as_dense_shapes": [
                "shapes",
                "classes"
            ],
            "as_dense_types": [
                "types",
                "classes"
            ],
            "deserialize_sparse_tensors": [
                "tensors",
                "types",
                "shapes",
                "classes"
            ],
            "get_classes": [
                "tensors"
            ],
            "serialize_many_sparse_tensors": [
                "tensors"
            ],
            "serialize_sparse_tensors": [
                "tensors"
            ]
        },
        "tensorflow_core.python.data.util.traverse": {
            "obtain_all_variant_tensor_ops": [
                "dataset"
            ]
        },
        "tensorflow_core.python.data.util.options": {
            "_internal_attr_name": [
                "name"
            ],
            "create_option": [
                "name",
                "ty",
                "docstring",
                "default_factory"
            ],
            "merge_options": [],
            "OptionsBase": {
                "__init__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ]
            }
        },
        "tensorflow_core.python.data.util.random_seed": {
            "get_seed": [
                "seed"
            ]
        },
        "tensorflow_core.python.data.util.structure": {
            "_TensorStructure": [
                "dtype",
                "shape"
            ],
            "_SparseTensorStructure": [
                "dtype",
                "shape"
            ],
            "_TensorArrayStructure": [
                "dtype",
                "element_shape",
                "dynamic_size",
                "infer_shape"
            ],
            "_RaggedTensorStructure": [
                "dtype",
                "shape",
                "ragged_rank"
            ],
            "normalize_element": [
                "element"
            ],
            "convert_legacy_structure": [
                "output_types",
                "output_shapes",
                "output_classes"
            ],
            "_from_tensor_list_helper": [
                "decode_fn",
                "element_spec",
                "tensor_list"
            ],
            "from_compatible_tensor_list": [
                "element_spec",
                "tensor_list"
            ],
            "from_tensor_list": [
                "element_spec",
                "tensor_list"
            ],
            "get_flat_tensor_specs": [
                "element_spec"
            ],
            "get_flat_tensor_shapes": [
                "element_spec"
            ],
            "get_flat_tensor_types": [
                "element_spec"
            ],
            "_to_tensor_list_helper": [
                "encode_fn",
                "element_spec",
                "element"
            ],
            "to_batched_tensor_list": [
                "element_spec",
                "element"
            ],
            "to_tensor_list": [
                "element_spec",
                "element"
            ],
            "are_compatible": [
                "spec1",
                "spec2"
            ],
            "type_spec_from_value": [
                "element"
            ]
        },
        "tensorflow_core.python.data.util.convert": {
            "optional_param_to_tensor": [
                "argument_name",
                "argument_value",
                "argument_default",
                "argument_dtype"
            ],
            "partial_shape_to_tensor": [
                "shape_like"
            ]
        },
        "tensorflow_core.python.data.util.nest": {
            "_sorted": [
                "dict_"
            ],
            "_sequence_like": [
                "instance",
                "args"
            ],
            "_yield_value": [
                "iterable"
            ],
            "assert_same_structure": [
                "nest1",
                "nest2",
                "check_types"
            ],
            "_packed_nest_with_indices": [
                "structure",
                "flat",
                "index"
            ],
            "pack_sequence_as": [
                "structure",
                "flat_sequence"
            ],
            "map_structure": [
                "func"
            ],
            "_yield_flat_up_to": [
                "shallow_tree",
                "input_tree"
            ],
            "assert_shallow_structure": [
                "shallow_tree",
                "input_tree",
                "check_types"
            ],
            "flatten_up_to": [
                "shallow_tree",
                "input_tree"
            ],
            "map_structure_up_to": [
                "shallow_tree",
                "func"
            ]
        },
        "tensorflow_core.python.data.util": {},
        "tensorflow_core.python.data.benchmarks.benchmark_base": {
            "DatasetBenchmarkBase": {
                "run_benchmark": [
                    "self",
                    "dataset",
                    "num_elements",
                    "iters",
                    "warmup"
                ],
                "run_and_report_benchmark": [
                    "self",
                    "dataset",
                    "num_elements",
                    "name",
                    "iters",
                    "extras",
                    "warmup"
                ]
            }
        },
        "tensorflow_core.python.data.benchmarks": {},
        "tensorflow_core.python.data.experimental": {},
        "tensorflow_core.python.data.experimental.kernel_tests.stats_dataset_test_base": {
            "_events_from_file": [
                "filepath"
            ],
            "_events_from_logdir": [
                "logdir"
            ],
            "StatsDatasetTestBase": {
                "setUpClass": [
                    "cls"
                ],
                "datasetExperimentalStats": [
                    "self",
                    "dataset",
                    "aggregator",
                    "prefix",
                    "counter_prefix"
                ],
                "regexForNodeName": [
                    "self",
                    "op_name",
                    "stats_type"
                ],
                "assertStatisticsContains": [
                    "self",
                    "handle",
                    "tag",
                    "num_events",
                    "offset"
                ],
                "assertStatisticsHasCount": [
                    "self",
                    "handle",
                    "tag",
                    "count",
                    "num_events",
                    "greater_than",
                    "offset"
                ],
                "assertStatisticsHasSum": [
                    "self",
                    "handle",
                    "tag",
                    "expected_value",
                    "num_events",
                    "offset"
                ],
                "assertStatisticsHasScalarValue": [
                    "self",
                    "handle",
                    "tag",
                    "expected_value",
                    "num_events",
                    "offset"
                ],
                "assertStatisticsHasRange": [
                    "self",
                    "handle",
                    "tag",
                    "min_value",
                    "max_value",
                    "num_events",
                    "offset"
                ],
                "_assertSummaryContains": [
                    "self",
                    "summary_str",
                    "tag"
                ],
                "_assertSummaryHasCount": [
                    "self",
                    "summary_str",
                    "tag",
                    "expected_value",
                    "greater_than"
                ],
                "_assertSummaryHasRange": [
                    "self",
                    "summary_str",
                    "tag",
                    "min_value",
                    "max_value"
                ],
                "_assertSummaryHasSum": [
                    "self",
                    "summary_str",
                    "tag",
                    "expected_value"
                ],
                "_assertSummaryHasScalarValue": [
                    "self",
                    "summary_str",
                    "tag",
                    "expected_value"
                ],
                "_assertEventContains": [
                    "self",
                    "logdir",
                    "tag",
                    "num_events",
                    "offset"
                ],
                "_assertEventHasCount": [
                    "self",
                    "logdir",
                    "tag",
                    "count",
                    "num_events",
                    "greater_than",
                    "offset"
                ],
                "_assertEventHasSum": [
                    "self",
                    "logdir",
                    "tag",
                    "expected_value",
                    "num_events",
                    "offset"
                ],
                "_assertEventHasRange": [
                    "self",
                    "logdir",
                    "tag",
                    "min_value",
                    "max_value",
                    "num_events",
                    "offset"
                ],
                "_assertEventHasScalarValue": [
                    "self",
                    "logdir",
                    "tag",
                    "expected_value",
                    "num_events",
                    "offset"
                ],
                "getHandle": [
                    "self",
                    "aggregator"
                ],
                "parallelCallsStats": [
                    "self",
                    "dataset_fn",
                    "dataset_names",
                    "num_output",
                    "function_processing_time",
                    "check_elements"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.kernel_tests.reader_dataset_ops_test_base": {
            "FixedLengthRecordDatasetTestBase": {
                "setUp": [
                    "self"
                ],
                "_record": [
                    "self",
                    "f",
                    "r"
                ],
                "_createFiles": [
                    "self"
                ]
            },
            "MakeBatchedFeaturesDatasetTestBase": {
                "setUp": [
                    "self"
                ],
                "make_batch_feature": [
                    "self",
                    "filenames",
                    "num_epochs",
                    "batch_size",
                    "label_key",
                    "reader_num_threads",
                    "parser_num_threads",
                    "shuffle",
                    "shuffle_seed",
                    "drop_final_batch"
                ],
                "_record": [
                    "self",
                    "f",
                    "r",
                    "l"
                ],
                "_get_keywords": [
                    "self",
                    "f",
                    "r"
                ],
                "_sum_keywords": [
                    "self",
                    "num_files"
                ],
                "_createFiles": [
                    "self"
                ],
                "_run_actual_batch": [
                    "self",
                    "outputs",
                    "label_key_provided"
                ],
                "_next_actual_batch": [
                    "self",
                    "label_key_provided"
                ],
                "_interleave": [
                    "self",
                    "iterators",
                    "cycle_length"
                ],
                "_next_expected_batch": [
                    "self",
                    "file_indices",
                    "batch_size",
                    "num_epochs",
                    "cycle_length"
                ],
                "verify_records": [
                    "self",
                    "batch_size",
                    "file_index",
                    "num_epochs",
                    "label_key_provided",
                    "interleave_cycle_length"
                ]
            },
            "TextLineDatasetTestBase": {
                "_lineText": [
                    "self",
                    "f",
                    "l"
                ],
                "_createFiles": [
                    "self",
                    "num_files",
                    "num_lines",
                    "crlf",
                    "compression_type"
                ]
            },
            "TFRecordDatasetTestBase": {
                "_interleave": [
                    "self",
                    "iterators",
                    "cycle_length"
                ],
                "_next_expected_batch": [
                    "self",
                    "file_indices",
                    "batch_size",
                    "num_epochs",
                    "cycle_length",
                    "drop_final_batch",
                    "use_parser_fn"
                ],
                "_verify_records": [
                    "self",
                    "outputs",
                    "batch_size",
                    "file_index",
                    "num_epochs",
                    "interleave_cycle_length",
                    "drop_final_batch",
                    "use_parser_fn"
                ],
                "setUp": [
                    "self"
                ],
                "_record": [
                    "self",
                    "f",
                    "r"
                ],
                "_createFiles": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.kernel_tests": {},
        "tensorflow_core.python.data.experimental.kernel_tests.serialization.dataset_serialization_test_base": {
            "remove_variants": [
                "get_next_op"
            ],
            "DatasetSerializationTestBase": {
                "tearDown": [
                    "self"
                ],
                "run_core_tests": [
                    "self",
                    "ds_fn",
                    "num_outputs",
                    "sparse_tensors"
                ],
                "verify_unused_iterator": [
                    "self",
                    "ds_fn",
                    "num_outputs",
                    "sparse_tensors",
                    "verify_exhausted"
                ],
                "verify_fully_used_iterator": [
                    "self",
                    "ds_fn",
                    "num_outputs",
                    "sparse_tensors"
                ],
                "verify_exhausted_iterator": [
                    "self",
                    "ds_fn",
                    "num_outputs",
                    "sparse_tensors"
                ],
                "verify_multiple_breaks": [
                    "self",
                    "ds_fn",
                    "num_outputs",
                    "num_breaks",
                    "sparse_tensors",
                    "verify_exhausted"
                ],
                "verify_reset_restored_iterator": [
                    "self",
                    "ds_fn",
                    "num_outputs",
                    "break_point",
                    "sparse_tensors",
                    "verify_exhausted"
                ],
                "verify_error_on_save": [
                    "self",
                    "ds_fn",
                    "num_outputs",
                    "error",
                    "break_point",
                    "sparse_tensors"
                ],
                "verify_run_with_breaks": [
                    "self",
                    "ds_fn",
                    "break_points",
                    "num_outputs",
                    "sparse_tensors",
                    "verify_exhausted"
                ],
                "gen_outputs": [
                    "self",
                    "ds_fn",
                    "break_points",
                    "num_outputs",
                    "ckpt_saved",
                    "sparse_tensors",
                    "verify_exhausted",
                    "save_checkpoint_at_end"
                ],
                "match": [
                    "self",
                    "expected",
                    "actual"
                ],
                "does_not_match": [
                    "self",
                    "expected",
                    "actual"
                ],
                "gen_break_points": [
                    "self",
                    "num_outputs",
                    "num_samples"
                ],
                "_build_graph": [
                    "self",
                    "ds_fn",
                    "sparse_tensors"
                ],
                "_add_iterator_ops_to_collection": [
                    "self",
                    "init_op",
                    "get_next",
                    "ds_fn",
                    "sparse_tensors"
                ],
                "_get_iterator_ops_from_collection": [
                    "self",
                    "ds_fn",
                    "sparse_tensors"
                ],
                "_get_output_types": [
                    "self",
                    "ds_fn"
                ],
                "_get_output_shapes": [
                    "self",
                    "ds_fn"
                ],
                "_get_output_classes": [
                    "self",
                    "ds_fn"
                ],
                "_ckpt_path": [
                    "self"
                ],
                "_latest_ckpt": [
                    "self"
                ],
                "_save": [
                    "self",
                    "sess",
                    "saver"
                ],
                "_restore": [
                    "self",
                    "saver",
                    "sess"
                ],
                "_initialize": [
                    "self",
                    "init_op",
                    "sess"
                ],
                "_import_meta_graph": [
                    "self"
                ],
                "_delete_ckpt": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.kernel_tests.serialization": {},
        "tensorflow_core.python.data.experimental.ops.map_defun": {
            "map_defun": [
                "fn",
                "elems",
                "output_dtypes",
                "output_shapes",
                "max_intra_op_parallelism"
            ]
        },
        "tensorflow_core.python.data.experimental.ops.grouping": {
            "group_by_reducer": [
                "key_func",
                "reducer"
            ],
            "group_by_window": [
                "key_func",
                "reduce_func",
                "window_size",
                "window_size_func"
            ],
            "bucket_by_sequence_length": [
                "element_length_func",
                "bucket_boundaries",
                "bucket_batch_sizes",
                "padded_shapes",
                "padding_values",
                "pad_to_bucket_boundary",
                "no_padding",
                "drop_remainder"
            ],
            "_GroupByReducerDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "key_func",
                    "reducer"
                ],
                "_make_key_func": [
                    "self",
                    "key_func",
                    "input_dataset"
                ],
                "_make_init_func": [
                    "self",
                    "init_func"
                ],
                "_make_reduce_func": [
                    "self",
                    "reduce_func",
                    "input_dataset"
                ],
                "_make_finalize_func": [
                    "self",
                    "finalize_func"
                ],
                "element_spec": [
                    "self"
                ],
                "_functions": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "_GroupByWindowDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "key_func",
                    "reduce_func",
                    "window_size_func"
                ],
                "_make_window_size_func": [
                    "self",
                    "window_size_func"
                ],
                "_make_key_func": [
                    "self",
                    "key_func",
                    "input_dataset"
                ],
                "_make_reduce_func": [
                    "self",
                    "reduce_func",
                    "input_dataset"
                ],
                "element_spec": [
                    "self"
                ],
                "_functions": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            },
            "Reducer": {
                "__init__": [
                    "self",
                    "init_func",
                    "reduce_func",
                    "finalize_func"
                ],
                "init_func": [
                    "self"
                ],
                "reduce_func": [
                    "self"
                ],
                "finalize_func": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.snapshot": {
            "snapshot": [
                "path",
                "compression",
                "reader_path_prefix",
                "writer_path_prefix",
                "shard_size_bytes",
                "pending_snapshot_expiry_seconds",
                "num_reader_threads",
                "reader_buffer_size",
                "num_writer_threads",
                "writer_buffer_size"
            ],
            "_SnapshotDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "path",
                    "compression",
                    "reader_path_prefix",
                    "writer_path_prefix",
                    "shard_size_bytes",
                    "pending_snapshot_expiry_seconds",
                    "num_reader_threads",
                    "reader_buffer_size",
                    "num_writer_threads",
                    "writer_buffer_size"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.unique": {
            "unique": [],
            "_UniqueDataset": {
                "__init__": [
                    "self",
                    "input_dataset"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.readers": {
            "_is_valid_int32": [
                "str_val"
            ],
            "_is_valid_int64": [
                "str_val"
            ],
            "_is_valid_float": [
                "str_val",
                "float_dtype"
            ],
            "_infer_type": [
                "str_val",
                "na_value",
                "prev_type"
            ],
            "_next_csv_row": [
                "filenames",
                "num_cols",
                "field_delim",
                "use_quote_delim",
                "header",
                "file_io_fn"
            ],
            "_infer_column_defaults": [
                "filenames",
                "num_cols",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "header",
                "num_rows_for_inference",
                "select_columns",
                "file_io_fn"
            ],
            "_infer_column_names": [
                "filenames",
                "field_delim",
                "use_quote_delim",
                "file_io_fn"
            ],
            "_get_sorted_col_indices": [
                "select_columns",
                "column_names"
            ],
            "_maybe_shuffle_and_repeat": [
                "dataset",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed"
            ],
            "make_tf_record_dataset": [
                "file_pattern",
                "batch_size",
                "parser_fn",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed",
                "prefetch_buffer_size",
                "num_parallel_reads",
                "num_parallel_parser_calls",
                "drop_final_batch"
            ],
            "make_csv_dataset_v2": [
                "file_pattern",
                "batch_size",
                "column_names",
                "column_defaults",
                "label_name",
                "select_columns",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "header",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed",
                "prefetch_buffer_size",
                "num_parallel_reads",
                "sloppy",
                "num_rows_for_inference",
                "compression_type",
                "ignore_errors"
            ],
            "make_csv_dataset_v1": [
                "file_pattern",
                "batch_size",
                "column_names",
                "column_defaults",
                "label_name",
                "select_columns",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "header",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed",
                "prefetch_buffer_size",
                "num_parallel_reads",
                "sloppy",
                "num_rows_for_inference",
                "compression_type",
                "ignore_errors"
            ],
            "make_batched_features_dataset_v2": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "label_key",
                "reader_args",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed",
                "prefetch_buffer_size",
                "reader_num_threads",
                "parser_num_threads",
                "sloppy_ordering",
                "drop_final_batch"
            ],
            "make_batched_features_dataset_v1": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "label_key",
                "reader_args",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed",
                "prefetch_buffer_size",
                "reader_num_threads",
                "parser_num_threads",
                "sloppy_ordering",
                "drop_final_batch"
            ],
            "_get_file_names": [
                "file_pattern",
                "shuffle"
            ],
            "CsvDatasetV2": {
                "__init__": [
                    "self",
                    "filenames",
                    "record_defaults",
                    "compression_type",
                    "buffer_size",
                    "header",
                    "field_delim",
                    "use_quote_delim",
                    "na_value",
                    "select_cols"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "CsvDatasetV1": {
                "__init__": [
                    "self",
                    "filenames",
                    "record_defaults",
                    "compression_type",
                    "buffer_size",
                    "header",
                    "field_delim",
                    "use_quote_delim",
                    "na_value",
                    "select_cols"
                ]
            },
            "SqlDatasetV2": {
                "__init__": [
                    "self",
                    "driver_name",
                    "data_source_name",
                    "query",
                    "output_types"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "SqlDatasetV1": {
                "__init__": [
                    "self",
                    "driver_name",
                    "data_source_name",
                    "query",
                    "output_types"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.error_ops": {
            "ignore_errors": [],
            "_IgnoreErrorsDataset": {
                "__init__": [
                    "self",
                    "input_dataset"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.optimization_options": {
            "MapVectorizationOptions": {
                "_static_optimizations": [
                    "self"
                ],
                "_static_optimization_configs": [
                    "self"
                ]
            },
            "OptimizationOptions": {
                "_static_optimizations": [
                    "self"
                ],
                "_static_optimization_configs": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.get_single_element": {
            "get_single_element": [
                "dataset"
            ]
        },
        "tensorflow_core.python.data.experimental.ops.cardinality": {
            "cardinality": [
                "dataset"
            ]
        },
        "tensorflow_core.python.data.experimental.ops.threading_options": {
            "ThreadingOptions": {}
        },
        "tensorflow_core.python.data.experimental.ops.distribute": {
            "_AutoShardDatasetV1": [
                "input_dataset",
                "num_workers",
                "index"
            ],
            "replicate": [
                "dataset",
                "devices"
            ],
            "_AutoShardDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "num_workers",
                    "index"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_RebatchDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "num_replicas",
                    "use_fallback"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_RemoteDataset": {
                "__init__": [
                    "self",
                    "graph_def",
                    "device",
                    "element_spec"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.enumerate_ops": {
            "enumerate_dataset": [
                "start"
            ]
        },
        "tensorflow_core.python.data.experimental.ops.sleep": {
            "sleep": [
                "sleep_microseconds"
            ],
            "_SleepDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "sleep_microseconds"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.interleave_ops": {
            "parallel_interleave": [
                "map_func",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements"
            ],
            "sample_from_datasets_v2": [
                "datasets",
                "weights",
                "seed"
            ],
            "sample_from_datasets_v1": [
                "datasets",
                "weights",
                "seed"
            ],
            "choose_from_datasets_v2": [
                "datasets",
                "choice_dataset"
            ],
            "choose_from_datasets_v1": [
                "datasets",
                "choice_dataset"
            ],
            "_DirectedInterleaveDataset": {
                "__init__": [
                    "self",
                    "selector_input",
                    "data_inputs"
                ],
                "_as_variant_tensor": [
                    "self"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.stats_ops": {
            "set_stats_aggregator": [
                "stats_aggregator",
                "prefix",
                "counter_prefix"
            ],
            "bytes_produced_stats": [
                "tag"
            ],
            "latency_stats": [
                "tag"
            ],
            "_StatsDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "op_function",
                    "tag"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.take_while_ops": {
            "take_while": [
                "predicate"
            ],
            "_TakeWhileDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "predicate"
                ],
                "_functions": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.matching_files": {
            "MatchingFilesDataset": {
                "__init__": [
                    "self",
                    "patterns"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.shuffle_ops": {
            "shuffle_and_repeat": [
                "buffer_size",
                "count",
                "seed"
            ],
            "_ShuffleAndRepeatDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "buffer_size",
                    "count",
                    "seed"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.random_ops": {
            "RandomDatasetV2": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "RandomDatasetV1": {
                "__init__": [
                    "self",
                    "seed"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.writers": {
            "TFRecordWriter": {
                "__init__": [
                    "self",
                    "filename",
                    "compression_type"
                ],
                "write": [
                    "self",
                    "dataset"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.resampling": {
            "rejection_resample": [
                "class_func",
                "target_dist",
                "initial_dist",
                "seed"
            ],
            "_get_prob_original_static": [
                "initial_dist_t",
                "target_dist_t"
            ],
            "_filter_ds": [
                "dataset",
                "acceptance_dist_ds",
                "initial_dist_ds",
                "class_values_ds",
                "seed"
            ],
            "_estimate_initial_dist_ds": [
                "target_dist_t",
                "class_values_ds",
                "dist_estimation_batch_size",
                "smoothing_constant"
            ],
            "_get_target_to_initial_ratio": [
                "initial_probs",
                "target_probs"
            ],
            "_estimate_data_distribution": [
                "c",
                "num_examples_per_class_seen"
            ],
            "_calculate_acceptance_probs_with_mixing": [
                "initial_probs",
                "target_probs"
            ]
        },
        "tensorflow_core.python.data.experimental.ops.scan_ops": {
            "scan": [
                "initial_state",
                "scan_func"
            ],
            "_ScanDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "initial_state",
                    "scan_func"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.distribute_options": {
            "DistributeOptions": {}
        },
        "tensorflow_core.python.data.experimental.ops.stats_options": {
            "StatsOptions": {}
        },
        "tensorflow_core.python.data.experimental.ops.threadpool": {
            "_generate_shared_name": [
                "prefix"
            ],
            "override_threadpool": [
                "dataset",
                "thread_pool"
            ],
            "PrivateThreadPool": {
                "__init__": [
                    "self",
                    "num_threads",
                    "display_name",
                    "max_intra_op_parallelism"
                ]
            },
            "_ThreadPoolDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "thread_pool"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.prefetching_ops": {
            "prefetch_to_device": [
                "device",
                "buffer_size"
            ],
            "copy_to_device": [
                "target_device",
                "source_device"
            ],
            "map_on_gpu": [
                "map_func"
            ],
            "_CopyToDeviceDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "target_device",
                    "source_device"
                ],
                "make_one_shot_iterator": [
                    "self"
                ]
            },
            "_MapOnGpuDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func",
                    "use_inter_op_parallelism"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ],
                "_transformation_name": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.batching": {
            "dense_to_sparse_batch": [
                "batch_size",
                "row_shape"
            ],
            "map_and_batch_with_legacy_function": [
                "map_func",
                "batch_size",
                "num_parallel_batches",
                "drop_remainder",
                "num_parallel_calls"
            ],
            "map_and_batch": [
                "map_func",
                "batch_size",
                "num_parallel_batches",
                "drop_remainder",
                "num_parallel_calls"
            ],
            "unbatch": [],
            "_DenseToSparseBatchDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "batch_size",
                    "row_shape"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_MapAndBatchDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "map_func",
                    "batch_size",
                    "num_parallel_calls",
                    "drop_remainder",
                    "use_legacy_function"
                ],
                "_functions": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.stats_aggregator": {
            "StatsAggregatorV2": {
                "__init__": [
                    "self"
                ]
            },
            "StatsAggregatorV1": {
                "__init__": [
                    "self"
                ],
                "get_summary": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.iterator_ops": {
            "make_saveable_from_iterator": [
                "iterator"
            ],
            "_Saveable": {
                "__init__": [
                    "self",
                    "iterator_resource"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ]
            },
            "CheckpointInputPipelineHook": {
                "__init__": [
                    "self",
                    "estimator"
                ],
                "begin": [
                    "self"
                ],
                "_restore_or_save_initial_ckpt": [
                    "self",
                    "session"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "_CustomSaver": {
                "__init__": [
                    "self",
                    "var_list",
                    "latest_filename"
                ],
                "save": [
                    "self",
                    "sess",
                    "save_path",
                    "global_step",
                    "latest_filename",
                    "meta_graph_suffix",
                    "write_meta_graph",
                    "write_state",
                    "strip_default_attrs"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.counter": {
            "CounterV2": [
                "start",
                "step",
                "dtype"
            ],
            "CounterV1": [
                "start",
                "step",
                "dtype"
            ]
        },
        "tensorflow_core.python.data.experimental.ops.optimization": {
            "assert_next": [
                "transformations"
            ],
            "model": [],
            "non_serializable": [],
            "optimize": [
                "optimizations"
            ],
            "_AssertNextDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "transformations"
                ]
            },
            "_NonSerializableDataset": {
                "__init__": [
                    "self",
                    "input_dataset"
                ]
            },
            "_ChooseFastestDataset": {
                "__init__": [
                    "self",
                    "datasets",
                    "num_experiments"
                ],
                "_inputs": [
                    "self"
                ],
                "element_spec": [
                    "self"
                ]
            },
            "_ChooseFastestBranchDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "functions",
                    "ratio_numerator",
                    "ratio_denominator",
                    "num_elements_per_branch"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops.parsing_ops": {
            "parse_example_dataset": [
                "features",
                "num_parallel_calls"
            ],
            "_ParseExampleDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "features",
                    "num_parallel_calls"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.data.experimental.ops": {},
        "tensorflow_core.python.layers.layers": {},
        "tensorflow_core.python.layers.core": {
            "dense": [
                "inputs",
                "units",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "kernel_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "dropout": [
                "inputs",
                "rate",
                "noise_shape",
                "seed",
                "training",
                "name"
            ],
            "flatten": [
                "inputs",
                "name",
                "data_format"
            ],
            "Dense": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            },
            "Dropout": {
                "__init__": [
                    "self",
                    "rate",
                    "noise_shape",
                    "seed",
                    "name"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ]
            },
            "Flatten": {}
        },
        "tensorflow_core.python.layers.normalization": {
            "batch_normalization": [
                "inputs",
                "axis",
                "momentum",
                "epsilon",
                "center",
                "scale",
                "beta_initializer",
                "gamma_initializer",
                "moving_mean_initializer",
                "moving_variance_initializer",
                "beta_regularizer",
                "gamma_regularizer",
                "beta_constraint",
                "gamma_constraint",
                "training",
                "trainable",
                "name",
                "reuse",
                "renorm",
                "renorm_clipping",
                "renorm_momentum",
                "fused",
                "virtual_batch_size",
                "adjustment"
            ],
            "BatchNormalization": {
                "__init__": [
                    "self",
                    "axis",
                    "momentum",
                    "epsilon",
                    "center",
                    "scale",
                    "beta_initializer",
                    "gamma_initializer",
                    "moving_mean_initializer",
                    "moving_variance_initializer",
                    "beta_regularizer",
                    "gamma_regularizer",
                    "beta_constraint",
                    "gamma_constraint",
                    "renorm",
                    "renorm_clipping",
                    "renorm_momentum",
                    "fused",
                    "trainable",
                    "virtual_batch_size",
                    "adjustment",
                    "name"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ]
            }
        },
        "tensorflow_core.python.layers.pooling": {
            "average_pooling1d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pooling1d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "average_pooling2d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pooling2d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "average_pooling3d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pooling3d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "AveragePooling1D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "MaxPooling1D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "AveragePooling2D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "MaxPooling2D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "AveragePooling3D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "MaxPooling3D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.layers.utils": {
            "convert_data_format": [
                "data_format",
                "ndim"
            ],
            "normalize_tuple": [
                "value",
                "n",
                "name"
            ],
            "normalize_data_format": [
                "value"
            ],
            "normalize_padding": [
                "value"
            ],
            "conv_output_length": [
                "input_length",
                "filter_size",
                "padding",
                "stride",
                "dilation"
            ],
            "conv_input_length": [
                "output_length",
                "filter_size",
                "padding",
                "stride"
            ],
            "deconv_output_length": [
                "input_length",
                "filter_size",
                "padding",
                "stride"
            ],
            "smart_cond": [
                "pred",
                "true_fn",
                "false_fn",
                "name"
            ],
            "constant_value": [
                "pred"
            ],
            "object_list_uid": [
                "object_list"
            ],
            "static_shape": [
                "x"
            ],
            "get_reachable_from_inputs": [
                "inputs",
                "targets"
            ]
        },
        "tensorflow_core.python.layers.convolutional": {
            "conv1d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "kernel_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "conv2d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "kernel_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "conv3d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "kernel_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "separable_conv1d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "depth_multiplier",
                "activation",
                "use_bias",
                "depthwise_initializer",
                "pointwise_initializer",
                "bias_initializer",
                "depthwise_regularizer",
                "pointwise_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "depthwise_constraint",
                "pointwise_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "separable_conv2d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "depth_multiplier",
                "activation",
                "use_bias",
                "depthwise_initializer",
                "pointwise_initializer",
                "bias_initializer",
                "depthwise_regularizer",
                "pointwise_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "depthwise_constraint",
                "pointwise_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "conv2d_transpose": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "kernel_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "conv3d_transpose": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "kernel_constraint",
                "bias_constraint",
                "trainable",
                "name",
                "reuse"
            ],
            "Conv1D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            },
            "Conv2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            },
            "Conv3D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            },
            "SeparableConv1D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "depth_multiplier",
                    "activation",
                    "use_bias",
                    "depthwise_initializer",
                    "pointwise_initializer",
                    "bias_initializer",
                    "depthwise_regularizer",
                    "pointwise_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "depthwise_constraint",
                    "pointwise_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            },
            "SeparableConv2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "depth_multiplier",
                    "activation",
                    "use_bias",
                    "depthwise_initializer",
                    "pointwise_initializer",
                    "bias_initializer",
                    "depthwise_regularizer",
                    "pointwise_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "depthwise_constraint",
                    "pointwise_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            },
            "Conv2DTranspose": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            },
            "Conv3DTranspose": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "kernel_constraint",
                    "bias_constraint",
                    "trainable",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.layers.base": {
            "keras_style_scope": [],
            "set_keras_style": [],
            "_is_in_keras_style_scope": [],
            "_add_elements_to_collection": [
                "elements",
                "collection_list"
            ],
            "Layer": {
                "__init__": [
                    "self",
                    "trainable",
                    "name",
                    "dtype"
                ],
                "graph": [
                    "self"
                ],
                "_init_set_name": [
                    "self",
                    "name"
                ],
                "_make_unique_name": [
                    "self",
                    "name_uid_map",
                    "avoid_names",
                    "namespace",
                    "zero_based"
                ],
                "scope_name": [
                    "self"
                ],
                "add_loss": [
                    "self",
                    "losses",
                    "inputs"
                ],
                "_name_scope": [
                    "self"
                ],
                "_set_scope": [
                    "self",
                    "scope"
                ],
                "add_weight": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "constraint",
                    "use_resource",
                    "synchronization",
                    "aggregation",
                    "partitioner"
                ],
                "__call__": [
                    "self",
                    "inputs"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "__setattr__": [
                    "self",
                    "value",
                    "name"
                ],
                "_is_legacy_layer": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.layers": {},
        "tensorflow_core.python.eager.core": {
            "_status_to_exception": [
                "code",
                "message"
            ],
            "_NotOkStatusException": {
                "__init__": [
                    "self",
                    "message",
                    "code"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_FallbackException": {},
            "_SymbolicException": {}
        },
        "tensorflow_core.python.eager.wrap_function": {
            "_get_element_from_tensor_info": [
                "tensor_info",
                "graph"
            ],
            "_lift_single_variable": [
                "old_variable",
                "graph",
                "variable_holder"
            ],
            "_lift_unlifted_variables": [
                "graph",
                "variable_holder"
            ],
            "_filter_returned_ops": [
                "fn"
            ],
            "wrap_function": [
                "fn",
                "signature",
                "name"
            ],
            "function_from_graph_def": [
                "graph_def",
                "inputs",
                "outputs"
            ],
            "VariableHolder": {
                "__init__": [
                    "self",
                    "fn",
                    "share_variables"
                ],
                "variables": [
                    "self"
                ],
                "variable_creator_scope": [
                    "self",
                    "next_creator"
                ],
                "__call__": [
                    "self"
                ],
                "call_with_variable_creator_scope": [
                    "self",
                    "fn"
                ]
            },
            "WrappedFunction": {
                "__init__": [
                    "self",
                    "fn_graph",
                    "variable_holder",
                    "attrs",
                    "signature"
                ],
                "prune": [
                    "self",
                    "feeds",
                    "fetches",
                    "name",
                    "input_signature"
                ]
            },
            "WrappedGraph": {
                "__init__": [
                    "self",
                    "variable_holder"
                ],
                "functions": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "wrap_function": [
                    "self",
                    "fn",
                    "signature",
                    "name"
                ],
                "_wrap_function": [
                    "self",
                    "fn",
                    "args",
                    "kwargs",
                    "signature",
                    "name"
                ]
            }
        },
        "tensorflow_core.python.eager.profiler_client": {
            "start_tracing": [
                "service_addr",
                "logdir",
                "duration_ms",
                "worker_list",
                "include_dataset_ops",
                "num_tracing_attempts"
            ],
            "monitor": [
                "service_addr",
                "duration_ms",
                "monitoring_level",
                "display_timestamp"
            ]
        },
        "tensorflow_core.python.eager.imperative_grad": {
            "imperative_grad": [
                "tape",
                "target",
                "sources",
                "output_gradients",
                "sources_raw",
                "unconnected_gradients"
            ]
        },
        "tensorflow_core.python.eager.context": {
            "_set_context_locked": [
                "ctx"
            ],
            "_set_context": [
                "ctx"
            ],
            "_create_context": [],
            "context": [],
            "context_safe": [],
            "ensure_initialized": [],
            "set_global_seed": [
                "seed"
            ],
            "global_seed": [],
            "internal_operation_seed": [],
            "executing_eagerly": [],
            "in_eager_mode": [],
            "shared_name": [
                "name"
            ],
            "graph_mode": [],
            "eager_mode": [],
            "namescope": [
                "name"
            ],
            "scope_name": [],
            "device": [
                "name"
            ],
            "list_devices": [],
            "get_log_device_placement": [],
            "set_log_device_placement": [
                "enabled"
            ],
            "device_policy": [
                "policy"
            ],
            "mirroring_policy": [
                "policy"
            ],
            "set_execution_mode": [
                "mode"
            ],
            "execution_mode": [
                "mode"
            ],
            "executor_scope": [
                "e"
            ],
            "function_executor_type": [
                "executor_type"
            ],
            "is_async": [],
            "async_wait": [],
            "async_clear_error": [],
            "num_gpus": [],
            "enable_run_metadata": [],
            "disable_run_metadata": [],
            "enable_graph_collection": [],
            "disable_graph_collection": [],
            "export_run_metadata": [],
            "set_server_def": [
                "server_def"
            ],
            "add_function": [
                "fdef"
            ],
            "remove_function": [
                "name"
            ],
            "_tmp_in_graph_mode": [],
            "_EagerTensorCache": {
                "__init__": [
                    "self",
                    "max_items",
                    "max_tensor_size"
                ],
                "put": [
                    "self",
                    "key",
                    "value"
                ],
                "get": [
                    "self",
                    "key"
                ],
                "flush": [
                    "self"
                ]
            },
            "FunctionCallOptions": {
                "__init__": [
                    "self",
                    "executor_type",
                    "config_proto"
                ],
                "executor_type": [
                    "self",
                    "executor_type"
                ],
                "config_proto_serialized": [
                    "self",
                    "config"
                ]
            },
            "_TensorCaches": {
                "__init__": [
                    "self"
                ],
                "ones_rank_cache": [
                    "self"
                ],
                "zeros_cache": [
                    "self"
                ]
            },
            "_ThreadLocalData": {
                "__init__": [
                    "self"
                ]
            },
            "_ContextSwitchStack": {
                "__init__": [
                    "self",
                    "eager"
                ],
                "push": [
                    "self",
                    "is_building_function",
                    "enter_context_fn",
                    "device_stack"
                ],
                "pop": [
                    "self"
                ]
            },
            "LogicalDevice": {},
            "VirtualDeviceConfiguration": {
                "__new__": [
                    "cls",
                    "memory_limit"
                ]
            },
            "PhysicalDevice": {},
            "_AtomicCounter": {
                "__init__": [
                    "self"
                ],
                "increment_and_get": [
                    "self"
                ]
            },
            "_TensorCacheDeleter": {
                "__init__": [
                    "self",
                    "context_id"
                ],
                "__del__": [
                    "self"
                ]
            },
            "Context": {
                "__init__": [
                    "self",
                    "config",
                    "device_policy",
                    "execution_mode",
                    "server_def"
                ],
                "_set_global_seed": [
                    "self",
                    "seed"
                ],
                "_internal_operation_seed": [
                    "self"
                ],
                "_initialize_logical_devices": [
                    "self"
                ],
                "ensure_initialized": [
                    "self"
                ],
                "_clear_caches": [
                    "self"
                ],
                "set_server_def": [
                    "self",
                    "server_def",
                    "keep_alive_secs"
                ],
                "enable_collective_ops": [
                    "self",
                    "server_def"
                ],
                "configure_collective_ops": [
                    "self",
                    "collective_leader",
                    "scoped_allocator_enabled_ops",
                    "use_nccl_communication",
                    "device_filters"
                ],
                "_handle": [
                    "self"
                ],
                "_devices": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_mode": [
                    "self",
                    "mode"
                ],
                "executing_eagerly": [
                    "self"
                ],
                "ones_rank_cache": [
                    "self"
                ],
                "zeros_cache": [
                    "self"
                ],
                "scope_name": [
                    "self",
                    "s"
                ],
                "summary_writer": [
                    "self",
                    "writer"
                ],
                "summary_recording": [
                    "self",
                    "condition"
                ],
                "summary_recording_distribution_strategy": [
                    "self",
                    "condition"
                ],
                "summary_step": [
                    "self",
                    "step"
                ],
                "device_name": [
                    "self"
                ],
                "device_spec": [
                    "self"
                ],
                "_set_device": [
                    "self",
                    "device_name",
                    "device_spec"
                ],
                "device": [
                    "self",
                    "name"
                ],
                "devices": [
                    "self"
                ],
                "execution_mode": [
                    "self",
                    "mode"
                ],
                "is_async": [
                    "self"
                ],
                "executor": [
                    "self",
                    "e"
                ],
                "config": [
                    "self"
                ],
                "_compute_gpu_options": [
                    "self"
                ],
                "function_call_options": [
                    "self",
                    "options"
                ],
                "num_gpus": [
                    "self"
                ],
                "add_function": [
                    "self",
                    "fn"
                ],
                "add_function_def": [
                    "self",
                    "fdef"
                ],
                "remove_function": [
                    "self",
                    "name"
                ],
                "has_function": [
                    "self",
                    "name"
                ],
                "add_post_execution_callback": [
                    "self",
                    "callback"
                ],
                "clear_post_execution_callbacks": [
                    "self"
                ],
                "post_execution_callbacks": [
                    "self"
                ],
                "_initialize_physical_devices": [
                    "self"
                ],
                "list_physical_devices": [
                    "self",
                    "device_type"
                ],
                "_import_config": [
                    "self"
                ],
                "list_logical_devices": [
                    "self",
                    "device_type"
                ],
                "get_visible_devices": [
                    "self",
                    "device_type"
                ],
                "set_visible_devices": [
                    "self",
                    "devices",
                    "device_type"
                ],
                "get_memory_growth": [
                    "self",
                    "dev"
                ],
                "set_memory_growth": [
                    "self",
                    "dev",
                    "enable"
                ],
                "get_virtual_device_configuration": [
                    "self",
                    "dev"
                ],
                "set_virtual_device_configuration": [
                    "self",
                    "dev",
                    "virtual_devices"
                ],
                "optimizer_jit": [
                    "self",
                    "enabled"
                ],
                "get_optimizer_experimental_options": [
                    "self"
                ],
                "set_optimizer_experimental_options": [
                    "self",
                    "options"
                ],
                "intra_op_parallelism_threads": [
                    "self",
                    "num_threads"
                ],
                "inter_op_parallelism_threads": [
                    "self",
                    "num_threads"
                ],
                "soft_device_placement": [
                    "self",
                    "enabled"
                ],
                "log_device_placement": [
                    "self",
                    "enabled"
                ],
                "device_policy": [
                    "self",
                    "policy"
                ],
                "mirroring_policy": [
                    "self",
                    "policy"
                ],
                "enable_run_metadata": [
                    "self"
                ],
                "disable_run_metadata": [
                    "self"
                ],
                "enable_graph_collection": [
                    "self"
                ],
                "disable_graph_collection": [
                    "self"
                ],
                "export_run_metadata": [
                    "self"
                ],
                "context_switches": [
                    "self"
                ],
                "start_step": [
                    "self"
                ],
                "end_step": [
                    "self"
                ]
            },
            "_EagerDeviceContext": {
                "__init__": [
                    "self",
                    "ctx",
                    "device_name"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.eager.remote": {
            "connect_to_remote_host": [
                "remote_host",
                "job_name"
            ],
            "connect_to_cluster": [
                "cluster_spec_or_resolver",
                "job_name",
                "task_index",
                "protocol"
            ],
            "_strip_prefix": [
                "s",
                "prefix"
            ]
        },
        "tensorflow_core.python.eager.forwardprop": {
            "_forward_gradient": [
                "op_name",
                "attr_tuple",
                "inputs",
                "outputs",
                "tangents"
            ],
            "ForwardGradientAccumulator": {
                "__init__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "typ",
                    "value",
                    "traceback"
                ],
                "_push_accumulator": [
                    "self"
                ],
                "_pop_accumulator": [
                    "self"
                ],
                "watch": [
                    "self",
                    "tensor",
                    "tangents"
                ],
                "jvp": [
                    "self",
                    "target"
                ]
            }
        },
        "tensorflow_core.python.eager.graph_only_ops": {
            "graph_zeros_like": [
                "tensor"
            ],
            "graph_placeholder": [
                "dtype",
                "shape",
                "name"
            ]
        },
        "tensorflow_core.python.eager.backprop": {
            "op_attr_type": [
                "op_type",
                "attr_name"
            ],
            "make_attr": [
                "attr_type",
                "value"
            ],
            "_gradient_function": [
                "op_name",
                "attr_tuple",
                "num_inputs",
                "inputs",
                "outputs",
                "out_grads",
                "skip_input_indices"
            ],
            "_record_gradient": [
                "op_name",
                "inputs",
                "attrs",
                "results",
                "name"
            ],
            "implicit_val_and_grad": [
                "f"
            ],
            "implicit_grad": [
                "f"
            ],
            "_get_arg_spec": [
                "f",
                "params",
                "param_args"
            ],
            "gradients_function": [
                "f",
                "params"
            ],
            "_ensure_unique_tensor_objects": [
                "parameter_positions",
                "args"
            ],
            "val_and_grad_function": [
                "f",
                "params"
            ],
            "make_vjp": [
                "f",
                "params",
                "persistent"
            ],
            "flatten_nested_indexed_slices": [
                "grad"
            ],
            "aggregate_indexed_slices_gradients": [
                "grads"
            ],
            "_aggregate_grads": [
                "gradients"
            ],
            "_num_elements": [
                "grad"
            ],
            "_fast_fill": [
                "value",
                "shape",
                "dtype"
            ],
            "_zeros": [
                "shape",
                "dtype"
            ],
            "_ones": [
                "shape",
                "dtype"
            ],
            "_handle_or_self": [
                "x"
            ],
            "_MockOp": {
                "__init__": [
                    "self",
                    "attrs",
                    "inputs",
                    "outputs",
                    "typ",
                    "skip_input_indices"
                ],
                "get_attr": [
                    "self",
                    "attr"
                ],
                "_get_control_flow_context": [
                    "self"
                ]
            },
            "GradientTape": {
                "__init__": [
                    "self",
                    "persistent",
                    "watch_accessed_variables"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "typ",
                    "value",
                    "traceback"
                ],
                "_push_tape": [
                    "self"
                ],
                "_pop_tape": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "watch": [
                    "self",
                    "tensor"
                ],
                "stop_recording": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "watched_variables": [
                    "self"
                ],
                "gradient": [
                    "self",
                    "target",
                    "sources",
                    "output_gradients",
                    "unconnected_gradients"
                ],
                "jacobian": [
                    "self",
                    "target",
                    "sources",
                    "unconnected_gradients",
                    "parallel_iterations",
                    "experimental_use_pfor"
                ],
                "batch_jacobian": [
                    "self",
                    "target",
                    "source",
                    "unconnected_gradients",
                    "parallel_iterations",
                    "experimental_use_pfor"
                ]
            }
        },
        "tensorflow_core.python.eager.test": {
            "main": [
                "argv"
            ]
        },
        "tensorflow_core.python.eager.execution_callbacks": {
            "inf_nan_callback": [
                "op_type",
                "inputs",
                "attrs",
                "outputs",
                "op_name",
                "check_inf",
                "check_nan",
                "action"
            ],
            "inf_callback": [
                "op_type",
                "inputs",
                "attrs",
                "outputs",
                "op_name",
                "action"
            ],
            "nan_callback": [
                "op_type",
                "inputs",
                "attrs",
                "outputs",
                "op_name",
                "action"
            ],
            "add_execution_callback": [
                "callback"
            ],
            "clear_execution_callbacks": [],
            "seterr": [
                "inf_or_nan"
            ],
            "errstate": [
                "inf_or_nan"
            ],
            "ExecutionCallback": {},
            "InfOrNanError": {
                "__init__": [
                    "self",
                    "op_type",
                    "op_name",
                    "output_index",
                    "num_outputs",
                    "value"
                ],
                "_get_error_message": [
                    "self"
                ],
                "op_type": [
                    "self"
                ],
                "op_name": [
                    "self"
                ],
                "output_index": [
                    "self"
                ],
                "num_outputs": [
                    "self"
                ],
                "value": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.eager.executor": {
            "new_executor": [
                "enable_async"
            ],
            "Executor": {
                "__init__": [
                    "self",
                    "handle"
                ],
                "__del__": [
                    "self"
                ],
                "is_async": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "wait": [
                    "self"
                ],
                "clear_error": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.eager.cancellation": {
            "CancellationManager": {
                "__init__": [
                    "self"
                ],
                "is_cancelled": [
                    "self"
                ],
                "start_cancel": [
                    "self"
                ],
                "get_cancelable_function": [
                    "self",
                    "concrete_function"
                ],
                "__del__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.eager.function": {
            "_flat_shape_list": [],
            "_shape_less_specific_than": [
                "relaxed",
                "to_check"
            ],
            "_compatible_shapes": [
                "flat_relaxed",
                "flat_to_check"
            ],
            "common_shape": [
                "x",
                "y"
            ],
            "is_same_structure": [
                "structure1",
                "structure2",
                "check_values"
            ],
            "_parse_func_attrs": [
                "attributes"
            ],
            "_forward_name": [
                "n"
            ],
            "_backward_name": [
                "n"
            ],
            "_inference_name": [
                "n"
            ],
            "_deterministic_dict_values": [
                "dictionary"
            ],
            "_convert_numpy_inputs": [
                "inputs"
            ],
            "_convert_inputs_to_signature": [
                "inputs",
                "input_signature",
                "flat_input_signature"
            ],
            "register": [
                "func"
            ],
            "validate_signature": [
                "signature"
            ],
            "defun": [
                "func",
                "input_signature",
                "autograph",
                "experimental_autograph_options",
                "experimental_relax_shapes"
            ],
            "defun_with_attributes": [
                "func",
                "input_signature",
                "attributes",
                "autograph",
                "experimental_autograph_options",
                "experimental_relax_shapes"
            ],
            "class_method_to_instance_method": [
                "original_function",
                "instance"
            ],
            "CacheKey": {
                "__hash__": [
                    "self"
                ],
                "_fields_safe": [
                    "self"
                ],
                "_hash_fix": [
                    "self",
                    "elem"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "_InterpolateFunctionError": {
                "__init__": [
                    "self",
                    "top_level_func"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "typ",
                    "exc",
                    "tb"
                ]
            },
            "_EagerDefinedFunctionDeleter": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__del__": [
                    "self"
                ]
            },
            "_EagerDefinedFunction": {
                "__init__": [
                    "self",
                    "name",
                    "graph",
                    "inputs",
                    "outputs",
                    "attrs"
                ],
                "add_to_graph": [
                    "self",
                    "g"
                ],
                "stateful_ops": [
                    "self"
                ],
                "call": [
                    "self",
                    "ctx",
                    "args",
                    "cancellation_manager"
                ]
            },
            "_DelayedRewriteGradientFunctions": {
                "__init__": [
                    "self",
                    "func_graph",
                    "attrs",
                    "func_graph_deleter"
                ],
                "forward_backward": [
                    "self",
                    "num_doutputs"
                ],
                "_construct_forward_backward": [
                    "self",
                    "num_doutputs"
                ],
                "_rewrite_forward_and_call_backward": [
                    "self",
                    "op"
                ],
                "register": [
                    "self"
                ],
                "forward": [
                    "self"
                ],
                "backward": [
                    "self",
                    "outputs"
                ]
            },
            "_TapeGradientFunctions": {
                "__init__": [
                    "self",
                    "func_graph",
                    "attrs",
                    "func_graph_deleter"
                ],
                "_build_functions_for_outputs": [
                    "self",
                    "outputs"
                ],
                "forward": [
                    "self"
                ],
                "backward": [
                    "self",
                    "outputs"
                ]
            },
            "_FirstOrderTapeGradientFunctions": {
                "__init__": [
                    "self",
                    "func_graph",
                    "attrs",
                    "func_graph_deleter"
                ],
                "_forward_and_backward_functions": [
                    "self"
                ]
            },
            "_HigherOrderTapeGradientFunctions": {
                "_forward_and_backward_functions": [
                    "self"
                ]
            },
            "_PossibleTapeGradientTypes": {},
            "ConcreteFunction": {
                "__init__": [
                    "self",
                    "func_graph",
                    "attrs",
                    "signature",
                    "shared_func_graph"
                ],
                "__call__": [
                    "self"
                ],
                "_call_impl": [
                    "self",
                    "args",
                    "kwargs",
                    "cancellation_manager"
                ],
                "_filtered_call": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "_call_flat": [
                    "self",
                    "args",
                    "captured_inputs",
                    "cancellation_manager"
                ],
                "_experimental_with_cancellation_manager": [
                    "self",
                    "cancellation_manager"
                ],
                "name": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "structured_input_signature": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "structured_outputs": [
                    "self"
                ],
                "captured_inputs": [
                    "self"
                ],
                "function_def": [
                    "self"
                ],
                "output_shapes": [
                    "self"
                ],
                "output_dtypes": [
                    "self"
                ],
                "add_to_graph": [
                    "self",
                    "g"
                ],
                "add_gradient_functions_to_graph": [
                    "self",
                    "g"
                ],
                "_register_delayed_rewrite_gradient": [
                    "self"
                ],
                "_select_forward_and_backward_functions": [
                    "self",
                    "args"
                ],
                "_build_call_outputs": [
                    "self",
                    "result"
                ]
            },
            "FunctionSpec": {
                "from_function_and_signature": [
                    "python_function",
                    "input_signature"
                ],
                "__init__": [
                    "self",
                    "fullargspec",
                    "is_method",
                    "args_to_prepend",
                    "kwargs_to_include",
                    "input_signature"
                ],
                "fullargspec": [
                    "self"
                ],
                "is_method": [
                    "self"
                ],
                "args_to_prepend": [
                    "self"
                ],
                "kwargs_to_include": [
                    "self"
                ],
                "input_signature": [
                    "self"
                ],
                "flat_input_signature": [
                    "self"
                ],
                "canonicalize_function_inputs": [
                    "self"
                ]
            },
            "FunctionCache": {
                "__init__": [
                    "self"
                ],
                "all_values": [
                    "self"
                ]
            },
            "Function": {
                "__init__": [
                    "self",
                    "python_function",
                    "name",
                    "input_signature",
                    "attributes",
                    "autograph",
                    "autograph_options",
                    "experimental_relax_shapes",
                    "capture_by_value"
                ],
                "__call__": [
                    "self"
                ],
                "python_function": [
                    "self"
                ],
                "function_spec": [
                    "self"
                ],
                "input_signature": [
                    "self"
                ],
                "flat_input_signature": [
                    "self"
                ],
                "_get_concrete_function_internal_garbage_collected": [
                    "self"
                ],
                "_get_concrete_function_internal": [
                    "self"
                ],
                "get_concrete_function": [
                    "self"
                ],
                "__get__": [
                    "self",
                    "instance",
                    "owner"
                ],
                "_cache_key": [
                    "self",
                    "args",
                    "kwargs",
                    "include_tensor_ranks_only"
                ],
                "_create_graph_function": [
                    "self",
                    "args",
                    "kwargs",
                    "override_flat_arg_shapes"
                ],
                "_define_function_with_shape_relaxation": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "_maybe_define_function": [
                    "self",
                    "args",
                    "kwargs"
                ]
            },
            "TfMethodTarget": {
                "__init__": [
                    "self",
                    "target",
                    "original_python_function"
                ],
                "target": [
                    "self"
                ],
                "call": [
                    "self",
                    "args",
                    "kwargs"
                ]
            },
            "_FunctionGarbageCollector": {
                "__init__": [
                    "self",
                    "cache"
                ],
                "__del__": [
                    "self"
                ]
            },
            "ConcreteFunctionGarbageCollector": {
                "__init__": [
                    "self",
                    "func_graph"
                ],
                "release": [
                    "self"
                ],
                "__del__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.eager.lift_to_graph": {
            "_as_operation": [
                "op_or_tensor"
            ],
            "_constant_inputs": [
                "op_or_tensor"
            ],
            "_copy_non_source": [
                "op",
                "graph",
                "op_map",
                "base_graph"
            ],
            "_copy_source": [
                "s",
                "graph",
                "op_map",
                "handle_captures",
                "inverse_captures",
                "base_graph"
            ],
            "lift_to_graph": [
                "tensors",
                "graph",
                "sources",
                "disallowed_placeholders",
                "add_sources",
                "handle_captures",
                "base_graph",
                "op_map"
            ]
        },
        "tensorflow_core.python.eager.profiler": {
            "start": [],
            "stop": [],
            "maybe_create_event_file": [
                "logdir"
            ],
            "save": [
                "logdir",
                "result"
            ],
            "start_profiler_server": [
                "port"
            ],
            "ProfilerAlreadyRunningError": {},
            "ProfilerNotRunningError": {},
            "Profiler": {
                "__init__": [
                    "self",
                    "logdir"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "typ",
                    "value",
                    "tb"
                ]
            }
        },
        "tensorflow_core.python.eager.monitoring": {
            "Metric": {
                "__init__": [
                    "self",
                    "metric_name",
                    "metric_methods",
                    "label_length"
                ],
                "__del__": [
                    "self"
                ],
                "get_cell": [
                    "self"
                ]
            },
            "CounterCell": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "increase_by": [
                    "self",
                    "value"
                ],
                "value": [
                    "self"
                ]
            },
            "Counter": {
                "__init__": [
                    "self",
                    "name",
                    "description"
                ],
                "get_cell": [
                    "self"
                ]
            },
            "IntGaugeCell": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "set": [
                    "self",
                    "value"
                ],
                "value": [
                    "self"
                ]
            },
            "IntGauge": {
                "__init__": [
                    "self",
                    "name",
                    "description"
                ],
                "get_cell": [
                    "self"
                ]
            },
            "StringGaugeCell": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "set": [
                    "self",
                    "value"
                ],
                "value": [
                    "self"
                ]
            },
            "StringGauge": {
                "__init__": [
                    "self",
                    "name",
                    "description"
                ],
                "get_cell": [
                    "self"
                ]
            },
            "BoolGaugeCell": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "set": [
                    "self",
                    "value"
                ],
                "value": [
                    "self"
                ]
            },
            "BoolGauge": {
                "__init__": [
                    "self",
                    "name",
                    "description"
                ],
                "get_cell": [
                    "self"
                ]
            },
            "SamplerCell": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "add": [
                    "self",
                    "value"
                ],
                "value": [
                    "self"
                ]
            },
            "Buckets": {
                "__init__": [
                    "self",
                    "buckets"
                ],
                "__del__": [
                    "self"
                ]
            },
            "ExponentialBuckets": {
                "__init__": [
                    "self",
                    "scale",
                    "growth_factor",
                    "bucket_count"
                ]
            },
            "Sampler": {
                "__init__": [
                    "self",
                    "name",
                    "buckets",
                    "description"
                ],
                "get_cell": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.eager.tape": {
            "push_new_tape": [
                "persistent",
                "watch_accessed_variables"
            ],
            "push_tape": [
                "tape"
            ],
            "watch": [
                "tape",
                "tensor"
            ],
            "watch_variable": [
                "tape",
                "variable"
            ],
            "variable_accessed": [
                "variable"
            ],
            "variables_accessed": [
                "variables"
            ],
            "pop_tape": [
                "tape"
            ],
            "stop_recording": [],
            "should_record": [
                "tensors"
            ],
            "record_operation": [
                "op_type",
                "output_tensors",
                "input_tensors",
                "backward_function"
            ],
            "delete_trace": [
                "tensor_id"
            ],
            "could_possibly_record": [],
            "Tape": {
                "__init__": [
                    "self",
                    "tape"
                ],
                "watched_variables": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.eager": {},
        "tensorflow_core.python.eager.def_function": {
            "run_functions_eagerly": [
                "run_eagerly"
            ],
            "function": [
                "func",
                "input_signature",
                "autograph",
                "experimental_autograph_options",
                "experimental_relax_shapes",
                "experimental_compile"
            ],
            "UnliftedInitializerVariable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "caching_device",
                    "name",
                    "dtype",
                    "constraint",
                    "add_initializers_to",
                    "lifted_initializer_graph",
                    "synchronization",
                    "aggregation",
                    "shape"
                ]
            },
            "FunctionDeleter": {
                "__init__": [
                    "self",
                    "func_graph"
                ],
                "__del__": [
                    "self"
                ]
            },
            "Function": {
                "__init__": [
                    "self",
                    "python_function",
                    "name",
                    "input_signature",
                    "autograph",
                    "experimental_autograph_options",
                    "experimental_relax_shapes",
                    "experimental_compile"
                ],
                "_defun_with_scope": [
                    "self",
                    "scope"
                ],
                "_defun": [
                    "self",
                    "fn"
                ],
                "_initialize": [
                    "self",
                    "args",
                    "kwds",
                    "add_initializers_to"
                ],
                "_decorate": [
                    "self",
                    "decorator"
                ],
                "__call__": [
                    "self"
                ],
                "python_function": [
                    "self"
                ],
                "input_signature": [
                    "self"
                ],
                "function_spec": [
                    "self"
                ],
                "_initialize_uninitialized_variables": [
                    "self",
                    "initializer_map"
                ],
                "get_initialization_function": [
                    "self"
                ],
                "_list_all_concrete_functions_for_serialization": [
                    "self"
                ],
                "get_concrete_function": [
                    "self"
                ],
                "__get__": [
                    "self",
                    "instance",
                    "owner"
                ]
            }
        },
        "tensorflow_core.python.eager.execute": {
            "quick_execute": [
                "op_name",
                "num_outputs",
                "inputs",
                "attrs",
                "ctx",
                "name"
            ],
            "execute_with_cancellation": [
                "op_name",
                "num_outputs",
                "inputs",
                "attrs",
                "ctx",
                "cancellation_manager",
                "name"
            ],
            "execute_with_callbacks": [
                "op_name",
                "num_outputs",
                "inputs",
                "attrs",
                "ctx",
                "name"
            ],
            "record_gradient": [
                "unused_op_name",
                "unused_inputs",
                "unused_attrs",
                "unused_results",
                "unused_name"
            ],
            "make_float": [
                "v",
                "arg_name"
            ],
            "make_int": [
                "v",
                "arg_name"
            ],
            "make_str": [
                "v",
                "arg_name"
            ],
            "make_bool": [
                "v",
                "arg_name"
            ],
            "make_type": [
                "v",
                "arg_name"
            ],
            "make_shape": [
                "v",
                "arg_name"
            ],
            "make_tensor": [
                "v",
                "arg_name"
            ],
            "args_to_matching_eager": [
                "l",
                "ctx",
                "default_dtype"
            ],
            "convert_to_mixed_eager_tensors": [
                "values",
                "ctx"
            ],
            "args_to_mixed_eager_tensors": [
                "lists",
                "ctx"
            ]
        },
        "tensorflow_core.python.eager.memory_tests.memory_test_util": {
            "assert_no_leak": [
                "f",
                "num_iters",
                "increase_threshold_absolute_mb"
            ],
            "memory_profiler_is_available": []
        },
        "tensorflow_core.python.eager.memory_tests": {},
        "tensorflow_core.python.profiler.model_analyzer": {
            "_graph_string": [
                "graph"
            ],
            "_build_options": [
                "options"
            ],
            "_build_advisor_options": [
                "options"
            ],
            "profile": [
                "graph",
                "run_meta",
                "op_log",
                "cmd",
                "options"
            ],
            "advise": [
                "graph",
                "run_meta",
                "options"
            ],
            "Profiler": {
                "__init__": [
                    "self",
                    "graph",
                    "op_log"
                ],
                "__del__": [
                    "self"
                ],
                "add_step": [
                    "self",
                    "step",
                    "run_meta"
                ],
                "profile_python": [
                    "self",
                    "options"
                ],
                "profile_operations": [
                    "self",
                    "options"
                ],
                "profile_name_scope": [
                    "self",
                    "options"
                ],
                "profile_graph": [
                    "self",
                    "options"
                ],
                "advise": [
                    "self",
                    "options"
                ],
                "serialize_to_string": [
                    "self"
                ],
                "_write_profile": [
                    "self",
                    "filename"
                ]
            }
        },
        "tensorflow_core.python.profiler.option_builder": {
            "ProfileOptionBuilder": {
                "__init__": [
                    "self",
                    "options"
                ],
                "trainable_variables_parameter": [],
                "float_operation": [],
                "time_and_memory": [
                    "min_micros",
                    "min_bytes",
                    "min_accelerator_micros",
                    "min_cpu_micros",
                    "min_peak_bytes",
                    "min_residual_bytes",
                    "min_output_bytes"
                ],
                "build": [
                    "self"
                ],
                "with_max_depth": [
                    "self",
                    "max_depth"
                ],
                "with_min_memory": [
                    "self",
                    "min_bytes",
                    "min_peak_bytes",
                    "min_residual_bytes",
                    "min_output_bytes"
                ],
                "with_min_execution_time": [
                    "self",
                    "min_micros",
                    "min_accelerator_micros",
                    "min_cpu_micros"
                ],
                "with_min_parameters": [
                    "self",
                    "min_params"
                ],
                "with_min_occurrence": [
                    "self",
                    "min_occurrence"
                ],
                "with_min_float_operations": [
                    "self",
                    "min_float_ops"
                ],
                "with_accounted_types": [
                    "self",
                    "account_type_regexes"
                ],
                "with_node_names": [
                    "self",
                    "start_name_regexes",
                    "show_name_regexes",
                    "hide_name_regexes",
                    "trim_name_regexes"
                ],
                "account_displayed_op_only": [
                    "self",
                    "is_true"
                ],
                "with_empty_output": [
                    "self"
                ],
                "with_stdout_output": [
                    "self"
                ],
                "with_file_output": [
                    "self",
                    "outfile"
                ],
                "with_timeline_output": [
                    "self",
                    "timeline_file"
                ],
                "with_pprof_output": [
                    "self",
                    "pprof_file"
                ],
                "order_by": [
                    "self",
                    "attribute"
                ],
                "select": [
                    "self",
                    "attributes"
                ],
                "with_step": [
                    "self",
                    "step"
                ]
            }
        },
        "tensorflow_core.python.profiler.profile_context": {
            "_profiled_init": [
                "self",
                "target",
                "graph",
                "config"
            ],
            "_profiled_run": [
                "self",
                "fetches",
                "feed_dict",
                "options",
                "run_metadata"
            ],
            "ProfileContext": {
                "__init__": [
                    "self",
                    "profile_dir",
                    "trace_steps",
                    "dump_steps",
                    "enabled",
                    "debug"
                ],
                "get_profiles": [
                    "self",
                    "cmd"
                ],
                "add_auto_profiling": [
                    "self",
                    "cmd",
                    "options",
                    "profile_steps"
                ],
                "profiler": [
                    "self"
                ],
                "trace_next_step": [
                    "self"
                ],
                "dump_next_step": [
                    "self"
                ],
                "_is_fast_path": [
                    "self",
                    "step"
                ],
                "_should_trace": [
                    "self",
                    "step",
                    "graph",
                    "fetches"
                ],
                "_maybe_dump": [
                    "self",
                    "step"
                ],
                "_dump_file": [
                    "self",
                    "pb",
                    "basename"
                ],
                "_new_step": [
                    "self"
                ],
                "_profile_candidates": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exec_type",
                    "exec_value",
                    "exec_tb"
                ]
            }
        },
        "tensorflow_core.python.profiler.tfprof_logger": {
            "_fill_missing_graph_shape": [
                "graph",
                "run_meta"
            ],
            "_str_id": [
                "s",
                "str_to_id"
            ],
            "_get_logged_ops": [
                "graph",
                "run_meta",
                "add_trace",
                "add_trainable_var"
            ],
            "merge_default_with_oplog": [
                "graph",
                "op_log",
                "run_meta",
                "add_trace",
                "add_trainable_var"
            ],
            "write_op_log": [
                "graph",
                "log_dir",
                "op_log",
                "run_meta",
                "add_trace"
            ]
        },
        "tensorflow_core.python.profiler.profiler": {},
        "tensorflow_core.python.profiler": {},
        "tensorflow_core.python.profiler.internal.flops_registry": {
            "_zero_flops": [
                "graph",
                "node"
            ],
            "_list_product": [
                "lst"
            ],
            "_unary_op_flops": [
                "graph",
                "node",
                "ops_per_element"
            ],
            "_reciprocal_flops": [
                "graph",
                "node"
            ],
            "_square_flops": [
                "graph",
                "node"
            ],
            "_rsqrt_flops": [
                "graph",
                "node"
            ],
            "_log_flops": [
                "graph",
                "node"
            ],
            "_neg_flops": [
                "graph",
                "node"
            ],
            "_assign_sub_flops": [
                "graph",
                "node"
            ],
            "_assign_add_flops": [
                "graph",
                "node"
            ],
            "_l2_loss_flops": [
                "graph",
                "node"
            ],
            "_softmax_flops": [
                "graph",
                "node"
            ],
            "_binary_per_element_op_flops": [
                "graph",
                "node",
                "ops_per_element"
            ],
            "_add_flops": [
                "graph",
                "node"
            ],
            "_sub_flops": [
                "graph",
                "node"
            ],
            "_mul_flops": [
                "graph",
                "node"
            ],
            "_real_div_flops": [
                "graph",
                "node"
            ],
            "_maximum_flops": [
                "graph",
                "node"
            ],
            "_minimum_flops": [
                "graph",
                "node"
            ],
            "_pow_flops": [
                "graph",
                "node"
            ],
            "_rsqrt_grad_flops": [
                "graph",
                "node"
            ],
            "_greater_equal_flops": [
                "graph",
                "node"
            ],
            "_greater_flops": [
                "graph",
                "node"
            ],
            "_less_equal_flops": [
                "graph",
                "node"
            ],
            "_less_flops": [
                "graph",
                "node"
            ],
            "_equal_flops": [
                "graph",
                "node"
            ],
            "_not_equal_flops": [
                "graph",
                "node"
            ],
            "_squared_difference_flops": [
                "graph",
                "node"
            ],
            "_reduction_op_flops": [
                "graph",
                "node",
                "reduce_flops",
                "finalize_flops"
            ],
            "_mean_flops": [
                "graph",
                "node"
            ],
            "_sum_flops": [
                "graph",
                "node"
            ],
            "_arg_max_flops": [
                "graph",
                "node"
            ],
            "_arg_min_flops": [
                "graph",
                "node"
            ],
            "_bias_add_grad_flops": [
                "graph",
                "node"
            ],
            "_verify_conv_data_format": [
                "node"
            ],
            "_pool_flops": [
                "graph",
                "node"
            ],
            "_avg_pool_flops": [
                "graph",
                "node"
            ],
            "_max_pool_flops": [
                "graph",
                "node"
            ],
            "_avg_pool_grad_flops": [
                "graph",
                "node"
            ],
            "_max_pool_grad_flops": [
                "graph",
                "node"
            ],
            "_conv_2d_backprop_input_flops": [
                "graph",
                "node"
            ],
            "_conv_2d_backprop_filter_flops": [
                "graph",
                "node"
            ],
            "_add_n_flops": [
                "graph",
                "node"
            ]
        },
        "tensorflow_core.python.profiler.internal": {},
        "tensorflow_core.python.training.training": {},
        "tensorflow_core.python.training.gradient_descent": {
            "GradientDescentOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "use_locking",
                    "name"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle"
                ],
                "_resource_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "handle",
                    "indices"
                ],
                "_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "var"
                ],
                "_prepare": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.slot_creator": {
            "_create_slot_var": [
                "primary",
                "val",
                "scope",
                "validate_shape",
                "shape",
                "dtype"
            ],
            "create_slot": [
                "primary",
                "val",
                "name",
                "colocate_with_primary"
            ],
            "create_slot_with_initializer": [
                "primary",
                "initializer",
                "shape",
                "dtype",
                "name",
                "colocate_with_primary"
            ],
            "create_zeros_slot": [
                "primary",
                "name",
                "dtype",
                "colocate_with_primary"
            ]
        },
        "tensorflow_core.python.training.saver": {
            "_get_saver_or_default": [],
            "import_meta_graph": [
                "meta_graph_or_file",
                "clear_devices",
                "import_scope"
            ],
            "_import_meta_graph_with_return_elements": [
                "meta_graph_or_file",
                "clear_devices",
                "import_scope",
                "return_elements"
            ],
            "_create_saver_from_imported_meta_graph": [
                "meta_graph_def",
                "import_scope",
                "imported_vars"
            ],
            "export_meta_graph": [
                "filename",
                "meta_info_def",
                "graph_def",
                "saver_def",
                "collection_list",
                "as_text",
                "graph",
                "export_scope",
                "clear_devices",
                "clear_extraneous_savers",
                "strip_default_attrs",
                "save_debug_info"
            ],
            "_wrap_restore_error_with_msg": [
                "err",
                "extra_verbiage"
            ],
            "object_graph_key_mapping": [
                "checkpoint_path"
            ],
            "saver_from_object_based_checkpoint": [
                "checkpoint_path",
                "var_list",
                "builder",
                "names_to_keys",
                "cached_saver"
            ],
            "BaseSaverBuilder": {
                "__init__": [
                    "self",
                    "write_version"
                ],
                "save_op": [
                    "self",
                    "filename_tensor",
                    "saveables"
                ],
                "bulk_restore": [
                    "self",
                    "filename_tensor",
                    "saveables",
                    "preferred_shard",
                    "restore_sequentially"
                ],
                "restore_op": [
                    "self",
                    "filename_tensor",
                    "saveable",
                    "preferred_shard"
                ],
                "sharded_filename": [
                    "self",
                    "filename_tensor",
                    "shard",
                    "num_shards"
                ],
                "_AddSaveOps": [
                    "self",
                    "filename_tensor",
                    "saveables"
                ],
                "_AddShardedSaveOpsForV2": [
                    "self",
                    "checkpoint_prefix",
                    "per_device"
                ],
                "_AddShardedSaveOps": [
                    "self",
                    "filename_tensor",
                    "per_device"
                ],
                "_AddRestoreOps": [
                    "self",
                    "filename_tensor",
                    "saveables",
                    "restore_sequentially",
                    "reshape",
                    "preferred_shard",
                    "name"
                ],
                "_AddShardedRestoreOps": [
                    "self",
                    "filename_tensor",
                    "per_device",
                    "restore_sequentially",
                    "reshape"
                ],
                "_GroupByDevices": [
                    "self",
                    "saveables"
                ],
                "build": [
                    "self",
                    "names_to_saveables",
                    "reshape",
                    "sharded",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "name",
                    "restore_sequentially",
                    "filename"
                ],
                "_build_internal": [
                    "self",
                    "names_to_saveables",
                    "reshape",
                    "sharded",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "name",
                    "restore_sequentially",
                    "filename",
                    "build_save",
                    "build_restore"
                ]
            },
            "BulkSaverBuilder": {
                "bulk_restore": [
                    "self",
                    "filename_tensor",
                    "saveables",
                    "preferred_shard",
                    "restore_sequentially"
                ]
            },
            "Saver": {
                "__init__": [
                    "self",
                    "var_list",
                    "reshape",
                    "sharded",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "name",
                    "restore_sequentially",
                    "saver_def",
                    "builder",
                    "defer_build",
                    "allow_empty",
                    "write_version",
                    "pad_step_number",
                    "save_relative_paths",
                    "filename"
                ],
                "build": [
                    "self"
                ],
                "_build_eager": [
                    "self",
                    "checkpoint_path",
                    "build_save",
                    "build_restore"
                ],
                "_build": [
                    "self",
                    "checkpoint_path",
                    "build_save",
                    "build_restore"
                ],
                "_check_saver_def": [
                    "self"
                ],
                "_CheckpointFilename": [
                    "self",
                    "p"
                ],
                "_RecordLastCheckpoint": [
                    "self",
                    "latest_save_path"
                ],
                "_MaybeDeleteOldCheckpoints": [
                    "self",
                    "meta_graph_suffix"
                ],
                "as_saver_def": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "saver_def",
                    "import_scope"
                ],
                "last_checkpoints": [
                    "self"
                ],
                "set_last_checkpoints": [
                    "self",
                    "last_checkpoints"
                ],
                "set_last_checkpoints_with_time": [
                    "self",
                    "last_checkpoints_with_time"
                ],
                "recover_last_checkpoints": [
                    "self",
                    "checkpoint_paths"
                ],
                "save": [
                    "self",
                    "sess",
                    "save_path",
                    "global_step",
                    "latest_filename",
                    "meta_graph_suffix",
                    "write_meta_graph",
                    "write_state",
                    "strip_default_attrs",
                    "save_debug_info"
                ],
                "export_meta_graph": [
                    "self",
                    "filename",
                    "collection_list",
                    "as_text",
                    "export_scope",
                    "clear_devices",
                    "clear_extraneous_savers",
                    "strip_default_attrs",
                    "save_debug_info"
                ],
                "restore": [
                    "self",
                    "sess",
                    "save_path"
                ],
                "_add_collection_def": [
                    "meta_graph_def",
                    "key",
                    "export_scope"
                ]
            }
        },
        "tensorflow_core.python.training.queue_runner_impl": {
            "add_queue_runner": [
                "qr",
                "collection"
            ],
            "start_queue_runners": [
                "sess",
                "coord",
                "daemon",
                "start",
                "collection"
            ],
            "QueueRunner": {
                "__init__": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "queue_closed_exception_types",
                    "queue_runner_def",
                    "import_scope"
                ],
                "_init_from_args": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "queue_closed_exception_types"
                ],
                "_init_from_proto": [
                    "self",
                    "queue_runner_def",
                    "import_scope"
                ],
                "queue": [
                    "self"
                ],
                "enqueue_ops": [
                    "self"
                ],
                "close_op": [
                    "self"
                ],
                "cancel_op": [
                    "self"
                ],
                "queue_closed_exception_types": [
                    "self"
                ],
                "exceptions_raised": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_run": [
                    "self",
                    "sess",
                    "enqueue_op",
                    "coord"
                ],
                "_close_on_stop": [
                    "self",
                    "sess",
                    "cancel_op",
                    "coord"
                ],
                "create_threads": [
                    "self",
                    "sess",
                    "coord",
                    "daemon",
                    "start"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "queue_runner_def",
                    "import_scope"
                ]
            }
        },
        "tensorflow_core.python.training.queue_runner": {},
        "tensorflow_core.python.training.adam": {
            "AdamOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_get_beta_accumulators": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse_shared": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "scatter_add"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_scatter_add": [
                    "self",
                    "x",
                    "i",
                    "v"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ],
                "_finish": [
                    "self",
                    "update_ops",
                    "name_scope"
                ]
            }
        },
        "tensorflow_core.python.training.checkpoint_management": {
            "_GetCheckpointFilename": [
                "save_dir",
                "latest_filename"
            ],
            "generate_checkpoint_state_proto": [
                "save_dir",
                "model_checkpoint_path",
                "all_model_checkpoint_paths",
                "all_model_checkpoint_timestamps",
                "last_preserved_timestamp"
            ],
            "update_checkpoint_state": [
                "save_dir",
                "model_checkpoint_path",
                "all_model_checkpoint_paths",
                "latest_filename",
                "all_model_checkpoint_timestamps",
                "last_preserved_timestamp"
            ],
            "update_checkpoint_state_internal": [
                "save_dir",
                "model_checkpoint_path",
                "all_model_checkpoint_paths",
                "latest_filename",
                "save_relative_paths",
                "all_model_checkpoint_timestamps",
                "last_preserved_timestamp"
            ],
            "get_checkpoint_state": [
                "checkpoint_dir",
                "latest_filename"
            ],
            "_prefix_to_checkpoint_path": [
                "prefix",
                "format_version"
            ],
            "latest_checkpoint": [
                "checkpoint_dir",
                "latest_filename"
            ],
            "checkpoint_exists_internal": [
                "checkpoint_prefix"
            ],
            "checkpoint_exists": [
                "checkpoint_prefix"
            ],
            "get_checkpoint_mtimes": [
                "checkpoint_prefixes"
            ],
            "remove_checkpoint": [
                "checkpoint_prefix",
                "checkpoint_format_version",
                "meta_graph_suffix"
            ],
            "_delete_file_if_exists": [
                "filespec"
            ],
            "meta_graph_filename": [
                "checkpoint_filename",
                "meta_graph_suffix"
            ],
            "CheckpointManager": {
                "__init__": [
                    "self",
                    "checkpoint",
                    "directory",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "checkpoint_name"
                ],
                "latest_checkpoint": [
                    "self"
                ],
                "checkpoints": [
                    "self"
                ],
                "_sweep": [
                    "self"
                ],
                "_record_state": [
                    "self"
                ],
                "_prefix": [
                    "self"
                ],
                "save": [
                    "self",
                    "checkpoint_number"
                ]
            }
        },
        "tensorflow_core.python.training.distribute": {},
        "tensorflow_core.python.training.monitored_session": {
            "_create_monitored_session_with_worker_context": [
                "worker_context",
                "scaffold",
                "checkpoint_dir",
                "hooks",
                "chief_only_hooks",
                "save_checkpoint_secs",
                "save_summaries_steps",
                "save_summaries_secs",
                "config",
                "stop_grace_period_secs",
                "log_step_count_steps",
                "max_wait_secs",
                "save_checkpoint_steps",
                "summary_dir"
            ],
            "MonitoredTrainingSession": [
                "master",
                "is_chief",
                "checkpoint_dir",
                "scaffold",
                "hooks",
                "chief_only_hooks",
                "save_checkpoint_secs",
                "save_summaries_steps",
                "save_summaries_secs",
                "config",
                "stop_grace_period_secs",
                "log_step_count_steps",
                "max_wait_secs",
                "save_checkpoint_steps",
                "summary_dir"
            ],
            "Scaffold": {
                "__init__": [
                    "self",
                    "init_op",
                    "init_feed_dict",
                    "init_fn",
                    "ready_op",
                    "ready_for_local_init_op",
                    "local_init_op",
                    "summary_op",
                    "saver",
                    "copy_from_scaffold"
                ],
                "finalize": [
                    "self"
                ],
                "init_fn": [
                    "self"
                ],
                "init_op": [
                    "self"
                ],
                "ready_op": [
                    "self"
                ],
                "ready_for_local_init_op": [
                    "self"
                ],
                "local_init_op": [
                    "self"
                ],
                "summary_op": [
                    "self"
                ],
                "saver": [
                    "self"
                ],
                "init_feed_dict": [
                    "self"
                ],
                "get_or_default": [
                    "arg_name",
                    "collection_key",
                    "default_constructor"
                ],
                "default_local_init_op": []
            },
            "SessionCreator": {
                "create_session": [
                    "self"
                ]
            },
            "ChiefSessionCreator": {
                "__init__": [
                    "self",
                    "scaffold",
                    "master",
                    "config",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path"
                ],
                "_get_session_manager": [
                    "self"
                ],
                "create_session": [
                    "self"
                ]
            },
            "WorkerSessionCreator": {
                "__init__": [
                    "self",
                    "scaffold",
                    "master",
                    "config",
                    "max_wait_secs"
                ],
                "_get_session_manager": [
                    "self"
                ],
                "create_session": [
                    "self"
                ]
            },
            "_MonitoredSession": {
                "__init__": [
                    "self",
                    "session_creator",
                    "hooks",
                    "should_recover",
                    "stop_grace_period_secs"
                ],
                "graph": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "run_step_fn": [
                    "self",
                    "step_fn"
                ],
                "should_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exception_type",
                    "exception_value",
                    "traceback"
                ],
                "_close_internal": [
                    "self",
                    "exception_type"
                ],
                "_is_closed": [
                    "self"
                ],
                "_tf_sess": [
                    "self"
                ]
            },
            "MonitoredSession": {
                "__init__": [
                    "self",
                    "session_creator",
                    "hooks",
                    "stop_grace_period_secs"
                ]
            },
            "SingularMonitoredSession": {
                "__init__": [
                    "self",
                    "hooks",
                    "scaffold",
                    "master",
                    "config",
                    "checkpoint_dir",
                    "stop_grace_period_secs",
                    "checkpoint_filename_with_path"
                ],
                "raw_session": [
                    "self"
                ]
            },
            "_WrappedSession": {
                "__init__": [
                    "self",
                    "sess"
                ],
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "should_stop": [
                    "self"
                ],
                "_check_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "run_step_fn": [
                    "self",
                    "step_fn",
                    "raw_session",
                    "run_with_hooks"
                ]
            },
            "_RecoverableSession": {
                "__init__": [
                    "self",
                    "sess_creator"
                ],
                "_create_session": [
                    "self"
                ],
                "_check_stop": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "run_step_fn": [
                    "self",
                    "step_fn",
                    "raw_session",
                    "run_with_hooks"
                ]
            },
            "_CoordinatedSession": {
                "__init__": [
                    "self",
                    "sess",
                    "coord",
                    "stop_grace_period_secs"
                ],
                "_check_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            },
            "_HookedSession": {
                "__init__": [
                    "self",
                    "sess",
                    "hooks"
                ],
                "_check_stop": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_call_hook_before_run": [
                    "self",
                    "run_context",
                    "fetch_dict",
                    "user_feed_dict",
                    "options"
                ],
                "_raise_if_feeds_intersects": [
                    "self",
                    "feeds1",
                    "feeds2",
                    "message"
                ],
                "_merge_run_options": [
                    "self",
                    "options",
                    "incoming_options"
                ]
            }
        },
        "tensorflow_core.python.training.proximal_adagrad": {
            "ProximalAdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.python.training.adadelta": {
            "AdadeltaOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "rho",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.python.training.training_ops": {},
        "tensorflow_core.python.training.distribution_strategy_context": {},
        "tensorflow_core.python.training.training_util": {
            "global_step": [
                "sess",
                "global_step_tensor"
            ],
            "get_global_step": [
                "graph"
            ],
            "create_global_step": [
                "graph"
            ],
            "get_or_create_global_step": [
                "graph"
            ],
            "assert_global_step": [
                "global_step_tensor"
            ],
            "_get_global_step_read": [
                "graph"
            ],
            "_get_or_create_global_step_read": [
                "graph"
            ],
            "_increment_global_step": [
                "increment",
                "graph"
            ]
        },
        "tensorflow_core.python.training.basic_loops": {
            "basic_train_loop": [
                "supervisor",
                "train_step_fn",
                "args",
                "kwargs",
                "master"
            ]
        },
        "tensorflow_core.python.training.saver_test_utils": {
            "CheckpointedOp": {
                "__init__": [
                    "self",
                    "name",
                    "table_ref"
                ],
                "name": [
                    "self"
                ],
                "saveable": [
                    "self"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "default"
                ],
                "keys": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_export": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.session_manager": {
            "_maybe_name": [
                "obj"
            ],
            "_ready": [
                "op",
                "sess",
                "msg"
            ],
            "SessionManager": {
                "__init__": [
                    "self",
                    "local_init_op",
                    "ready_op",
                    "ready_for_local_init_op",
                    "graph",
                    "recovery_wait_secs",
                    "local_init_run_options"
                ],
                "_restore_checkpoint": [
                    "self",
                    "master",
                    "saver",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config"
                ],
                "prepare_session": [
                    "self",
                    "master",
                    "init_op",
                    "saver",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config",
                    "init_feed_dict",
                    "init_fn"
                ],
                "recover_session": [
                    "self",
                    "master",
                    "saver",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config"
                ],
                "wait_for_session": [
                    "self",
                    "master",
                    "config",
                    "max_wait_secs"
                ],
                "_safe_close": [
                    "self",
                    "sess"
                ],
                "_model_ready": [
                    "self",
                    "sess"
                ],
                "_model_ready_for_local_init": [
                    "self",
                    "sess"
                ],
                "_try_run_local_init_op": [
                    "self",
                    "sess"
                ]
            },
            "_CountDownTimer": {
                "__init__": [
                    "self",
                    "duration_secs"
                ],
                "secs_remaining": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.adagrad": {
            "AdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_init_constant_op": [
                    "self",
                    "v",
                    "dtype"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.python.training.server_lib": {
            "_make_server_def": [
                "server_or_cluster_def",
                "job_name",
                "task_index",
                "protocol",
                "config"
            ],
            "Server": {
                "__init__": [
                    "self",
                    "server_or_cluster_def",
                    "job_name",
                    "task_index",
                    "protocol",
                    "config",
                    "start"
                ],
                "__del__": [
                    "self"
                ],
                "start": [
                    "self"
                ],
                "join": [
                    "self"
                ],
                "server_def": [
                    "self"
                ],
                "target": [
                    "self"
                ],
                "create_local_server": [
                    "config",
                    "start"
                ]
            },
            "ClusterSpec": {
                "__init__": [
                    "self",
                    "cluster"
                ],
                "__nonzero__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__str__": [
                    "self"
                ],
                "as_dict": [
                    "self"
                ],
                "as_cluster_def": [
                    "self"
                ],
                "jobs": [
                    "self"
                ],
                "num_tasks": [
                    "self",
                    "job_name"
                ],
                "task_indices": [
                    "self",
                    "job_name"
                ],
                "task_address": [
                    "self",
                    "job_name",
                    "task_index"
                ],
                "job_tasks": [
                    "self",
                    "job_name"
                ],
                "_make_cluster_def": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.input": {
            "match_filenames_once": [
                "pattern",
                "name"
            ],
            "limit_epochs": [
                "tensor",
                "num_epochs",
                "name"
            ],
            "input_producer": [
                "input_tensor",
                "element_shape",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "summary_name",
                "name",
                "cancel_op"
            ],
            "string_input_producer": [
                "string_tensor",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name",
                "cancel_op"
            ],
            "range_input_producer": [
                "limit",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name"
            ],
            "slice_input_producer": [
                "tensor_list",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name"
            ],
            "_flatten": [
                "tensor_list_list"
            ],
            "_as_tensor_list": [
                "tensors"
            ],
            "_as_tensor_list_list": [
                "tensors_list"
            ],
            "_as_original_type": [
                "original_tensors",
                "tensor_list"
            ],
            "_store_sparse_tensors": [
                "tensor_list",
                "enqueue_many",
                "keep_input",
                "shared_map_ops"
            ],
            "_store_sparse_tensors_join": [
                "tensor_list_list",
                "enqueue_many",
                "keep_input"
            ],
            "_restore_sparse_tensors": [
                "stored_list",
                "sparse_info_list"
            ],
            "_validate": [
                "tensor_list"
            ],
            "_validate_join": [
                "tensor_list_list"
            ],
            "_validate_keep_input": [
                "keep_input",
                "enqueue_many"
            ],
            "_dtypes": [
                "tensor_list_list"
            ],
            "_merge_shapes": [
                "shape_list",
                "enqueue_many"
            ],
            "_shapes": [
                "tensor_list_list",
                "shapes",
                "enqueue_many"
            ],
            "_select_which_to_enqueue": [
                "tensor_list",
                "keep_input"
            ],
            "_enqueue_join": [
                "queue",
                "tensor_list_list",
                "enqueue_many",
                "keep_input"
            ],
            "_enqueue": [
                "queue",
                "tensor_list",
                "threads",
                "enqueue_many",
                "keep_input"
            ],
            "_which_queue": [
                "dynamic_pad"
            ],
            "_batch": [
                "tensors",
                "batch_size",
                "keep_input",
                "num_threads",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_batch_join": [
                "tensors_list",
                "batch_size",
                "keep_input",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_shuffle_batch": [
                "tensors",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "num_threads",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_shuffle_batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "batch": [
                "tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_batch": [
                "tensors",
                "keep_input",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_batch_join": [
                "tensors_list",
                "keep_input",
                "batch_size",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "shuffle_batch": [
                "tensors",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "num_threads",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_shuffle_batch": [
                "tensors",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "num_threads",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "shuffle_batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_shuffle_batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_SparseMetaData": {
                "__init__": [
                    "self",
                    "sparse",
                    "map_op",
                    "rank"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__str__": [
                    "self"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "map_op": [
                    "self"
                ],
                "sparse": [
                    "self"
                ],
                "rank": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.summary_io": {
            "SummaryWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "graph",
                    "max_queue",
                    "flush_secs",
                    "graph_def"
                ]
            }
        },
        "tensorflow_core.python.training.tensorboard_logging": {
            "get_verbosity": [],
            "set_verbosity": [
                "verbosity"
            ],
            "_check_verbosity": [
                "verbosity"
            ],
            "set_summary_writer": [
                "summary_writer"
            ],
            "_clear_summary_writer": [],
            "log": [
                "level",
                "message"
            ],
            "debug": [
                "message"
            ],
            "info": [
                "message"
            ],
            "warn": [
                "message"
            ],
            "error": [
                "message"
            ],
            "fatal": [
                "message"
            ]
        },
        "tensorflow_core.python.training.momentum": {
            "MomentumOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "momentum",
                    "use_locking",
                    "name",
                    "use_nesterov"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.python.training.session_run_hook": {
            "SessionRunHook": {
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "SessionRunArgs": {
                "__new__": [
                    "cls",
                    "fetches",
                    "feed_dict",
                    "options"
                ]
            },
            "SessionRunContext": {
                "__init__": [
                    "self",
                    "original_args",
                    "session"
                ],
                "original_args": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "stop_requested": [
                    "self"
                ],
                "request_stop": [
                    "self"
                ]
            },
            "SessionRunValues": {}
        },
        "tensorflow_core.python.training.evaluation": {
            "_get_or_create_eval_step": [],
            "_get_latest_eval_step_value": [
                "update_ops"
            ],
            "_evaluate_once": [
                "checkpoint_path",
                "master",
                "scaffold",
                "eval_ops",
                "feed_dict",
                "final_ops",
                "final_ops_feed_dict",
                "hooks",
                "config"
            ],
            "_MultiStepStopAfterNEvalsHook": {
                "__init__": [
                    "self",
                    "num_evals",
                    "steps_per_run"
                ],
                "_set_evals_completed_tensor": [
                    "self",
                    "updated_eval_step"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "_StopAfterNEvalsHook": {
                "__init__": [
                    "self",
                    "num_evals",
                    "log_progress"
                ],
                "_set_evals_completed_tensor": [
                    "self",
                    "updated_eval_step"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            }
        },
        "tensorflow_core.python.training.rmsprop": {
            "RMSPropOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "decay",
                    "momentum",
                    "epsilon",
                    "use_locking",
                    "centered",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.python.training.gen_training_ops": {
            "apply_ada_max": [
                "var",
                "m",
                "v",
                "beta1_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ApplyAdaMax": [
                "var",
                "m",
                "v",
                "beta1_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_ada_max_eager_fallback": [
                "var",
                "m",
                "v",
                "beta1_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ApplyAdadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_adadelta_eager_fallback": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "ApplyAdagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "apply_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "ApplyAdagradDA": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "apply_adagrad_da_eager_fallback": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_adagrad_v2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "ApplyAdagradV2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "apply_adagrad_v2_eager_fallback": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "apply_adam": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "ApplyAdam": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "apply_adam_eager_fallback": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "apply_add_sign": [
                "var",
                "m",
                "lr",
                "alpha",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "ApplyAddSign": [
                "var",
                "m",
                "lr",
                "alpha",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_add_sign_eager_fallback": [
                "var",
                "m",
                "lr",
                "alpha",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ApplyCenteredRMSProp": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_centered_rms_prop_eager_fallback": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "ApplyFtrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "apply_ftrl_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_ftrl_v2": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "ApplyFtrlV2": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "apply_ftrl_v2_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_gradient_descent": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name"
            ],
            "ApplyGradientDescent": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name"
            ],
            "apply_gradient_descent_eager_fallback": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "ApplyMomentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "apply_momentum_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "apply_power_sign": [
                "var",
                "m",
                "lr",
                "logbase",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "ApplyPowerSign": [
                "var",
                "m",
                "lr",
                "logbase",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_power_sign_eager_fallback": [
                "var",
                "m",
                "lr",
                "logbase",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name"
            ],
            "ApplyProximalAdagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_proximal_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name"
            ],
            "ApplyProximalGradientDescent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name"
            ],
            "apply_proximal_gradient_descent_eager_fallback": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name",
                "ctx"
            ],
            "apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ApplyRMSProp": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_rms_prop_eager_fallback": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_ada_max": [
                "var",
                "m",
                "v",
                "beta1_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyAdaMax": [
                "var",
                "m",
                "v",
                "beta1_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_ada_max_eager_fallback": [
                "var",
                "m",
                "v",
                "beta1_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyAdadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_adadelta_eager_fallback": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "ResourceApplyAdagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "resource_apply_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "resource_apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "ResourceApplyAdagradDA": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "resource_apply_adagrad_da_eager_fallback": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_adagrad_v2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "ResourceApplyAdagradV2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "use_locking",
                "update_slots",
                "name"
            ],
            "resource_apply_adagrad_v2_eager_fallback": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "resource_apply_adam": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "ResourceApplyAdam": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "resource_apply_adam_eager_fallback": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "resource_apply_adam_with_amsgrad": [
                "var",
                "m",
                "v",
                "vhat",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyAdamWithAmsgrad": [
                "var",
                "m",
                "v",
                "vhat",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_adam_with_amsgrad_eager_fallback": [
                "var",
                "m",
                "v",
                "vhat",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_add_sign": [
                "var",
                "m",
                "lr",
                "alpha",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyAddSign": [
                "var",
                "m",
                "lr",
                "alpha",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_add_sign_eager_fallback": [
                "var",
                "m",
                "lr",
                "alpha",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyCenteredRMSProp": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_centered_rms_prop_eager_fallback": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "ResourceApplyFtrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "resource_apply_ftrl_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_ftrl_v2": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "ResourceApplyFtrlV2": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "resource_apply_ftrl_v2_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_gradient_descent": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name"
            ],
            "ResourceApplyGradientDescent": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name"
            ],
            "resource_apply_gradient_descent_eager_fallback": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_keras_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "ResourceApplyKerasMomentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "resource_apply_keras_momentum_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "resource_apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "ResourceApplyMomentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "resource_apply_momentum_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "resource_apply_power_sign": [
                "var",
                "m",
                "lr",
                "logbase",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyPowerSign": [
                "var",
                "m",
                "lr",
                "logbase",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_power_sign_eager_fallback": [
                "var",
                "m",
                "lr",
                "logbase",
                "sign_decay",
                "beta",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyProximalAdagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_proximal_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name"
            ],
            "ResourceApplyProximalGradientDescent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name"
            ],
            "resource_apply_proximal_gradient_descent_eager_fallback": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "ResourceApplyRMSProp": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_rms_prop_eager_fallback": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyAdadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_adadelta_eager_fallback": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "ResourceSparseApplyAdagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "resource_sparse_apply_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyAdagradDA": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_adagrad_da_eager_fallback": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_adagrad_v2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "ResourceSparseApplyAdagradV2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "resource_sparse_apply_adagrad_v2_eager_fallback": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyCenteredRMSProp": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_centered_rms_prop_eager_fallback": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyFtrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_ftrl_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_ftrl_v2": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyFtrlV2": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_ftrl_v2_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_keras_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "ResourceSparseApplyKerasMomentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "resource_sparse_apply_keras_momentum_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "ResourceSparseApplyMomentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "resource_sparse_apply_momentum_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyProximalAdagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_proximal_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyProximalGradientDescent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_proximal_gradient_descent_eager_fallback": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "resource_sparse_apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "ResourceSparseApplyRMSProp": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_rms_prop_eager_fallback": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "SparseApplyAdadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_adadelta_eager_fallback": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "SparseApplyAdagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "sparse_apply_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "sparse_apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "SparseApplyAdagradDA": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "sparse_apply_adagrad_da_eager_fallback": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_adagrad_v2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "SparseApplyAdagradV2": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name"
            ],
            "sparse_apply_adagrad_v2_eager_fallback": [
                "var",
                "accum",
                "lr",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "update_slots",
                "name",
                "ctx"
            ],
            "sparse_apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "SparseApplyCenteredRMSProp": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_centered_rms_prop_eager_fallback": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "SparseApplyFtrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "sparse_apply_ftrl_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_ftrl_v2": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "SparseApplyFtrlV2": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name"
            ],
            "sparse_apply_ftrl_v2_eager_fallback": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "l2_shrinkage",
                "lr_power",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "SparseApplyMomentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "sparse_apply_momentum_eager_fallback": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name",
                "ctx"
            ],
            "sparse_apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "SparseApplyProximalAdagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_proximal_adagrad_eager_fallback": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "SparseApplyProximalGradientDescent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_proximal_gradient_descent_eager_fallback": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "sparse_apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "SparseApplyRMSProp": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_rms_prop_eager_fallback": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.python.training.optimizer": {
            "get_filtered_grad_fn": [
                "grad_fn"
            ],
            "_deduplicate_indexed_slices": [
                "values",
                "indices"
            ],
            "_var_key": [
                "var"
            ],
            "_get_processor": [
                "v"
            ],
            "_OptimizableVariable": {
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_RefVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "__str__": [
                    "self"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_DenseReadResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_DenseResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_TensorProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "Optimizer": {
                "__init__": [
                    "self",
                    "use_locking",
                    "name"
                ],
                "get_name": [
                    "self"
                ],
                "minimize": [
                    "self",
                    "loss",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "grad_loss"
                ],
                "_scale_loss": [
                    "loss_value"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_distributed_apply": [
                    "self",
                    "distribution",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_slot": [
                    "self",
                    "var",
                    "name"
                ],
                "get_slot_names": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "_create_non_slot_variable": [
                    "self",
                    "initial_value",
                    "name",
                    "colocate_with"
                ],
                "_checkpoint_dependencies": [
                    "self"
                ],
                "_lookup_dependency": [
                    "self",
                    "name"
                ],
                "_get_non_slot_variable": [
                    "self",
                    "name",
                    "graph"
                ],
                "_non_slot_variables": [
                    "self"
                ],
                "_assert_valid_dtypes": [
                    "self",
                    "tensors"
                ],
                "_valid_dtypes": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle"
                ],
                "_resource_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "handle",
                    "indices"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "handle",
                    "indices"
                ],
                "_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_finish": [
                    "self",
                    "update_ops",
                    "name_scope"
                ],
                "_slot_dict": [
                    "self",
                    "slot_name"
                ],
                "_get_or_make_slot": [
                    "self",
                    "var",
                    "val",
                    "slot_name",
                    "op_name"
                ],
                "_get_or_make_slot_with_initializer": [
                    "self",
                    "var",
                    "initializer",
                    "shape",
                    "dtype",
                    "slot_name",
                    "op_name"
                ],
                "_zeros_slot": [
                    "self",
                    "var",
                    "slot_name",
                    "op_name"
                ],
                "_restore_slot_variable": [
                    "self",
                    "slot_name",
                    "variable",
                    "slot_variable"
                ],
                "_create_or_restore_slot_variable": [
                    "self",
                    "slot_variable_position",
                    "slot_name",
                    "variable"
                ],
                "_call_if_callable": [
                    "self",
                    "param"
                ]
            }
        },
        "tensorflow_core.python.training.checkpoint_utils": {
            "load_checkpoint": [
                "ckpt_dir_or_file"
            ],
            "load_variable": [
                "ckpt_dir_or_file",
                "name"
            ],
            "list_variables": [
                "ckpt_dir_or_file"
            ],
            "wait_for_new_checkpoint": [
                "checkpoint_dir",
                "last_checkpoint",
                "seconds_to_sleep",
                "timeout"
            ],
            "checkpoints_iterator": [
                "checkpoint_dir",
                "min_interval_secs",
                "timeout",
                "timeout_fn"
            ],
            "init_from_checkpoint": [
                "ckpt_dir_or_file",
                "assignment_map"
            ],
            "_init_from_checkpoint": [
                "ckpt_dir_or_file",
                "assignment_map"
            ],
            "_get_checkpoint_filename": [
                "ckpt_dir_or_file"
            ],
            "_set_checkpoint_initializer": [
                "variable",
                "ckpt_file",
                "tensor_name",
                "slice_spec",
                "name"
            ],
            "_set_variable_or_list_initializer": [
                "variable_or_list",
                "ckpt_file",
                "tensor_name"
            ],
            "_is_variable": [
                "x"
            ],
            "_collect_partitioned_variable": [
                "name",
                "all_vars"
            ]
        },
        "tensorflow_core.python.training.adagrad_da": {
            "AdagradDAOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "global_step",
                    "initial_gradient_squared_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.python.training.ftrl": {
            "FtrlOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "learning_rate_power",
                    "initial_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name",
                    "accum_name",
                    "linear_name",
                    "l2_shrinkage_regularization_strength"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.python.training.checkpoint_state_pb2": {},
        "tensorflow_core.python.training.learning_rate_decay": {
            "exponential_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ],
            "piecewise_constant": [
                "x",
                "boundaries",
                "values",
                "name"
            ],
            "polynomial_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "end_learning_rate",
                "power",
                "cycle",
                "name"
            ],
            "natural_exp_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ],
            "inverse_time_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ],
            "cosine_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "alpha",
                "name"
            ],
            "cosine_decay_restarts": [
                "learning_rate",
                "global_step",
                "first_decay_steps",
                "t_mul",
                "m_mul",
                "alpha",
                "name"
            ],
            "linear_cosine_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "num_periods",
                "alpha",
                "beta",
                "name"
            ],
            "noisy_linear_cosine_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "initial_variance",
                "variance_decay",
                "num_periods",
                "alpha",
                "beta",
                "name"
            ]
        },
        "tensorflow_core.python.training.warm_starting_util": {
            "_infer_var_name": [
                "var"
            ],
            "_get_var_info": [
                "var",
                "prev_tensor_name"
            ],
            "_warm_start_var_with_vocab": [
                "var",
                "current_vocab_path",
                "current_vocab_size",
                "prev_ckpt",
                "prev_vocab_path",
                "previous_vocab_size",
                "current_oov_buckets",
                "prev_tensor_name",
                "initializer",
                "axis"
            ],
            "_get_grouped_variables": [
                "vars_to_warm_start"
            ],
            "_get_object_checkpoint_renames": [
                "path",
                "variable_names"
            ],
            "warm_start": [
                "ckpt_to_initialize_from",
                "vars_to_warm_start",
                "var_name_to_vocab_info",
                "var_name_to_prev_var_name"
            ],
            "VocabInfo": {
                "__new__": [
                    "cls",
                    "new_vocab",
                    "new_vocab_size",
                    "num_oov_buckets",
                    "old_vocab",
                    "old_vocab_size",
                    "backup_initializer",
                    "axis"
                ]
            }
        },
        "tensorflow_core.python.training.proximal_gradient_descent": {
            "ProximalGradientDescentOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ],
                "_prepare": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.moving_averages": {
            "assign_moving_average": [
                "variable",
                "value",
                "decay",
                "zero_debias",
                "name"
            ],
            "weighted_moving_average": [
                "value",
                "decay",
                "weight",
                "truediv",
                "collections",
                "name"
            ],
            "_zero_debias": [
                "strategy",
                "unbiased_var",
                "value",
                "decay"
            ],
            "ExponentialMovingAverage": {
                "__init__": [
                    "self",
                    "decay",
                    "num_updates",
                    "zero_debias",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "apply": [
                    "self",
                    "var_list"
                ],
                "average": [
                    "self",
                    "var"
                ],
                "average_name": [
                    "self",
                    "var"
                ],
                "variables_to_restore": [
                    "self",
                    "moving_avg_variables"
                ]
            }
        },
        "tensorflow_core.python.training.sync_replicas_optimizer": {
            "SyncReplicasOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "replicas_to_aggregate",
                    "total_num_replicas",
                    "variable_averages",
                    "variables_to_average",
                    "use_locking",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_chief_queue_runner": [
                    "self"
                ],
                "get_slot": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "get_init_tokens_op": [
                    "self",
                    "num_tokens"
                ],
                "make_session_run_hook": [
                    "self",
                    "is_chief",
                    "num_tokens"
                ]
            },
            "_SyncReplicasOptimizerHook": {
                "__init__": [
                    "self",
                    "sync_optimizer",
                    "is_chief",
                    "num_tokens"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ]
            }
        },
        "tensorflow_core.python.training.supervisor": {
            "Supervisor": {
                "__init__": [
                    "self",
                    "graph",
                    "ready_op",
                    "ready_for_local_init_op",
                    "is_chief",
                    "init_op",
                    "init_feed_dict",
                    "local_init_op",
                    "logdir",
                    "summary_op",
                    "saver",
                    "global_step",
                    "save_summaries_secs",
                    "save_model_secs",
                    "recovery_wait_secs",
                    "stop_grace_secs",
                    "checkpoint_basename",
                    "session_manager",
                    "summary_writer",
                    "init_fn",
                    "local_init_run_options"
                ],
                "_init_session_manager": [
                    "self",
                    "session_manager"
                ],
                "_get_first_op_from_collection": [
                    "self",
                    "key"
                ],
                "_init_ready_op": [
                    "self",
                    "ready_op",
                    "ready_for_local_init_op"
                ],
                "_init_init_op": [
                    "self",
                    "init_op",
                    "init_feed_dict"
                ],
                "_init_local_init_op": [
                    "self",
                    "local_init_op"
                ],
                "_init_saver": [
                    "self",
                    "saver"
                ],
                "_init_summary_op": [
                    "self",
                    "summary_op"
                ],
                "_init_global_step": [
                    "self",
                    "global_step"
                ],
                "is_chief": [
                    "self"
                ],
                "session_manager": [
                    "self"
                ],
                "coord": [
                    "self"
                ],
                "init_op": [
                    "self"
                ],
                "init_feed_dict": [
                    "self"
                ],
                "ready_op": [
                    "self"
                ],
                "ready_for_local_init_op": [
                    "self"
                ],
                "summary_writer": [
                    "self"
                ],
                "summary_op": [
                    "self"
                ],
                "save_summaries_secs": [
                    "self"
                ],
                "global_step": [
                    "self"
                ],
                "saver": [
                    "self"
                ],
                "save_model_secs": [
                    "self"
                ],
                "save_path": [
                    "self"
                ],
                "_write_graph": [
                    "self"
                ],
                "start_standard_services": [
                    "self",
                    "sess"
                ],
                "prepare_or_wait_for_session": [
                    "self",
                    "master",
                    "config",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "start_standard_services"
                ],
                "start_queue_runners": [
                    "self",
                    "sess",
                    "queue_runners"
                ],
                "loop": [
                    "self",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "stop": [
                    "self",
                    "threads",
                    "close_summary_writer",
                    "ignore_live_threads"
                ],
                "request_stop": [
                    "self",
                    "ex"
                ],
                "should_stop": [
                    "self"
                ],
                "stop_on_exception": [
                    "self"
                ],
                "wait_for_stop": [
                    "self"
                ],
                "summary_computed": [
                    "self",
                    "sess",
                    "summary",
                    "global_step"
                ],
                "_default_global_step_tensor": [
                    "self"
                ],
                "_verify_setup": [
                    "self"
                ],
                "managed_session": [
                    "self",
                    "master",
                    "config",
                    "start_standard_services",
                    "close_summary_writer"
                ]
            },
            "SVSummaryThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "run_loop": [
                    "self"
                ]
            },
            "SVStepCounterThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess",
                    "step_counter"
                ],
                "start_loop": [
                    "self"
                ],
                "run_loop": [
                    "self"
                ]
            },
            "SVTimerCheckpointThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "run_loop": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.device_setter": {
            "replica_device_setter": [
                "ps_tasks",
                "ps_device",
                "worker_device",
                "merge_devices",
                "cluster",
                "ps_ops",
                "ps_strategy"
            ],
            "_RoundRobinStrategy": {
                "__init__": [
                    "self",
                    "num_tasks"
                ],
                "__call__": [
                    "self",
                    "unused_op"
                ]
            },
            "_ReplicaDeviceChooser": {
                "__init__": [
                    "self",
                    "ps_tasks",
                    "ps_device",
                    "worker_device",
                    "merge_devices",
                    "ps_ops",
                    "ps_strategy"
                ],
                "device_function": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow_core.python.training.checkpoint_ops": {
            "_load_and_remap_matrix": [
                "ckpt_path",
                "old_tensor_name",
                "new_row_vocab_offset",
                "num_rows_to_load",
                "new_col_vocab_size",
                "initializer",
                "old_row_vocab_size",
                "old_row_vocab_file",
                "new_row_vocab_file",
                "old_col_vocab_file",
                "new_col_vocab_file",
                "num_row_oov_buckets",
                "num_col_oov_buckets",
                "max_rows_in_memory"
            ],
            "_load_and_remap_matrix_initializer": [
                "ckpt_path",
                "old_tensor_name",
                "new_row_vocab_size",
                "new_col_vocab_size",
                "old_row_vocab_size",
                "old_row_vocab_file",
                "new_row_vocab_file",
                "old_col_vocab_file",
                "new_col_vocab_file",
                "num_row_oov_buckets",
                "num_col_oov_buckets",
                "initializer",
                "max_rows_in_memory"
            ],
            "_load_embedding_initializer": [
                "ckpt_path",
                "embedding_tensor_name",
                "new_vocab_size",
                "embedding_dim",
                "old_vocab_file",
                "new_vocab_file",
                "old_vocab_size",
                "num_oov_buckets",
                "initializer",
                "max_rows_in_memory"
            ]
        },
        "tensorflow_core.python.training.coordinator": {
            "Coordinator": {
                "__init__": [
                    "self",
                    "clean_stop_exception_types"
                ],
                "_filter_exception": [
                    "self",
                    "ex"
                ],
                "request_stop": [
                    "self",
                    "ex"
                ],
                "clear_stop": [
                    "self"
                ],
                "should_stop": [
                    "self"
                ],
                "stop_on_exception": [
                    "self"
                ],
                "wait_for_stop": [
                    "self",
                    "timeout"
                ],
                "register_thread": [
                    "self",
                    "thread"
                ],
                "join": [
                    "self",
                    "threads",
                    "stop_grace_period_secs",
                    "ignore_live_threads"
                ],
                "joined": [
                    "self"
                ],
                "raise_requested_exception": [
                    "self"
                ]
            },
            "LooperThread": {
                "__init__": [
                    "self",
                    "coord",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "loop": [
                    "coord",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "run": [
                    "self"
                ],
                "start_loop": [
                    "self"
                ],
                "stop_loop": [
                    "self"
                ],
                "run_loop": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.basic_session_run_hooks": {
            "get_or_create_steps_per_run_variable": [],
            "_as_graph_element": [
                "obj"
            ],
            "_HookTimer": {
                "__init__": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "should_trigger_for_step": [
                    "self",
                    "step"
                ],
                "update_last_triggered_step": [
                    "self",
                    "step"
                ],
                "last_triggered_step": [
                    "self"
                ]
            },
            "SecondOrStepTimer": {
                "__init__": [
                    "self",
                    "every_secs",
                    "every_steps"
                ],
                "reset": [
                    "self"
                ],
                "should_trigger_for_step": [
                    "self",
                    "step"
                ],
                "update_last_triggered_step": [
                    "self",
                    "step"
                ],
                "last_triggered_step": [
                    "self"
                ]
            },
            "NeverTriggerTimer": {
                "should_trigger_for_step": [
                    "self",
                    "step"
                ],
                "update_last_triggered_step": [
                    "self",
                    "step"
                ],
                "last_triggered_step": [
                    "self"
                ]
            },
            "LoggingTensorHook": {
                "__init__": [
                    "self",
                    "tensors",
                    "every_n_iter",
                    "every_n_secs",
                    "at_end",
                    "formatter"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "_log_tensors": [
                    "self",
                    "tensor_values"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "_MultiStepStopAtStepHook": {
                "__init__": [
                    "self",
                    "num_steps",
                    "last_step",
                    "steps_per_run"
                ],
                "begin": [
                    "self"
                ],
                "_update_steps_per_run_variable": [
                    "self",
                    "global_step",
                    "session"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "StopAtStepHook": {
                "__init__": [
                    "self",
                    "num_steps",
                    "last_step"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "CheckpointSaverListener": {
                "begin": [
                    "self"
                ],
                "before_save": [
                    "self",
                    "session",
                    "global_step_value"
                ],
                "after_save": [
                    "self",
                    "session",
                    "global_step_value"
                ],
                "end": [
                    "self",
                    "session",
                    "global_step_value"
                ]
            },
            "CheckpointSaverHook": {
                "__init__": [
                    "self",
                    "checkpoint_dir",
                    "save_secs",
                    "save_steps",
                    "saver",
                    "checkpoint_basename",
                    "scaffold",
                    "listeners"
                ],
                "_set_steps_per_run": [
                    "self",
                    "steps_per_run"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_save": [
                    "self",
                    "session",
                    "step"
                ],
                "_get_saver": [
                    "self"
                ]
            },
            "StepCounterHook": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "every_n_secs",
                    "output_dir",
                    "summary_writer"
                ],
                "_set_steps_per_run": [
                    "self",
                    "steps_per_run"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "_log_and_record": [
                    "self",
                    "elapsed_steps",
                    "elapsed_time",
                    "global_step"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "NanLossDuringTrainingError": {
                "__str__": [
                    "self"
                ]
            },
            "NanTensorHook": {
                "__init__": [
                    "self",
                    "loss_tensor",
                    "fail_on_nan_loss"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "SummarySaverHook": {
                "__init__": [
                    "self",
                    "save_steps",
                    "save_secs",
                    "output_dir",
                    "summary_writer",
                    "scaffold",
                    "summary_op"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_get_summary_op": [
                    "self"
                ]
            },
            "GlobalStepWaiterHook": {
                "__init__": [
                    "self",
                    "wait_until_step"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "FinalOpsHook": {
                "__init__": [
                    "self",
                    "final_ops",
                    "final_ops_feed_dict"
                ],
                "final_ops_values": [
                    "self"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "FeedFnHook": {
                "__init__": [
                    "self",
                    "feed_fn"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "ProfilerHook": {
                "__init__": [
                    "self",
                    "save_steps",
                    "save_secs",
                    "output_dir",
                    "show_dataflow",
                    "show_memory"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "_save": [
                    "self",
                    "step",
                    "save_path",
                    "step_stats"
                ]
            }
        },
        "tensorflow_core.python.training": {},
        "tensorflow_core.python.training.saving.saveable_object": {
            "SaveSpec": {
                "__init__": [
                    "self",
                    "tensor",
                    "slice_spec",
                    "name",
                    "dtype",
                    "device"
                ],
                "tensor": [
                    "self"
                ]
            },
            "SaveableObject": {
                "__init__": [
                    "self",
                    "op",
                    "specs",
                    "name"
                ],
                "optional_restore": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            }
        },
        "tensorflow_core.python.training.saving.functional_saver": {
            "sharded_filename": [
                "filename_tensor",
                "shard",
                "num_shards"
            ],
            "_SingleDeviceSaver": {
                "__init__": [
                    "self",
                    "saveable_objects"
                ],
                "save": [
                    "self",
                    "file_prefix"
                ],
                "restore": [
                    "self",
                    "file_prefix"
                ]
            },
            "MultiDeviceSaver": {
                "__init__": [
                    "self",
                    "saveable_objects"
                ],
                "to_proto": [
                    "self"
                ],
                "_traced_save": [
                    "self",
                    "file_prefix"
                ],
                "_traced_restore": [
                    "self",
                    "file_prefix"
                ],
                "save": [
                    "self",
                    "file_prefix"
                ],
                "restore": [
                    "self",
                    "file_prefix"
                ]
            }
        },
        "tensorflow_core.python.training.saving.saveable_object_util": {
            "set_cpu0": [
                "device_string"
            ],
            "_tensor_comes_from_variable": [
                "v"
            ],
            "saveable_objects_for_op": [
                "op",
                "name"
            ],
            "op_list_to_dict": [
                "op_list",
                "convert_variable_to_tensor"
            ],
            "_add_saveable": [
                "saveables",
                "seen_ops",
                "saveable"
            ],
            "validate_and_slice_inputs": [
                "names_to_saveables"
            ],
            "ReferenceVariableSaveable": {
                "__init__": [
                    "self",
                    "var",
                    "slice_spec",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            },
            "ResourceVariableSaveable": {
                "__init__": [
                    "self",
                    "var",
                    "slice_spec",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            }
        },
        "tensorflow_core.python.training.saving": {},
        "tensorflow_core.python.training.tracking.layer_utils": {
            "is_layer": [
                "obj"
            ],
            "has_weights": [
                "obj"
            ],
            "filter_empty_layer_containers": [
                "layer_list"
            ],
            "gather_trainable_weights": [
                "trainable",
                "sub_layers",
                "extra_variables"
            ],
            "gather_non_trainable_weights": [
                "trainable",
                "sub_layers",
                "extra_variables"
            ]
        },
        "tensorflow_core.python.training.tracking.graph_view": {
            "_escape_local_name": [
                "name"
            ],
            "_object_prefix_from_path": [
                "path_to_root"
            ],
            "_slot_variable_naming_for_optimizer": [
                "optimizer_path"
            ],
            "_serialize_slot_variables": [
                "trackable_objects",
                "node_ids",
                "object_names"
            ],
            "ObjectGraphView": {
                "__init__": [
                    "self",
                    "root",
                    "saveables_cache"
                ],
                "list_dependencies": [
                    "self",
                    "obj"
                ],
                "saveables_cache": [
                    "self"
                ],
                "root": [
                    "self"
                ],
                "_breadth_first_traversal": [
                    "self"
                ],
                "_add_attributes_to_object_graph": [
                    "self",
                    "trackable_objects",
                    "object_graph_proto",
                    "node_ids",
                    "object_names",
                    "object_map"
                ],
                "_fill_object_graph_proto": [
                    "self",
                    "trackable_objects",
                    "node_ids",
                    "slot_variables",
                    "object_graph_proto"
                ],
                "_serialize_gathered_objects": [
                    "self",
                    "trackable_objects",
                    "path_to_root",
                    "object_map"
                ],
                "serialize_object_graph": [
                    "self"
                ],
                "frozen_saveable_objects": [
                    "self",
                    "object_map",
                    "to_graph"
                ],
                "objects_ids_and_slot_variables": [
                    "self"
                ],
                "list_objects": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.tracking.python_state": {
            "PythonState": {
                "serialize": [
                    "self"
                ],
                "deserialize": [
                    "self",
                    "string_value"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.tracking.data_structures": {
            "_wrap_or_unwrap": [
                "value"
            ],
            "sticky_attribute_assignment": [
                "trackable",
                "name",
                "value"
            ],
            "_is_function": [
                "x"
            ],
            "_set_list_item": [
                "list_object",
                "index_string",
                "value"
            ],
            "NoDependency": {
                "__init__": [
                    "self",
                    "value"
                ]
            },
            "_UntrackableError": {
                "__init__": [
                    "self",
                    "value"
                ],
                "__str__": [
                    "self"
                ]
            },
            "TrackableDataStructure": {
                "__init__": [
                    "self"
                ],
                "trainable": [
                    "self",
                    "value"
                ],
                "_track_value": [
                    "self",
                    "value",
                    "name"
                ],
                "_values": [
                    "self"
                ],
                "_layers": [
                    "self"
                ],
                "layers": [
                    "self"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "weights": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "updates": [
                    "self"
                ],
                "losses": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "List": {
                "__init__": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "_make_storage": [
                    "self"
                ],
                "_name_element": [
                    "self",
                    "index"
                ],
                "_values": [
                    "self"
                ],
                "append": [
                    "self",
                    "value"
                ],
                "extend": [
                    "self",
                    "values"
                ],
                "__iadd__": [
                    "self",
                    "values"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "y"
                ],
                "__mul__": [
                    "self",
                    "n"
                ],
                "__rmul__": [
                    "self",
                    "n"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__getslice__": [
                    "self",
                    "i",
                    "j"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__sizeof__": [
                    "self"
                ]
            },
            "ListWrapper": {
                "__init__": [
                    "self",
                    "wrapped_list"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "__reduce_ex__": [
                    "self",
                    "protocol"
                ],
                "_make_storage": [
                    "self",
                    "wrapped_list"
                ],
                "_check_external_modification": [
                    "self"
                ],
                "_update_snapshot": [
                    "self"
                ],
                "_checkpoint_dependencies": [
                    "self"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "append": [
                    "self",
                    "value"
                ],
                "extend": [
                    "self",
                    "values"
                ],
                "__imul__": [
                    "self",
                    "y"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "insert": [
                    "self",
                    "index",
                    "obj"
                ],
                "sort": [
                    "self"
                ],
                "__setslice__": [
                    "self",
                    "i",
                    "j",
                    "y"
                ],
                "__delslice__": [
                    "self",
                    "i",
                    "j"
                ],
                "_track_value": [
                    "self",
                    "value",
                    "name"
                ],
                "__repr__": [
                    "self"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "unused_functions"
                ]
            },
            "Mapping": {
                "__init__": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "_make_storage": [
                    "self"
                ],
                "_values": [
                    "self"
                ],
                "_name_element": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "update": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "_DictWrapper": {
                "__init__": [
                    "self",
                    "wrapped_dict"
                ],
                "__reduce_ex__": [
                    "self",
                    "protocol"
                ],
                "__getattribute__": [
                    "self",
                    "name"
                ],
                "copy": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "_values": [
                    "self"
                ],
                "_checkpoint_dependencies": [
                    "self"
                ],
                "_dirty": [
                    "self"
                ],
                "_check_self_external_modification": [
                    "self"
                ],
                "_update_snapshot": [
                    "self"
                ],
                "_track_value": [
                    "self",
                    "value",
                    "name"
                ],
                "_name_element": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "update": [
                    "self"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "unused_serialization_cache"
                ]
            }
        },
        "tensorflow_core.python.training.tracking.util": {
            "get_session": [],
            "_default_getter": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "partition_info"
            ],
            "add_variable": [
                "trackable",
                "name",
                "shape",
                "dtype",
                "initializer",
                "trainable"
            ],
            "object_metadata": [
                "save_path"
            ],
            "list_objects": [
                "root_trackable"
            ],
            "gather_initializers": [
                "root_trackable"
            ],
            "capture_dependencies": [
                "template"
            ],
            "streaming_restore": [
                "status",
                "session"
            ],
            "frozen_saver": [
                "root_trackable"
            ],
            "saver_with_op_caching": [
                "obj"
            ],
            "_ObjectGraphProtoPrettyPrinter": {
                "__init__": [
                    "self",
                    "object_graph_proto"
                ],
                "node_names": [
                    "self"
                ]
            },
            "_CheckpointRestoreCoordinatorDeleter": {
                "__init__": [
                    "self",
                    "expect_partial",
                    "object_graph_proto",
                    "matched_proto_ids",
                    "unused_attributes"
                ],
                "set_expect_partial": [
                    "self",
                    "expect_partial"
                ],
                "__del__": [
                    "self"
                ]
            },
            "_CheckpointRestoreCoordinator": {
                "__init__": [
                    "self",
                    "object_graph_proto",
                    "save_path",
                    "save_path_tensor",
                    "restore_op_cache",
                    "graph_view"
                ],
                "expect_partial": [
                    "self",
                    "expect_partial"
                ],
                "new_restore_ops": [
                    "self",
                    "new_ops"
                ],
                "restore_saveables": [
                    "self",
                    "tensor_saveables",
                    "python_saveables"
                ]
            },
            "_NameBasedRestoreCoordinator": {
                "__init__": [
                    "self",
                    "save_path",
                    "dtype_map"
                ],
                "globally_named_object_attributes": [
                    "self",
                    "trackable"
                ],
                "eager_restore": [
                    "self",
                    "trackable"
                ]
            },
            "_LoadStatus": {
                "assert_consumed": [
                    "self"
                ],
                "assert_existing_objects_matched": [
                    "self"
                ],
                "assert_nontrivial_match": [
                    "self"
                ],
                "run_restore_ops": [
                    "self",
                    "session"
                ],
                "initialize_or_restore": [
                    "self",
                    "session"
                ],
                "expect_partial": [
                    "self"
                ]
            },
            "CheckpointLoadStatus": {
                "__init__": [
                    "self",
                    "checkpoint",
                    "feed_dict",
                    "graph_view"
                ],
                "assert_consumed": [
                    "self"
                ],
                "assert_existing_objects_matched": [
                    "self"
                ],
                "assert_nontrivial_match": [
                    "self"
                ],
                "run_restore_ops": [
                    "self",
                    "session"
                ],
                "initialize_or_restore": [
                    "self",
                    "session"
                ],
                "expect_partial": [
                    "self"
                ]
            },
            "InitializationOnlyStatus": {
                "__init__": [
                    "self",
                    "graph_view",
                    "restore_uid"
                ],
                "assert_consumed": [
                    "self"
                ],
                "assert_existing_objects_matched": [
                    "self"
                ],
                "assert_nontrivial_match": [
                    "self"
                ],
                "run_restore_ops": [
                    "self",
                    "session"
                ],
                "initialize_or_restore": [
                    "self",
                    "session"
                ]
            },
            "NameBasedSaverStatus": {
                "__init__": [
                    "self",
                    "checkpoint",
                    "graph_view"
                ],
                "assert_consumed": [
                    "self"
                ],
                "assert_existing_objects_matched": [
                    "self"
                ],
                "assert_nontrivial_match": [
                    "self"
                ],
                "_gather_saveable_objects": [
                    "self"
                ],
                "run_restore_ops": [
                    "self",
                    "session"
                ],
                "initialize_or_restore": [
                    "self",
                    "session"
                ]
            },
            "_SessionWithFeedDictAdditions": {
                "__init__": [
                    "self",
                    "session",
                    "feed_additions"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict"
                ]
            },
            "TrackableSaver": {
                "__init__": [
                    "self",
                    "graph_view"
                ],
                "_gather_saveables": [
                    "self",
                    "object_graph_tensor"
                ],
                "_save_cached_when_graph_building": [
                    "self",
                    "file_prefix",
                    "object_graph_tensor"
                ],
                "save": [
                    "self",
                    "file_prefix",
                    "checkpoint_number",
                    "session"
                ],
                "restore": [
                    "self",
                    "save_path"
                ]
            },
            "CheckpointV1": {
                "__init__": [
                    "self"
                ],
                "_maybe_create_save_counter": [
                    "self"
                ],
                "write": [
                    "self",
                    "file_prefix",
                    "session"
                ],
                "save_counter": [
                    "self"
                ],
                "save": [
                    "self",
                    "file_prefix",
                    "session"
                ],
                "restore": [
                    "self",
                    "save_path"
                ]
            },
            "Checkpoint": {
                "__init__": [
                    "self"
                ],
                "_maybe_create_save_counter": [
                    "self"
                ],
                "write": [
                    "self",
                    "file_prefix"
                ],
                "save_counter": [
                    "self"
                ],
                "save": [
                    "self",
                    "file_prefix"
                ],
                "restore": [
                    "self",
                    "save_path"
                ]
            }
        },
        "tensorflow_core.python.training.tracking.tracking": {
            "delete_tracking": [
                "obj",
                "name"
            ],
            "resource_tracker_scope": [
                "resource_tracker"
            ],
            "cached_per_instance": [
                "f"
            ],
            "NotTrackable": {},
            "AutoTrackable": {
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "__delattr__": [
                    "self",
                    "name"
                ],
                "_no_dependency": [
                    "self",
                    "value"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "unused_serialization_cache"
                ]
            },
            "ResourceTracker": {
                "__init__": [
                    "self"
                ],
                "resources": [
                    "self"
                ],
                "add_resource": [
                    "self",
                    "resource"
                ]
            },
            "CapturableResourceDeleter": {
                "__init__": [
                    "self",
                    "destroy_resource_fn"
                ],
                "destroy_resource": [
                    "self"
                ],
                "__del__": [
                    "self"
                ]
            },
            "CapturableResource": {
                "__init__": [
                    "self",
                    "device",
                    "deleter"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "resource_handle": [
                    "self"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "unused_functions"
                ]
            },
            "TrackableResource": {
                "__init__": [
                    "self",
                    "device",
                    "deleter"
                ]
            },
            "TrackableAsset": {
                "__init__": [
                    "self",
                    "path"
                ],
                "asset_path": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.tracking.base": {
            "no_automatic_dependency_tracking": [
                "method"
            ],
            "no_automatic_dependency_tracking_scope": [
                "obj"
            ],
            "CheckpointInitialValue": {
                "__init__": [
                    "self",
                    "checkpoint_position",
                    "shape"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "checkpoint_position": [
                    "self"
                ]
            },
            "NoRestoreSaveable": {
                "__init__": [
                    "self",
                    "tensor",
                    "name",
                    "dtype",
                    "device"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            },
            "PythonStateSaveable": {
                "feed_dict_additions": [
                    "self"
                ],
                "freeze": [
                    "self"
                ]
            },
            "PythonStringStateSaveable": {
                "__init__": [
                    "self",
                    "name",
                    "state_callback",
                    "restore_callback"
                ],
                "optional_restore": [
                    "self"
                ],
                "feed_dict_additions": [
                    "self"
                ],
                "freeze": [
                    "self"
                ],
                "python_restore": [
                    "self",
                    "restored_strings"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            },
            "CheckpointPosition": {
                "__init__": [
                    "self",
                    "checkpoint",
                    "proto_id"
                ],
                "restore": [
                    "self",
                    "trackable"
                ],
                "bind_object": [
                    "self",
                    "trackable"
                ],
                "is_simple_variable": [
                    "self"
                ],
                "value_tensors": [
                    "self"
                ],
                "gather_ops_or_named_saveables": [
                    "self"
                ],
                "restore_ops": [
                    "self"
                ],
                "checkpoint": [
                    "self"
                ],
                "trackable": [
                    "self"
                ],
                "object_proto": [
                    "self"
                ],
                "restore_uid": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Trackable": {
                "_setattr_tracking": [
                    "self",
                    "value"
                ],
                "_update_uid": [
                    "self",
                    "value"
                ],
                "_unconditional_checkpoint_dependencies": [
                    "self"
                ],
                "_unconditional_dependency_names": [
                    "self"
                ],
                "_name_based_restores": [
                    "self"
                ],
                "_maybe_initialize_trackable": [
                    "self"
                ],
                "_object_identifier": [
                    "self"
                ],
                "_tracking_metadata": [
                    "self"
                ],
                "_no_dependency": [
                    "self",
                    "value"
                ],
                "_name_based_attribute_restore": [
                    "self",
                    "checkpoint"
                ],
                "_checkpoint_dependencies": [
                    "self"
                ],
                "_deferred_dependencies": [
                    "self"
                ],
                "_lookup_dependency": [
                    "self",
                    "name"
                ],
                "_add_variable_with_custom_getter": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "getter",
                    "overwrite"
                ],
                "_preload_simple_restoration": [
                    "self",
                    "name",
                    "shape"
                ],
                "_track_trackable": [
                    "self",
                    "trackable",
                    "name",
                    "overwrite"
                ],
                "_handle_deferred_dependencies": [
                    "self",
                    "name",
                    "trackable"
                ],
                "_restore_from_checkpoint_position": [
                    "self",
                    "checkpoint_position"
                ],
                "_single_restoration_from_checkpoint_position": [
                    "self",
                    "checkpoint_position",
                    "visit_queue"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "_list_extra_dependencies_for_serialization": [
                    "self",
                    "serialization_cache"
                ],
                "_list_functions_for_serialization": [
                    "self",
                    "serialization_cache"
                ]
            }
        },
        "tensorflow_core.python.training.tracking": {},
        "tensorflow_core.python.training.experimental.loss_scale": {
            "get_loss_scale_weights": [
                "loss_scale"
            ],
            "_is_all_finite": [
                "grads"
            ],
            "_op_in_graph_mode": [
                "tensor"
            ],
            "_assign_if_finite": [
                "var",
                "value"
            ],
            "get": [
                "identifier"
            ],
            "LossScale": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "update": [
                    "self",
                    "grads"
                ],
                "_add_weight": [
                    "self",
                    "name",
                    "initial_value",
                    "dtype"
                ],
                "_checkpoint_dependencies": [
                    "self"
                ],
                "_lookup_dependency": [
                    "self",
                    "name"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config"
                ]
            },
            "FixedLossScale": {
                "__init__": [
                    "self",
                    "loss_scale_value"
                ],
                "__call__": [
                    "self"
                ],
                "update": [
                    "self",
                    "grads"
                ],
                "__repr__": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            },
            "DynamicLossScale": {
                "__init__": [
                    "self",
                    "initial_loss_scale",
                    "increment_period",
                    "multiplier"
                ],
                "initial_loss_scale": [
                    "self"
                ],
                "increment_period": [
                    "self"
                ],
                "multiplier": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "update": [
                    "self",
                    "grads"
                ],
                "__repr__": [
                    "self"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.python.training.experimental.mixed_precision_global_state": {},
        "tensorflow_core.python.training.experimental.loss_scale_optimizer": {
            "MixedPrecisionLossScaleOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "loss_scale"
                ],
                "_doing_dynamic_loss_scaling": [
                    "self"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "grad_loss"
                ],
                "_scale_loss": [
                    "self",
                    "loss"
                ],
                "_unscale_grads": [
                    "self",
                    "grads"
                ],
                "_scale_grad": [
                    "self",
                    "grad",
                    "loss_scale_reciprical"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_distributed_apply": [
                    "self",
                    "distribution",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_apply_gradients": [
                    "self",
                    "distribution",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "handle",
                    "indices"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle"
                ]
            }
        },
        "tensorflow_core.python.training.experimental.mixed_precision": {
            "_wrap_optimizer": [
                "opt",
                "loss_scale",
                "use_v1_behavior"
            ],
            "enable_mixed_precision_graph_rewrite": [
                "opt",
                "loss_scale"
            ],
            "enable_mixed_precision_graph_rewrite_v1": [
                "opt",
                "loss_scale"
            ],
            "_enable_mixed_precision_graph_rewrite_base": [
                "opt",
                "loss_scale",
                "use_v1_behavior"
            ],
            "disable_mixed_precision_graph_rewrite": [],
            "disable_mixed_precision_graph_rewrite_v1": []
        },
        "tensorflow_core.python.training.experimental": {},
        "tensorflow_core.python.compat.v2_compat": {
            "enable_v2_behavior": [],
            "disable_v2_behavior": []
        },
        "tensorflow_core.python.compat.compat": {
            "_get_forward_compatibility_date": [],
            "forward_compatible": [
                "year",
                "month",
                "day"
            ],
            "forward_compatibility_horizon": [
                "year",
                "month",
                "day"
            ]
        },
        "tensorflow_core.python.compat": {},
        "tensorflow_core.python.feature_column.dense_features_v2": {
            "DenseFeatures": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "_"
                ]
            }
        },
        "tensorflow_core.python.feature_column.dense_features": {
            "DenseFeatures": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "trainable",
                    "name"
                ],
                "_is_feature_layer": [
                    "self"
                ],
                "_tracking_metadata": [
                    "self"
                ],
                "_target_shape": [
                    "self",
                    "input_shape",
                    "total_elements"
                ],
                "call": [
                    "self",
                    "features",
                    "cols_to_output_tensors"
                ]
            }
        },
        "tensorflow_core.python.feature_column.feature_column_lib": {},
        "tensorflow_core.python.feature_column.utils": {
            "sequence_length_from_sparse_tensor": [
                "sp_tensor",
                "num_elements"
            ],
            "assert_string_or_int": [
                "dtype",
                "prefix"
            ],
            "assert_key_is_string": [
                "key"
            ],
            "check_default_value": [
                "shape",
                "default_value",
                "dtype",
                "key"
            ],
            "_create_tuple": [
                "shape",
                "value"
            ],
            "_as_tuple": [
                "value"
            ],
            "_is_shape_and_default_value_compatible": [
                "default_value",
                "shape"
            ]
        },
        "tensorflow_core.python.feature_column.feature_column": {
            "_internal_input_layer": [
                "features",
                "feature_columns",
                "weight_collections",
                "trainable",
                "cols_to_vars",
                "scope",
                "cols_to_output_tensors",
                "from_template"
            ],
            "input_layer": [
                "features",
                "feature_columns",
                "weight_collections",
                "trainable",
                "cols_to_vars",
                "cols_to_output_tensors"
            ],
            "linear_model": [
                "features",
                "feature_columns",
                "units",
                "sparse_combiner",
                "weight_collections",
                "trainable",
                "cols_to_vars"
            ],
            "_add_to_collections": [
                "var",
                "weight_collections"
            ],
            "_get_expanded_variable_list": [
                "variable"
            ],
            "_strip_leading_slashes": [
                "name"
            ],
            "_transform_features": [
                "features",
                "feature_columns"
            ],
            "make_parse_example_spec": [
                "feature_columns"
            ],
            "_embedding_column": [
                "categorical_column",
                "dimension",
                "combiner",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm",
                "trainable"
            ],
            "_numeric_column": [
                "key",
                "shape",
                "default_value",
                "dtype",
                "normalizer_fn"
            ],
            "_bucketized_column": [
                "source_column",
                "boundaries"
            ],
            "_categorical_column_with_hash_bucket": [
                "key",
                "hash_bucket_size",
                "dtype"
            ],
            "_categorical_column_with_vocabulary_file": [
                "key",
                "vocabulary_file",
                "vocabulary_size",
                "num_oov_buckets",
                "default_value",
                "dtype"
            ],
            "_categorical_column_with_vocabulary_list": [
                "key",
                "vocabulary_list",
                "dtype",
                "default_value",
                "num_oov_buckets"
            ],
            "_categorical_column_with_identity": [
                "key",
                "num_buckets",
                "default_value"
            ],
            "_indicator_column": [
                "categorical_column"
            ],
            "_weighted_categorical_column": [
                "categorical_column",
                "weight_feature_key",
                "dtype"
            ],
            "_crossed_column": [
                "keys",
                "hash_bucket_size",
                "hash_key"
            ],
            "_create_weighted_sum": [
                "column",
                "builder",
                "units",
                "sparse_combiner",
                "weight_collections",
                "trainable",
                "weight_var"
            ],
            "_create_dense_column_weighted_sum": [
                "column",
                "builder",
                "units",
                "weight_collections",
                "trainable",
                "weight_var"
            ],
            "_create_categorical_column_weighted_sum": [
                "column",
                "builder",
                "units",
                "sparse_combiner",
                "weight_collections",
                "trainable",
                "weight_var"
            ],
            "_shape_offsets": [
                "shape"
            ],
            "_to_sparse_input_and_drop_ignore_values": [
                "input_tensor",
                "ignore_value"
            ],
            "_normalize_feature_columns": [
                "feature_columns"
            ],
            "_get_graph_for_variable": [
                "var"
            ],
            "_check_shape": [
                "shape",
                "key"
            ],
            "_collect_leaf_level_keys": [
                "cross"
            ],
            "_verify_static_batch_size_equality": [
                "tensors",
                "columns"
            ],
            "InputLayer": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "weight_collections",
                    "trainable",
                    "cols_to_vars",
                    "name",
                    "create_scope_now"
                ],
                "__call__": [
                    "self",
                    "features"
                ],
                "name": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "trainable_variables": [
                    "self"
                ],
                "trainable_weights": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "weights": [
                    "self"
                ]
            },
            "_FCLinearWrapper": {
                "__init__": [
                    "self",
                    "feature_column",
                    "units",
                    "sparse_combiner",
                    "weight_collections",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "call": [
                    "self",
                    "builder"
                ]
            },
            "_BiasLayer": {
                "__init__": [
                    "self",
                    "units",
                    "trainable",
                    "weight_collections",
                    "name"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "call": [
                    "self",
                    "_"
                ]
            },
            "_LinearModel": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "units",
                    "sparse_combiner",
                    "weight_collections",
                    "trainable",
                    "name"
                ],
                "cols_to_vars": [
                    "self"
                ],
                "call": [
                    "self",
                    "features"
                ],
                "_add_layers": [
                    "self",
                    "layers"
                ]
            },
            "_EmbeddingColumnLayer": {
                "__init__": [
                    "self",
                    "embedding_shape",
                    "initializer",
                    "weight_collections",
                    "trainable",
                    "name"
                ],
                "set_weight_collections": [
                    "self",
                    "weight_collections"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "call": [
                    "self",
                    "_"
                ]
            },
            "_FeatureColumn": {
                "name": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "_var_scope_name": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_reset_config": [
                    "self"
                ]
            },
            "_DenseColumn": {
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_CategoricalColumn": {
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_SequenceDenseColumn": {
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_LazyBuilder": {
                "__init__": [
                    "self",
                    "features"
                ],
                "get": [
                    "self",
                    "key"
                ],
                "_get_raw_feature_as_tensor": [
                    "self",
                    "key"
                ]
            },
            "_NumericColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_BucketizedColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_EmbeddingColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor_internal": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_SharedEmbeddingColumn": {
                "name": [
                    "self"
                ],
                "_var_scope_name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor_internal": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_HashedCategoricalColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_VocabularyFileCategoricalColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_VocabularyListCategoricalColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_IdentityCategoricalColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_WeightedCategoricalColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_CrossedColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_IndicatorColumn": {
                "name": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_SequenceCategoricalColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            }
        },
        "tensorflow_core.python.feature_column.serialization": {
            "serialize_feature_column": [
                "fc"
            ],
            "deserialize_feature_column": [
                "config",
                "custom_objects",
                "columns_by_name"
            ],
            "serialize_feature_columns": [
                "feature_columns"
            ],
            "deserialize_feature_columns": [
                "configs",
                "custom_objects"
            ],
            "_column_name_with_class_name": [
                "fc"
            ]
        },
        "tensorflow_core.python.feature_column.sequence_feature_column": {
            "concatenate_context_input": [
                "context_input",
                "sequence_input"
            ],
            "sequence_categorical_column_with_identity": [
                "key",
                "num_buckets",
                "default_value"
            ],
            "sequence_categorical_column_with_hash_bucket": [
                "key",
                "hash_bucket_size",
                "dtype"
            ],
            "sequence_categorical_column_with_vocabulary_file": [
                "key",
                "vocabulary_file",
                "vocabulary_size",
                "num_oov_buckets",
                "default_value",
                "dtype"
            ],
            "sequence_categorical_column_with_vocabulary_list": [
                "key",
                "vocabulary_list",
                "dtype",
                "default_value",
                "num_oov_buckets"
            ],
            "sequence_numeric_column": [
                "key",
                "shape",
                "default_value",
                "dtype",
                "normalizer_fn"
            ],
            "_assert_all_equal_and_return": [
                "tensors",
                "name"
            ],
            "SequenceFeatures": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "trainable",
                    "name"
                ],
                "_is_feature_layer": [
                    "self"
                ],
                "_target_shape": [
                    "self",
                    "input_shape",
                    "total_elements"
                ],
                "call": [
                    "self",
                    "features"
                ]
            },
            "SequenceNumericColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "variable_shape": [
                    "self"
                ],
                "get_sequence_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            }
        },
        "tensorflow_core.python.feature_column.feature_column_v2": {
            "_transform_features_v2": [
                "features",
                "feature_columns",
                "state_manager"
            ],
            "make_parse_example_spec_v2": [
                "feature_columns"
            ],
            "embedding_column": [
                "categorical_column",
                "dimension",
                "combiner",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm",
                "trainable"
            ],
            "shared_embedding_columns": [
                "categorical_columns",
                "dimension",
                "combiner",
                "initializer",
                "shared_embedding_collection_name",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm",
                "trainable"
            ],
            "shared_embedding_columns_v2": [
                "categorical_columns",
                "dimension",
                "combiner",
                "initializer",
                "shared_embedding_collection_name",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm",
                "trainable"
            ],
            "numeric_column": [
                "key",
                "shape",
                "default_value",
                "dtype",
                "normalizer_fn"
            ],
            "bucketized_column": [
                "source_column",
                "boundaries"
            ],
            "categorical_column_with_hash_bucket": [
                "key",
                "hash_bucket_size",
                "dtype"
            ],
            "categorical_column_with_vocabulary_file": [
                "key",
                "vocabulary_file",
                "vocabulary_size",
                "num_oov_buckets",
                "default_value",
                "dtype"
            ],
            "categorical_column_with_vocabulary_file_v2": [
                "key",
                "vocabulary_file",
                "vocabulary_size",
                "dtype",
                "default_value",
                "num_oov_buckets"
            ],
            "categorical_column_with_vocabulary_list": [
                "key",
                "vocabulary_list",
                "dtype",
                "default_value",
                "num_oov_buckets"
            ],
            "categorical_column_with_identity": [
                "key",
                "num_buckets",
                "default_value"
            ],
            "indicator_column": [
                "categorical_column"
            ],
            "weighted_categorical_column": [
                "categorical_column",
                "weight_feature_key",
                "dtype"
            ],
            "crossed_column": [
                "keys",
                "hash_bucket_size",
                "hash_key"
            ],
            "is_feature_column_v2": [
                "feature_columns"
            ],
            "_create_weighted_sum": [
                "column",
                "transformation_cache",
                "state_manager",
                "sparse_combiner",
                "weight_var"
            ],
            "_create_dense_column_weighted_sum": [
                "column",
                "transformation_cache",
                "state_manager",
                "weight_var"
            ],
            "_create_categorical_column_weighted_sum": [
                "column",
                "transformation_cache",
                "state_manager",
                "sparse_combiner",
                "weight_var"
            ],
            "_to_sparse_input_and_drop_ignore_values": [
                "input_tensor",
                "ignore_value"
            ],
            "_normalize_feature_columns": [
                "feature_columns"
            ],
            "_raise_shared_embedding_column_error": [],
            "_check_shape": [
                "shape",
                "key"
            ],
            "_collect_leaf_level_keys": [
                "cross"
            ],
            "_prune_invalid_ids": [
                "sparse_ids",
                "sparse_weights"
            ],
            "_prune_invalid_weights": [
                "sparse_ids",
                "sparse_weights"
            ],
            "_verify_static_batch_size_equality": [
                "tensors",
                "columns"
            ],
            "_check_config_keys": [
                "config",
                "expected_keys"
            ],
            "_standardize_and_copy_config": [
                "config"
            ],
            "StateManager": {
                "create_variable": [
                    "self",
                    "feature_column",
                    "name",
                    "shape",
                    "dtype",
                    "trainable",
                    "use_resource",
                    "initializer"
                ],
                "add_variable": [
                    "self",
                    "feature_column",
                    "var"
                ],
                "get_variable": [
                    "self",
                    "feature_column",
                    "name"
                ],
                "add_resource": [
                    "self",
                    "feature_column",
                    "name",
                    "resource"
                ],
                "get_resource": [
                    "self",
                    "feature_column",
                    "name"
                ]
            },
            "_StateManagerImpl": {
                "__init__": [
                    "self",
                    "layer",
                    "trainable"
                ],
                "create_variable": [
                    "self",
                    "feature_column",
                    "name",
                    "shape",
                    "dtype",
                    "trainable",
                    "use_resource",
                    "initializer"
                ],
                "get_variable": [
                    "self",
                    "feature_column",
                    "name"
                ],
                "add_resource": [
                    "self",
                    "feature_column",
                    "name",
                    "resource"
                ],
                "get_resource": [
                    "self",
                    "feature_column",
                    "name"
                ]
            },
            "_StateManagerImplV2": {
                "create_variable": [
                    "self",
                    "feature_column",
                    "name",
                    "shape",
                    "dtype",
                    "trainable",
                    "use_resource",
                    "initializer"
                ]
            },
            "_BaseFeaturesLayer": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "expected_column_type",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "_output_shape": [
                    "self",
                    "input_shape",
                    "num_elements"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ],
                "_process_dense_tensor": [
                    "self",
                    "column",
                    "tensor"
                ],
                "_verify_and_concat_tensors": [
                    "self",
                    "output_tensors"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "_LinearModelLayer": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "units",
                    "sparse_combiner",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "call": [
                    "self",
                    "features"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "LinearModel": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "units",
                    "sparse_combiner",
                    "trainable",
                    "name"
                ],
                "call": [
                    "self",
                    "features"
                ],
                "bias": [
                    "self"
                ]
            },
            "FeatureColumn": {
                "name": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "create_state": [
                    "self",
                    "state_manager"
                ],
                "_is_v2_column": [
                    "self"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "DenseColumn": {
                "variable_shape": [
                    "self"
                ],
                "get_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ]
            },
            "CategoricalColumn": {
                "num_buckets": [
                    "self"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ]
            },
            "SequenceDenseColumn": {
                "get_sequence_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ]
            },
            "FeatureTransformationCache": {
                "__init__": [
                    "self",
                    "features"
                ],
                "get": [
                    "self",
                    "key",
                    "state_manager"
                ],
                "_get_raw_feature_as_tensor": [
                    "self",
                    "key"
                ]
            },
            "NumericColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "variable_shape": [
                    "self"
                ],
                "_variable_shape": [
                    "self"
                ],
                "get_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "BucketizedColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "variable_shape": [
                    "self"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor_for_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "get_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors_for_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "EmbeddingColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "variable_shape": [
                    "self"
                ],
                "_variable_shape": [
                    "self"
                ],
                "create_state": [
                    "self",
                    "state_manager"
                ],
                "_get_dense_tensor_internal_helper": [
                    "self",
                    "sparse_tensors",
                    "embedding_weights"
                ],
                "_get_dense_tensor_internal": [
                    "self",
                    "sparse_tensors",
                    "state_manager"
                ],
                "_old_get_dense_tensor_internal": [
                    "self",
                    "sparse_tensors",
                    "weight_collections",
                    "trainable"
                ],
                "get_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "get_sequence_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "SharedEmbeddingColumnCreator": {
                "__init__": [
                    "self",
                    "dimension",
                    "initializer",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "num_buckets",
                    "trainable",
                    "name"
                ],
                "__call__": [
                    "self",
                    "categorical_column",
                    "combiner",
                    "max_norm"
                ],
                "embedding_weights": [
                    "self"
                ],
                "dimension": [
                    "self"
                ]
            },
            "SharedEmbeddingColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "variable_shape": [
                    "self"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor_internal": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "get_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "get_sequence_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "HashedCategoricalColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "VocabularyFileCategoricalColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_input_tensor": [
                    "self",
                    "input_tensor",
                    "state_manager"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "VocabularyListCategoricalColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_input_tensor": [
                    "self",
                    "input_tensor",
                    "state_manager"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "IdentityCategoricalColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "WeightedCategoricalColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_transform_weight_tensor": [
                    "self",
                    "weight_tensor"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "CrossedColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "IndicatorColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_transform_id_weight_pair": [
                    "self",
                    "id_weight_pair"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "variable_shape": [
                    "self"
                ],
                "_variable_shape": [
                    "self"
                ],
                "get_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "get_sequence_dense_tensor": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            },
            "SequenceCategoricalColumn": {
                "_is_v2_column": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parse_example_spec": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "transform_feature": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "num_buckets": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors_helper": [
                    "self",
                    "sparse_tensors"
                ],
                "get_sparse_tensors": [
                    "self",
                    "transformation_cache",
                    "state_manager"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "parents": [
                    "self"
                ],
                "_get_config": [
                    "self"
                ],
                "_from_config": [
                    "cls",
                    "config",
                    "custom_objects",
                    "columns_by_name"
                ]
            }
        },
        "tensorflow_core.python.feature_column": {},
        "tensorflow_core.contrib": {},
        "tensorflow_core.contrib.hadoop": {},
        "tensorflow_core.contrib.hadoop.python": {},
        "tensorflow_core.contrib.hadoop.python.ops.hadoop_dataset_ops": {
            "SequenceFileDataset": {
                "__init__": [
                    "self",
                    "filenames"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.hadoop.python.ops.hadoop_op_loader": {},
        "tensorflow_core.contrib.hadoop.python.ops.gen_dataset_ops": {
            "sequence_file_dataset": [
                "filenames",
                "output_types",
                "name"
            ],
            "SequenceFileDataset": [
                "filenames",
                "output_types",
                "name"
            ],
            "sequence_file_dataset_eager_fallback": [
                "filenames",
                "output_types",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.hadoop.python.ops": {},
        "tensorflow_core.contrib.testing": {},
        "tensorflow_core.contrib.testing.python": {},
        "tensorflow_core.contrib.testing.python.framework.util_test": {
            "assert_summary": [
                "expected_tags",
                "expected_simple_values",
                "summary_proto"
            ],
            "to_summary_proto": [
                "summary_str"
            ],
            "latest_event_file": [
                "base_dir"
            ],
            "latest_events": [
                "base_dir"
            ],
            "latest_summaries": [
                "base_dir"
            ],
            "simple_values_from_events": [
                "events",
                "tags"
            ]
        },
        "tensorflow_core.contrib.testing.python.framework.fake_summary_writer": {
            "FakeSummaryWriter": {
                "install": [
                    "cls"
                ],
                "uninstall": [
                    "cls"
                ],
                "__init__": [
                    "self",
                    "logdir",
                    "graph"
                ],
                "summaries": [
                    "self"
                ],
                "assert_summaries": [
                    "self",
                    "test_case",
                    "expected_logdir",
                    "expected_graph",
                    "expected_summaries",
                    "expected_added_graphs",
                    "expected_added_meta_graphs",
                    "expected_session_logs"
                ],
                "add_summary": [
                    "self",
                    "summ",
                    "current_global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "add_run_metadata": [
                    "self",
                    "run_metadata",
                    "tag",
                    "global_step"
                ],
                "flush": [
                    "self"
                ],
                "reopen": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.testing.python.framework": {},
        "tensorflow_core.contrib.tensorboard": {},
        "tensorflow_core.contrib.tensorboard.plugins": {},
        "tensorflow_core.contrib.tensorboard.plugins.projector.projector_config_pb2": {},
        "tensorflow_core.contrib.tensorboard.plugins.projector": {
            "visualize_embeddings": [
                "summary_writer",
                "config"
            ]
        },
        "tensorflow_core.contrib.metrics": {},
        "tensorflow_core.contrib.metrics.python": {},
        "tensorflow_core.contrib.metrics.python.metrics.classification": {
            "accuracy": [
                "predictions",
                "labels",
                "weights",
                "name"
            ],
            "f1_score": [
                "labels",
                "predictions",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ]
        },
        "tensorflow_core.contrib.metrics.python.metrics": {},
        "tensorflow_core.contrib.metrics.python.ops.histogram_ops": {
            "auc_using_histogram": [
                "boolean_labels",
                "scores",
                "score_range",
                "nbins",
                "collections",
                "check_shape",
                "name"
            ],
            "_check_labels_and_scores": [
                "boolean_labels",
                "scores",
                "check_shape"
            ],
            "_make_auc_histograms": [
                "boolean_labels",
                "scores",
                "score_range",
                "nbins"
            ],
            "_auc_hist_accumulate": [
                "hist_true",
                "hist_false",
                "nbins",
                "collections"
            ],
            "_auc_convert_hist_to_auc": [
                "hist_true_acc",
                "hist_false_acc",
                "nbins"
            ],
            "_strict_1d_cumsum": [
                "tensor",
                "len_tensor"
            ],
            "_strict_conv1d": [
                "x",
                "h"
            ]
        },
        "tensorflow_core.contrib.metrics.python.ops.confusion_matrix_ops": {
            "confusion_matrix": [
                "labels",
                "predictions",
                "num_classes",
                "dtype",
                "name",
                "weights"
            ]
        },
        "tensorflow_core.contrib.metrics.python.ops.metric_ops": {
            "streaming_true_positives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_true_negatives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_positives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_negatives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_tensor": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_accuracy": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_precision": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_recall": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_positive_rate": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_negative_rate": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_streaming_confusion_matrix_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "includes"
            ],
            "streaming_true_positives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_false_negatives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_false_positives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_true_negatives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_curve_points": [
                "labels",
                "predictions",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "curve",
                "name"
            ],
            "streaming_auc": [
                "predictions",
                "labels",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "curve",
                "name"
            ],
            "_compute_dynamic_auc": [
                "labels",
                "predictions",
                "curve",
                "weights"
            ],
            "streaming_dynamic_auc": [
                "labels",
                "predictions",
                "curve",
                "metrics_collections",
                "updates_collections",
                "name",
                "weights"
            ],
            "_compute_placement_auc": [
                "labels",
                "predictions",
                "weights",
                "alpha",
                "logit_transformation",
                "is_valid"
            ],
            "auc_with_confidence_intervals": [
                "labels",
                "predictions",
                "weights",
                "alpha",
                "logit_transformation",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "precision_recall_at_equal_thresholds": [
                "labels",
                "predictions",
                "weights",
                "num_thresholds",
                "use_locking",
                "name"
            ],
            "streaming_specificity_at_sensitivity": [
                "predictions",
                "labels",
                "sensitivity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sensitivity_at_specificity": [
                "predictions",
                "labels",
                "specificity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_precision_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_recall_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_positive_rate_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_negative_rate_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_at_k_name": [
                "name",
                "k",
                "class_id"
            ],
            "streaming_recall_at_k": [
                "predictions",
                "labels",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_recall_at_k": [
                "predictions",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_precision_at_k": [
                "predictions",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_precision_at_top_k": [
                "top_k_predictions",
                "labels",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "sparse_recall_at_top_k": [
                "labels",
                "top_k_predictions",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_compute_recall_at_precision": [
                "tp",
                "fp",
                "fn",
                "precision",
                "name",
                "strict_mode"
            ],
            "recall_at_precision": [
                "labels",
                "predictions",
                "precision",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name",
                "strict_mode"
            ],
            "precision_at_recall": [
                "labels",
                "predictions",
                "target_recall",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_average_precision_at_k": [
                "predictions",
                "labels",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_average_precision_at_top_k": [
                "top_k_predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_absolute_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_relative_error": [
                "predictions",
                "labels",
                "normalizer",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_root_mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_covariance": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_pearson_correlation": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_cosine_distance": [
                "predictions",
                "labels",
                "dim",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_percentage_less": [
                "values",
                "threshold",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_iou": [
                "predictions",
                "labels",
                "num_classes",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_next_array_size": [
                "required_size",
                "growth_factor"
            ],
            "streaming_concat": [
                "values",
                "axis",
                "max_size",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "aggregate_metrics": [],
            "aggregate_metric_map": [
                "names_to_tuples"
            ],
            "count": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "cohen_kappa": [
                "labels",
                "predictions_idx",
                "num_classes",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ]
        },
        "tensorflow_core.contrib.metrics.python.ops.set_ops": {},
        "tensorflow_core.contrib.metrics.python.ops": {},
        "tensorflow_core.contrib.losses": {},
        "tensorflow_core.contrib.losses.python": {},
        "tensorflow_core.contrib.losses.python.losses": {},
        "tensorflow_core.contrib.losses.python.losses.loss_ops": {
            "_scale_losses": [
                "losses",
                "weights"
            ],
            "_safe_mean": [
                "losses",
                "num_present"
            ],
            "compute_weighted_loss": [
                "losses",
                "weights",
                "scope"
            ],
            "_num_present": [
                "losses",
                "weights",
                "per_batch"
            ],
            "add_loss": [
                "loss",
                "loss_collection"
            ],
            "get_losses": [
                "scope",
                "loss_collection"
            ],
            "get_regularization_losses": [
                "scope"
            ],
            "get_total_loss": [
                "add_regularization_losses",
                "name"
            ],
            "absolute_difference": [
                "predictions",
                "labels",
                "weights",
                "scope"
            ],
            "sigmoid_cross_entropy": [
                "logits",
                "multi_class_labels",
                "weights",
                "label_smoothing",
                "scope"
            ],
            "softmax_cross_entropy": [
                "logits",
                "onehot_labels",
                "weights",
                "label_smoothing",
                "scope"
            ],
            "sparse_softmax_cross_entropy": [
                "logits",
                "labels",
                "weights",
                "scope"
            ],
            "log_loss": [
                "predictions",
                "labels",
                "weights",
                "epsilon",
                "scope"
            ],
            "hinge_loss": [
                "logits",
                "labels",
                "scope"
            ],
            "mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "scope"
            ],
            "mean_pairwise_squared_error": [
                "predictions",
                "labels",
                "weights",
                "scope"
            ],
            "cosine_distance": [
                "predictions",
                "labels",
                "axis",
                "weights",
                "scope",
                "dim"
            ]
        },
        "tensorflow_core.contrib.losses.python.metric_learning.metric_loss_ops": {
            "pairwise_distance": [
                "feature",
                "squared"
            ],
            "contrastive_loss": [
                "labels",
                "embeddings_anchor",
                "embeddings_positive",
                "margin"
            ],
            "masked_maximum": [
                "data",
                "mask",
                "dim"
            ],
            "masked_minimum": [
                "data",
                "mask",
                "dim"
            ],
            "triplet_semihard_loss": [
                "labels",
                "embeddings",
                "margin"
            ],
            "npairs_loss": [
                "labels",
                "embeddings_anchor",
                "embeddings_positive",
                "reg_lambda",
                "print_losses"
            ],
            "_build_multilabel_adjacency": [
                "sparse_labels"
            ],
            "npairs_loss_multilabel": [
                "sparse_labels",
                "embeddings_anchor",
                "embeddings_positive",
                "reg_lambda",
                "print_losses"
            ],
            "lifted_struct_loss": [
                "labels",
                "embeddings",
                "margin"
            ],
            "update_1d_tensor": [
                "y",
                "index",
                "value"
            ],
            "get_cluster_assignment": [
                "pairwise_distances",
                "centroid_ids"
            ],
            "compute_facility_energy": [
                "pairwise_distances",
                "centroid_ids"
            ],
            "compute_clustering_score": [
                "labels",
                "predictions",
                "margin_type"
            ],
            "_compute_nmi_score": [
                "labels",
                "predictions"
            ],
            "_compute_ami_score": [
                "labels",
                "predictions"
            ],
            "_compute_ari_score": [
                "labels",
                "predictions"
            ],
            "_compute_vmeasure_score": [
                "labels",
                "predictions"
            ],
            "_compute_zeroone_score": [
                "labels",
                "predictions"
            ],
            "_find_loss_augmented_facility_idx": [
                "pairwise_distances",
                "labels",
                "chosen_ids",
                "candidate_ids",
                "margin_multiplier",
                "margin_type"
            ],
            "compute_augmented_facility_locations": [
                "pairwise_distances",
                "labels",
                "all_ids",
                "margin_multiplier",
                "margin_type"
            ],
            "update_medoid_per_cluster": [
                "pairwise_distances",
                "pairwise_distances_subset",
                "labels",
                "chosen_ids",
                "cluster_member_ids",
                "cluster_idx",
                "margin_multiplier",
                "margin_type"
            ],
            "update_all_medoids": [
                "pairwise_distances",
                "predictions",
                "labels",
                "chosen_ids",
                "margin_multiplier",
                "margin_type"
            ],
            "compute_augmented_facility_locations_pam": [
                "pairwise_distances",
                "labels",
                "margin_multiplier",
                "margin_type",
                "chosen_ids",
                "pam_max_iter"
            ],
            "compute_gt_cluster_score": [
                "pairwise_distances",
                "labels"
            ],
            "cluster_loss": [
                "labels",
                "embeddings",
                "margin_multiplier",
                "enable_pam_finetuning",
                "margin_type",
                "print_losses"
            ]
        },
        "tensorflow_core.contrib.losses.python.metric_learning": {},
        "tensorflow_core.contrib.hooks": {},
        "tensorflow_core.contrib.hooks.python": {},
        "tensorflow_core.contrib.hooks.python.training.profiler_hook": {},
        "tensorflow_core.contrib.hooks.python.training": {},
        "tensorflow_core.contrib.tpu": {},
        "tensorflow_core.contrib.tpu.python": {},
        "tensorflow_core.contrib.tpu.python.tpu.topology": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_feed": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_sharding": {},
        "tensorflow_core.contrib.tpu.python.tpu.keras_tpu_variables": {
            "_handle_graph": [
                "handle"
            ],
            "_enclosing_tpu_context": [],
            "_tensor_conversion": [
                "var",
                "dtype",
                "name",
                "as_ref"
            ],
            "replicated_fetch_function": [
                "var"
            ],
            "replicated_scope": [
                "num_replicas"
            ],
            "replicated_variable_for_optimizer": [
                "num_replicas"
            ],
            "ReplicatedVariable": {
                "__init__": [
                    "self",
                    "name",
                    "variables"
                ],
                "handle": [
                    "self"
                ],
                "_assign_dependencies": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "_shared_name": [
                    "self"
                ],
                "_unique_id": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "constraint": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "is_tensor_like": [
                    "self"
                ],
                "_read_variable_op": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "is_initialized": [
                    "self",
                    "name"
                ],
                "__getitem__": [
                    "self"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_add": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "assign_sub": [
                    "self",
                    "delta",
                    "use_locking",
                    "name",
                    "read_value"
                ],
                "get": [
                    "self"
                ],
                "_in_graph_mode": [
                    "self"
                ],
                "_should_act_as_resource_variable": [
                    "self"
                ],
                "_dense_var_to_tensor": [
                    "self",
                    "dtype",
                    "name",
                    "as_ref"
                ]
            }
        },
        "tensorflow_core.contrib.tpu.python.tpu.tpu": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_function": {},
        "tensorflow_core.contrib.tpu.python.tpu.feature_column": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_system_metadata": {},
        "tensorflow_core.contrib.tpu.python.tpu.error_handling": {},
        "tensorflow_core.contrib.tpu.python.tpu.bfloat16": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_config": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_estimator": {},
        "tensorflow_core.contrib.tpu.python.tpu.keras_support": {
            "_maybe_initialize_tpu": [
                "session"
            ],
            "_tpu_session_context": [],
            "setup_tpu_session": [
                "cluster_resolver"
            ],
            "get_tpu_system_metadata": [
                "tpu_cluster_resolver"
            ],
            "_cross_replica_concat": [
                "tensor",
                "core_id",
                "num_cores",
                "name"
            ],
            "_valid_name": [
                "tensor_name"
            ],
            "_replicated_optimizer": [
                "opt"
            ],
            "_clone_optimizer": [
                "optimizer",
                "config",
                "worker_name"
            ],
            "_inject_tpu_inputs_for_dataset": [
                "tpu_assignment",
                "mode",
                "input_specs",
                "get_next_ops"
            ],
            "_inject_tpu_inputs_for_infeed": [
                "tpu_assignment",
                "mode",
                "core_id_place_holder",
                "input_tensors",
                "inputs"
            ],
            "_read_tpu_coreid_from_infeed": [
                "mode",
                "infeed_tensors"
            ],
            "_validate_shapes": [
                "model"
            ],
            "tpu_model": [
                "model",
                "strategy"
            ],
            "TPUDistributionStrategy": {
                "__init__": [
                    "self",
                    "tpu_cluster_resolver",
                    "using_single_core"
                ],
                "_make_assignment_for_model": [
                    "self",
                    "cpu_model"
                ]
            },
            "TPUAssignment": {
                "__init__": [
                    "self",
                    "worker_name",
                    "num_cores"
                ],
                "worker_name": [
                    "self"
                ],
                "num_towers": [
                    "self"
                ]
            },
            "TPUEmbedding": {
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "KerasCrossShardOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "name"
                ],
                "get_updates": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_gradients": [
                    "self",
                    "loss",
                    "params"
                ],
                "get_weights": [
                    "self"
                ],
                "get_config": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "key"
                ]
            },
            "TPUModelOp": {},
            "TPURewriteContext": {
                "__init__": [
                    "self",
                    "input_map"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ]
            },
            "SizedInfeed": {},
            "TPUInfeedInstance": {
                "make_input_specs": [
                    "self",
                    "input_tensors"
                ],
                "make_feed_dict": [
                    "self",
                    "tpu_model_op"
                ]
            },
            "TPUInfeedManager": {
                "make_infeed_instance": [
                    "self",
                    "inputs"
                ],
                "build_infeed_from_input_specs": [
                    "self",
                    "input_specs",
                    "execution_mode"
                ]
            },
            "TPUNumpyInfeedManager": {
                "__init__": [
                    "self",
                    "tpu_assignment"
                ],
                "_split_tensors": [
                    "self",
                    "inputs"
                ],
                "make_infeed_instance": [
                    "self",
                    "inputs"
                ],
                "build_infeed_from_input_specs": [
                    "self",
                    "input_specs",
                    "execution_mode"
                ]
            },
            "TPUDatasetInfeedManager": {
                "__init__": [
                    "self",
                    "dataset",
                    "tpu_assignment",
                    "mode"
                ],
                "_verify_dataset_shape": [
                    "self",
                    "dataset"
                ],
                "dummy_x": [
                    "self"
                ],
                "dummy_y": [
                    "self"
                ],
                "make_infeed_instance": [
                    "self",
                    "inputs"
                ],
                "build_infeed_from_input_specs": [
                    "self",
                    "input_specs",
                    "execution_mode"
                ]
            },
            "TPUFunction": {
                "__init__": [
                    "self",
                    "model",
                    "execution_mode",
                    "tpu_assignment"
                ],
                "_specialize_model": [
                    "self",
                    "input_specs",
                    "infeed_manager"
                ],
                "_test_model_compiles": [
                    "self",
                    "tpu_model_ops"
                ],
                "_lookup_infeed_manager": [
                    "self",
                    "inputs"
                ],
                "_tpu_model_ops_for_input_specs": [
                    "self",
                    "input_specs",
                    "infeed_manager"
                ],
                "_construct_input_tensors_and_inputs": [
                    "self",
                    "inputs"
                ],
                "_process_outputs": [
                    "self",
                    "outfeed_outputs"
                ],
                "__call__": [
                    "self",
                    "inputs"
                ],
                "pipeline_run": [
                    "self",
                    "cur_step_inputs",
                    "next_step_inputs"
                ]
            },
            "KerasTPUModel": {
                "__init__": [
                    "self",
                    "cpu_model",
                    "strategy"
                ],
                "get_config": [
                    "self"
                ],
                "compile": [
                    "self",
                    "optimizer",
                    "loss",
                    "metrics",
                    "loss_weights",
                    "sample_weight_mode",
                    "weighted_metrics",
                    "target_tensors"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "verbose",
                    "sample_weight",
                    "steps"
                ],
                "_pipeline_fit": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "validation_split",
                    "validation_data",
                    "shuffle",
                    "class_weight",
                    "sample_weight",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps"
                ],
                "_pipeline_fit_loop": [
                    "self",
                    "inputs",
                    "targets",
                    "sample_weights",
                    "batch_size",
                    "epochs",
                    "verbose",
                    "callbacks",
                    "val_inputs",
                    "val_targets",
                    "val_sample_weights",
                    "shuffle",
                    "initial_epoch",
                    "steps_per_epoch",
                    "validation_steps"
                ],
                "_pipeline_fit_loop_sample_wise": [
                    "self",
                    "ins",
                    "callbacks",
                    "index_array",
                    "shuffle",
                    "batch_size",
                    "num_training_samples",
                    "indices_for_conversion_to_dense",
                    "do_validation",
                    "val_inputs",
                    "val_targets",
                    "val_sample_weights",
                    "validation_steps",
                    "epoch_logs"
                ],
                "_pipeline_fit_loop_step_wise": [
                    "self",
                    "ins",
                    "callbacks",
                    "steps_per_epoch",
                    "epochs",
                    "do_validation",
                    "val_inputs",
                    "val_targets",
                    "val_sample_weights",
                    "validation_steps",
                    "epoch_logs"
                ],
                "_prepare_validation_data": [
                    "self",
                    "validation_data",
                    "validation_split",
                    "validation_steps",
                    "x",
                    "y",
                    "sample_weights",
                    "batch_size"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size",
                    "verbose",
                    "steps",
                    "max_queue_size",
                    "workers",
                    "use_multiprocessing"
                ],
                "optimizer": [
                    "self",
                    "optimizer"
                ],
                "metrics": [
                    "self",
                    "metrics"
                ],
                "_make_train_function": [
                    "self"
                ],
                "_make_test_function": [
                    "self"
                ],
                "_make_predict_function": [
                    "self"
                ],
                "_initialize_weights": [
                    "self",
                    "cloned_model"
                ],
                "cpu_optimizer": [
                    "self"
                ],
                "sync_to_cpu": [
                    "self"
                ],
                "get_weights": [
                    "self"
                ],
                "save_weights": [
                    "self"
                ],
                "save": [
                    "self"
                ],
                "set_weights": [
                    "self",
                    "weights"
                ],
                "load_weights": [
                    "self",
                    "filepath",
                    "by_name"
                ]
            }
        },
        "tensorflow_core.contrib.tpu.python.tpu.training_loop": {},
        "tensorflow_core.contrib.tpu.python.tpu.util": {},
        "tensorflow_core.contrib.tpu.python.tpu._tpu_estimator_embedding": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_embedding_gradient": {},
        "tensorflow_core.contrib.tpu.python.tpu.async_checkpoint": {},
        "tensorflow_core.contrib.tpu.python.tpu.tensor_tracer": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_embedding": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_optimizer": {},
        "tensorflow_core.contrib.tpu.python.tpu.tpu_context": {},
        "tensorflow_core.contrib.tpu.python.tpu.device_assignment": {},
        "tensorflow_core.contrib.tpu.python.tpu.functional": {},
        "tensorflow_core.contrib.tpu.python.tpu.datasets": {},
        "tensorflow_core.contrib.tpu.python.tpu.session_support": {},
        "tensorflow_core.contrib.tpu.python.tpu": {},
        "tensorflow_core.contrib.tpu.python.ops.tpu_ops": {},
        "tensorflow_core.contrib.tpu.python.ops": {},
        "tensorflow_core.contrib.tpu.python.profiler": {},
        "tensorflow_core.contrib.learn": {},
        "tensorflow_core.contrib.learn.python": {},
        "tensorflow_core.contrib.learn.python.learn.models": {
            "linear_regression_zero_init": [
                "x",
                "y"
            ],
            "logistic_regression_zero_init": [
                "x",
                "y"
            ],
            "linear_regression": [
                "x",
                "y",
                "init_mean",
                "init_stddev"
            ],
            "logistic_regression": [
                "x",
                "y",
                "class_weight",
                "init_mean",
                "init_stddev"
            ],
            "_reverse_seq": [
                "input_seq",
                "lengths"
            ],
            "bidirectional_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "get_rnn_model": [
                "rnn_size",
                "cell_type",
                "num_layers",
                "input_op_fn",
                "bidirectional",
                "target_predictor_fn",
                "sequence_length",
                "initial_state",
                "attn_length",
                "attn_size",
                "attn_vec_size"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.monitored_session": {},
        "tensorflow_core.contrib.learn.python.learn.monitors": {
            "_extract_output": [
                "outputs",
                "request"
            ],
            "get_default_monitors": [
                "loss_op",
                "summary_op",
                "save_summary_steps",
                "output_dir",
                "summary_writer"
            ],
            "replace_monitors_with_hooks": [
                "monitors_or_hooks",
                "estimator"
            ],
            "_as_graph_element": [
                "obj"
            ],
            "BaseMonitor": {
                "__init__": [
                    "self"
                ],
                "run_on_all_workers": [
                    "self"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "epoch_begin": [
                    "self",
                    "epoch"
                ],
                "epoch_end": [
                    "self",
                    "epoch"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "EveryN": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "first_n_steps"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "every_n_post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "StopAtStep": {
                "__init__": [
                    "self",
                    "num_steps",
                    "last_step"
                ],
                "run_on_all_workers": [
                    "self"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ]
            },
            "PrintTensor": {
                "__init__": [
                    "self",
                    "tensor_names",
                    "every_n",
                    "first_n"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "LoggingTrainable": {
                "__init__": [
                    "self",
                    "scope",
                    "every_n",
                    "first_n"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "SummarySaver": {
                "__init__": [
                    "self",
                    "summary_op",
                    "save_steps",
                    "output_dir",
                    "summary_writer",
                    "scaffold"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "ValidationMonitor": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "batch_size",
                    "eval_steps",
                    "every_n_steps",
                    "metrics",
                    "hooks",
                    "early_stopping_rounds",
                    "early_stopping_metric",
                    "early_stopping_metric_minimize",
                    "name",
                    "check_interval_secs"
                ],
                "early_stopped": [
                    "self"
                ],
                "best_step": [
                    "self"
                ],
                "best_value": [
                    "self"
                ],
                "best_metrics": [
                    "self"
                ],
                "_evaluate_estimator": [
                    "self"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "CaptureVariable": {
                "__init__": [
                    "self",
                    "var_name",
                    "every_n",
                    "first_n"
                ],
                "values": [
                    "self"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "GraphDump": {
                "__init__": [
                    "self",
                    "ignore_ops"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "data": [
                    "self"
                ],
                "compare": [
                    "self",
                    "other_dump",
                    "step",
                    "atol"
                ]
            },
            "ExportMonitor": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "exports_to_keep",
                    "signature_fn",
                    "default_batch_size"
                ],
                "export_dir": [
                    "self"
                ],
                "exports_to_keep": [
                    "self"
                ],
                "signature_fn": [
                    "self"
                ],
                "last_export_dir": [
                    "self"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "CheckpointSaver": {
                "__init__": [
                    "self",
                    "checkpoint_dir",
                    "save_secs",
                    "save_steps",
                    "saver",
                    "checkpoint_basename",
                    "scaffold"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_save": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "StepCounter": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "output_dir",
                    "summary_writer"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "every_n_step_end": [
                    "self",
                    "current_step",
                    "outputs"
                ]
            },
            "NanLossDuringTrainingError": {
                "__str__": [
                    "self"
                ]
            },
            "NanLoss": {
                "__init__": [
                    "self",
                    "loss_tensor",
                    "every_n_steps",
                    "fail_on_nan_loss"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "RunHookAdapterForMonitors": {
                "__init__": [
                    "self",
                    "monitors"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.learn_runner": {
            "_execute_schedule": [
                "experiment",
                "schedule"
            ],
            "_wrapped_experiment_fn_with_uid_check": [
                "experiment_fn",
                "require_hparams"
            ],
            "run": [
                "experiment_fn",
                "output_dir",
                "schedule",
                "run_config",
                "hparams"
            ],
            "tune": [
                "experiment_fn",
                "tuner"
            ],
            "_is_distributed": [
                "config"
            ],
            "_get_default_schedule": [
                "config"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.graph_actions": {
            "clear_summary_writers": [],
            "get_summary_writer": [
                "logdir"
            ],
            "_make_saver": [
                "graph",
                "keep_checkpoint_max"
            ],
            "_restore_from_checkpoint": [
                "session",
                "graph",
                "checkpoint_path",
                "saver"
            ],
            "_run_with_monitors": [
                "session",
                "step",
                "tensors",
                "feed_dict",
                "monitors"
            ],
            "train": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "keep_checkpoint_max",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "monitors",
                "max_steps"
            ],
            "_train_internal": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "keep_checkpoint_max",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "monitors",
                "max_steps"
            ],
            "_get_first_op_from_collection": [
                "collection_name"
            ],
            "_get_saver": [],
            "_get_ready_op": [],
            "_get_local_init_op": [],
            "_eval_results_to_str": [
                "eval_results"
            ],
            "_write_summary_results": [
                "output_dir",
                "eval_results",
                "current_global_step"
            ],
            "evaluate": [
                "graph",
                "output_dir",
                "checkpoint_path",
                "eval_dict",
                "update_op",
                "global_step_tensor",
                "supervisor_master",
                "log_every_steps",
                "feed_fn",
                "max_steps"
            ],
            "run_n": [
                "output_dict",
                "feed_dict",
                "restore_checkpoint_path",
                "n"
            ],
            "run_feeds_iter": [
                "output_dict",
                "feed_dicts",
                "restore_checkpoint_path"
            ],
            "run_feeds": [],
            "infer": [
                "restore_checkpoint_path",
                "output_dict",
                "feed_dict"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.learn_runner_lib": {},
        "tensorflow_core.contrib.learn.python.learn.summary_writer_cache": {},
        "tensorflow_core.contrib.learn.python.learn.experiment": {
            "_get_standardized_predicate_fn": [
                "predicate_fn"
            ],
            "_new_attr_context": [
                "obj",
                "attr"
            ],
            "_EvalAndExportListener": {
                "__init__": [
                    "self",
                    "eval_fn",
                    "export_fn",
                    "model_dir"
                ],
                "after_save": [
                    "self",
                    "session",
                    "global_step_value"
                ],
                "eval_result": [
                    "self"
                ],
                "export_results": [
                    "self"
                ]
            },
            "Experiment": {
                "__init__": [
                    "self",
                    "estimator",
                    "train_input_fn",
                    "eval_input_fn",
                    "eval_metrics",
                    "train_steps",
                    "eval_steps",
                    "train_monitors",
                    "eval_hooks",
                    "local_eval_frequency",
                    "eval_delay_secs",
                    "continuous_eval_throttle_secs",
                    "min_eval_frequency",
                    "delay_workers_by_global_step",
                    "export_strategies",
                    "train_steps_per_iteration",
                    "checkpoint_and_export",
                    "saving_listeners",
                    "check_interval_secs"
                ],
                "estimator": [
                    "self"
                ],
                "eval_metrics": [
                    "self"
                ],
                "train_steps": [
                    "self"
                ],
                "eval_steps": [
                    "self"
                ],
                "_set_export_strategies": [
                    "self",
                    "values"
                ],
                "extend_train_hooks": [
                    "self",
                    "additional_hooks"
                ],
                "reset_export_strategies": [
                    "self",
                    "new_export_strategies"
                ],
                "train": [
                    "self",
                    "delay_secs"
                ],
                "evaluate": [
                    "self",
                    "delay_secs",
                    "name"
                ],
                "local_run": [
                    "self"
                ],
                "_continuous_eval": [
                    "self",
                    "input_fn",
                    "name",
                    "delay_secs",
                    "throttle_delay_secs",
                    "evaluate_checkpoint_only_once",
                    "continuous_eval_predicate_fn",
                    "export"
                ],
                "_has_training_stopped": [
                    "self",
                    "eval_result"
                ],
                "continuous_eval": [
                    "self",
                    "delay_secs",
                    "throttle_delay_secs",
                    "evaluate_checkpoint_only_once",
                    "continuous_eval_predicate_fn",
                    "name"
                ],
                "continuous_eval_on_train_data": [
                    "self",
                    "delay_secs",
                    "throttle_delay_secs",
                    "continuous_eval_predicate_fn",
                    "name"
                ],
                "train_and_evaluate": [
                    "self"
                ],
                "continuous_train_and_eval": [
                    "self",
                    "continuous_eval_predicate_fn"
                ],
                "_maybe_export": [
                    "self",
                    "eval_result",
                    "checkpoint_path"
                ],
                "run_std_server": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "_start_server": [
                    "self"
                ],
                "_call_train": [
                    "self",
                    "_sentinel",
                    "input_fn",
                    "steps",
                    "hooks",
                    "max_steps",
                    "saving_listeners"
                ],
                "_call_evaluate": [
                    "self",
                    "_sentinel",
                    "input_fn",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.session_run_hook": {},
        "tensorflow_core.contrib.learn.python.learn.evaluable": {
            "Evaluable": {
                "model_dir": [
                    "self"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.trainable": {
            "Trainable": {
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.basic_session_run_hooks": {},
        "tensorflow_core.contrib.learn.python.learn.metric_spec": {
            "_assert_named_args": [
                "sentinel"
            ],
            "_args": [
                "fn"
            ],
            "_matching_arg": [
                "fn_name",
                "fn_args",
                "candidate_args",
                "canonical_arg",
                "is_required"
            ],
            "_fn_name": [
                "fn"
            ],
            "_adapt_metric_fn": [
                "metric_fn",
                "metric_fn_name",
                "is_labels_required",
                "is_weights_required"
            ],
            "MetricSpec": {
                "__init__": [
                    "self",
                    "metric_fn",
                    "prediction_key",
                    "label_key",
                    "weight_key"
                ],
                "prediction_key": [
                    "self"
                ],
                "label_key": [
                    "self"
                ],
                "weight_key": [
                    "self"
                ],
                "metric_fn": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "create_metric_ops": [
                    "self",
                    "inputs",
                    "labels",
                    "predictions"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn": {},
        "tensorflow_core.contrib.learn.python.learn.export_strategy": {
            "ExportStrategy": {
                "__new__": [
                    "cls",
                    "name",
                    "export_fn",
                    "strip_default_attrs"
                ],
                "export": [
                    "self",
                    "estimator",
                    "export_path",
                    "checkpoint_path",
                    "eval_result"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.ops.losses_ops": {
            "mean_squared_error_regressor": [
                "tensor_in",
                "labels",
                "weights",
                "biases",
                "name"
            ],
            "softmax_classifier": [
                "tensor_in",
                "labels",
                "weights",
                "biases",
                "class_weight",
                "name"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.ops.embeddings_ops": {
            "embedding_lookup": [
                "params",
                "ids",
                "name"
            ],
            "categorical_variable": [
                "tensor_in",
                "n_classes",
                "embedding_size",
                "name"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.ops.seq2seq_ops": {
            "sequence_classifier": [
                "decoding",
                "labels",
                "sampling_decoding",
                "name"
            ],
            "seq2seq_inputs": [
                "x",
                "y",
                "input_length",
                "output_length",
                "sentinel",
                "name"
            ],
            "rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "scope"
            ],
            "rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "encoder_cell",
                "decoder_cell",
                "dtype",
                "scope"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.ops": {},
        "tensorflow_core.contrib.learn.python.learn.preprocessing.categorical": {
            "CategoricalProcessor": {
                "__init__": [
                    "self",
                    "min_frequency",
                    "share",
                    "vocabularies"
                ],
                "freeze": [
                    "self",
                    "freeze"
                ],
                "fit": [
                    "self",
                    "x",
                    "unused_y"
                ],
                "fit_transform": [
                    "self",
                    "x",
                    "unused_y"
                ],
                "transform": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.preprocessing.categorical_vocabulary": {
            "CategoricalVocabulary": {
                "__init__": [
                    "self",
                    "unknown_token",
                    "support_reverse"
                ],
                "__len__": [
                    "self"
                ],
                "freeze": [
                    "self",
                    "freeze"
                ],
                "get": [
                    "self",
                    "category"
                ],
                "add": [
                    "self",
                    "category",
                    "count"
                ],
                "trim": [
                    "self",
                    "min_frequency",
                    "max_frequency"
                ],
                "reverse": [
                    "self",
                    "class_id"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.preprocessing.text": {
            "tokenizer": [
                "iterator"
            ],
            "ByteProcessor": {
                "__init__": [
                    "self",
                    "max_document_length"
                ],
                "fit": [
                    "self",
                    "x"
                ],
                "fit_transform": [
                    "self",
                    "x"
                ],
                "reverse": [
                    "self",
                    "x"
                ],
                "transform": [
                    "self",
                    "x"
                ]
            },
            "VocabularyProcessor": {
                "__init__": [
                    "self",
                    "max_document_length",
                    "min_frequency",
                    "vocabulary",
                    "tokenizer_fn"
                ],
                "fit": [
                    "self",
                    "raw_documents",
                    "unused_y"
                ],
                "fit_transform": [
                    "self",
                    "raw_documents",
                    "unused_y"
                ],
                "transform": [
                    "self",
                    "raw_documents"
                ],
                "reverse": [
                    "self",
                    "documents"
                ],
                "save": [
                    "self",
                    "filename"
                ],
                "restore": [
                    "cls",
                    "filename"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.preprocessing": {},
        "tensorflow_core.contrib.learn.python.learn.preprocessing.tests": {},
        "tensorflow_core.contrib.learn.python.learn.learn_io.graph_io": {
            "read_batch_examples": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name",
                "seed"
            ],
            "read_keyed_batch_examples": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name",
                "seed"
            ],
            "read_keyed_batch_examples_shared_queue": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name",
                "seed"
            ],
            "_get_file_names": [
                "file_pattern",
                "randomize_input"
            ],
            "_get_examples": [
                "file_name_queue",
                "reader",
                "num_threads",
                "read_batch_size",
                "filter_fn",
                "parse_fn"
            ],
            "_read_keyed_batch_examples_helper": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "filter_fn",
                "parse_fn",
                "setup_shared_queue",
                "name",
                "seed"
            ],
            "read_keyed_batch_features": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "feature_queue_capacity",
                "num_enqueue_threads",
                "parse_fn",
                "name",
                "read_batch_size"
            ],
            "read_keyed_batch_features_shared_queue": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "feature_queue_capacity",
                "num_queue_runners",
                "parse_fn",
                "name"
            ],
            "queue_parsed_features": [
                "parsed_features",
                "keys",
                "feature_queue_capacity",
                "num_enqueue_threads",
                "name"
            ],
            "read_batch_features": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "feature_queue_capacity",
                "reader_num_threads",
                "num_enqueue_threads",
                "parse_fn",
                "name",
                "read_batch_size"
            ],
            "read_batch_record_features": [
                "file_pattern",
                "batch_size",
                "features",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "name"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.learn_io.numpy_io": {
            "numpy_input_fn": [
                "x",
                "y",
                "batch_size",
                "num_epochs",
                "shuffle",
                "queue_capacity",
                "num_threads"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.learn_io.generator_io": {
            "generator_input_fn": [
                "x",
                "target_key",
                "batch_size",
                "num_epochs",
                "shuffle",
                "queue_capacity",
                "num_threads",
                "pad_value"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.learn_io.dask_io": {
            "_add_to_index": [
                "df",
                "start"
            ],
            "_get_divisions": [
                "df"
            ],
            "_construct_dask_df_with_divisions": [
                "df"
            ],
            "extract_dask_data": [
                "data"
            ],
            "extract_dask_labels": [
                "labels"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.learn_io.pandas_io": {
            "pandas_input_fn": [
                "x",
                "y",
                "batch_size",
                "num_epochs",
                "shuffle",
                "queue_capacity",
                "num_threads",
                "target_column"
            ],
            "extract_pandas_data": [
                "data"
            ],
            "extract_pandas_matrix": [
                "data"
            ],
            "extract_pandas_labels": [
                "labels"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.learn_io.data_feeder": {
            "_get_in_out_shape": [
                "x_shape",
                "y_shape",
                "n_classes",
                "batch_size"
            ],
            "_data_type_filter": [
                "x",
                "y"
            ],
            "_is_iterable": [
                "x"
            ],
            "setup_train_data_feeder": [
                "x",
                "y",
                "n_classes",
                "batch_size",
                "shuffle",
                "epochs"
            ],
            "_batch_data": [
                "x",
                "batch_size"
            ],
            "setup_predict_data_feeder": [
                "x",
                "batch_size"
            ],
            "setup_processor_data_feeder": [
                "x"
            ],
            "check_array": [
                "array",
                "dtype"
            ],
            "_access": [
                "data",
                "iloc"
            ],
            "_check_dtype": [
                "dtype"
            ],
            "DataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size",
                    "shuffle",
                    "random_state",
                    "epochs"
                ],
                "x": [
                    "self"
                ],
                "y": [
                    "self"
                ],
                "shuffle": [
                    "self"
                ],
                "input_dtype": [
                    "self"
                ],
                "output_dtype": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "make_epoch_variable": [
                    "self"
                ],
                "input_builder": [
                    "self"
                ],
                "set_placeholders": [
                    "self",
                    "input_placeholder",
                    "output_placeholder"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self"
                ]
            },
            "StreamingDataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self"
                ]
            },
            "DaskDataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size",
                    "shuffle",
                    "random_state",
                    "epochs"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self",
                    "input_placeholder",
                    "output_placeholder"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.learn_io": {},
        "tensorflow_core.contrib.learn.python.learn.estimators.run_config": {
            "_count_ps": [
                "cluster_spec"
            ],
            "_count_worker": [
                "cluster_spec"
            ],
            "_get_master": [
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "_get_model_dir": [
                "model_dir"
            ],
            "Environment": {},
            "TaskType": {},
            "ClusterConfig": {
                "__init__": [
                    "self",
                    "master",
                    "evaluation_master"
                ],
                "cluster_spec": [
                    "self"
                ],
                "environment": [
                    "self"
                ],
                "evaluation_master": [
                    "self"
                ],
                "is_chief": [
                    "self"
                ],
                "master": [
                    "self"
                ],
                "num_ps_replicas": [
                    "self"
                ],
                "num_worker_replicas": [
                    "self"
                ],
                "task_id": [
                    "self"
                ],
                "task_type": [
                    "self"
                ],
                "get_task_id": []
            },
            "RunConfig": {
                "__init__": [
                    "self",
                    "master",
                    "num_cores",
                    "log_device_placement",
                    "gpu_memory_fraction",
                    "tf_random_seed",
                    "save_summary_steps",
                    "save_checkpoints_secs",
                    "save_checkpoints_steps",
                    "keep_checkpoint_max",
                    "keep_checkpoint_every_n_hours",
                    "log_step_count_steps",
                    "protocol",
                    "evaluation_master",
                    "model_dir",
                    "session_config"
                ],
                "uid": [
                    "self",
                    "whitelist"
                ],
                "model_dir": [
                    "self"
                ],
                "tf_config": [
                    "self"
                ],
                "tf_random_seed": [
                    "self"
                ],
                "save_summary_steps": [
                    "self"
                ],
                "save_checkpoints_secs": [
                    "self"
                ],
                "save_checkpoints_steps": [
                    "self"
                ],
                "session_config": [
                    "self"
                ],
                "keep_checkpoint_max": [
                    "self"
                ],
                "keep_checkpoint_every_n_hours": [
                    "self"
                ],
                "log_step_count_steps": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.dnn_linear_combined": {
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_get_feature_dict": [
                "features"
            ],
            "_get_optimizer": [
                "optimizer"
            ],
            "_check_no_sync_replicas_optimizer": [
                "optimizer"
            ],
            "_linear_learning_rate": [
                "num_linear_feature_columns"
            ],
            "_add_hidden_layer_summary": [
                "value",
                "tag"
            ],
            "_add_layer_summary": [
                "value",
                "tag"
            ],
            "_get_embedding_variable": [
                "column",
                "collection_key",
                "input_layer_scope"
            ],
            "_extract_embedding_lr_multipliers": [
                "embedding_lr_multipliers",
                "collection_key",
                "input_layer_scope"
            ],
            "_dnn_linear_combined_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "DNNLinearCombinedEstimator": {
                "__init__": [
                    "self",
                    "head",
                    "model_dir",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "fix_global_step_increment_bug",
                    "input_layer_partitioner"
                ]
            },
            "DNNLinearCombinedClassifier": {
                "__init__": [
                    "self",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size",
                    "label_keys",
                    "fix_global_step_increment_bug"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            },
            "DNNLinearCombinedRegressor": {
                "__init__": [
                    "self",
                    "model_dir",
                    "weight_column_name",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "label_dimension",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size",
                    "fix_global_step_increment_bug"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict_scores": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.state_saving_rnn_estimator": {
            "construct_state_saving_rnn": [
                "cell",
                "inputs",
                "num_label_columns",
                "state_saver",
                "state_name",
                "scope"
            ],
            "_multi_value_loss": [
                "activations",
                "labels",
                "sequence_length",
                "target_column",
                "features"
            ],
            "_get_name_or_parent_names": [
                "column"
            ],
            "_prepare_features_for_sqss": [
                "features",
                "labels",
                "mode",
                "sequence_feature_columns",
                "context_feature_columns"
            ],
            "_get_state_names": [
                "cell"
            ],
            "_get_initial_states": [
                "cell"
            ],
            "_read_batch": [
                "cell",
                "features",
                "labels",
                "mode",
                "num_unroll",
                "batch_size",
                "sequence_feature_columns",
                "context_feature_columns",
                "num_threads",
                "queue_capacity",
                "seed"
            ],
            "_get_state_name": [
                "i"
            ],
            "state_tuple_to_dict": [
                "state"
            ],
            "_prepare_inputs_for_rnn": [
                "sequence_features",
                "context_features",
                "sequence_feature_columns",
                "num_unroll"
            ],
            "_get_rnn_model_fn": [
                "cell_type",
                "target_column",
                "problem_type",
                "optimizer",
                "num_unroll",
                "num_units",
                "num_threads",
                "queue_capacity",
                "batch_size",
                "sequence_feature_columns",
                "context_feature_columns",
                "predict_probabilities",
                "learning_rate",
                "gradient_clipping_norm",
                "dropout_keep_probabilities",
                "name",
                "seed"
            ],
            "StateSavingRnnEstimator": {
                "__init__": [
                    "self",
                    "problem_type",
                    "num_unroll",
                    "batch_size",
                    "sequence_feature_columns",
                    "context_feature_columns",
                    "num_classes",
                    "num_units",
                    "cell_type",
                    "optimizer_type",
                    "learning_rate",
                    "predict_probabilities",
                    "momentum",
                    "gradient_clipping_norm",
                    "dropout_keep_probabilities",
                    "model_dir",
                    "config",
                    "feature_engineering_fn",
                    "num_threads",
                    "queue_capacity",
                    "seed"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.head": {
            "regression_head": [
                "label_name",
                "weight_column_name",
                "label_dimension",
                "enable_centered_bias",
                "head_name",
                "link_fn"
            ],
            "poisson_regression_head": [
                "label_name",
                "weight_column_name",
                "label_dimension",
                "enable_centered_bias",
                "head_name"
            ],
            "multi_class_head": [
                "n_classes",
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds",
                "metric_class_ids",
                "loss_fn",
                "label_keys"
            ],
            "binary_svm_head": [
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds"
            ],
            "multi_label_head": [
                "n_classes",
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds",
                "metric_class_ids",
                "loss_fn"
            ],
            "loss_only_head": [
                "loss_fn",
                "head_name"
            ],
            "multi_head": [
                "heads",
                "loss_weights"
            ],
            "no_op_train_fn": [
                "loss"
            ],
            "_mean_squared_loss": [
                "labels",
                "logits",
                "weights"
            ],
            "_poisson_loss": [
                "labels",
                "logits",
                "weights"
            ],
            "_logits": [
                "logits_input",
                "logits",
                "logits_dimension"
            ],
            "_create_model_fn_ops": [
                "features",
                "mode",
                "loss_fn",
                "logits_to_predictions_fn",
                "metrics_fn",
                "create_output_alternatives_fn",
                "labels",
                "train_op_fn",
                "logits",
                "logits_dimension",
                "head_name",
                "weight_column_name",
                "enable_centered_bias"
            ],
            "_log_loss_with_two_classes": [
                "labels",
                "logits",
                "weights"
            ],
            "_one_class_to_two_class_logits": [
                "logits"
            ],
            "_softmax_cross_entropy_loss": [
                "labels",
                "logits",
                "weights"
            ],
            "_to_labels_tensor": [
                "labels",
                "label_name"
            ],
            "_check_no_sparse_tensor": [
                "x"
            ],
            "_sparse_labels_to_indicator": [
                "labels",
                "num_classes"
            ],
            "_assert_labels_rank": [
                "labels"
            ],
            "_weight_tensor": [
                "features",
                "weight_column_name"
            ],
            "_compute_weighted_loss": [
                "loss_unweighted",
                "weight",
                "name"
            ],
            "_wrap_custom_loss_fn": [
                "loss_fn"
            ],
            "_check_mode_valid": [
                "mode"
            ],
            "_get_arguments": [
                "func"
            ],
            "_verify_loss_fn_args": [
                "loss_fn"
            ],
            "_centered_bias": [
                "logits_dimension",
                "head_name"
            ],
            "_centered_bias_step": [
                "centered_bias",
                "batch_size",
                "labels",
                "loss_fn",
                "weights"
            ],
            "_summary_key": [
                "head_name",
                "val"
            ],
            "_train_op": [
                "loss",
                "labels",
                "train_op_fn",
                "centered_bias",
                "batch_size",
                "loss_fn",
                "weights"
            ],
            "_sigmoid_cross_entropy_loss": [
                "labels",
                "logits",
                "weights"
            ],
            "_float_weights_or_none": [
                "weights"
            ],
            "_indicator_labels_streaming_mean": [
                "labels",
                "weights",
                "class_id"
            ],
            "_predictions_streaming_mean": [
                "predictions",
                "weights",
                "class_id"
            ],
            "_class_id_labels_to_indicator": [
                "labels",
                "num_classes"
            ],
            "_class_predictions_streaming_mean": [
                "predictions",
                "weights",
                "class_id"
            ],
            "_class_labels_streaming_mean": [
                "labels",
                "weights",
                "class_id"
            ],
            "_streaming_auc": [
                "predictions",
                "labels",
                "weights",
                "class_id",
                "curve"
            ],
            "_assert_class_id": [
                "class_id",
                "num_classes"
            ],
            "_streaming_accuracy_at_threshold": [
                "predictions",
                "labels",
                "weights",
                "threshold"
            ],
            "_streaming_precision_at_threshold": [
                "predictions",
                "labels",
                "weights",
                "threshold"
            ],
            "_streaming_recall_at_threshold": [
                "predictions",
                "labels",
                "weights",
                "threshold"
            ],
            "_classification_output_alternatives": [
                "head_name",
                "problem_type",
                "label_keys"
            ],
            "Head": {
                "logits_dimension": [
                    "self"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ]
            },
            "_SingleHead": {
                "__init__": [
                    "self",
                    "problem_type",
                    "logits_dimension",
                    "label_name",
                    "weight_column_name",
                    "head_name"
                ],
                "logits_dimension": [
                    "self"
                ],
                "label_name": [
                    "self"
                ],
                "weight_column_name": [
                    "self"
                ],
                "head_name": [
                    "self"
                ],
                "_create_output_alternatives": [
                    "self",
                    "predictions"
                ]
            },
            "_RegressionHead": {
                "__init__": [
                    "self",
                    "label_dimension",
                    "loss_fn",
                    "link_fn",
                    "logits_dimension",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_transform_labels": [
                    "self",
                    "mode",
                    "labels"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_metrics": [
                    "self",
                    "eval_loss",
                    "predictions",
                    "labels",
                    "weights"
                ]
            },
            "_BinaryLogisticHead": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "loss_fn",
                    "thresholds"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_transform_labels": [
                    "self",
                    "mode",
                    "labels"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_metrics": [
                    "self",
                    "eval_loss",
                    "predictions",
                    "labels",
                    "weights"
                ]
            },
            "_MultiClassHead": {
                "__init__": [
                    "self",
                    "n_classes",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "loss_fn",
                    "thresholds",
                    "metric_class_ids",
                    "label_keys"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_transform_labels": [
                    "self",
                    "mode",
                    "labels"
                ],
                "_labels": [
                    "self",
                    "labels_dict"
                ],
                "_label_ids": [
                    "self",
                    "labels_dict"
                ],
                "_wrapped_loss_fn": [
                    "self",
                    "labels",
                    "logits",
                    "weights"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_metrics": [
                    "self",
                    "eval_loss",
                    "predictions",
                    "labels",
                    "weights"
                ]
            },
            "_BinarySvmHead": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "thresholds"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_transform_labels": [
                    "self",
                    "mode",
                    "labels"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_metrics": [
                    "self",
                    "eval_loss",
                    "predictions",
                    "labels",
                    "weights"
                ]
            },
            "_MultiLabelHead": {
                "__init__": [
                    "self",
                    "n_classes",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "thresholds",
                    "metric_class_ids",
                    "loss_fn"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_transform_labels": [
                    "self",
                    "mode",
                    "labels"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_metrics": [
                    "self",
                    "eval_loss",
                    "predictions",
                    "labels",
                    "weights"
                ]
            },
            "_LossOnlyHead": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "head_name"
                ],
                "logits_dimension": [
                    "self"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ]
            },
            "_MultiHead": {
                "__init__": [
                    "self",
                    "heads",
                    "loss_merger"
                ],
                "logits_dimension": [
                    "self"
                ],
                "create_model_fn_ops": [
                    "self",
                    "features",
                    "mode",
                    "labels",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_split_logits": [
                    "self",
                    "logits"
                ],
                "_merge_train": [
                    "self",
                    "all_model_fn_ops",
                    "train_op_fn"
                ],
                "_merge_infer": [
                    "self",
                    "all_model_fn_ops"
                ],
                "_merge_eval": [
                    "self",
                    "all_model_fn_ops"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.debug": {
            "_get_feature_dict": [
                "features"
            ],
            "debug_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "DebugClassifier": {
                "__init__": [
                    "self",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "config",
                    "feature_engineering_fn",
                    "label_keys"
                ],
                "predict_classes": [
                    "self",
                    "input_fn",
                    "batch_size"
                ],
                "predict_proba": [
                    "self",
                    "input_fn",
                    "batch_size"
                ]
            },
            "DebugRegressor": {
                "__init__": [
                    "self",
                    "model_dir",
                    "label_dimension",
                    "weight_column_name",
                    "config",
                    "feature_engineering_fn"
                ],
                "predict_scores": [
                    "self",
                    "input_fn",
                    "batch_size"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.dnn": {
            "_get_feature_dict": [
                "features"
            ],
            "_get_optimizer": [
                "optimizer"
            ],
            "_get_activation_fn": [
                "activation_fn"
            ],
            "_add_hidden_layer_summary": [
                "value",
                "tag"
            ],
            "_dnn_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "DNNClassifier": {
                "__init__": [
                    "self",
                    "hidden_units",
                    "feature_columns",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size",
                    "label_keys"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            },
            "DNNRegressor": {
                "__init__": [
                    "self",
                    "hidden_units",
                    "feature_columns",
                    "model_dir",
                    "weight_column_name",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn",
                    "label_dimension",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict_scores": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            },
            "DNNEstimator": {
                "__init__": [
                    "self",
                    "head",
                    "hidden_units",
                    "feature_columns",
                    "model_dir",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.dynamic_rnn_estimator": {
            "_get_state_name": [
                "i"
            ],
            "state_tuple_to_dict": [
                "state"
            ],
            "dict_to_state_tuple": [
                "input_dict",
                "cell"
            ],
            "_concatenate_context_input": [
                "sequence_input",
                "context_input"
            ],
            "build_sequence_input": [
                "features",
                "sequence_feature_columns",
                "context_feature_columns",
                "weight_collections",
                "scope"
            ],
            "construct_rnn": [
                "initial_state",
                "sequence_input",
                "cell",
                "num_label_columns",
                "dtype",
                "parallel_iterations",
                "swap_memory"
            ],
            "_single_value_predictions": [
                "activations",
                "sequence_length",
                "target_column",
                "problem_type",
                "predict_probabilities"
            ],
            "_multi_value_loss": [
                "activations",
                "labels",
                "sequence_length",
                "target_column",
                "features"
            ],
            "_single_value_loss": [
                "activations",
                "labels",
                "sequence_length",
                "target_column",
                "features"
            ],
            "_get_output_alternatives": [
                "prediction_type",
                "problem_type",
                "prediction_dict"
            ],
            "_get_dynamic_rnn_model_fn": [
                "cell_type",
                "num_units",
                "target_column",
                "problem_type",
                "prediction_type",
                "optimizer",
                "sequence_feature_columns",
                "context_feature_columns",
                "predict_probabilities",
                "learning_rate",
                "gradient_clipping_norm",
                "dropout_keep_probabilities",
                "sequence_length_key",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "name"
            ],
            "PredictionType": {},
            "DynamicRnnEstimator": {
                "__init__": [
                    "self",
                    "problem_type",
                    "prediction_type",
                    "sequence_feature_columns",
                    "context_feature_columns",
                    "num_classes",
                    "num_units",
                    "cell_type",
                    "optimizer",
                    "learning_rate",
                    "predict_probabilities",
                    "momentum",
                    "gradient_clipping_norm",
                    "dropout_keep_probabilities",
                    "model_dir",
                    "feature_engineering_fn",
                    "config"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.metric_key": {
            "MetricKey": {}
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.test_data": {
            "get_quantile_based_buckets": [
                "feature_values",
                "num_buckets"
            ],
            "prepare_iris_data_for_logistic_regression": [],
            "iris_input_multiclass_fn": [],
            "iris_input_logistic_fn": []
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.head_test": {
            "_assert_variables": [
                "test_case",
                "expected_global",
                "expected_model",
                "expected_trainable"
            ],
            "_assert_no_variables": [
                "test_case"
            ],
            "_assert_metrics": [
                "test_case",
                "expected_loss",
                "expected_eval_metrics",
                "model_fn_ops"
            ],
            "_assert_summary_tags": [
                "test_case",
                "expected_tags"
            ],
            "_sigmoid": [
                "x"
            ],
            "_sigmoid_cross_entropy": [
                "labels",
                "logits",
                "weights"
            ],
            "PoissonHeadTest": {
                "_assert_output_alternatives": [
                    "self",
                    "model_fn_ops"
                ],
                "_log_poisson_loss": [
                    "self",
                    "logits",
                    "labels"
                ],
                "testPoissonWithLogits": [
                    "self"
                ]
            },
            "RegressionHeadTest": {
                "_assert_output_alternatives": [
                    "self",
                    "model_fn_ops"
                ],
                "testRegressionWithLogits": [
                    "self"
                ],
                "testRegressionWithLogitFn": [
                    "self"
                ],
                "testRegressionWithInvalidLogits": [
                    "self"
                ],
                "testRegressionWithLogitsInput": [
                    "self"
                ],
                "testRegressionWithLogitsAndLogitsInput": [
                    "self"
                ],
                "testRegressionEvalMode": [
                    "self"
                ],
                "testRegressionWithLabelName": [
                    "self"
                ],
                "testRegressionWithScalarWeights": [
                    "self"
                ],
                "testRegressionWith1DWeights": [
                    "self"
                ],
                "testRegressionWith2DWeights": [
                    "self"
                ],
                "testRegressionWithCenteredBias": [
                    "self"
                ],
                "testRegressionErrorInSparseTensorLabels": [
                    "self"
                ]
            },
            "MultiLabelHeadTest": {
                "_assert_output_alternatives": [
                    "self",
                    "model_fn_ops"
                ],
                "setUp": [
                    "self"
                ],
                "_expected_eval_metrics": [
                    "self",
                    "expected_loss"
                ],
                "testMultiLabelWithLogits": [
                    "self"
                ],
                "testMultiLabelTwoClasses": [
                    "self"
                ],
                "testMultiLabelWithInvalidLogits": [
                    "self"
                ],
                "testMultiLabelWithLogitsInput": [
                    "self"
                ],
                "testMultiLabelWithLogitsAndLogitsInput": [
                    "self"
                ],
                "testMultiLabelEval": [
                    "self"
                ],
                "testMultiClassEvalWithLargeLogits": [
                    "self"
                ],
                "testMultiLabelInfer": [
                    "self"
                ],
                "testMultiLabelWithLabelName": [
                    "self"
                ],
                "testMultiLabelWithScalarWeight": [
                    "self"
                ],
                "testMultiLabelWith1DWeight": [
                    "self"
                ],
                "testMultiLabelWith2DWeight": [
                    "self"
                ],
                "testMultiLabelWithCustomLoss": [
                    "self"
                ],
                "testMultiLabelWithCenteredBias": [
                    "self"
                ],
                "testMultiLabelSparseTensorLabels": [
                    "self"
                ],
                "testMultiLabelSparseTensorLabelsTooFewClasses": [
                    "self"
                ]
            },
            "BinaryClassificationHeadTest": {
                "_assert_output_alternatives": [
                    "self",
                    "model_fn_ops"
                ],
                "setUp": [
                    "self"
                ],
                "_expected_eval_metrics": [
                    "self",
                    "expected_loss"
                ],
                "testBinaryClassificationWithLogits": [
                    "self"
                ],
                "testBinaryClassificationWithInvalidLogits": [
                    "self"
                ],
                "testBinaryClassificationWithLogitsInput": [
                    "self"
                ],
                "testBinaryClassificationWithLogitsAndLogitsInput": [
                    "self"
                ],
                "testBinaryClassificationEval": [
                    "self"
                ],
                "testBinaryClassificationInfer": [
                    "self"
                ],
                "testBinaryClassificationInferMode_withWeightColumn": [
                    "self"
                ],
                "testErrorInSparseTensorLabels": [
                    "self"
                ],
                "testBinaryClassificationWithLabelName": [
                    "self"
                ],
                "testBinaryClassificationWith1DWeights": [
                    "self"
                ],
                "testBinaryClassificationWith2DWeights": [
                    "self"
                ],
                "testBinaryClassificationWithCustomLoss": [
                    "self"
                ],
                "testBinaryClassificationWithCenteredBias": [
                    "self"
                ]
            },
            "MultiClassHeadTest": {
                "_assert_output_alternatives": [
                    "self",
                    "model_fn_ops"
                ],
                "setUp": [
                    "self"
                ],
                "_expected_eval_metrics": [
                    "self",
                    "expected_loss"
                ],
                "testMultiClassWithLogits": [
                    "self"
                ],
                "testMultiClassWithInvalidLogits": [
                    "self"
                ],
                "testMultiClassWithNoneTrainOpFnInTrain": [
                    "self"
                ],
                "testMultiClassWithLogitsInput": [
                    "self"
                ],
                "testMultiClassWithLogitsAndLogitsInput": [
                    "self"
                ],
                "testMultiClassEnableCenteredBias": [
                    "self"
                ],
                "testMultiClassEval": [
                    "self"
                ],
                "testMultiClassEvalModeWithLargeLogits": [
                    "self"
                ],
                "testMultiClassWithScalarWeight": [
                    "self"
                ],
                "testMultiClassWith1DWeight": [
                    "self"
                ],
                "testMultiClassWith2DWeight": [
                    "self"
                ],
                "testMultiClassWithCustomLoss": [
                    "self"
                ],
                "testMultiClassInfer": [
                    "self"
                ],
                "testInvalidNClasses": [
                    "self"
                ],
                "testMultiClassWithLabelKeysInvalidShape": [
                    "self"
                ],
                "testMultiClassWithLabelKeysTwoClasses": [
                    "self"
                ],
                "testMultiClassWithLabelKeysInfer": [
                    "self"
                ],
                "testMultiClassWithLabelKeysEvalAccuracy0": [
                    "self"
                ],
                "testMultiClassWithLabelKeysEvalAccuracy1": [
                    "self"
                ]
            },
            "BinarySvmHeadTest": {
                "_assert_output_alternatives": [
                    "self",
                    "model_fn_ops"
                ],
                "setUp": [
                    "self"
                ],
                "testBinarySVMWithLogits": [
                    "self"
                ],
                "testBinarySVMWithInvalidLogits": [
                    "self"
                ],
                "testBinarySVMWithLogitsInput": [
                    "self"
                ],
                "testBinarySVMWithLogitsAndLogitsInput": [
                    "self"
                ],
                "testBinarySVMEvalMode": [
                    "self"
                ],
                "testBinarySVMWithLabelName": [
                    "self"
                ],
                "testBinarySVMWith1DWeights": [
                    "self"
                ],
                "testBinarySVMWith2DWeights": [
                    "self"
                ],
                "testBinarySVMWithCenteredBias": [
                    "self"
                ]
            },
            "LossOnlyHead": {
                "testNoPredictionsAndNoMetrics": [
                    "self"
                ]
            },
            "MultiHeadTest": {
                "testInvalidHeads": [
                    "self"
                ],
                "testTrainWithNoneTrainOpFn": [
                    "self"
                ],
                "testTrain_withNoHeadWeights": [
                    "self"
                ],
                "testTrain_withHeadWeights": [
                    "self"
                ],
                "testTrain_withDictLogits": [
                    "self"
                ],
                "testInfer": [
                    "self"
                ],
                "testEval": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.tensor_signature": {
            "tensors_compatible": [
                "tensors",
                "signatures"
            ],
            "create_signatures": [
                "tensors"
            ],
            "create_placeholders_from_signatures": [
                "signatures"
            ],
            "create_example_parser_from_signatures": [
                "signatures",
                "examples_batch",
                "single_feature_name"
            ],
            "TensorSignature": {
                "__new__": [
                    "cls",
                    "tensor"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "get_placeholder": [
                    "self"
                ],
                "get_feature_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.logistic_regressor": {
            "_get_model_fn_with_logistic_metrics": [
                "model_fn"
            ],
            "LogisticRegressor": [
                "model_fn",
                "thresholds",
                "model_dir",
                "config",
                "feature_engineering_fn"
            ],
            "_make_logistic_eval_metric_ops": [
                "labels",
                "predictions",
                "thresholds"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.prediction_key": {
            "PredictionKey": {}
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.estimator_test_utils": {
            "assert_estimator_contract": [
                "tester",
                "estimator_class"
            ],
            "assert_in_range": [
                "min_value",
                "max_value",
                "key",
                "metrics"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.composable_model": {
            "_ComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "optimizer",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope",
                    "trainable"
                ],
                "get_scope_name": [
                    "self"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "get_train_step": [
                    "self",
                    "loss"
                ],
                "_get_feature_columns": [
                    "self"
                ],
                "_get_vars": [
                    "self"
                ],
                "_get_optimizer": [
                    "self"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            },
            "LinearComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "optimizer",
                    "_joint_weights",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope",
                    "trainable"
                ],
                "get_weights": [
                    "self",
                    "model_dir"
                ],
                "get_bias": [
                    "self",
                    "model_dir"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            },
            "DNNComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "hidden_units",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope",
                    "trainable"
                ],
                "get_weights": [
                    "self",
                    "model_dir"
                ],
                "get_bias": [
                    "self",
                    "model_dir"
                ],
                "_add_hidden_layer_summary": [
                    "self",
                    "value",
                    "tag"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.rnn_common": {
            "_get_single_cell": [
                "cell_type",
                "num_units"
            ],
            "construct_rnn_cell": [
                "num_units",
                "cell_type",
                "dropout_keep_probabilities"
            ],
            "apply_dropout": [
                "cells",
                "dropout_keep_probabilities",
                "random_seed"
            ],
            "get_eval_metric_ops": [
                "problem_type",
                "prediction_type",
                "sequence_length",
                "prediction_dict",
                "labels"
            ],
            "select_last_activations": [
                "activations",
                "sequence_lengths"
            ],
            "mask_activations_and_labels": [
                "activations",
                "labels",
                "sequence_lengths"
            ],
            "multi_value_predictions": [
                "activations",
                "target_column",
                "problem_type",
                "predict_probabilities"
            ],
            "RNNKeys": {},
            "PredictionType": {}
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.svm": {
            "_as_iterable": [
                "preds",
                "output"
            ],
            "SVM": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "l1_regularization",
                    "l2_regularization",
                    "num_loss_partitions",
                    "kernels",
                    "config",
                    "feature_engineering_fn"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "signature_fn",
                    "input_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "export_with_defaults": [
                    "self",
                    "export_dir",
                    "signature_fn",
                    "input_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.kmeans": {
            "_parse_tensor_or_dict": [
                "features"
            ],
            "_kmeans_clustering_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "_LossRelativeChangeHook": {
                "__init__": [
                    "self",
                    "tolerance"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "_InitializeClustersHook": {
                "__init__": [
                    "self",
                    "init_op",
                    "is_initialized_op",
                    "is_chief"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "_"
                ]
            },
            "KMeansClustering": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "model_dir",
                    "initial_clusters",
                    "distance_metric",
                    "random_seed",
                    "use_mini_batch",
                    "mini_batch_steps_per_iteration",
                    "kmeans_plus_plus_num_retries",
                    "relative_tolerance",
                    "config"
                ],
                "predict_cluster_idx": [
                    "self",
                    "input_fn"
                ],
                "score": [
                    "self",
                    "input_fn",
                    "steps"
                ],
                "transform": [
                    "self",
                    "input_fn",
                    "as_iterable"
                ],
                "clusters": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.linear": {
            "_get_optimizer": [
                "spec"
            ],
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_add_bias_column": [
                "feature_columns",
                "columns_to_tensors",
                "bias_variable",
                "columns_to_variables"
            ],
            "_linear_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "sdca_model_fn": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "_get_default_optimizer": [
                "feature_columns"
            ],
            "_SdcaUpdateWeightsHook": {
                "__init__": [
                    "self"
                ],
                "set_parameters": [
                    "self",
                    "sdca_model",
                    "train_op"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "LinearClassifier": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "optimizer",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "_joint_weight",
                    "config",
                    "feature_engineering_fn",
                    "label_keys"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            },
            "LinearRegressor": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "weight_column_name",
                    "optimizer",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "label_dimension",
                    "_joint_weights",
                    "config",
                    "feature_engineering_fn"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict_scores": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            },
            "LinearEstimator": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "head",
                    "model_dir",
                    "weight_column_name",
                    "optimizer",
                    "gradient_clip_norm",
                    "_joint_weights",
                    "config",
                    "feature_engineering_fn"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.constants": {
            "ProblemType": {}
        },
        "tensorflow_core.contrib.learn.python.learn.estimators.estimator": {
            "_verify_input_args": [
                "x",
                "y",
                "input_fn",
                "feed_fn",
                "batch_size"
            ],
            "_get_input_fn": [
                "x",
                "y",
                "input_fn",
                "feed_fn",
                "batch_size",
                "shuffle",
                "epochs"
            ],
            "infer_real_valued_columns_from_input_fn": [
                "input_fn"
            ],
            "infer_real_valued_columns_from_input": [
                "x"
            ],
            "_model_fn_args": [
                "fn"
            ],
            "_get_replica_device_setter": [
                "config"
            ],
            "_make_metrics_ops": [
                "metrics",
                "features",
                "labels",
                "predictions"
            ],
            "_dict_to_str": [
                "dictionary"
            ],
            "_write_dict_to_summary": [
                "output_dir",
                "dictionary",
                "current_global_step"
            ],
            "_identity_feature_engineering_fn": [
                "features",
                "labels"
            ],
            "BaseEstimator": {
                "__init__": [
                    "self",
                    "model_dir",
                    "config"
                ],
                "config": [
                    "self"
                ],
                "model_fn": [
                    "self"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "partial_fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks",
                    "log_progress"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable",
                    "iterate_batches"
                ],
                "get_variable_value": [
                    "self",
                    "name"
                ],
                "get_variable_names": [
                    "self"
                ],
                "model_dir": [
                    "self"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "prediction_key",
                    "default_batch_size",
                    "exports_to_keep",
                    "checkpoint_path"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_feature_ops_from_example": [
                    "self",
                    "examples_batch"
                ],
                "_check_inputs": [
                    "self",
                    "features",
                    "labels"
                ],
                "_extract_metric_update_ops": [
                    "self",
                    "eval_dict"
                ],
                "_evaluate_model": [
                    "self",
                    "input_fn",
                    "steps",
                    "feed_fn",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks",
                    "log_progress"
                ],
                "_get_features_from_input_fn": [
                    "self",
                    "input_fn"
                ],
                "_infer_model": [
                    "self",
                    "input_fn",
                    "feed_fn",
                    "outputs",
                    "as_iterable",
                    "iterate_batches"
                ],
                "_predict_generator": [
                    "self",
                    "mon_sess",
                    "predictions",
                    "feed_fn",
                    "iterate_batches"
                ],
                "_is_input_constant": [
                    "self",
                    "feed_fn",
                    "graph"
                ],
                "_filter_predictions": [
                    "self",
                    "predictions",
                    "outputs"
                ],
                "_train_model": [
                    "self",
                    "input_fn",
                    "hooks"
                ]
            },
            "Estimator": {
                "__init__": [
                    "self",
                    "model_fn",
                    "model_dir",
                    "config",
                    "params",
                    "feature_engineering_fn"
                ],
                "_call_model_fn": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "metrics",
                    "config"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "export_savedmodel": [
                    "self",
                    "export_dir_base",
                    "serving_input_fn",
                    "default_output_alternative_key",
                    "assets_extra",
                    "as_text",
                    "checkpoint_path",
                    "graph_rewrite_specs",
                    "strip_default_attrs"
                ]
            },
            "SKCompat": {
                "__init__": [
                    "self",
                    "estimator"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "steps",
                    "max_steps",
                    "monitors"
                ],
                "score": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size",
                    "outputs"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.estimators._sklearn": {
            "_pprint": [
                "d"
            ],
            "_accuracy_score": [
                "y_true",
                "y_pred"
            ],
            "_mean_squared_error": [
                "y_true",
                "y_pred"
            ],
            "_train_test_split": [],
            "_BaseEstimator": {
                "get_params": [
                    "self",
                    "deep"
                ],
                "set_params": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_ClassifierMixin": {},
            "_RegressorMixin": {},
            "_TransformerMixin": {},
            "NotFittedError": {}
        },
        "tensorflow_core.contrib.learn.python.learn.estimators": {},
        "tensorflow_core.contrib.learn.python.learn.estimators.model_fn": {
            "ModeKeys": {
                "validate": [
                    "cls",
                    "key"
                ]
            },
            "ModelFnOps": {
                "__new__": [
                    "cls",
                    "mode",
                    "predictions",
                    "loss",
                    "train_op",
                    "eval_metric_ops",
                    "output_alternatives",
                    "training_chief_hooks",
                    "training_hooks",
                    "scaffold"
                ],
                "estimator_spec": [
                    "self",
                    "default_serving_output_alternative_key"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.utils.export": {
            "_get_first_op_from_collection": [
                "collection_name"
            ],
            "_get_saver": [],
            "_export_graph": [
                "graph",
                "saver",
                "checkpoint_path",
                "export_dir",
                "default_graph_signature",
                "named_graph_signatures",
                "exports_to_keep"
            ],
            "generic_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "classification_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "classification_signature_fn_with_prob": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "regression_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "logistic_regression_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "_default_input_fn": [
                "estimator",
                "examples"
            ],
            "export_estimator": [
                "estimator",
                "export_dir",
                "signature_fn",
                "input_fn",
                "default_batch_size",
                "exports_to_keep"
            ],
            "_export_estimator": [
                "estimator",
                "export_dir",
                "signature_fn",
                "input_fn",
                "default_batch_size",
                "exports_to_keep",
                "input_feature_key",
                "use_deprecated_input_fn",
                "prediction_key",
                "checkpoint_path"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.utils.input_fn_utils": {
            "build_parsing_serving_input_fn": [
                "feature_spec",
                "default_batch_size"
            ],
            "build_default_serving_input_fn": [
                "features",
                "default_batch_size"
            ],
            "InputFnOps": {}
        },
        "tensorflow_core.contrib.learn.python.learn.utils.saved_model_export_utils": {
            "build_standardized_signature_def": [
                "input_tensors",
                "output_tensors",
                "problem_type"
            ],
            "_get_classification_scores": [
                "output_tensors"
            ],
            "_get_classification_classes": [
                "output_tensors"
            ],
            "_is_classification_problem": [
                "problem_type",
                "input_tensors",
                "output_tensors"
            ],
            "_is_regression_problem": [
                "problem_type",
                "input_tensors",
                "output_tensors"
            ],
            "get_input_alternatives": [
                "input_ops"
            ],
            "get_output_alternatives": [
                "model_fn_ops",
                "default_output_alternative_key"
            ],
            "build_all_signature_defs": [
                "input_alternatives",
                "output_alternatives",
                "actual_default_output_alternative_key"
            ],
            "get_timestamped_export_dir": [
                "export_dir_base"
            ],
            "get_temp_export_dir": [
                "timestamped_export_dir"
            ],
            "_export_version_parser": [
                "path"
            ],
            "get_most_recent_export": [
                "export_dir_base"
            ],
            "garbage_collect_exports": [
                "export_dir_base",
                "exports_to_keep"
            ],
            "make_export_strategy": [
                "serving_input_fn",
                "default_output_alternative_key",
                "assets_extra",
                "as_text",
                "exports_to_keep",
                "strip_default_attrs"
            ],
            "make_parsing_export_strategy": [
                "feature_columns",
                "default_output_alternative_key",
                "assets_extra",
                "as_text",
                "exports_to_keep",
                "target_core",
                "strip_default_attrs"
            ],
            "_default_compare_fn": [
                "curr_best_eval_result",
                "cand_eval_result"
            ],
            "make_best_model_export_strategy": [
                "serving_input_fn",
                "exports_to_keep",
                "model_dir",
                "event_file_pattern",
                "compare_fn",
                "default_output_alternative_key",
                "strip_default_attrs"
            ],
            "extend_export_strategy": [
                "base_export_strategy",
                "post_export_fn",
                "post_export_name"
            ],
            "BestModelSelector": {
                "__init__": [
                    "self",
                    "event_file_pattern",
                    "compare_fn"
                ],
                "update": [
                    "self",
                    "checkpoint_path",
                    "eval_result"
                ],
                "_get_best_eval_result": [
                    "self",
                    "event_files"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.utils.gc": {
            "largest_export_versions": [
                "n"
            ],
            "one_of_every_n_export_versions": [
                "n"
            ],
            "mod_export_version": [
                "n"
            ],
            "union": [
                "lf",
                "rf"
            ],
            "negation": [
                "f"
            ],
            "get_paths": [
                "base_dir",
                "parser"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.utils.inspect_checkpoint": {
            "print_tensors_in_checkpoint_file": [
                "file_name",
                "tensor_name"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.utils": {},
        "tensorflow_core.contrib.learn.python.learn.datasets.produce_small_datasets": {
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.datasets.synthetic": {
            "circles": [
                "n_samples",
                "noise",
                "seed",
                "factor",
                "n_classes"
            ],
            "spirals": [
                "n_samples",
                "noise",
                "seed",
                "mode",
                "n_loops"
            ],
            "_archimedes_spiral": [
                "theta",
                "theta_offset"
            ],
            "_bernoulli_spiral": [
                "theta",
                "theta_offset"
            ],
            "_fermat_spiral": [
                "theta",
                "theta_offset"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.datasets.mnist": {
            "_read32": [
                "bytestream"
            ],
            "extract_images": [
                "f"
            ],
            "dense_to_one_hot": [
                "labels_dense",
                "num_classes"
            ],
            "extract_labels": [
                "f",
                "one_hot",
                "num_classes"
            ],
            "read_data_sets": [
                "train_dir",
                "fake_data",
                "one_hot",
                "dtype",
                "reshape",
                "validation_size",
                "seed",
                "source_url"
            ],
            "load_mnist": [
                "train_dir"
            ],
            "DataSet": {
                "__init__": [
                    "self",
                    "images",
                    "labels",
                    "fake_data",
                    "one_hot",
                    "dtype",
                    "reshape",
                    "seed"
                ],
                "images": [
                    "self"
                ],
                "labels": [
                    "self"
                ],
                "num_examples": [
                    "self"
                ],
                "epochs_completed": [
                    "self"
                ],
                "next_batch": [
                    "self",
                    "batch_size",
                    "fake_data",
                    "shuffle"
                ]
            }
        },
        "tensorflow_core.contrib.learn.python.learn.datasets.text_datasets": {
            "maybe_download_dbpedia": [
                "data_dir"
            ],
            "load_dbpedia": [
                "size",
                "test_with_fake_data"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.datasets.base": {
            "load_csv_with_header": [
                "filename",
                "target_dtype",
                "features_dtype",
                "target_column"
            ],
            "load_csv_without_header": [
                "filename",
                "target_dtype",
                "features_dtype",
                "target_column"
            ],
            "shrink_csv": [
                "filename",
                "ratio"
            ],
            "load_iris": [
                "data_path"
            ],
            "load_boston": [
                "data_path"
            ],
            "retry": [
                "initial_delay",
                "max_delay",
                "factor",
                "jitter",
                "is_retriable"
            ],
            "_internal_retry": [
                "initial_delay",
                "max_delay",
                "factor",
                "jitter",
                "is_retriable"
            ],
            "_is_retriable": [
                "e"
            ],
            "urlretrieve_with_retry": [
                "url",
                "filename"
            ],
            "maybe_download": [
                "filename",
                "work_directory",
                "source_url"
            ]
        },
        "tensorflow_core.contrib.learn.python.learn.datasets": {
            "load_dataset": [
                "name",
                "size",
                "test_with_fake_data"
            ],
            "make_dataset": [
                "name",
                "n_samples",
                "noise",
                "seed"
            ]
        },
        "tensorflow_core.contrib.proto": {},
        "tensorflow_core.contrib.proto.python": {},
        "tensorflow_core.contrib.proto.python.ops.decode_proto_op": {},
        "tensorflow_core.contrib.proto.python.ops.encode_proto_op": {},
        "tensorflow_core.contrib.proto.python.ops": {},
        "tensorflow_core.contrib.input_pipeline": {},
        "tensorflow_core.contrib.input_pipeline.ops.gen_input_pipeline_ops": {
            "obtain_next": [
                "list",
                "counter",
                "name"
            ],
            "ObtainNext": [
                "list",
                "counter",
                "name"
            ],
            "obtain_next_eager_fallback": [
                "list",
                "counter",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.input_pipeline.ops": {},
        "tensorflow_core.contrib.input_pipeline.python": {},
        "tensorflow_core.contrib.input_pipeline.python.ops.input_pipeline_ops_test": {
            "InputPipelineOpsTest": {
                "testObtainNext": [
                    "self"
                ],
                "testSeekNext": [
                    "self"
                ],
                "_assert_output": [
                    "self",
                    "expected_list",
                    "session",
                    "op"
                ],
                "testSeekNextLimitEpochs": [
                    "self"
                ],
                "testSeekNextLimitEpochsThree": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.input_pipeline.python.ops.input_pipeline_ops": {
            "obtain_next": [
                "string_list_tensor",
                "counter"
            ],
            "_maybe_randomize_list": [
                "string_list",
                "shuffle"
            ],
            "_create_list": [
                "string_list",
                "shuffle",
                "seed",
                "num_epochs"
            ],
            "seek_next": [
                "string_list",
                "shuffle",
                "seed",
                "num_epochs"
            ]
        },
        "tensorflow_core.contrib.input_pipeline.python.ops": {},
        "tensorflow_core.contrib.estimator": {},
        "tensorflow_core.contrib.estimator.python": {},
        "tensorflow_core.contrib.estimator.python.estimator.early_stopping": {},
        "tensorflow_core.contrib.estimator.python.estimator.logit_fns": {},
        "tensorflow_core.contrib.estimator.python.estimator.rnn": {},
        "tensorflow_core.contrib.estimator.python.estimator.boosted_trees": {},
        "tensorflow_core.contrib.estimator.python.estimator.saved_model_estimator": {},
        "tensorflow_core.contrib.estimator.python.estimator.exporter": {},
        "tensorflow_core.contrib.estimator.python.estimator.head": {},
        "tensorflow_core.contrib.estimator.python.estimator.replicate_model_fn": {},
        "tensorflow_core.contrib.estimator.python.estimator.export": {},
        "tensorflow_core.contrib.estimator.python.estimator.dnn_with_layer_annotations": {},
        "tensorflow_core.contrib.estimator.python.estimator.extenders": {},
        "tensorflow_core.contrib.estimator.python.estimator.hooks": {},
        "tensorflow_core.contrib.estimator.python.estimator.multi_head": {},
        "tensorflow_core.contrib.estimator.python.estimator": {},
        "tensorflow_core.contrib.labeled_tensor": {},
        "tensorflow_core.contrib.labeled_tensor.python": {},
        "tensorflow_core.contrib.labeled_tensor.python.ops.test_util": {
            "Base": {
                "eval": [
                    "self",
                    "tensors"
                ],
                "assertTensorsEqual": [
                    "self",
                    "tensor_0",
                    "tensor_1"
                ],
                "assertLabeledTensorsEqual": [
                    "self",
                    "tensor_0",
                    "tensor_1"
                ]
            }
        },
        "tensorflow_core.contrib.labeled_tensor.python.ops.core": {
            "as_axis": [
                "axis_data"
            ],
            "_convert_labeled_tensor_to_tensor": [
                "value"
            ],
            "convert_to_labeled_tensor": [
                "value",
                "dtype",
                "name"
            ],
            "concat_axes": [
                "axes"
            ],
            "identity": [
                "labeled_tensor",
                "name"
            ],
            "slice_function": [
                "labeled_tensor",
                "selection",
                "name"
            ],
            "transpose": [
                "labeled_tensor",
                "axis_order",
                "name"
            ],
            "expand_dims": [
                "labeled_tensor",
                "axes",
                "name"
            ],
            "get_axis_order": [],
            "_set_axis_order": [
                "axis_order"
            ],
            "axis_order_scope": [
                "axis_order"
            ],
            "_get_valid_axis_order": [],
            "check_axis_order": [
                "labeled_tensor",
                "axis_order"
            ],
            "impose_axis_order": [
                "labeled_tensor",
                "axis_order",
                "name"
            ],
            "_find_consistent_ordering": [
                "a",
                "b"
            ],
            "align": [
                "labeled_tensor_0",
                "labeled_tensor_1",
                "name"
            ],
            "define_unary_op": [
                "op_name",
                "elementwise_function"
            ],
            "define_binary_op": [
                "op_name",
                "elementwise_function"
            ],
            "Axis": {
                "__init__": [
                    "self",
                    "name",
                    "value"
                ],
                "name": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__len__": [
                    "self"
                ],
                "dimension": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "labels": [
                    "self"
                ],
                "index": [
                    "self",
                    "value"
                ]
            },
            "Axes": {
                "__init__": [
                    "self",
                    "axes"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__contains__": [
                    "self",
                    "name"
                ],
                "__len__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "remove": [
                    "self",
                    "axis_name"
                ]
            },
            "LabeledTensor": {
                "__init__": [
                    "self",
                    "tensor",
                    "axes"
                ],
                "__repr__": [
                    "self"
                ],
                "tensor": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "axes": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__abs__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__invert__": [
                    "self"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__xor__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ]
            },
            "AxisOrderError": {}
        },
        "tensorflow_core.contrib.labeled_tensor.python.ops.ops": {
            "_gather_1d_on_axis": [
                "labeled_tensor",
                "indexer",
                "axis",
                "name"
            ],
            "select": [
                "labeled_tensor",
                "selection",
                "name"
            ],
            "concat": [
                "labeled_tensors",
                "axis_name",
                "name"
            ],
            "pack": [
                "labeled_tensors",
                "new_axis",
                "axis_position",
                "name"
            ],
            "unpack": [
                "labeled_tensor",
                "axis_name",
                "name"
            ],
            "reshape": [
                "labeled_tensor",
                "existing_axes",
                "new_axes",
                "name"
            ],
            "rename_axis": [
                "labeled_tensor",
                "existing_name",
                "new_name",
                "name"
            ],
            "_batch_helper": [
                "default_name",
                "batch_fn",
                "batch_size",
                "enqueue_many",
                "labeled_tensors",
                "allow_smaller_final_batch",
                "name"
            ],
            "batch": [
                "labeled_tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "allow_smaller_final_batch",
                "name"
            ],
            "shuffle_batch": [
                "labeled_tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "min_after_dequeue",
                "seed",
                "allow_smaller_final_batch",
                "name"
            ],
            "random_crop": [
                "labeled_tensor",
                "shape_map",
                "seed",
                "name"
            ],
            "map_fn": [
                "fn",
                "labeled_tensor",
                "name"
            ],
            "foldl": [
                "fn",
                "labeled_tensor",
                "initial_value",
                "name"
            ],
            "squeeze": [
                "labeled_tensor",
                "axis_names",
                "name"
            ],
            "matmul": [
                "a",
                "b",
                "name"
            ],
            "define_reduce_op": [
                "op_name",
                "reduce_fn"
            ],
            "tile": [
                "labeled_tensor",
                "multiples",
                "name"
            ],
            "pad": [
                "labeled_tensor",
                "paddings",
                "mode",
                "name"
            ],
            "constant": [
                "value",
                "dtype",
                "axes",
                "name"
            ],
            "zeros_like": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "ones_like": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "cast": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "verify_tensor_all_finite": [
                "labeled_tensor",
                "message",
                "name"
            ],
            "boolean_mask": [
                "labeled_tensor",
                "mask",
                "name"
            ],
            "where": [
                "condition",
                "x",
                "y",
                "name"
            ]
        },
        "tensorflow_core.contrib.labeled_tensor.python.ops.sugar": {
            "ReshapeCoder": {
                "__init__": [
                    "self",
                    "existing_axis_names",
                    "new_axes",
                    "name"
                ],
                "encode": [
                    "self",
                    "labeled_tensor"
                ],
                "decode": [
                    "self",
                    "labeled_tensor"
                ]
            }
        },
        "tensorflow_core.contrib.labeled_tensor.python.ops.nn": {},
        "tensorflow_core.contrib.labeled_tensor.python.ops._typecheck": {
            "_replace_forward_references": [
                "t",
                "context"
            ],
            "register_type_abbreviation": [
                "name",
                "alias"
            ],
            "_type_repr": [
                "t"
            ],
            "accepts": [],
            "returns": [],
            "Type": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_SingleArgumentType": {
                "__init__": [
                    "self",
                    "tpe"
                ],
                "_type": [
                    "self"
                ]
            },
            "_TwoArgumentType": {
                "__init__": [
                    "self",
                    "first_type",
                    "second_type"
                ]
            },
            "Union": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Optional": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "List": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Sequence": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Collection": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Tuple": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Mapping": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Dict": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Error": {}
        },
        "tensorflow_core.contrib.labeled_tensor.python.ops": {},
        "tensorflow_core.contrib.labeled_tensor.python.ops.io_ops": {
            "_labeled_to_unlabeled_features": [
                "features"
            ],
            "parse_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "parse_single_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "placeholder": [
                "dtype",
                "axes",
                "name"
            ],
            "FixedLenFeature": {
                "__init__": [
                    "self",
                    "axes",
                    "dtype",
                    "default_value"
                ],
                "axes": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "default_value": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.receptive_field.receptive_field_api": {},
        "tensorflow_core.contrib.receptive_field": {},
        "tensorflow_core.contrib.receptive_field.python": {},
        "tensorflow_core.contrib.receptive_field.python.util.receptive_field": {
            "_get_rf_size_node_input": [
                "stride",
                "kernel_size",
                "rf_size_output"
            ],
            "_get_effective_stride_node_input": [
                "stride",
                "effective_stride_output"
            ],
            "_get_effective_padding_node_input": [
                "stride",
                "padding",
                "effective_padding_output"
            ],
            "compute_receptive_field_from_graph_def": [
                "graph_def",
                "input_node",
                "output_node",
                "stop_propagation",
                "input_resolution"
            ],
            "ReceptiveField": {
                "__init__": [
                    "self",
                    "size",
                    "stride",
                    "padding"
                ],
                "compute_input_center_coordinates": [
                    "self",
                    "y",
                    "axis"
                ],
                "compute_feature_coordinates": [
                    "self",
                    "x",
                    "axis"
                ],
                "__iter__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.receptive_field.python.util.graph_compute_order": {
            "parse_graph_nodes": [
                "graph_def"
            ],
            "_compute_output_resolution": [
                "input_spatial_resolution",
                "kernel_size",
                "stride",
                "total_padding"
            ],
            "_get_computed_nodes": [
                "name_to_node",
                "current",
                "node_info",
                "input_node_name",
                "input_node_size"
            ],
            "get_compute_order": [
                "graph_def",
                "input_node_name",
                "input_node_size"
            ]
        },
        "tensorflow_core.contrib.receptive_field.python.util.parse_layer_parameters": {
            "_stride_size": [
                "node",
                "name_to_node"
            ],
            "_conv_kernel_size": [
                "node",
                "name_to_node"
            ],
            "_padding_size_conv_pool": [
                "node",
                "kernel_size",
                "stride",
                "input_resolution"
            ],
            "_pool_kernel_size": [
                "node",
                "name_to_node"
            ],
            "_padding_size_pad_layer": [
                "node",
                "name_to_node"
            ],
            "get_layer_params": [
                "node",
                "name_to_node",
                "input_resolution",
                "force"
            ]
        },
        "tensorflow_core.contrib.receptive_field.python.util": {},
        "tensorflow_core.contrib.compiler.jit": {},
        "tensorflow_core.contrib.compiler.xla": {
            "_get_scaffold": [
                "captured_scaffold_fn"
            ],
            "estimator_model_fn": [
                "target_model_fn"
            ],
            "_CapturedObject": {
                "__init__": [
                    "self"
                ],
                "capture": [
                    "self",
                    "o"
                ],
                "get": [
                    "self"
                ]
            },
            "_ModelFnWrapper": {
                "__init__": [
                    "self",
                    "function"
                ],
                "__call__": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "params"
                ],
                "_make_train_step": [
                    "self",
                    "features",
                    "labels",
                    "params"
                ],
                "_make_eval_step": [
                    "self",
                    "features",
                    "labels",
                    "params"
                ],
                "_call_model_fn": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "params"
                ],
                "_verify_estimator_spec": [
                    "self",
                    "estimator_spec"
                ]
            }
        },
        "tensorflow_core.contrib.compiler": {},
        "tensorflow_core.contrib.grid_rnn": {},
        "tensorflow_core.contrib.grid_rnn.python": {},
        "tensorflow_core.contrib.grid_rnn.python.ops.grid_rnn_cell": {
            "_parse_rnn_config": [
                "num_dims",
                "ls_input_dims",
                "ls_output_dims",
                "ls_priority_dims",
                "ls_non_recurrent_dims",
                "non_recurrent_fn",
                "tied",
                "num_units"
            ],
            "_propagate": [
                "dim_indices",
                "conf",
                "cells",
                "c_prev",
                "m_prev",
                "new_output",
                "new_state",
                "first_call"
            ],
            "GridRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "num_dims",
                    "input_dims",
                    "output_dims",
                    "priority_dims",
                    "non_recurrent_dims",
                    "tied",
                    "cell_fn",
                    "non_recurrent_fn",
                    "state_is_tuple",
                    "output_is_tuple"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_extract_states": [
                    "self",
                    "state"
                ],
                "_project_input": [
                    "self",
                    "inputs",
                    "c_prev",
                    "m_prev",
                    "with_c"
                ],
                "_cell_state_size": [
                    "self"
                ]
            },
            "Grid1BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            },
            "Grid2BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            },
            "Grid1BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            },
            "Grid2BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "forget_bias",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            },
            "Grid1LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "forget_bias",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            },
            "Grid2LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "use_peepholes",
                    "forget_bias",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            },
            "Grid3LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "use_peepholes",
                    "forget_bias",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            },
            "Grid2GRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "state_is_tuple",
                    "output_is_tuple"
                ]
            }
        },
        "tensorflow_core.contrib.grid_rnn.python.ops": {},
        "tensorflow_core.contrib.boosted_trees": {},
        "tensorflow_core.contrib.boosted_trees.lib": {},
        "tensorflow_core.contrib.boosted_trees.lib.learner": {},
        "tensorflow_core.contrib.boosted_trees.lib.learner.batch.ordinal_split_handler": {
            "_make_dense_split": [
                "quantile_accumulator_handle",
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "multiclass_strategy",
                "class_id",
                "feature_column_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "is_multi_dimentional",
                "loss_uses_sum_reduction",
                "weak_learner_type"
            ],
            "_make_sparse_split": [
                "quantile_accumulator_handle",
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "multiclass_strategy",
                "class_id",
                "feature_column_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "is_multi_dimentional",
                "loss_uses_sum_reduction"
            ],
            "_specialize_make_split_dense": [
                "func",
                "is_multi_dimentional"
            ],
            "_specialize_make_split_sparse": [
                "func",
                "is_multi_dimentional"
            ],
            "dense_make_stats_update": [
                "is_active",
                "are_buckets_ready",
                "float_column",
                "quantile_buckets",
                "example_partition_ids",
                "gradients",
                "hessians",
                "weights",
                "empty_gradients",
                "empty_hessians"
            ],
            "sparse_make_stats_update": [
                "is_active",
                "are_buckets_ready",
                "sparse_column_indices",
                "sparse_column_values",
                "sparse_column_shape",
                "quantile_buckets",
                "example_partition_ids",
                "gradients",
                "hessians",
                "weights",
                "empty_gradients",
                "empty_hessians"
            ],
            "InequalitySplitHandler": {
                "__init__": [
                    "self",
                    "l1_regularization",
                    "l2_regularization",
                    "tree_complexity_regularization",
                    "min_node_weight",
                    "feature_column_group_id",
                    "epsilon",
                    "num_quantiles",
                    "gradient_shape",
                    "hessian_shape",
                    "multiclass_strategy",
                    "init_stamp_token",
                    "loss_uses_sum_reduction",
                    "name"
                ],
                "reset": [
                    "self",
                    "stamp_token",
                    "next_stamp_token"
                ]
            },
            "DenseSplitHandler": {
                "__init__": [
                    "self",
                    "dense_float_column",
                    "l1_regularization",
                    "l2_regularization",
                    "tree_complexity_regularization",
                    "min_node_weight",
                    "feature_column_group_id",
                    "epsilon",
                    "num_quantiles",
                    "gradient_shape",
                    "hessian_shape",
                    "multiclass_strategy",
                    "init_stamp_token",
                    "loss_uses_sum_reduction",
                    "weak_learner_type",
                    "name"
                ],
                "scheduled_reads": [
                    "self"
                ],
                "update_stats": [
                    "self",
                    "stamp_token",
                    "example_partition_ids",
                    "gradients",
                    "hessians",
                    "empty_gradients",
                    "empty_hessians",
                    "weights",
                    "is_active",
                    "scheduled_reads"
                ],
                "make_splits": [
                    "self",
                    "stamp_token",
                    "next_stamp_token",
                    "class_id"
                ]
            },
            "SparseSplitHandler": {
                "__init__": [
                    "self",
                    "sparse_float_column",
                    "l1_regularization",
                    "l2_regularization",
                    "tree_complexity_regularization",
                    "min_node_weight",
                    "feature_column_group_id",
                    "epsilon",
                    "num_quantiles",
                    "gradient_shape",
                    "hessian_shape",
                    "multiclass_strategy",
                    "init_stamp_token",
                    "loss_uses_sum_reduction",
                    "name"
                ],
                "scheduled_reads": [
                    "self"
                ],
                "update_stats": [
                    "self",
                    "stamp_token",
                    "example_partition_ids",
                    "gradients",
                    "hessians",
                    "empty_gradients",
                    "empty_hessians",
                    "weights",
                    "is_active",
                    "scheduled_reads"
                ],
                "make_splits": [
                    "self",
                    "stamp_token",
                    "next_stamp_token",
                    "class_id"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.lib.learner.batch.base_split_handler": {
            "BaseSplitHandler": {
                "__init__": [
                    "self",
                    "l1_regularization",
                    "l2_regularization",
                    "tree_complexity_regularization",
                    "min_node_weight",
                    "feature_column_group_id",
                    "gradient_shape",
                    "hessian_shape",
                    "multiclass_strategy",
                    "loss_uses_sum_reduction",
                    "name"
                ],
                "scheduled_reads": [
                    "self"
                ],
                "update_stats": [
                    "self",
                    "stamp_token",
                    "example_partition_ids",
                    "gradients",
                    "hessians",
                    "empty_gradients",
                    "empty_hessians",
                    "weights",
                    "is_active",
                    "scheduled_reads"
                ],
                "update_stats_sync": [
                    "self",
                    "stamp_token",
                    "example_partition_ids",
                    "gradients",
                    "hessians",
                    "empty_gradients",
                    "empty_hessians",
                    "weights",
                    "is_active"
                ],
                "reset": [
                    "self",
                    "stamp_token",
                    "next_stamp_token"
                ],
                "make_splits": [
                    "self",
                    "stamp_token",
                    "next_stamp_token",
                    "class_id"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.lib.learner.batch": {},
        "tensorflow_core.contrib.boosted_trees.lib.learner.batch.categorical_split_handler": {
            "EqualitySplitHandler": {
                "__init__": [
                    "self",
                    "sparse_int_column",
                    "l1_regularization",
                    "l2_regularization",
                    "tree_complexity_regularization",
                    "min_node_weight",
                    "feature_column_group_id",
                    "gradient_shape",
                    "hessian_shape",
                    "multiclass_strategy",
                    "init_stamp_token",
                    "loss_uses_sum_reduction",
                    "weak_learner_type",
                    "name"
                ],
                "update_stats": [
                    "self",
                    "stamp_token",
                    "example_partition_ids",
                    "gradients",
                    "hessians",
                    "empty_gradients",
                    "empty_hessians",
                    "weights",
                    "is_active",
                    "scheduled_reads"
                ],
                "make_splits": [
                    "self",
                    "stamp_token",
                    "next_stamp_token",
                    "class_id"
                ],
                "reset": [
                    "self",
                    "stamp_token",
                    "next_stamp_token"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.proto.learner_pb2": {},
        "tensorflow_core.contrib.boosted_trees.proto.quantiles_pb2": {},
        "tensorflow_core.contrib.boosted_trees.proto.tree_config_pb2": {},
        "tensorflow_core.contrib.boosted_trees.proto.split_info_pb2": {},
        "tensorflow_core.contrib.boosted_trees.proto": {},
        "tensorflow_core.contrib.boosted_trees.python": {},
        "tensorflow_core.contrib.boosted_trees.python.ops.stats_accumulator_ops": {
            "StatsAccumulatorSaveable": {
                "__init__": [
                    "self",
                    "resource_handle",
                    "create_op",
                    "is_scalar",
                    "name"
                ],
                "serialize": [
                    "self"
                ],
                "deserialize": [
                    "self",
                    "stamp_token",
                    "num_updates",
                    "partition_ids",
                    "feature_ids",
                    "gradients",
                    "hessians"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ]
            },
            "StatsAccumulator": {
                "__init__": [
                    "self",
                    "stamp_token",
                    "gradient_shape",
                    "hessian_shape",
                    "name",
                    "container"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "saveable": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "add": [
                    "self",
                    "stamp_token",
                    "partition_ids",
                    "feature_ids",
                    "gradients",
                    "hessians"
                ],
                "schedule_add": [
                    "self",
                    "partition_ids",
                    "feature_ids",
                    "gradients",
                    "hessians"
                ],
                "_make_summary": [
                    "self",
                    "partition_ids",
                    "feature_ids",
                    "gradients",
                    "hessians"
                ],
                "flush": [
                    "self",
                    "stamp_token",
                    "next_stamp_token"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.gen_model_ops": {
            "create_tree_ensemble_variable": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_config",
                "name"
            ],
            "CreateTreeEnsembleVariable": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_config",
                "name"
            ],
            "create_tree_ensemble_variable_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_config",
                "name",
                "ctx"
            ],
            "decision_tree_ensemble_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "DecisionTreeEnsembleResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "decision_tree_ensemble_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "tree_ensemble_deserialize": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_config",
                "name"
            ],
            "TreeEnsembleDeserialize": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_config",
                "name"
            ],
            "tree_ensemble_deserialize_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "tree_ensemble_config",
                "name",
                "ctx"
            ],
            "tree_ensemble_is_initialized_op": [
                "tree_ensemble_handle",
                "name"
            ],
            "TreeEnsembleIsInitializedOp": [
                "tree_ensemble_handle",
                "name"
            ],
            "tree_ensemble_is_initialized_op_eager_fallback": [
                "tree_ensemble_handle",
                "name",
                "ctx"
            ],
            "tree_ensemble_serialize": [
                "tree_ensemble_handle",
                "name"
            ],
            "TreeEnsembleSerialize": [
                "tree_ensemble_handle",
                "name"
            ],
            "tree_ensemble_serialize_eager_fallback": [
                "tree_ensemble_handle",
                "name",
                "ctx"
            ],
            "tree_ensemble_stamp_token": [
                "tree_ensemble_handle",
                "name"
            ],
            "TreeEnsembleStampToken": [
                "tree_ensemble_handle",
                "name"
            ],
            "tree_ensemble_stamp_token_eager_fallback": [
                "tree_ensemble_handle",
                "name",
                "ctx"
            ],
            "tree_ensemble_used_handlers": [
                "tree_ensemble_handle",
                "stamp_token",
                "num_all_handlers",
                "name"
            ],
            "TreeEnsembleUsedHandlers": [
                "tree_ensemble_handle",
                "stamp_token",
                "num_all_handlers",
                "name"
            ],
            "tree_ensemble_used_handlers_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "num_all_handlers",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.split_handler_ops": {},
        "tensorflow_core.contrib.boosted_trees.python.ops.training_ops": {},
        "tensorflow_core.contrib.boosted_trees.python.ops.boosted_trees_ops_loader": {},
        "tensorflow_core.contrib.boosted_trees.python.ops.quantile_ops": {
            "QuantileAccumulatorSaveable": {
                "__init__": [
                    "self",
                    "resource_handle",
                    "create_op",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ]
            },
            "QuantileAccumulator": {
                "__init__": [
                    "self",
                    "init_stamp_token",
                    "epsilon",
                    "num_quantiles",
                    "max_elements",
                    "name",
                    "container",
                    "generate_quantiles"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "get_buckets": [
                    "self",
                    "stamp_token"
                ],
                "schedule_get_buckets": [
                    "self"
                ],
                "_make_summary": [
                    "self",
                    "column",
                    "example_weights"
                ],
                "add_summary": [
                    "self",
                    "stamp_token",
                    "column",
                    "example_weights"
                ],
                "add_prebuilt_summary": [
                    "self",
                    "stamp_token",
                    "summary"
                ],
                "schedule_add_summary": [
                    "self",
                    "stamp_token",
                    "column",
                    "example_weights"
                ],
                "flush": [
                    "self",
                    "stamp_token",
                    "next_stamp_token"
                ],
                "flush_summary": [
                    "self",
                    "stamp_token",
                    "next_stamp_token"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.batch_ops_utils": {
            "_move_tensors": [
                "tensors",
                "device"
            ],
            "_scheduled_stamp_resource_op_runner": [
                "batch",
                "stamp"
            ],
            "run_handler_scheduled_ops": [
                "per_handler_ops",
                "stamp",
                "worker_device"
            ],
            "ScheduledOp": {
                "batching_key": [
                    "self"
                ],
                "batch_runner_fn": [
                    "self"
                ]
            },
            "ScheduledStampedResourceOp": {
                "__init__": [
                    "self",
                    "resource_handle",
                    "op"
                ],
                "batching_key": [
                    "self"
                ],
                "batch_runner_fn": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.gen_split_handler_ops": {
            "build_categorical_equality_splits": [
                "num_minibatches",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "class_id",
                "feature_column_group_id",
                "bias_feature_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "weak_learner_type",
                "name"
            ],
            "BuildCategoricalEqualitySplits": [
                "num_minibatches",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "class_id",
                "feature_column_group_id",
                "bias_feature_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "weak_learner_type",
                "name"
            ],
            "build_categorical_equality_splits_eager_fallback": [
                "num_minibatches",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "class_id",
                "feature_column_group_id",
                "bias_feature_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "weak_learner_type",
                "name",
                "ctx"
            ],
            "build_dense_inequality_splits": [
                "num_minibatches",
                "partition_ids",
                "bucket_ids",
                "gradients",
                "hessians",
                "bucket_boundaries",
                "class_id",
                "feature_column_group_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "weak_learner_type",
                "name"
            ],
            "BuildDenseInequalitySplits": [
                "num_minibatches",
                "partition_ids",
                "bucket_ids",
                "gradients",
                "hessians",
                "bucket_boundaries",
                "class_id",
                "feature_column_group_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "weak_learner_type",
                "name"
            ],
            "build_dense_inequality_splits_eager_fallback": [
                "num_minibatches",
                "partition_ids",
                "bucket_ids",
                "gradients",
                "hessians",
                "bucket_boundaries",
                "class_id",
                "feature_column_group_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "weak_learner_type",
                "name",
                "ctx"
            ],
            "build_sparse_inequality_splits": [
                "num_minibatches",
                "partition_ids",
                "bucket_ids",
                "gradients",
                "hessians",
                "bucket_boundaries",
                "class_id",
                "feature_column_group_id",
                "bias_feature_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "name"
            ],
            "BuildSparseInequalitySplits": [
                "num_minibatches",
                "partition_ids",
                "bucket_ids",
                "gradients",
                "hessians",
                "bucket_boundaries",
                "class_id",
                "feature_column_group_id",
                "bias_feature_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "name"
            ],
            "build_sparse_inequality_splits_eager_fallback": [
                "num_minibatches",
                "partition_ids",
                "bucket_ids",
                "gradients",
                "hessians",
                "bucket_boundaries",
                "class_id",
                "feature_column_group_id",
                "bias_feature_id",
                "l1_regularization",
                "l2_regularization",
                "tree_complexity_regularization",
                "min_node_weight",
                "multiclass_strategy",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.gen_training_ops": {
            "center_tree_ensemble_bias": [
                "tree_ensemble_handle",
                "stamp_token",
                "next_stamp_token",
                "delta_updates",
                "learner_config",
                "centering_epsilon",
                "name"
            ],
            "CenterTreeEnsembleBias": [
                "tree_ensemble_handle",
                "stamp_token",
                "next_stamp_token",
                "delta_updates",
                "learner_config",
                "centering_epsilon",
                "name"
            ],
            "center_tree_ensemble_bias_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "next_stamp_token",
                "delta_updates",
                "learner_config",
                "centering_epsilon",
                "name",
                "ctx"
            ],
            "grow_tree_ensemble": [
                "tree_ensemble_handle",
                "stamp_token",
                "next_stamp_token",
                "learning_rate",
                "dropout_seed",
                "max_tree_depth",
                "weak_learner_type",
                "partition_ids",
                "gains",
                "splits",
                "learner_config",
                "center_bias",
                "name"
            ],
            "GrowTreeEnsemble": [
                "tree_ensemble_handle",
                "stamp_token",
                "next_stamp_token",
                "learning_rate",
                "dropout_seed",
                "max_tree_depth",
                "weak_learner_type",
                "partition_ids",
                "gains",
                "splits",
                "learner_config",
                "center_bias",
                "name"
            ],
            "grow_tree_ensemble_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "next_stamp_token",
                "learning_rate",
                "dropout_seed",
                "max_tree_depth",
                "weak_learner_type",
                "partition_ids",
                "gains",
                "splits",
                "learner_config",
                "center_bias",
                "name",
                "ctx"
            ],
            "tree_ensemble_stats": [
                "tree_ensemble_handle",
                "stamp_token",
                "name"
            ],
            "TreeEnsembleStats": [
                "tree_ensemble_handle",
                "stamp_token",
                "name"
            ],
            "tree_ensemble_stats_eager_fallback": [
                "tree_ensemble_handle",
                "stamp_token",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.gen_quantile_ops": {
            "bucketize_with_input_boundaries": [
                "input",
                "boundaries",
                "name"
            ],
            "BucketizeWithInputBoundaries": [
                "input",
                "boundaries",
                "name"
            ],
            "bucketize_with_input_boundaries_eager_fallback": [
                "input",
                "boundaries",
                "name",
                "ctx"
            ],
            "create_quantile_accumulator": [
                "quantile_accumulator_handle",
                "stamp_token",
                "epsilon",
                "num_quantiles",
                "container",
                "shared_name",
                "max_elements",
                "generate_quantiles",
                "name"
            ],
            "CreateQuantileAccumulator": [
                "quantile_accumulator_handle",
                "stamp_token",
                "epsilon",
                "num_quantiles",
                "container",
                "shared_name",
                "max_elements",
                "generate_quantiles",
                "name"
            ],
            "create_quantile_accumulator_eager_fallback": [
                "quantile_accumulator_handle",
                "stamp_token",
                "epsilon",
                "num_quantiles",
                "container",
                "shared_name",
                "max_elements",
                "generate_quantiles",
                "name",
                "ctx"
            ],
            "make_quantile_summaries": [
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "example_weights",
                "epsilon",
                "name"
            ],
            "MakeQuantileSummaries": [
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "example_weights",
                "epsilon",
                "name"
            ],
            "make_quantile_summaries_eager_fallback": [
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "example_weights",
                "epsilon",
                "name",
                "ctx"
            ],
            "quantile_accumulator_add_summaries": [
                "quantile_accumulator_handles",
                "stamp_token",
                "summaries",
                "name"
            ],
            "QuantileAccumulatorAddSummaries": [
                "quantile_accumulator_handles",
                "stamp_token",
                "summaries",
                "name"
            ],
            "quantile_accumulator_add_summaries_eager_fallback": [
                "quantile_accumulator_handles",
                "stamp_token",
                "summaries",
                "name",
                "ctx"
            ],
            "quantile_accumulator_deserialize": [
                "quantile_accumulator_handle",
                "stamp_token",
                "stream_state",
                "are_buckets_ready",
                "buckets",
                "name"
            ],
            "QuantileAccumulatorDeserialize": [
                "quantile_accumulator_handle",
                "stamp_token",
                "stream_state",
                "are_buckets_ready",
                "buckets",
                "name"
            ],
            "quantile_accumulator_deserialize_eager_fallback": [
                "quantile_accumulator_handle",
                "stamp_token",
                "stream_state",
                "are_buckets_ready",
                "buckets",
                "name",
                "ctx"
            ],
            "quantile_accumulator_flush": [
                "quantile_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "QuantileAccumulatorFlush": [
                "quantile_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "quantile_accumulator_flush_eager_fallback": [
                "quantile_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name",
                "ctx"
            ],
            "quantile_accumulator_flush_summary": [
                "quantile_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "QuantileAccumulatorFlushSummary": [
                "quantile_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "quantile_accumulator_flush_summary_eager_fallback": [
                "quantile_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name",
                "ctx"
            ],
            "quantile_accumulator_get_buckets": [
                "quantile_accumulator_handles",
                "stamp_token",
                "name"
            ],
            "QuantileAccumulatorGetBuckets": [
                "quantile_accumulator_handles",
                "stamp_token",
                "name"
            ],
            "quantile_accumulator_get_buckets_eager_fallback": [
                "quantile_accumulator_handles",
                "stamp_token",
                "name",
                "ctx"
            ],
            "quantile_accumulator_is_initialized": [
                "quantile_accumulator_handle",
                "name"
            ],
            "QuantileAccumulatorIsInitialized": [
                "quantile_accumulator_handle",
                "name"
            ],
            "quantile_accumulator_is_initialized_eager_fallback": [
                "quantile_accumulator_handle",
                "name",
                "ctx"
            ],
            "quantile_accumulator_serialize": [
                "quantile_accumulator_handle",
                "name"
            ],
            "QuantileAccumulatorSerialize": [
                "quantile_accumulator_handle",
                "name"
            ],
            "quantile_accumulator_serialize_eager_fallback": [
                "quantile_accumulator_handle",
                "name",
                "ctx"
            ],
            "quantile_buckets": [
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "example_weights",
                "dense_config",
                "sparse_config",
                "name"
            ],
            "QuantileBuckets": [
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "example_weights",
                "dense_config",
                "sparse_config",
                "name"
            ],
            "quantile_buckets_eager_fallback": [
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "example_weights",
                "dense_config",
                "sparse_config",
                "name",
                "ctx"
            ],
            "quantile_stream_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "QuantileStreamResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "quantile_stream_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "quantiles": [
                "dense_values",
                "sparse_values",
                "dense_buckets",
                "sparse_buckets",
                "sparse_indices",
                "name"
            ],
            "Quantiles": [
                "dense_values",
                "sparse_values",
                "dense_buckets",
                "sparse_buckets",
                "sparse_indices",
                "name"
            ],
            "quantiles_eager_fallback": [
                "dense_values",
                "sparse_values",
                "dense_buckets",
                "sparse_buckets",
                "sparse_indices",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.model_ops": {
            "tree_ensemble_variable": [
                "stamp_token",
                "tree_ensemble_config",
                "name",
                "container"
            ],
            "TreeEnsembleVariableSavable": {
                "__init__": [
                    "self",
                    "tree_ensemble_handle",
                    "create_op",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ]
            },
            "TreeEnsembleVariable": {
                "__init__": [
                    "self",
                    "stamp_token",
                    "tree_ensemble_config",
                    "name",
                    "container"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.gen_prediction_ops": {
            "gradient_trees_partition_examples": [
                "tree_ensemble_handle",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "use_locking",
                "name"
            ],
            "GradientTreesPartitionExamples": [
                "tree_ensemble_handle",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "use_locking",
                "name"
            ],
            "gradient_trees_partition_examples_eager_fallback": [
                "tree_ensemble_handle",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "use_locking",
                "name",
                "ctx"
            ],
            "gradient_trees_prediction": [
                "tree_ensemble_handle",
                "seed",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "learner_config",
                "apply_dropout",
                "apply_averaging",
                "center_bias",
                "reduce_dim",
                "use_locking",
                "name"
            ],
            "GradientTreesPrediction": [
                "tree_ensemble_handle",
                "seed",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "learner_config",
                "apply_dropout",
                "apply_averaging",
                "center_bias",
                "reduce_dim",
                "use_locking",
                "name"
            ],
            "gradient_trees_prediction_eager_fallback": [
                "tree_ensemble_handle",
                "seed",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "learner_config",
                "apply_dropout",
                "apply_averaging",
                "center_bias",
                "reduce_dim",
                "use_locking",
                "name",
                "ctx"
            ],
            "gradient_trees_prediction_verbose": [
                "tree_ensemble_handle",
                "seed",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "learner_config",
                "apply_dropout",
                "apply_averaging",
                "center_bias",
                "reduce_dim",
                "use_locking",
                "name"
            ],
            "GradientTreesPredictionVerbose": [
                "tree_ensemble_handle",
                "seed",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "learner_config",
                "apply_dropout",
                "apply_averaging",
                "center_bias",
                "reduce_dim",
                "use_locking",
                "name"
            ],
            "gradient_trees_prediction_verbose_eager_fallback": [
                "tree_ensemble_handle",
                "seed",
                "dense_float_features",
                "sparse_float_feature_indices",
                "sparse_float_feature_values",
                "sparse_float_feature_shapes",
                "sparse_int_feature_indices",
                "sparse_int_feature_values",
                "sparse_int_feature_shapes",
                "learner_config",
                "apply_dropout",
                "apply_averaging",
                "center_bias",
                "reduce_dim",
                "use_locking",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.python.ops.gen_stats_accumulator_ops": {
            "create_stats_accumulator_scalar": [
                "stats_accumulator_handle",
                "stamp_token",
                "name"
            ],
            "CreateStatsAccumulatorScalar": [
                "stats_accumulator_handle",
                "stamp_token",
                "name"
            ],
            "create_stats_accumulator_scalar_eager_fallback": [
                "stats_accumulator_handle",
                "stamp_token",
                "name",
                "ctx"
            ],
            "create_stats_accumulator_tensor": [
                "stats_accumulator_handle",
                "stamp_token",
                "per_slot_gradient_shape",
                "per_slot_hessian_shape",
                "name"
            ],
            "CreateStatsAccumulatorTensor": [
                "stats_accumulator_handle",
                "stamp_token",
                "per_slot_gradient_shape",
                "per_slot_hessian_shape",
                "name"
            ],
            "create_stats_accumulator_tensor_eager_fallback": [
                "stats_accumulator_handle",
                "stamp_token",
                "per_slot_gradient_shape",
                "per_slot_hessian_shape",
                "name",
                "ctx"
            ],
            "stats_accumulator_scalar_add": [
                "stats_accumulator_handles",
                "stamp_token",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "StatsAccumulatorScalarAdd": [
                "stats_accumulator_handles",
                "stamp_token",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "stats_accumulator_scalar_add_eager_fallback": [
                "stats_accumulator_handles",
                "stamp_token",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name",
                "ctx"
            ],
            "stats_accumulator_scalar_deserialize": [
                "stats_accumulator_handle",
                "stamp_token",
                "num_updates",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "StatsAccumulatorScalarDeserialize": [
                "stats_accumulator_handle",
                "stamp_token",
                "num_updates",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "stats_accumulator_scalar_deserialize_eager_fallback": [
                "stats_accumulator_handle",
                "stamp_token",
                "num_updates",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name",
                "ctx"
            ],
            "stats_accumulator_scalar_flush": [
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "StatsAccumulatorScalarFlush": [
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "stats_accumulator_scalar_flush_eager_fallback": [
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name",
                "ctx"
            ],
            "stats_accumulator_scalar_is_initialized": [
                "stats_accumulator_handle",
                "name"
            ],
            "StatsAccumulatorScalarIsInitialized": [
                "stats_accumulator_handle",
                "name"
            ],
            "stats_accumulator_scalar_is_initialized_eager_fallback": [
                "stats_accumulator_handle",
                "name",
                "ctx"
            ],
            "stats_accumulator_scalar_make_summary": [
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "StatsAccumulatorScalarMakeSummary": [
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "stats_accumulator_scalar_make_summary_eager_fallback": [
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name",
                "ctx"
            ],
            "stats_accumulator_scalar_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "StatsAccumulatorScalarResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "stats_accumulator_scalar_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "stats_accumulator_scalar_serialize": [
                "stats_accumulator_handle",
                "name"
            ],
            "StatsAccumulatorScalarSerialize": [
                "stats_accumulator_handle",
                "name"
            ],
            "stats_accumulator_scalar_serialize_eager_fallback": [
                "stats_accumulator_handle",
                "name",
                "ctx"
            ],
            "stats_accumulator_tensor_add": [
                "stats_accumulator_handles",
                "stamp_token",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "StatsAccumulatorTensorAdd": [
                "stats_accumulator_handles",
                "stamp_token",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "stats_accumulator_tensor_add_eager_fallback": [
                "stats_accumulator_handles",
                "stamp_token",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name",
                "ctx"
            ],
            "stats_accumulator_tensor_deserialize": [
                "stats_accumulator_handle",
                "stamp_token",
                "num_updates",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "StatsAccumulatorTensorDeserialize": [
                "stats_accumulator_handle",
                "stamp_token",
                "num_updates",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "stats_accumulator_tensor_deserialize_eager_fallback": [
                "stats_accumulator_handle",
                "stamp_token",
                "num_updates",
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name",
                "ctx"
            ],
            "stats_accumulator_tensor_flush": [
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "StatsAccumulatorTensorFlush": [
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name"
            ],
            "stats_accumulator_tensor_flush_eager_fallback": [
                "stats_accumulator_handle",
                "stamp_token",
                "next_stamp_token",
                "name",
                "ctx"
            ],
            "stats_accumulator_tensor_is_initialized": [
                "stats_accumulator_handle",
                "name"
            ],
            "StatsAccumulatorTensorIsInitialized": [
                "stats_accumulator_handle",
                "name"
            ],
            "stats_accumulator_tensor_is_initialized_eager_fallback": [
                "stats_accumulator_handle",
                "name",
                "ctx"
            ],
            "stats_accumulator_tensor_make_summary": [
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "StatsAccumulatorTensorMakeSummary": [
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name"
            ],
            "stats_accumulator_tensor_make_summary_eager_fallback": [
                "partition_ids",
                "feature_ids",
                "gradients",
                "hessians",
                "name",
                "ctx"
            ],
            "stats_accumulator_tensor_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "StatsAccumulatorTensorResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "stats_accumulator_tensor_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "stats_accumulator_tensor_serialize": [
                "stats_accumulator_handle",
                "name"
            ],
            "StatsAccumulatorTensorSerialize": [
                "stats_accumulator_handle",
                "name"
            ],
            "stats_accumulator_tensor_serialize_eager_fallback": [
                "stats_accumulator_handle",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.python.ops": {},
        "tensorflow_core.contrib.boosted_trees.python.ops.prediction_ops": {},
        "tensorflow_core.contrib.boosted_trees.python.training": {},
        "tensorflow_core.contrib.boosted_trees.python.training.functions.gbdt_batch": {
            "_get_column_by_index": [
                "tensor",
                "indices"
            ],
            "_make_predictions_dict": [
                "stamp",
                "logits",
                "partition_ids",
                "ensemble_stats",
                "used_handlers",
                "leaf_index"
            ],
            "extract_features": [
                "features",
                "feature_columns",
                "use_core_columns"
            ],
            "_dropout_params": [
                "mode",
                "ensemble_stats"
            ],
            "_OpRoundRobinStrategy": {
                "__init__": [
                    "self",
                    "ps_ops",
                    "num_tasks"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            },
            "GradientBoostedDecisionTreeModel": {
                "__init__": [
                    "self",
                    "is_chief",
                    "num_ps_replicas",
                    "ensemble_handle",
                    "center_bias",
                    "examples_per_layer",
                    "learner_config",
                    "features",
                    "logits_dimension",
                    "loss_reduction",
                    "feature_columns",
                    "use_core_columns",
                    "output_leaf_index",
                    "output_leaf_index_modes",
                    "num_quantiles"
                ],
                "_predict_and_return_dict": [
                    "self",
                    "ensemble_handle",
                    "ensemble_stamp",
                    "mode"
                ],
                "predict": [
                    "self",
                    "mode"
                ],
                "_get_class_id": [
                    "self",
                    "predictions_dict"
                ],
                "update_stats": [
                    "self",
                    "loss",
                    "predictions_dict",
                    "gradients",
                    "hessians"
                ],
                "increment_step_counter_and_maybe_update_ensemble": [
                    "self",
                    "predictions_dict",
                    "training_state"
                ],
                "make_update_ensemble_fn": [
                    "self",
                    "ensemble_stamp",
                    "training_state",
                    "dropout_seed",
                    "class_id"
                ],
                "get_number_of_trees_tensor": [
                    "self"
                ],
                "get_max_tree_depth": [
                    "self"
                ],
                "train": [
                    "self",
                    "loss",
                    "predictions_dict",
                    "labels",
                    "gradients",
                    "hessians"
                ],
                "_get_weights": [
                    "self",
                    "hessian_shape",
                    "hessians"
                ],
                "_full_hessian": [
                    "self",
                    "grads",
                    "predictions"
                ],
                "_diagonal_hessian": [
                    "self",
                    "grads",
                    "predictions"
                ],
                "_get_replica_device_setter": [
                    "self",
                    "worker_device"
                ],
                "_make_update_bias_stats_fn": [
                    "self",
                    "ensemble_stamp",
                    "predictions",
                    "gradients",
                    "bias_stats_accumulator",
                    "hessians"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.python.training.functions": {},
        "tensorflow_core.contrib.boosted_trees.python.utils.losses": {
            "per_example_squared_hinge_loss": [
                "labels",
                "weights",
                "predictions"
            ],
            "per_example_logistic_loss": [
                "labels",
                "weights",
                "predictions"
            ],
            "per_example_quantile_regression_loss": [
                "labels",
                "weights",
                "predictions",
                "quantile"
            ],
            "per_example_maxent_loss": [
                "labels",
                "weights",
                "logits",
                "num_classes",
                "eps"
            ],
            "per_example_squared_loss": [
                "labels",
                "weights",
                "predictions"
            ],
            "per_example_exp_loss": [
                "labels",
                "weights",
                "predictions",
                "name",
                "eps"
            ],
            "per_example_full_exp_loss": [
                "labels",
                "weights",
                "predictions",
                "name"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.python.utils": {},
        "tensorflow_core.contrib.boosted_trees.estimator_batch.dnn_tree_combined_estimator": {
            "_get_optimizer": [
                "optimizer"
            ],
            "_add_hidden_layer_summary": [
                "value",
                "tag"
            ],
            "_dnn_tree_combined_model_fn": [
                "features",
                "labels",
                "mode",
                "head",
                "dnn_hidden_units",
                "dnn_feature_columns",
                "tree_learner_config",
                "num_trees",
                "tree_examples_per_layer",
                "config",
                "dnn_optimizer",
                "dnn_activation_fn",
                "dnn_dropout",
                "dnn_input_layer_partitioner",
                "dnn_input_layer_to_tree",
                "dnn_steps_to_train",
                "predict_with_tree_only",
                "tree_feature_columns",
                "tree_center_bias",
                "dnn_to_tree_distillation_param",
                "use_core_versions",
                "output_type",
                "override_global_step_value"
            ],
            "DNNBoostedTreeCombinedClassifier": {
                "__init__": [
                    "self",
                    "dnn_hidden_units",
                    "dnn_feature_columns",
                    "tree_learner_config",
                    "num_trees",
                    "tree_examples_per_layer",
                    "n_classes",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "label_name",
                    "label_keys",
                    "feature_engineering_fn",
                    "dnn_optimizer",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "dnn_input_layer_partitioner",
                    "dnn_input_layer_to_tree",
                    "dnn_steps_to_train",
                    "predict_with_tree_only",
                    "tree_feature_columns",
                    "tree_center_bias",
                    "dnn_to_tree_distillation_param",
                    "use_core_versions",
                    "override_global_step_value"
                ]
            },
            "DNNBoostedTreeCombinedRegressor": {
                "__init__": [
                    "self",
                    "dnn_hidden_units",
                    "dnn_feature_columns",
                    "tree_learner_config",
                    "num_trees",
                    "tree_examples_per_layer",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "label_name",
                    "label_dimension",
                    "feature_engineering_fn",
                    "dnn_optimizer",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "dnn_input_layer_partitioner",
                    "dnn_input_layer_to_tree",
                    "dnn_steps_to_train",
                    "predict_with_tree_only",
                    "tree_feature_columns",
                    "tree_center_bias",
                    "dnn_to_tree_distillation_param",
                    "use_core_versions",
                    "override_global_step_value"
                ]
            },
            "DNNBoostedTreeCombinedEstimator": {
                "__init__": [
                    "self",
                    "dnn_hidden_units",
                    "dnn_feature_columns",
                    "tree_learner_config",
                    "num_trees",
                    "tree_examples_per_layer",
                    "head",
                    "model_dir",
                    "config",
                    "feature_engineering_fn",
                    "dnn_optimizer",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "dnn_input_layer_partitioner",
                    "dnn_input_layer_to_tree",
                    "dnn_steps_to_train",
                    "predict_with_tree_only",
                    "tree_feature_columns",
                    "tree_center_bias",
                    "dnn_to_tree_distillation_param",
                    "use_core_versions",
                    "override_global_step_value"
                ]
            },
            "CoreDNNBoostedTreeCombinedEstimator": {
                "__init__": [
                    "self",
                    "dnn_hidden_units",
                    "dnn_feature_columns",
                    "tree_learner_config",
                    "num_trees",
                    "tree_examples_per_layer",
                    "head",
                    "model_dir",
                    "config",
                    "dnn_optimizer",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "dnn_input_layer_partitioner",
                    "dnn_input_layer_to_tree",
                    "dnn_steps_to_train",
                    "predict_with_tree_only",
                    "tree_feature_columns",
                    "tree_center_bias",
                    "dnn_to_tree_distillation_param"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch.distillation_loss": {
            "_logits_to_label_for_tree": [
                "logits",
                "n_classes"
            ],
            "create_dnn_to_tree_squared_loss_fn": [
                "n_classes"
            ],
            "create_dnn_to_tree_cross_entropy_loss_fn": [
                "n_classes"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch.custom_loss_head": {
            "CustomLossHead": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "link_fn",
                    "logit_dimension",
                    "head_name",
                    "weight_column_name",
                    "metrics_fn"
                ],
                "_metrics": [
                    "self",
                    "eval_loss",
                    "predictions",
                    "labels",
                    "weights"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch.estimator_utils": {
            "_core_mode_to_contrib_mode": [
                "mode"
            ],
            "_export_outputs_to_output_alternatives": [
                "export_outputs"
            ],
            "estimator_spec_to_model_fn_ops": [
                "estimator_spec",
                "export_alternatives"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch.trainer_hooks": {
            "FeatureImportanceSummarySaver": {
                "__init__": [
                    "self",
                    "model_dir",
                    "every_n_steps"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "FeedFnHook": {
                "__init__": [
                    "self",
                    "feed_fn"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "StopAfterNTrees": {
                "__init__": [
                    "self",
                    "n",
                    "num_attempted_trees_tensor",
                    "num_finalized_trees_tensor",
                    "override_global_step_value"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "SwitchTrainOp": {
                "__init__": [
                    "self",
                    "first_train_op",
                    "train_steps",
                    "second_train_op"
                ],
                "_get_train_op_for_global_step": [
                    "self",
                    "current_step"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch.model": {
            "model_builder": [
                "features",
                "labels",
                "mode",
                "params",
                "config",
                "output_type"
            ],
            "ranking_model_builder": [
                "features",
                "labels",
                "mode",
                "params",
                "config",
                "output_type"
            ],
            "ModelBuilderOutputType": {}
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch.custom_export_strategy": {
            "make_custom_export_strategy": [
                "name",
                "convert_fn",
                "feature_columns",
                "export_input_fn",
                "use_core_columns",
                "feature_engineering_fn",
                "default_output_alternative_key"
            ],
            "convert_to_universal_format": [
                "dtec",
                "sorted_feature_names",
                "num_dense",
                "num_sparse_float",
                "num_sparse_int",
                "feature_name_to_proto"
            ],
            "_get_feature_importances": [
                "dtec",
                "feature_names",
                "num_dense_floats",
                "num_sparse_float",
                "num_sparse_int"
            ]
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch.estimator": {
            "core_multiclass_head": [
                "n_classes",
                "weight_column",
                "loss_reduction"
            ],
            "core_quantile_regression_head": [
                "quantiles",
                "label_dimension",
                "weight_column",
                "loss_reduction"
            ],
            "GradientBoostedDecisionTreeClassifier": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "n_classes",
                    "num_trees",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "label_keys",
                    "feature_engineering_fn",
                    "logits_modifier_function",
                    "center_bias",
                    "use_core_libs",
                    "output_leaf_index",
                    "override_global_step_value",
                    "num_quantiles"
                ]
            },
            "GradientBoostedDecisionTreeRegressor": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "label_dimension",
                    "num_trees",
                    "feature_columns",
                    "label_name",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "feature_engineering_fn",
                    "logits_modifier_function",
                    "center_bias",
                    "use_core_libs",
                    "output_leaf_index",
                    "override_global_step_value",
                    "num_quantiles"
                ]
            },
            "GradientBoostedDecisionTreeEstimator": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "head",
                    "num_trees",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "feature_engineering_fn",
                    "logits_modifier_function",
                    "center_bias",
                    "use_core_libs",
                    "output_leaf_index",
                    "override_global_step_value",
                    "num_quantiles"
                ]
            },
            "GradientBoostedDecisionTreeRanker": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "head",
                    "ranking_model_pair_keys",
                    "num_trees",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "label_keys",
                    "feature_engineering_fn",
                    "logits_modifier_function",
                    "center_bias",
                    "use_core_libs",
                    "output_leaf_index",
                    "override_global_step_value",
                    "num_quantiles"
                ]
            },
            "GradientBoostedDecisionTreeQuantileRegressor": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "quantiles",
                    "label_dimension",
                    "num_trees",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "feature_engineering_fn",
                    "logits_modifier_function",
                    "center_bias",
                    "use_core_libs",
                    "output_leaf_index",
                    "override_global_step_value",
                    "num_quantiles"
                ]
            },
            "CoreGradientBoostedDecisionTreeEstimator": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "head",
                    "num_trees",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "label_keys",
                    "feature_engineering_fn",
                    "logits_modifier_function",
                    "center_bias",
                    "output_leaf_index",
                    "num_quantiles"
                ]
            },
            "CoreGradientBoostedDecisionTreeRanker": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "head",
                    "ranking_model_pair_keys",
                    "num_trees",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "label_keys",
                    "logits_modifier_function",
                    "center_bias",
                    "output_leaf_index",
                    "num_quantiles"
                ]
            },
            "CoreGradientBoostedDecisionTreeQuantileRegressor": {
                "__init__": [
                    "self",
                    "learner_config",
                    "examples_per_layer",
                    "quantiles",
                    "label_dimension",
                    "num_trees",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "config",
                    "label_keys",
                    "feature_engineering_fn",
                    "logits_modifier_function",
                    "center_bias",
                    "output_leaf_index",
                    "num_quantiles"
                ]
            }
        },
        "tensorflow_core.contrib.boosted_trees.estimator_batch": {},
        "tensorflow_core.contrib.autograph": {},
        "tensorflow_core.contrib.mixed_precision": {},
        "tensorflow_core.contrib.mixed_precision.python.loss_scale_manager": {
            "LossScaleManager": {
                "get_loss_scale": [
                    "self"
                ],
                "update_loss_scale": [
                    "self",
                    "finite_grads"
                ]
            },
            "FixedLossScaleManager": {
                "__init__": [
                    "self",
                    "loss_scale"
                ],
                "get_loss_scale": [
                    "self"
                ],
                "update_loss_scale": [
                    "self",
                    "finite_grads"
                ]
            },
            "ExponentialUpdateLossScaleManager": {
                "__init__": [
                    "self",
                    "init_loss_scale",
                    "incr_every_n_steps",
                    "decr_every_n_nan_or_inf",
                    "incr_ratio",
                    "decr_ratio"
                ],
                "_reset_stats": [
                    "self"
                ],
                "get_loss_scale": [
                    "self"
                ],
                "update_loss_scale": [
                    "self",
                    "finite_grads"
                ]
            }
        },
        "tensorflow_core.contrib.mixed_precision.python.loss_scale_optimizer": {
            "LossScaleOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "loss_scale_manager"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "grad_loss"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_down_scale": [
                    "self",
                    "grads_vars",
                    "loss_scale"
                ]
            }
        },
        "tensorflow_core.contrib.mixed_precision.python": {},
        "tensorflow_core.contrib.distribute": {},
        "tensorflow_core.contrib.distribute.python.tpu_strategy": {},
        "tensorflow_core.contrib.distribute.python.mirrored_strategy": {
            "MirroredStrategy": {
                "__init__": [
                    "self",
                    "devices",
                    "num_gpus",
                    "num_gpus_per_worker",
                    "cross_device_ops",
                    "auto_shard_dataset",
                    "cross_tower_ops"
                ],
                "make_dataset_iterator": [
                    "self",
                    "dataset"
                ]
            },
            "MirroredExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "devices",
                    "num_gpus_per_worker",
                    "cross_device_ops",
                    "auto_shard_dataset"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_global_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distribute.python.one_device_strategy": {},
        "tensorflow_core.contrib.distribute.python.monitor": {
            "Monitor": {
                "__init__": [
                    "self",
                    "step_callable",
                    "session"
                ],
                "run_steps": [
                    "self",
                    "num_steps"
                ]
            }
        },
        "tensorflow_core.contrib.distribute.python.collective_all_reduce_strategy": {
            "CollectiveAllReduceStrategy": {
                "__init__": [
                    "self",
                    "num_gpus_per_worker",
                    "communication"
                ]
            },
            "CollectiveAllReduceExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "num_gpus_per_worker",
                    "communication"
                ]
            }
        },
        "tensorflow_core.contrib.distribute.python": {},
        "tensorflow_core.contrib.distribute.python.parameter_server_strategy": {
            "ParameterServerStrategy": {
                "__init__": [
                    "self",
                    "num_gpus_per_worker"
                ],
                "make_dataset_iterator": [
                    "self",
                    "dataset"
                ]
            },
            "ParameterServerExtended": {
                "__init__": [
                    "self",
                    "container_strategy",
                    "num_gpus_per_worker"
                ],
                "_make_dataset_iterator": [
                    "self",
                    "dataset"
                ],
                "_global_batch_size": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distribute.python.keras_multi_worker_test_base": {
            "get_strategy_object": [
                "strategy_cls"
            ],
            "KerasIndependentWorkerTestBase": {
                "_make_mock_run_std_server": [
                    "self"
                ],
                "run_independent_workers": [
                    "self",
                    "worker_fn",
                    "strategy_cls",
                    "num_workers",
                    "num_ps"
                ]
            }
        },
        "tensorflow_core.contrib.cmake": {},
        "tensorflow_core.contrib.cmake.tools.create_def_file": {
            "get_args": [],
            "main": []
        },
        "tensorflow_core.contrib.cmake.tools": {},
        "tensorflow_core.contrib.lookup.lookup_ops": {
            "string_to_index_table_from_file": [
                "vocabulary_file",
                "num_oov_buckets",
                "vocab_size",
                "default_value",
                "hasher_spec",
                "name"
            ],
            "string_to_index_table_from_tensor": [
                "mapping",
                "num_oov_buckets",
                "default_value",
                "hasher_spec",
                "name"
            ],
            "index_table_from_tensor": [
                "mapping",
                "num_oov_buckets",
                "default_value",
                "hasher_spec",
                "dtype",
                "name"
            ],
            "string_to_index": [
                "tensor",
                "mapping",
                "default_value",
                "name"
            ],
            "index_to_string_table_from_tensor": [
                "mapping",
                "default_value",
                "name"
            ],
            "index_to_string": [
                "tensor",
                "mapping",
                "default_value",
                "name"
            ],
            "HashTable": {
                "__init__": [
                    "self",
                    "initializer",
                    "default_value",
                    "shared_name",
                    "name"
                ],
                "_create_resource": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "export": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.lookup": {},
        "tensorflow_core.contrib.keras": {},
        "tensorflow_core.contrib.keras.api": {},
        "tensorflow_core.contrib.keras.api.keras": {},
        "tensorflow_core.contrib.keras.api.keras.metrics": {},
        "tensorflow_core.contrib.keras.api.keras.losses": {},
        "tensorflow_core.contrib.keras.api.keras.initializers": {},
        "tensorflow_core.contrib.keras.api.keras.models": {},
        "tensorflow_core.contrib.keras.api.keras.callbacks": {},
        "tensorflow_core.contrib.keras.api.keras.constraints": {},
        "tensorflow_core.contrib.keras.api.keras.optimizers": {},
        "tensorflow_core.contrib.keras.api.keras.applications": {},
        "tensorflow_core.contrib.keras.api.keras.applications.vgg19": {},
        "tensorflow_core.contrib.keras.api.keras.applications.inception_v3": {},
        "tensorflow_core.contrib.keras.api.keras.applications.xception": {},
        "tensorflow_core.contrib.keras.api.keras.applications.vgg16": {},
        "tensorflow_core.contrib.keras.api.keras.applications.resnet50": {},
        "tensorflow_core.contrib.keras.api.keras.applications.mobilenet": {},
        "tensorflow_core.contrib.keras.api.keras.regularizers": {},
        "tensorflow_core.contrib.keras.api.keras.preprocessing": {},
        "tensorflow_core.contrib.keras.api.keras.preprocessing.sequence": {},
        "tensorflow_core.contrib.keras.api.keras.preprocessing.image": {},
        "tensorflow_core.contrib.keras.api.keras.preprocessing.text": {},
        "tensorflow_core.contrib.keras.api.keras.wrappers": {},
        "tensorflow_core.contrib.keras.api.keras.wrappers.scikit_learn": {},
        "tensorflow_core.contrib.keras.api.keras.backend": {},
        "tensorflow_core.contrib.keras.api.keras.layers": {},
        "tensorflow_core.contrib.keras.api.keras.activations": {},
        "tensorflow_core.contrib.keras.api.keras.utils": {},
        "tensorflow_core.contrib.keras.api.keras.datasets": {},
        "tensorflow_core.contrib.keras.api.keras.datasets.imdb": {},
        "tensorflow_core.contrib.keras.api.keras.datasets.cifar10": {},
        "tensorflow_core.contrib.keras.api.keras.datasets.boston_housing": {},
        "tensorflow_core.contrib.keras.api.keras.datasets.cifar100": {},
        "tensorflow_core.contrib.keras.api.keras.datasets.reuters": {},
        "tensorflow_core.contrib.keras.api.keras.datasets.mnist": {},
        "tensorflow_core.contrib.image": {},
        "tensorflow_core.contrib.image.ops.gen_distort_image_ops": {
            "adjust_hsv_in_yiq": [
                "images",
                "delta_h",
                "scale_s",
                "scale_v",
                "name"
            ],
            "AdjustHsvInYiq": [
                "images",
                "delta_h",
                "scale_s",
                "scale_v",
                "name"
            ],
            "adjust_hsv_in_yiq_eager_fallback": [
                "images",
                "delta_h",
                "scale_s",
                "scale_v",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.image.ops.gen_image_ops": {
            "bipartite_match": [
                "distance_mat",
                "num_valid_rows",
                "top_k",
                "name"
            ],
            "BipartiteMatch": [
                "distance_mat",
                "num_valid_rows",
                "top_k",
                "name"
            ],
            "bipartite_match_eager_fallback": [
                "distance_mat",
                "num_valid_rows",
                "top_k",
                "name",
                "ctx"
            ],
            "image_connected_components": [
                "image",
                "name"
            ],
            "ImageConnectedComponents": [
                "image",
                "name"
            ],
            "image_connected_components_eager_fallback": [
                "image",
                "name",
                "ctx"
            ],
            "image_projective_transform": [
                "images",
                "transforms",
                "interpolation",
                "name"
            ],
            "ImageProjectiveTransform": [
                "images",
                "transforms",
                "interpolation",
                "name"
            ],
            "image_projective_transform_eager_fallback": [
                "images",
                "transforms",
                "interpolation",
                "name",
                "ctx"
            ],
            "image_projective_transform_v2": [
                "images",
                "transforms",
                "output_shape",
                "interpolation",
                "name"
            ],
            "ImageProjectiveTransformV2": [
                "images",
                "transforms",
                "output_shape",
                "interpolation",
                "name"
            ],
            "image_projective_transform_v2_eager_fallback": [
                "images",
                "transforms",
                "output_shape",
                "interpolation",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.image.ops": {},
        "tensorflow_core.contrib.image.ops.gen_single_image_random_dot_stereograms_ops": {
            "single_image_random_dot_stereograms": [
                "depth_values",
                "hidden_surface_removal",
                "convergence_dots_size",
                "dots_per_inch",
                "eye_separation",
                "mu",
                "normalize",
                "normalize_max",
                "normalize_min",
                "border_level",
                "number_colors",
                "output_image_shape",
                "output_data_window",
                "name"
            ],
            "SingleImageRandomDotStereograms": [
                "depth_values",
                "hidden_surface_removal",
                "convergence_dots_size",
                "dots_per_inch",
                "eye_separation",
                "mu",
                "normalize",
                "normalize_max",
                "normalize_min",
                "border_level",
                "number_colors",
                "output_image_shape",
                "output_data_window",
                "name"
            ],
            "single_image_random_dot_stereograms_eager_fallback": [
                "depth_values",
                "hidden_surface_removal",
                "convergence_dots_size",
                "dots_per_inch",
                "eye_separation",
                "mu",
                "normalize",
                "normalize_max",
                "normalize_min",
                "border_level",
                "number_colors",
                "output_image_shape",
                "output_data_window",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.image.python": {},
        "tensorflow_core.contrib.image.python.ops.single_image_random_dot_stereograms": {
            "single_image_random_dot_stereograms": [
                "depth_values",
                "hidden_surface_removal",
                "convergence_dots_size",
                "dots_per_inch",
                "eye_separation",
                "mu",
                "normalize",
                "normalize_max",
                "normalize_min",
                "border_level",
                "number_colors",
                "output_image_shape",
                "output_data_window"
            ]
        },
        "tensorflow_core.contrib.image.python.ops.interpolate_spline": {
            "_cross_squared_distance_matrix": [
                "x",
                "y"
            ],
            "_pairwise_squared_distance_matrix": [
                "x"
            ],
            "_solve_interpolation": [
                "train_points",
                "train_values",
                "order",
                "regularization_weight"
            ],
            "_apply_interpolation": [
                "query_points",
                "train_points",
                "w",
                "v",
                "order"
            ],
            "_phi": [
                "r",
                "order"
            ],
            "interpolate_spline": [
                "train_points",
                "train_values",
                "query_points",
                "order",
                "regularization_weight",
                "name"
            ]
        },
        "tensorflow_core.contrib.image.python.ops.dense_image_warp": {
            "_interpolate_bilinear": [
                "grid",
                "query_points",
                "name",
                "indexing"
            ],
            "dense_image_warp": [
                "image",
                "flow",
                "name"
            ]
        },
        "tensorflow_core.contrib.image.python.ops.distort_image_ops": {
            "random_hsv_in_yiq": [
                "image",
                "max_delta_hue",
                "lower_saturation",
                "upper_saturation",
                "lower_value",
                "upper_value",
                "seed"
            ],
            "adjust_hsv_in_yiq": [
                "image",
                "delta_hue",
                "scale_saturation",
                "scale_value",
                "name"
            ]
        },
        "tensorflow_core.contrib.image.python.ops.image_ops": {
            "rotate": [
                "images",
                "angles",
                "interpolation",
                "name"
            ],
            "translate": [
                "images",
                "translations",
                "interpolation",
                "name"
            ],
            "angles_to_projective_transforms": [
                "angles",
                "image_height",
                "image_width",
                "name"
            ],
            "translations_to_projective_transforms": [
                "translations",
                "name"
            ],
            "transform": [
                "images",
                "transforms",
                "interpolation",
                "output_shape",
                "name"
            ],
            "compose_transforms": [],
            "flat_transforms_to_matrices": [
                "transforms"
            ],
            "matrices_to_flat_transforms": [
                "transform_matrices"
            ],
            "_image_projective_transform_grad": [
                "op",
                "grad"
            ],
            "bipartite_match": [
                "distance_mat",
                "num_valid_rows",
                "top_k",
                "name"
            ],
            "connected_components": [
                "images"
            ]
        },
        "tensorflow_core.contrib.image.python.ops.sparse_image_warp": {
            "_get_grid_locations": [
                "image_height",
                "image_width"
            ],
            "_expand_to_minibatch": [
                "np_array",
                "batch_size"
            ],
            "_get_boundary_locations": [
                "image_height",
                "image_width",
                "num_points_per_edge"
            ],
            "_add_zero_flow_controls_at_boundary": [
                "control_point_locations",
                "control_point_flows",
                "image_height",
                "image_width",
                "boundary_points_per_edge"
            ],
            "sparse_image_warp": [
                "image",
                "source_control_point_locations",
                "dest_control_point_locations",
                "interpolation_order",
                "regularization_weight",
                "num_boundary_points",
                "name"
            ]
        },
        "tensorflow_core.contrib.image.python.ops": {},
        "tensorflow_core.contrib.rate": {},
        "tensorflow_core.contrib.rate.rate": {
            "Rate": {
                "__init__": [
                    "self",
                    "name"
                ],
                "build": [
                    "self",
                    "values",
                    "denominator"
                ],
                "__call__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "_add_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype"
                ],
                "call": [
                    "self",
                    "values",
                    "denominator"
                ]
            }
        },
        "tensorflow_core.contrib.slim.nets": {},
        "tensorflow_core.contrib.slim": {},
        "tensorflow_core.contrib.slim.python": {},
        "tensorflow_core.contrib.slim.python.slim.queues": {
            "QueueRunners": [
                "session"
            ],
            "NestedQueueRunnerError": {}
        },
        "tensorflow_core.contrib.slim.python.slim.learning": {
            "clip_gradient_norms": [
                "gradients_to_variables",
                "max_norm"
            ],
            "multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ],
            "add_gradients_summaries": [
                "grads_and_vars"
            ],
            "create_train_op": [
                "total_loss",
                "optimizer",
                "global_step",
                "update_ops",
                "variables_to_train",
                "clip_gradient_norm",
                "summarize_gradients",
                "gate_gradients",
                "aggregation_method",
                "colocate_gradients_with_ops",
                "gradient_multipliers",
                "check_numerics"
            ],
            "_wait_for_step": [
                "sess",
                "global_step",
                "step"
            ],
            "train_step": [
                "sess",
                "train_op",
                "global_step",
                "train_step_kwargs"
            ],
            "train": [
                "train_op",
                "logdir",
                "train_step_fn",
                "train_step_kwargs",
                "log_every_n_steps",
                "graph",
                "master",
                "is_chief",
                "global_step",
                "number_of_steps",
                "init_op",
                "init_feed_dict",
                "local_init_op",
                "init_fn",
                "ready_op",
                "summary_op",
                "save_summaries_secs",
                "summary_writer",
                "startup_delay_steps",
                "saver",
                "save_interval_secs",
                "sync_optimizer",
                "session_config",
                "session_wrapper",
                "trace_every_n_steps",
                "ignore_live_threads"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.model_analyzer": {
            "tensor_description": [
                "var"
            ],
            "analyze_ops": [
                "graph",
                "print_info"
            ],
            "analyze_vars": [
                "variables",
                "print_info"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.evaluation": {
            "evaluate_once": [
                "master",
                "checkpoint_path",
                "logdir",
                "num_evals",
                "initial_op",
                "initial_op_feed_dict",
                "eval_op",
                "eval_op_feed_dict",
                "final_op",
                "final_op_feed_dict",
                "summary_op",
                "summary_op_feed_dict",
                "variables_to_restore",
                "session_config",
                "hooks"
            ],
            "evaluation_loop": [
                "master",
                "checkpoint_dir",
                "logdir",
                "num_evals",
                "initial_op",
                "initial_op_feed_dict",
                "init_fn",
                "eval_op",
                "eval_op_feed_dict",
                "final_op",
                "final_op_feed_dict",
                "summary_op",
                "summary_op_feed_dict",
                "variables_to_restore",
                "eval_interval_secs",
                "max_number_of_evaluations",
                "session_config",
                "timeout",
                "timeout_fn",
                "hooks"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.summaries": {
            "_get_summary_name": [
                "tensor",
                "name",
                "prefix",
                "postfix"
            ],
            "add_histogram_summary": [
                "tensor",
                "name",
                "prefix"
            ],
            "add_image_summary": [
                "tensor",
                "name",
                "prefix",
                "print_summary"
            ],
            "add_scalar_summary": [
                "tensor",
                "name",
                "prefix",
                "print_summary"
            ],
            "add_zero_fraction_summary": [
                "tensor",
                "name",
                "prefix",
                "print_summary"
            ],
            "add_histogram_summaries": [
                "tensors",
                "prefix"
            ],
            "add_image_summaries": [
                "tensors",
                "prefix"
            ],
            "add_scalar_summaries": [
                "tensors",
                "prefix",
                "print_summary"
            ],
            "add_zero_fraction_summaries": [
                "tensors",
                "prefix"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim": {},
        "tensorflow_core.contrib.slim.python.slim.nets.inception_v2": {
            "inception_v2_base": [
                "inputs",
                "final_endpoint",
                "min_depth",
                "depth_multiplier",
                "scope"
            ],
            "inception_v2": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "min_depth",
                "depth_multiplier",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "_reduced_kernel_size_for_small_input": [
                "input_tensor",
                "kernel_size"
            ],
            "inception_v2_arg_scope": [
                "weight_decay",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets.vgg": {
            "vgg_arg_scope": [
                "weight_decay"
            ],
            "vgg_a": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ],
            "vgg_16": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ],
            "vgg_19": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets.inception_v1": {
            "inception_v1_base": [
                "inputs",
                "final_endpoint",
                "scope"
            ],
            "inception_v1": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "inception_v1_arg_scope": [
                "weight_decay",
                "use_batch_norm",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets.inception": {},
        "tensorflow_core.contrib.slim.python.slim.nets.resnet_v1": {
            "bottleneck": [
                "inputs",
                "depth",
                "depth_bottleneck",
                "stride",
                "rate",
                "outputs_collections",
                "scope"
            ],
            "resnet_v1": [
                "inputs",
                "blocks",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "include_root_block",
                "reuse",
                "scope"
            ],
            "resnet_v1_block": [
                "scope",
                "base_depth",
                "num_units",
                "stride"
            ],
            "resnet_v1_50": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_101": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_152": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_200": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets.alexnet": {
            "alexnet_v2_arg_scope": [
                "weight_decay"
            ],
            "alexnet_v2": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets.inception_v3": {
            "inception_v3_base": [
                "inputs",
                "final_endpoint",
                "min_depth",
                "depth_multiplier",
                "scope"
            ],
            "inception_v3": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "min_depth",
                "depth_multiplier",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "_reduced_kernel_size_for_small_input": [
                "input_tensor",
                "kernel_size"
            ],
            "inception_v3_arg_scope": [
                "weight_decay",
                "batch_norm_var_collection",
                "batch_norm_decay",
                "batch_norm_epsilon",
                "updates_collections",
                "use_fused_batchnorm"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets.resnet_v2": {
            "bottleneck": [
                "inputs",
                "depth",
                "depth_bottleneck",
                "stride",
                "rate",
                "outputs_collections",
                "scope"
            ],
            "resnet_v2": [
                "inputs",
                "blocks",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "include_root_block",
                "reuse",
                "scope"
            ],
            "resnet_v2_block": [
                "scope",
                "base_depth",
                "num_units",
                "stride"
            ],
            "resnet_v2_50": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_101": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_152": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_200": [
                "inputs",
                "num_classes",
                "is_training",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets.overfeat": {
            "overfeat_arg_scope": [
                "weight_decay"
            ],
            "overfeat": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.nets": {},
        "tensorflow_core.contrib.slim.python.slim.nets.resnet_utils": {
            "subsample": [
                "inputs",
                "factor",
                "scope"
            ],
            "conv2d_same": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "rate",
                "scope"
            ],
            "stack_blocks_dense": [
                "net",
                "blocks",
                "output_stride",
                "outputs_collections"
            ],
            "resnet_arg_scope": [
                "weight_decay",
                "batch_norm_decay",
                "batch_norm_epsilon",
                "batch_norm_scale"
            ],
            "Block": {}
        },
        "tensorflow_core.contrib.slim.python.slim.data.tfexample_decoder": {
            "ItemHandler": {
                "__init__": [
                    "self",
                    "keys"
                ],
                "keys": [
                    "self"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "ItemHandlerCallback": {
                "__init__": [
                    "self",
                    "keys",
                    "func"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "BoundingBox": {
                "__init__": [
                    "self",
                    "keys",
                    "prefix"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "Tensor": {
                "__init__": [
                    "self",
                    "tensor_key",
                    "shape_keys",
                    "shape",
                    "default_value"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "LookupTensor": {
                "__init__": [
                    "self",
                    "tensor_key",
                    "table",
                    "shape_keys",
                    "shape",
                    "default_value"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "BackupHandler": {
                "__init__": [
                    "self",
                    "handler",
                    "backup"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "SparseTensor": {
                "__init__": [
                    "self",
                    "indices_key",
                    "values_key",
                    "shape_key",
                    "shape",
                    "densify",
                    "default_value"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "Image": {
                "__init__": [
                    "self",
                    "image_key",
                    "format_key",
                    "shape",
                    "channels",
                    "dtype",
                    "repeated",
                    "dct_method"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ],
                "_decode": [
                    "self",
                    "image_buffer",
                    "image_format"
                ]
            },
            "TFExampleDecoder": {
                "__init__": [
                    "self",
                    "keys_to_features",
                    "items_to_handlers"
                ],
                "list_items": [
                    "self"
                ],
                "decode": [
                    "self",
                    "serialized_example",
                    "items"
                ]
            }
        },
        "tensorflow_core.contrib.slim.python.slim.data.parallel_reader": {
            "parallel_read": [
                "data_sources",
                "reader_class",
                "num_epochs",
                "num_readers",
                "reader_kwargs",
                "shuffle",
                "dtypes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "scope"
            ],
            "single_pass_read": [
                "data_sources",
                "reader_class",
                "reader_kwargs",
                "scope"
            ],
            "get_data_files": [
                "data_sources"
            ],
            "ParallelReader": {
                "__init__": [
                    "self",
                    "reader_class",
                    "common_queue",
                    "num_readers",
                    "reader_kwargs"
                ],
                "num_readers": [
                    "self"
                ],
                "common_queue": [
                    "self"
                ],
                "read": [
                    "self",
                    "queue",
                    "name"
                ],
                "read_up_to": [
                    "self",
                    "queue",
                    "num_records",
                    "name"
                ],
                "_configure_readers_by": [
                    "self",
                    "queue"
                ],
                "num_records_produced": [
                    "self",
                    "name"
                ],
                "num_work_units_completed": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.slim.python.slim.data.dataset": {
            "Dataset": {
                "__init__": [
                    "self",
                    "data_sources",
                    "reader",
                    "decoder",
                    "num_samples",
                    "items_to_descriptions"
                ]
            }
        },
        "tensorflow_core.contrib.slim.python.slim.data.dataset_data_provider": {
            "DatasetDataProvider": {
                "__init__": [
                    "self",
                    "dataset",
                    "num_readers",
                    "reader_kwargs",
                    "shuffle",
                    "num_epochs",
                    "common_queue_capacity",
                    "common_queue_min",
                    "record_key",
                    "seed",
                    "scope"
                ]
            }
        },
        "tensorflow_core.contrib.slim.python.slim.data.test_utils": {
            "_encoded_int64_feature": [
                "ndarray"
            ],
            "_encoded_bytes_feature": [
                "tf_encoded"
            ],
            "_string_feature": [
                "value"
            ],
            "_encoder": [
                "image",
                "image_format"
            ],
            "generate_image": [
                "image_shape",
                "image_format",
                "label"
            ],
            "create_tfrecord_files": [
                "output_dir",
                "num_files",
                "num_records_per_file"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.data.data_decoder": {
            "DataDecoder": {
                "decode": [
                    "self",
                    "data",
                    "items"
                ],
                "list_items": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.slim.python.slim.data.data_provider": {
            "DataProvider": {
                "__init__": [
                    "self",
                    "items_to_tensors",
                    "num_samples"
                ],
                "get": [
                    "self",
                    "items"
                ],
                "list_items": [
                    "self"
                ],
                "num_samples": [
                    "self"
                ],
                "_validate_items": [
                    "self",
                    "items"
                ]
            }
        },
        "tensorflow_core.contrib.slim.python.slim.data.prefetch_queue": {
            "_which_queue": [
                "dynamic_pad"
            ],
            "prefetch_queue": [
                "tensors",
                "capacity",
                "num_threads",
                "dynamic_pad",
                "shared_name",
                "name"
            ]
        },
        "tensorflow_core.contrib.slim.python.slim.data": {},
        "tensorflow_core.contrib.summary.summary_test_util": {
            "events_from_file": [
                "filepath"
            ],
            "events_from_logdir": [
                "logdir"
            ],
            "get_one": [
                "db",
                "q"
            ],
            "get_all": [
                "db",
                "q"
            ],
            "unroll": [
                "list_of_tuples"
            ],
            "SummaryDbTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.summary.summary": {},
        "tensorflow_core.contrib.summary": {},
        "tensorflow_core.contrib.distributions": {},
        "tensorflow_core.contrib.distributions.python": {},
        "tensorflow_core.contrib.distributions.python.ops.gumbel": {
            "_Gumbel": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.test_util": {
            "_vec_outer_square": [
                "x",
                "name"
            ],
            "DiscreteScalarDistributionTestHelpers": {
                "run_test_sample_consistent_log_prob": [
                    "self",
                    "sess_run_fn",
                    "dist",
                    "num_samples",
                    "num_threshold",
                    "seed",
                    "batch_size",
                    "rtol",
                    "atol"
                ],
                "run_test_sample_consistent_mean_variance": [
                    "self",
                    "sess_run_fn",
                    "dist",
                    "num_samples",
                    "seed",
                    "rtol",
                    "atol"
                ],
                "histogram": [
                    "self",
                    "x",
                    "value_range",
                    "nbins",
                    "name"
                ]
            },
            "VectorDistributionTestHelpers": {
                "run_test_sample_consistent_log_prob": [
                    "self",
                    "sess_run_fn",
                    "dist",
                    "num_samples",
                    "radius",
                    "center",
                    "seed",
                    "rtol",
                    "atol"
                ],
                "run_test_sample_consistent_mean_covariance": [
                    "self",
                    "sess_run_fn",
                    "dist",
                    "num_samples",
                    "seed",
                    "rtol",
                    "atol",
                    "cov_rtol",
                    "cov_atol"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.mvn_tril": {
            "MultivariateNormalTriL": {
                "__init__": [
                    "self",
                    "loc",
                    "scale_tril",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.vector_exponential_diag": {
            "VectorExponentialDiag": {
                "__init__": [
                    "self",
                    "loc",
                    "scale_diag",
                    "scale_identity_multiplier",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.vector_student_t": {
            "_VectorStudentT": {
                "__init__": [
                    "self",
                    "df",
                    "loc",
                    "scale_identity_multiplier",
                    "scale_diag",
                    "scale_tril",
                    "scale_perturb_factor",
                    "scale_perturb_diag",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "df": [
                    "self"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.moving_stats": {
            "assign_moving_mean_variance": [
                "mean_var",
                "variance_var",
                "value",
                "decay",
                "name"
            ],
            "assign_log_moving_mean_exp": [
                "log_mean_exp_var",
                "log_value",
                "decay",
                "name"
            ],
            "moving_mean_variance": [
                "value",
                "decay",
                "collections",
                "name"
            ]
        },
        "tensorflow_core.contrib.distributions.python.ops.vector_laplace_diag": {
            "VectorLaplaceDiag": {
                "__init__": [
                    "self",
                    "loc",
                    "scale_diag",
                    "scale_identity_multiplier",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.seed_stream": {
            "SeedStream": {
                "__init__": [
                    "self",
                    "seed",
                    "salt"
                ],
                "__call__": [
                    "self"
                ],
                "original_seed": [
                    "self"
                ],
                "salt": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.relaxed_onehot_categorical": {
            "ExpRelaxedOneHotCategorical": {
                "__init__": [
                    "self",
                    "temperature",
                    "logits",
                    "probs",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "event_size": [
                    "self"
                ],
                "temperature": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x"
                ]
            },
            "RelaxedOneHotCategorical": {
                "__init__": [
                    "self",
                    "temperature",
                    "logits",
                    "probs",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.independent": {
            "_kl_independent": [
                "a",
                "b",
                "name"
            ],
            "Independent": {
                "__init__": [
                    "self",
                    "distribution",
                    "reinterpreted_batch_ndims",
                    "validate_args",
                    "name"
                ],
                "distribution": [
                    "self"
                ],
                "reinterpreted_batch_ndims": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_make_runtime_assertions": [
                    "self",
                    "distribution",
                    "reinterpreted_batch_ndims",
                    "validate_args"
                ],
                "_reduce_sum": [
                    "self",
                    "stat"
                ],
                "_get_default_reinterpreted_batch_ndims": [
                    "self",
                    "distribution"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.mixture_same_family": {
            "_outer_squared_difference": [
                "x",
                "y"
            ],
            "MixtureSameFamily": {
                "__init__": [
                    "self",
                    "mixture_distribution",
                    "components_distribution",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "mixture_distribution": [
                    "self"
                ],
                "components_distribution": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_variance": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_pad_sample_dims": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.mixture": {
            "Mixture": {
                "__init__": [
                    "self",
                    "cat",
                    "components",
                    "validate_args",
                    "allow_nan_stats",
                    "use_static_graph",
                    "name"
                ],
                "cat": [
                    "self"
                ],
                "components": [
                    "self"
                ],
                "num_components": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_expand_to_event_rank": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "entropy_lower_bound": [
                    "self",
                    "name"
                ],
                "_cat_probs": [
                    "self",
                    "log_probs"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.binomial": {
            "_bdtr": [
                "k",
                "n",
                "p"
            ],
            "Binomial": {
                "__init__": [
                    "self",
                    "total_count",
                    "logits",
                    "probs",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "total_count": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_cdf": [
                    "self",
                    "counts"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "counts"
                ],
                "_log_normalization": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_maybe_assert_valid_total_count": [
                    "self",
                    "total_count",
                    "validate_args"
                ],
                "_maybe_assert_valid_sample": [
                    "self",
                    "counts"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.vector_diffeomixture": {
            "quadrature_scheme_softmaxnormal_gauss_hermite": [
                "normal_loc",
                "normal_scale",
                "quadrature_size",
                "validate_args",
                "name"
            ],
            "quadrature_scheme_softmaxnormal_quantiles": [
                "normal_loc",
                "normal_scale",
                "quadrature_size",
                "validate_args",
                "name"
            ],
            "maybe_check_quadrature_param": [
                "param",
                "name",
                "validate_args"
            ],
            "determine_batch_event_shapes": [
                "grid",
                "endpoint_affine"
            ],
            "interpolate_loc": [
                "grid",
                "loc"
            ],
            "interpolate_scale": [
                "grid",
                "scale"
            ],
            "linop_scale": [
                "w",
                "op"
            ],
            "concat_vectors": [],
            "add": [
                "x",
                "y"
            ],
            "vec_osquare": [
                "x"
            ],
            "softmax": [
                "x",
                "axis",
                "name"
            ],
            "VectorDiffeomixture": {
                "__init__": [
                    "self",
                    "mix_loc",
                    "temperature",
                    "distribution",
                    "loc",
                    "scale",
                    "quadrature_size",
                    "quadrature_fn",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "mixture_distribution": [
                    "self"
                ],
                "distribution": [
                    "self"
                ],
                "grid": [
                    "self"
                ],
                "endpoint_affine": [
                    "self"
                ],
                "interpolated_affine": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mean_of_covariance_given_quadrature_component": [
                    "self",
                    "diag_only"
                ],
                "_covariance_of_mean_given_quadrature_component": [
                    "self",
                    "diag_only"
                ],
                "_expand_base_distribution_mean": [
                    "self"
                ],
                "_expand_mix_distribution_probs": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.onehot_categorical": {
            "_kl_categorical_categorical": [
                "a",
                "b",
                "name"
            ],
            "OneHotCategorical": {
                "__init__": [
                    "self",
                    "logits",
                    "probs",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "event_size": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.quantized_distribution": {
            "_logsum_expbig_minus_expsmall": [
                "big",
                "small"
            ],
            "QuantizedDistribution": {
                "__init__": [
                    "self",
                    "distribution",
                    "low",
                    "high",
                    "validate_args",
                    "name"
                ],
                "distribution": [
                    "self"
                ],
                "low": [
                    "self"
                ],
                "high": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "y"
                ],
                "_log_prob_with_logcdf": [
                    "self",
                    "y"
                ],
                "_log_prob_with_logsf_and_logcdf": [
                    "self",
                    "y"
                ],
                "_prob": [
                    "self",
                    "y"
                ],
                "_prob_with_cdf": [
                    "self",
                    "y"
                ],
                "_prob_with_sf_and_cdf": [
                    "self",
                    "y"
                ],
                "_log_cdf": [
                    "self",
                    "y"
                ],
                "_cdf": [
                    "self",
                    "y"
                ],
                "_log_survival_function": [
                    "self",
                    "y"
                ],
                "_survival_function": [
                    "self",
                    "y"
                ],
                "_check_integer": [
                    "self",
                    "value"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.vector_exponential_linear_operator": {
            "VectorExponentialLinearOperator": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_mode_mean_shape": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.kumaraswamy": {
            "_harmonic_number": [
                "x"
            ],
            "Kumaraswamy": {
                "__init__": [
                    "self",
                    "concentration1",
                    "concentration0",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "concentration1": [
                    "self"
                ],
                "concentration0": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_moment": [
                    "self",
                    "n"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.mvn_diag": {
            "MultivariateNormalDiag": {
                "__init__": [
                    "self",
                    "loc",
                    "scale_diag",
                    "scale_identity_multiplier",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalDiagWithSoftplusScale": {
                "__init__": [
                    "self",
                    "loc",
                    "scale_diag",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.statistical_testing": {
            "_batch_sort_vector": [
                "x",
                "ascending",
                "name"
            ],
            "_do_maximum_mean": [
                "samples",
                "envelope",
                "high",
                "name"
            ],
            "_maximum_mean": [
                "samples",
                "envelope",
                "high",
                "name"
            ],
            "_minimum_mean": [
                "samples",
                "envelope",
                "low",
                "name"
            ],
            "_dkwm_cdf_envelope": [
                "n",
                "error_rate",
                "name"
            ],
            "_check_shape_dominates": [
                "samples",
                "parameters"
            ],
            "true_mean_confidence_interval_by_dkwm": [
                "samples",
                "low",
                "high",
                "error_rate",
                "name"
            ],
            "_itemwise_error_rate": [
                "total_error_rate",
                "param_tensors",
                "sample_tensor",
                "name"
            ],
            "assert_true_mean_equal_by_dkwm": [
                "samples",
                "low",
                "high",
                "expected",
                "false_fail_rate",
                "name"
            ],
            "min_discrepancy_of_true_means_detectable_by_dkwm": [
                "n",
                "low",
                "high",
                "false_fail_rate",
                "false_pass_rate",
                "name"
            ],
            "min_num_samples_for_dkwm_mean_test": [
                "discrepancy",
                "low",
                "high",
                "false_fail_rate",
                "false_pass_rate",
                "name"
            ],
            "assert_true_mean_in_interval_by_dkwm": [
                "samples",
                "low",
                "high",
                "expected_low",
                "expected_high",
                "false_fail_rate",
                "name"
            ],
            "assert_true_mean_equal_by_dkwm_two_sample": [
                "samples1",
                "low1",
                "high1",
                "samples2",
                "low2",
                "high2",
                "false_fail_rate",
                "name"
            ],
            "min_discrepancy_of_true_means_detectable_by_dkwm_two_sample": [
                "n1",
                "low1",
                "high1",
                "n2",
                "low2",
                "high2",
                "false_fail_rate",
                "false_pass_rate",
                "name"
            ],
            "min_num_samples_for_dkwm_mean_two_sample_test": [
                "discrepancy",
                "low1",
                "high1",
                "low2",
                "high2",
                "false_fail_rate",
                "false_pass_rate",
                "name"
            ]
        },
        "tensorflow_core.contrib.distributions.python.ops.inverse_gamma": {
            "InverseGamma": {
                "__init__": [
                    "self",
                    "concentration",
                    "rate",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "concentration": [
                    "self"
                ],
                "rate": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_maybe_assert_valid_sample": [
                    "self",
                    "x"
                ]
            },
            "InverseGammaWithSoftplusConcentrationRate": {
                "__init__": [
                    "self",
                    "concentration",
                    "rate",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.vector_sinh_arcsinh_diag": {
            "VectorSinhArcsinhDiag": {
                "__init__": [
                    "self",
                    "loc",
                    "scale_diag",
                    "scale_identity_multiplier",
                    "skewness",
                    "tailweight",
                    "distribution",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "tailweight": [
                    "self"
                ],
                "skewness": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.negative_binomial": {
            "NegativeBinomial": {
                "__init__": [
                    "self",
                    "total_count",
                    "logits",
                    "probs",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "total_count": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_variance": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.distribution_util": {
            "_convert_to_tensor": [
                "x",
                "name"
            ],
            "mixture_stddev": [
                "mixture_weight_vector",
                "mean_vector",
                "stddev_vector"
            ],
            "make_tril_scale": [
                "loc",
                "scale_tril",
                "scale_diag",
                "scale_identity_multiplier",
                "shape_hint",
                "validate_args",
                "assert_positive",
                "name"
            ],
            "make_diag_scale": [
                "loc",
                "scale_diag",
                "scale_identity_multiplier",
                "shape_hint",
                "validate_args",
                "assert_positive",
                "name"
            ],
            "shapes_from_loc_and_scale": [
                "loc",
                "scale",
                "name"
            ],
            "get_broadcast_shape": [],
            "is_diagonal_scale": [
                "scale"
            ],
            "maybe_check_scalar_distribution": [
                "distribution",
                "expected_base_dtype",
                "validate_args"
            ],
            "pad_mixture_dimensions": [
                "x",
                "mixture_distribution",
                "categorical_distribution",
                "event_ndims"
            ],
            "static_value": [
                "x"
            ],
            "move_dimension": [
                "x",
                "source_idx",
                "dest_idx"
            ]
        },
        "tensorflow_core.contrib.distributions.python.ops.vector_laplace_linear_operator": {
            "VectorLaplaceLinearOperator": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.sample_stats": {
            "auto_correlation": [
                "x",
                "axis",
                "max_lags",
                "center",
                "normalize",
                "name"
            ],
            "percentile": [
                "x",
                "q",
                "axis",
                "interpolation",
                "keep_dims",
                "validate_args",
                "name"
            ],
            "_get_static_ndims": [
                "x",
                "expect_static",
                "expect_ndims",
                "expect_ndims_no_more_than",
                "expect_ndims_at_least"
            ],
            "_get_best_effort_ndims": [
                "x",
                "expect_ndims",
                "expect_ndims_at_least",
                "expect_ndims_no_more_than"
            ],
            "_insert_back_keep_dims": [
                "x",
                "axis"
            ],
            "_make_static_axis_non_negative": [
                "axis",
                "ndims"
            ],
            "_move_dims_to_flat_end": [
                "x",
                "axis",
                "x_ndims"
            ],
            "_sort_tensor": [
                "tensor"
            ]
        },
        "tensorflow_core.contrib.distributions.python.ops.cauchy": {
            "Cauchy": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_quantile": [
                    "self",
                    "p"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ],
                "_inv_z": [
                    "self",
                    "z"
                ],
                "_mean": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.conditional_distribution": {
            "ConditionalDistribution": {
                "sample": [
                    "self",
                    "sample_shape",
                    "seed",
                    "name"
                ],
                "log_prob": [
                    "self",
                    "value",
                    "name"
                ],
                "prob": [
                    "self",
                    "value",
                    "name"
                ],
                "log_cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "log_survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "survival_function": [
                    "self",
                    "value",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.half_normal": {
            "HalfNormal": {
                "__init__": [
                    "self",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_quantile": [
                    "self",
                    "p"
                ],
                "_mode": [
                    "self"
                ],
                "_variance": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.shape": {
            "_DistributionShape": {
                "__init__": [
                    "self",
                    "batch_ndims",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "batch_ndims": [
                    "self"
                ],
                "event_ndims": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "get_ndims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_sample_ndims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_dims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_shape": [
                    "self",
                    "x",
                    "name"
                ],
                "make_batch_of_event_sample_matrices": [
                    "self",
                    "x",
                    "expand_batch_dim",
                    "name"
                ],
                "undo_make_batch_of_event_sample_matrices": [
                    "self",
                    "x",
                    "sample_shape",
                    "expand_batch_dim",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_is_all_constant_helper": [
                    "self"
                ],
                "_assert_non_negative_int32_scalar": [
                    "self",
                    "x"
                ],
                "_introspect_ndims": [
                    "self",
                    "ndims"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.mvn_full_covariance": {
            "MultivariateNormalFullCovariance": {
                "__init__": [
                    "self",
                    "loc",
                    "covariance_matrix",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.autoregressive": {
            "Autoregressive": {
                "__init__": [
                    "self",
                    "distribution_fn",
                    "sample0",
                    "num_steps",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "distribution_fn": [
                    "self"
                ],
                "sample0": [
                    "self"
                ],
                "num_steps": [
                    "self"
                ],
                "distribution0": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "value"
                ],
                "_prob": [
                    "self",
                    "value"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.normal_conjugate_posteriors": {
            "normal_conjugates_known_scale_posterior": [
                "prior",
                "scale",
                "s",
                "n"
            ],
            "normal_conjugates_known_scale_predictive": [
                "prior",
                "scale",
                "s",
                "n"
            ]
        },
        "tensorflow_core.contrib.distributions.python.ops.poisson": {
            "Poisson": {
                "__init__": [
                    "self",
                    "rate",
                    "log_rate",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "rate": [
                    "self"
                ],
                "log_rate": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.poisson_lognormal": {
            "quadrature_scheme_lognormal_gauss_hermite": [
                "loc",
                "scale",
                "quadrature_size",
                "validate_args",
                "name"
            ],
            "quadrature_scheme_lognormal_quantiles": [
                "loc",
                "scale",
                "quadrature_size",
                "validate_args",
                "name"
            ],
            "concat_vectors": [],
            "PoissonLogNormalQuadratureCompound": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "quadrature_size",
                    "quadrature_fn",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "mixture_distribution": [
                    "self"
                ],
                "distribution": [
                    "self"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "quadrature_size": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_log_variance": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.chi2": {
            "Chi2": {
                "__init__": [
                    "self",
                    "df",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "df": [
                    "self"
                ]
            },
            "Chi2WithAbsDf": {
                "__init__": [
                    "self",
                    "df",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.geometric": {
            "Geometric": {
                "__init__": [
                    "self",
                    "logits",
                    "probs",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.batch_reshape": {
            "calculate_reshape": [
                "original_shape",
                "new_shape",
                "validate",
                "name"
            ],
            "validate_init_args_statically": [
                "distribution",
                "batch_shape"
            ],
            "BatchReshape": {
                "__init__": [
                    "self",
                    "distribution",
                    "batch_shape",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "distribution": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_survival_function": [
                    "self",
                    "x"
                ],
                "_survival_function": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_sample_shape": [
                    "self",
                    "x"
                ],
                "_call_reshape_input_output": [
                    "self",
                    "fn",
                    "x"
                ],
                "_call_and_reshape_output": [
                    "self",
                    "fn",
                    "event_shape_list",
                    "static_event_shape_list"
                ],
                "_validate_sample_arg": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.deterministic": {
            "_BaseDeterministic": {
                "__init__": [
                    "self",
                    "loc",
                    "atol",
                    "rtol",
                    "is_vector",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_get_tol": [
                    "self",
                    "tol"
                ],
                "loc": [
                    "self"
                ],
                "atol": [
                    "self"
                ],
                "rtol": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ]
            },
            "Deterministic": {
                "__init__": [
                    "self",
                    "loc",
                    "atol",
                    "rtol",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ]
            },
            "VectorDeterministic": {
                "__init__": [
                    "self",
                    "loc",
                    "atol",
                    "rtol",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_prob": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.conditional_transformed_distribution": {
            "ConditionalTransformedDistribution": {
                "_sample_n": [
                    "self",
                    "n",
                    "seed",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_call_sample_n": [
                    "self",
                    "sample_shape",
                    "seed",
                    "name",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_prob": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_finish_log_prob_for_one_fiber": [
                    "self",
                    "y",
                    "x",
                    "ildj",
                    "distribution_kwargs"
                ],
                "_prob": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_finish_prob_for_one_fiber": [
                    "self",
                    "y",
                    "x",
                    "ildj",
                    "distribution_kwargs"
                ],
                "_log_cdf": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_cdf": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_survival_function": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_survival_function": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_quantile": [
                    "self",
                    "value",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_maybe_get_static_event_ndims": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.relaxed_bernoulli": {
            "RelaxedBernoulli": {
                "__init__": [
                    "self",
                    "temperature",
                    "logits",
                    "probs",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "temperature": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "probs": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.estimator": {
            "estimator_head_distribution_regression": [
                "make_distribution_fn",
                "label_dimension",
                "logits_dimension",
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name"
            ],
            "_DistributionRegressionHead": {
                "__init__": [
                    "self",
                    "make_distribution_fn",
                    "label_dimension",
                    "logits_dimension",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name"
                ],
                "distributions": [
                    "self"
                ],
                "distribution": [
                    "self",
                    "logits",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.sinh_arcsinh": {
            "SinhArcsinh": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "skewness",
                    "tailweight",
                    "distribution",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "tailweight": [
                    "self"
                ],
                "skewness": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.logistic": {
            "Logistic": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_survival_function": [
                    "self",
                    "x"
                ],
                "_survival_function": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops": {},
        "tensorflow_core.contrib.distributions.python.ops.mvn_linear_operator": {
            "_kl_brute_force": [
                "a",
                "b",
                "name"
            ],
            "MultivariateNormalLinearOperator": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_covariance": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.mvn_diag_plus_low_rank": {
            "MultivariateNormalDiagPlusLowRank": {
                "__init__": [
                    "self",
                    "loc",
                    "scale_diag",
                    "scale_identity_multiplier",
                    "scale_perturb_factor",
                    "scale_perturb_diag",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.wishart": {
            "_WishartLinearOperator": {
                "__init__": [
                    "self",
                    "df",
                    "scale_operator",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "df": [
                    "self"
                ],
                "_square_scale_operator": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "scale_operator": [
                    "self"
                ],
                "cholesky_input_output_matrices": [
                    "self"
                ],
                "dimension": [
                    "self"
                ],
                "_event_shape_tensor": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_batch_shape_tensor": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_stddev": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "mean_log_det": [
                    "self",
                    "name"
                ],
                "log_normalization": [
                    "self",
                    "name"
                ],
                "_multi_gamma_sequence": [
                    "self",
                    "a",
                    "p",
                    "name"
                ],
                "_multi_lgamma": [
                    "self",
                    "a",
                    "p",
                    "name"
                ],
                "_multi_digamma": [
                    "self",
                    "a",
                    "p",
                    "name"
                ]
            },
            "WishartCholesky": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "WishartFull": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.matrix_inverse_tril": {
            "MatrixInverseTriL": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_assertions": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.gumbel": {
            "Gumbel": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "name"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_y": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.affine_scalar": {
            "AffineScalar": {
                "__init__": [
                    "self",
                    "shift",
                    "scale",
                    "validate_args",
                    "name"
                ],
                "shift": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.square": {
            "Square": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid": [
                    "self",
                    "t"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.masked_autoregressive": {
            "_gen_slices": [
                "num_blocks",
                "n_in",
                "n_out",
                "mask_type"
            ],
            "_gen_mask": [
                "num_blocks",
                "n_in",
                "n_out",
                "mask_type",
                "dtype"
            ],
            "masked_dense": [
                "inputs",
                "units",
                "num_blocks",
                "exclusive",
                "kernel_initializer",
                "reuse",
                "name"
            ],
            "masked_autoregressive_default_template": [
                "hidden_layers",
                "shift_only",
                "activation",
                "log_scale_min_clip",
                "log_scale_max_clip",
                "log_scale_clip_gradient",
                "name"
            ],
            "_clip_by_value_preserve_grad": [
                "x",
                "clip_value_min",
                "clip_value_max",
                "name"
            ],
            "MaskedAutoregressiveFlow": {
                "__init__": [
                    "self",
                    "shift_and_log_scale_fn",
                    "is_constant_jacobian",
                    "validate_args",
                    "unroll_loop",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.cholesky_outer_product": {
            "CholeskyOuterProduct": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_make_columnar": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.fill_triangular": {
            "vector_size_to_square_matrix_size": [
                "d",
                "validate_args",
                "name"
            ],
            "FillTriangular": {
                "__init__": [
                    "self",
                    "upper",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape_tensor"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape_tensor"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.chain": {
            "_use_static_shape": [
                "input_tensor",
                "ndims"
            ],
            "_compute_min_event_ndims": [
                "bijector_list",
                "compute_forward"
            ],
            "Chain": {
                "__init__": [
                    "self",
                    "bijectors",
                    "validate_args",
                    "name"
                ],
                "bijectors": [
                    "self"
                ],
                "_shape_helper": [
                    "self",
                    "func_name",
                    "input_shape",
                    "reverse"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.affine": {
            "_as_tensor": [
                "x",
                "name"
            ],
            "Affine": {
                "__init__": [
                    "self",
                    "shift",
                    "scale_identity_multiplier",
                    "scale_diag",
                    "scale_tril",
                    "scale_perturb_factor",
                    "scale_perturb_diag",
                    "validate_args",
                    "name"
                ],
                "_create_scale_operator": [
                    "self",
                    "identity_multiplier",
                    "diag",
                    "tril",
                    "perturb_diag",
                    "perturb_factor",
                    "shift",
                    "validate_args"
                ],
                "shift": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_check_scale": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.conditional_bijector": {
            "ConditionalBijector": {
                "forward": [
                    "self",
                    "x",
                    "name"
                ],
                "inverse": [
                    "self",
                    "y",
                    "name"
                ],
                "inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "event_ndims",
                    "name"
                ],
                "forward_log_det_jacobian": [
                    "self",
                    "x",
                    "event_ndims",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.real_nvp": {
            "real_nvp_default_template": [
                "hidden_layers",
                "shift_only",
                "activation",
                "name"
            ],
            "RealNVP": {
                "__init__": [
                    "self",
                    "num_masked",
                    "shift_and_log_scale_fn",
                    "is_constant_jacobian",
                    "validate_args",
                    "name"
                ],
                "_cache_input_depth": [
                    "self",
                    "x"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.exp": {
            "Exp": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.softplus": {
            "Softplus": {
                "__init__": [
                    "self",
                    "hinge_softness",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "hinge_softness": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.kumaraswamy": {
            "Kumaraswamy": {
                "__init__": [
                    "self",
                    "concentration1",
                    "concentration0",
                    "validate_args",
                    "name"
                ],
                "concentration1": [
                    "self"
                ],
                "concentration0": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_maybe_assert_valid_concentration": [
                    "self",
                    "concentration",
                    "validate_args"
                ],
                "_maybe_assert_valid": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.softsign": {
            "Softsign": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_maybe_assert_valid_y": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.weibull": {
            "Weibull": {
                "__init__": [
                    "self",
                    "scale",
                    "concentration",
                    "validate_args",
                    "name"
                ],
                "scale": [
                    "self"
                ],
                "concentration": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_x": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_y": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.scale_tril": {
            "ScaleTriL": {
                "__init__": [
                    "self",
                    "diag_bijector",
                    "diag_shift",
                    "validate_args",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.absolute_value": {
            "AbsoluteValue": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_is_injective": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.softmax_centered": {
            "SoftmaxCentered": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.invert": {
            "Invert": {
                "__init__": [
                    "self",
                    "bijector",
                    "validate_args",
                    "name"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape"
                ],
                "bijector": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.inline": {
            "Inline": {
                "__init__": [
                    "self",
                    "forward_fn",
                    "inverse_fn",
                    "inverse_log_det_jacobian_fn",
                    "forward_log_det_jacobian_fn",
                    "forward_event_shape_fn",
                    "forward_event_shape_tensor_fn",
                    "inverse_event_shape_fn",
                    "inverse_event_shape_tensor_fn",
                    "is_constant_jacobian",
                    "validate_args",
                    "forward_min_event_ndims",
                    "inverse_min_event_ndims",
                    "name"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.batch_normalization": {
            "_undo_batch_normalization": [
                "x",
                "mean",
                "variance",
                "offset",
                "scale",
                "variance_epsilon",
                "name"
            ],
            "BatchNormalization": {
                "__init__": [
                    "self",
                    "batchnorm_layer",
                    "training",
                    "validate_args",
                    "name"
                ],
                "_validate_bn_layer": [
                    "self",
                    "layer"
                ],
                "_get_broadcast_fn": [
                    "self",
                    "x"
                ],
                "_normalize": [
                    "self",
                    "y"
                ],
                "_de_normalize": [
                    "self",
                    "x"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "use_saved_statistics"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.affine_linear_operator": {
            "AffineLinearOperator": {
                "__init__": [
                    "self",
                    "shift",
                    "scale",
                    "validate_args",
                    "name"
                ],
                "shift": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_collect_assertions": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.ordered": {
            "Ordered": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_x": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.reshape": {
            "_static_ndims_from_shape": [
                "shape"
            ],
            "_ndims_from_shape": [
                "shape"
            ],
            "Reshape": {
                "__init__": [
                    "self",
                    "event_shape_out",
                    "event_shape_in",
                    "validate_args",
                    "name"
                ],
                "_maybe_check_valid_shape": [
                    "self",
                    "shape",
                    "validate_args"
                ],
                "_reshape_helper": [
                    "self",
                    "x",
                    "event_shape_in",
                    "event_shape_out"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward_event_shape_tensor": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape_tensor": [
                    "self",
                    "output_shape"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.sigmoid": {
            "Sigmoid": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.power_transform": {
            "PowerTransform": {
                "__init__": [
                    "self",
                    "power",
                    "validate_args",
                    "name"
                ],
                "power": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_x": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_y": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.permute": {
            "Permute": {
                "__init__": [
                    "self",
                    "permutation",
                    "validate_args",
                    "name"
                ],
                "permutation": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.transform_diagonal": {
            "TransformDiagonal": {
                "__init__": [
                    "self",
                    "diag_bijector",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors.sinh_arcsinh": {
            "_sqrtx2p1": [
                "x"
            ],
            "SinhArcsinh": {
                "__init__": [
                    "self",
                    "skewness",
                    "tailweight",
                    "validate_args",
                    "name"
                ],
                "skewness": [
                    "self"
                ],
                "tailweight": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.distributions.python.ops.bijectors": {},
        "tensorflow_core.contrib.factorization": {},
        "tensorflow_core.contrib.factorization.python": {},
        "tensorflow_core.contrib.factorization.python.ops.wals": {
            "_wals_factorization_model_function": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "_SweepHook": {
                "__init__": [
                    "self",
                    "is_row_sweep_var",
                    "is_sweep_done_var",
                    "init_op",
                    "row_prep_ops",
                    "col_prep_ops",
                    "row_train_op",
                    "col_train_op",
                    "switch_op"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "_IncrementGlobalStepHook": {
                "__init__": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "_StopAtSweepHook": {
                "__init__": [
                    "self",
                    "last_sweep"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "WALSMatrixFactorization": {
                "__init__": [
                    "self",
                    "num_rows",
                    "num_cols",
                    "embedding_dimension",
                    "unobserved_weight",
                    "regularization_coeff",
                    "row_init",
                    "col_init",
                    "num_row_shards",
                    "num_col_shards",
                    "row_weights",
                    "col_weights",
                    "use_factors_weights_cache_for_training",
                    "use_gramian_cache_for_training",
                    "max_sweeps",
                    "model_dir",
                    "config"
                ],
                "get_row_factors": [
                    "self"
                ],
                "get_col_factors": [
                    "self"
                ],
                "get_projections": [
                    "self",
                    "input_fn"
                ]
            }
        },
        "tensorflow_core.contrib.factorization.python.ops.gmm": {
            "_streaming_sum": [
                "scalar_tensor"
            ],
            "_InitializeClustersHook": {
                "__init__": [
                    "self",
                    "init_op",
                    "is_initialized_op",
                    "is_chief"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "_"
                ]
            },
            "GMM": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "model_dir",
                    "random_seed",
                    "params",
                    "initial_clusters",
                    "covariance_type",
                    "config"
                ],
                "predict_assignments": [
                    "self",
                    "input_fn",
                    "batch_size",
                    "outputs"
                ],
                "score": [
                    "self",
                    "input_fn",
                    "batch_size",
                    "steps"
                ],
                "weights": [
                    "self"
                ],
                "clusters": [
                    "self"
                ],
                "covariances": [
                    "self"
                ],
                "_parse_tensor_or_dict": [
                    "self",
                    "features"
                ],
                "_model_builder": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.factorization.python.ops.factorization_ops_test_utils": {
            "remove_empty_rows_columns": [
                "np_matrix"
            ],
            "np_matrix_to_tf_sparse": [
                "np_matrix",
                "row_slices",
                "col_slices",
                "transpose",
                "shuffle"
            ],
            "calculate_loss": [
                "input_mat",
                "row_factors",
                "col_factors",
                "regularization",
                "w0",
                "row_weights",
                "col_weights"
            ]
        },
        "tensorflow_core.contrib.factorization.python.ops.factorization_ops": {
            "WALSModel": {
                "__init__": [
                    "self",
                    "input_rows",
                    "input_cols",
                    "n_components",
                    "unobserved_weight",
                    "regularization",
                    "row_init",
                    "col_init",
                    "num_row_shards",
                    "num_col_shards",
                    "row_weights",
                    "col_weights",
                    "use_factors_weights_cache",
                    "use_gramian_cache",
                    "use_scoped_vars"
                ],
                "row_factors": [
                    "self"
                ],
                "col_factors": [
                    "self"
                ],
                "row_weights": [
                    "self"
                ],
                "col_weights": [
                    "self"
                ],
                "initialize_op": [
                    "self"
                ],
                "_shard_sizes": [
                    "cls",
                    "dims",
                    "num_shards"
                ],
                "_create_factors": [
                    "cls",
                    "rows",
                    "cols",
                    "num_shards",
                    "init",
                    "name"
                ],
                "_create_weights": [
                    "cls",
                    "wt_init",
                    "num_wts",
                    "num_shards",
                    "name"
                ],
                "_create_gramian": [
                    "n_components",
                    "name"
                ],
                "_transient_var": [
                    "name"
                ],
                "_prepare_gramian": [
                    "self",
                    "factors",
                    "gramian"
                ],
                "_cached_copy": [
                    "self",
                    "var",
                    "name",
                    "pass_through"
                ],
                "_create_transient_vars": [
                    "self"
                ],
                "worker_init": [
                    "self"
                ],
                "row_update_prep_gramian_op": [
                    "self"
                ],
                "col_update_prep_gramian_op": [
                    "self"
                ],
                "initialize_row_update_op": [
                    "self"
                ],
                "initialize_col_update_op": [
                    "self"
                ],
                "_get_sharding_func": [
                    "size",
                    "num_shards"
                ],
                "scatter_update": [
                    "cls",
                    "factor",
                    "indices",
                    "values",
                    "sharding_func",
                    "name"
                ],
                "update_row_factors": [
                    "self",
                    "sp_input",
                    "transpose_input"
                ],
                "update_col_factors": [
                    "self",
                    "sp_input",
                    "transpose_input"
                ],
                "project_row_factors": [
                    "self",
                    "sp_input",
                    "transpose_input",
                    "projection_weights"
                ],
                "project_col_factors": [
                    "self",
                    "sp_input",
                    "transpose_input",
                    "projection_weights"
                ],
                "_process_input_helper": [
                    "self",
                    "update_row_factors",
                    "sp_input",
                    "transpose_input",
                    "row_weights"
                ]
            }
        },
        "tensorflow_core.contrib.factorization.python.ops.kmeans": {
            "_parse_features_if_necessary": [
                "features",
                "feature_columns"
            ],
            "_LossRelativeChangeHook": {
                "__init__": [
                    "self",
                    "loss_tensor",
                    "tolerance"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "_InitializeClustersHook": {
                "__init__": [
                    "self",
                    "init_op",
                    "is_initialized_var",
                    "is_chief"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ]
            },
            "_ModelFn": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "initial_clusters",
                    "distance_metric",
                    "random_seed",
                    "use_mini_batch",
                    "mini_batch_steps_per_iteration",
                    "kmeans_plus_plus_num_retries",
                    "relative_tolerance",
                    "feature_columns"
                ],
                "model_fn": [
                    "self",
                    "features",
                    "mode",
                    "config"
                ]
            },
            "KMeansClustering": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "model_dir",
                    "initial_clusters",
                    "distance_metric",
                    "random_seed",
                    "use_mini_batch",
                    "mini_batch_steps_per_iteration",
                    "kmeans_plus_plus_num_retries",
                    "relative_tolerance",
                    "config",
                    "feature_columns"
                ],
                "_predict_one_key": [
                    "self",
                    "input_fn",
                    "predict_key"
                ],
                "predict_cluster_index": [
                    "self",
                    "input_fn"
                ],
                "score": [
                    "self",
                    "input_fn"
                ],
                "transform": [
                    "self",
                    "input_fn"
                ],
                "cluster_centers": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.factorization.python.ops.gmm_ops": {
            "_covariance": [
                "x",
                "diag"
            ],
            "_init_clusters_random": [
                "data",
                "num_clusters",
                "random_seed"
            ],
            "gmm": [
                "inp",
                "initial_clusters",
                "num_clusters",
                "random_seed",
                "covariance_type",
                "params"
            ],
            "GmmAlgorithm": {
                "__init__": [
                    "self",
                    "data",
                    "num_classes",
                    "initial_means",
                    "params",
                    "covariance_type",
                    "random_seed"
                ],
                "_create_variables": [
                    "self"
                ],
                "_initialize_variables": [
                    "self",
                    "data",
                    "initial_means"
                ],
                "init_ops": [
                    "self"
                ],
                "training_ops": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "alphas": [
                    "self"
                ],
                "clusters": [
                    "self"
                ],
                "covariances": [
                    "self"
                ],
                "assignments": [
                    "self"
                ],
                "scores": [
                    "self"
                ],
                "log_likelihood_op": [
                    "self"
                ],
                "_define_graph": [
                    "self",
                    "data"
                ],
                "_define_full_covariance_probs": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_diag_covariance_probs": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_log_prob_operation": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_prior_log_prob_operation": [
                    "self",
                    "shard_id"
                ],
                "_define_expectation_operation": [
                    "self",
                    "shard_id"
                ],
                "_define_partial_maximization_operation": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_maximization_operation": [
                    "self",
                    "num_batches"
                ],
                "_define_loglikelihood_operation": [
                    "self"
                ],
                "_define_score_samples": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.factorization.python.ops": {},
        "tensorflow_core.contrib.factorization.python.ops.gen_factorization_ops": {
            "masked_matmul": [
                "a",
                "b",
                "mask_indices",
                "transpose_a",
                "transpose_b",
                "name"
            ],
            "MaskedMatmul": [
                "a",
                "b",
                "mask_indices",
                "transpose_a",
                "transpose_b",
                "name"
            ],
            "masked_matmul_eager_fallback": [
                "a",
                "b",
                "mask_indices",
                "transpose_a",
                "transpose_b",
                "name",
                "ctx"
            ],
            "wals_compute_partial_lhs_and_rhs": [
                "factors",
                "factor_weights",
                "unobserved_weights",
                "input_weights",
                "input_indices",
                "input_values",
                "entry_weights",
                "input_block_size",
                "input_is_transpose",
                "name"
            ],
            "WALSComputePartialLhsAndRhs": [
                "factors",
                "factor_weights",
                "unobserved_weights",
                "input_weights",
                "input_indices",
                "input_values",
                "entry_weights",
                "input_block_size",
                "input_is_transpose",
                "name"
            ],
            "wals_compute_partial_lhs_and_rhs_eager_fallback": [
                "factors",
                "factor_weights",
                "unobserved_weights",
                "input_weights",
                "input_indices",
                "input_values",
                "entry_weights",
                "input_block_size",
                "input_is_transpose",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.factorization.python.ops.clustering_ops": {
            "KMeans": {
                "__init__": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "initial_clusters",
                    "distance_metric",
                    "use_mini_batch",
                    "mini_batch_steps_per_iteration",
                    "random_seed",
                    "kmeans_plus_plus_num_retries",
                    "kmc2_chain_length"
                ],
                "_distance_graph": [
                    "cls",
                    "inputs",
                    "clusters",
                    "distance_metric"
                ],
                "_compute_euclidean_distance": [
                    "cls",
                    "inputs",
                    "clusters"
                ],
                "_compute_cosine_distance": [
                    "cls",
                    "inputs",
                    "clusters",
                    "inputs_normalized"
                ],
                "_infer_graph": [
                    "self",
                    "inputs",
                    "clusters"
                ],
                "_clusters_l2_normalized": [
                    "self"
                ],
                "_create_variables": [
                    "self",
                    "num_clusters"
                ],
                "_l2_normalize_data": [
                    "cls",
                    "inputs"
                ],
                "training_graph": [
                    "self"
                ],
                "_mini_batch_sync_updates_op": [
                    "self",
                    "update_in_steps",
                    "cluster_centers_var",
                    "cluster_centers_updated",
                    "total_counts"
                ],
                "_mini_batch_training_op": [
                    "self",
                    "inputs",
                    "cluster_idx_list",
                    "cluster_centers",
                    "total_counts"
                ],
                "_full_batch_training_op": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "cluster_idx_list",
                    "cluster_centers"
                ]
            },
            "_InitializeClustersOpFactory": {
                "__init__": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "initial_clusters",
                    "distance_metric",
                    "random_seed",
                    "kmeans_plus_plus_num_retries",
                    "kmc2_chain_length",
                    "cluster_centers",
                    "cluster_centers_updated",
                    "cluster_centers_initialized"
                ],
                "_random": [
                    "self"
                ],
                "_kmeans_plus_plus": [
                    "self"
                ],
                "_kmc2_multiple_centers": [
                    "self"
                ],
                "_greedy_batch_sampler": [
                    "self",
                    "sampler"
                ],
                "_single_batch_sampler": [
                    "self",
                    "sampler"
                ],
                "_choose_initial_centers": [
                    "self"
                ],
                "_add_new_centers": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "op": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.cudnn_rnn": {},
        "tensorflow_core.contrib.cudnn_rnn.python": {},
        "tensorflow_core.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops": {
            "_check_rnn_mode": [
                "rnn_mode"
            ],
            "_get_seed": [
                "seed"
            ],
            "check_direction": [
                "direction"
            ],
            "check_input_mode": [
                "input_mode"
            ],
            "_get_num_params": [
                "rnn_mode",
                "num_layers",
                "direction"
            ],
            "_cudnn_rnn": [
                "inputs",
                "input_h",
                "input_c",
                "params",
                "is_training",
                "rnn_mode",
                "sequence_lengths",
                "time_major",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "num_proj",
                "name"
            ],
            "cudnn_lstm": [
                "inputs",
                "input_h",
                "input_c",
                "params",
                "is_training",
                "sequence_lengths",
                "time_major",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "num_proj",
                "name"
            ],
            "_cudnn_rnn_no_input_c": [
                "inputs",
                "input_h",
                "params",
                "is_training",
                "rnn_mode",
                "sequence_lengths",
                "time_major",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "name"
            ],
            "cudnn_gru": [
                "inputs",
                "input_h",
                "params",
                "is_training",
                "sequence_lengths",
                "time_major",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "name"
            ],
            "cudnn_rnn_relu": [
                "inputs",
                "input_h",
                "params",
                "is_training",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "sequence_lengths",
                "time_major",
                "name"
            ],
            "cudnn_rnn_tanh": [
                "inputs",
                "input_h",
                "params",
                "is_training",
                "sequence_lengths",
                "time_major",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "name"
            ],
            "cudnn_rnn_opaque_params_to_canonical": [
                "rnn_mode",
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "num_proj",
                "name"
            ],
            "cudnn_rnn_canonical_to_opaque_params": [
                "rnn_mode",
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "input_mode",
                "direction",
                "dropout",
                "seed",
                "num_proj",
                "name"
            ],
            "cudnn_rnn_opaque_params_size": [
                "rnn_mode",
                "num_layers",
                "num_units",
                "input_size",
                "input_mode",
                "direction",
                "dtype",
                "dropout",
                "seed",
                "num_proj",
                "name"
            ],
            "CudnnCompatibleLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "reuse"
                ]
            },
            "CudnnCompatibleGRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "reuse",
                    "kernel_initializer"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "CudnnParamsFormatConverter": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "num_proj",
                    "input_mode",
                    "direction"
                ],
                "tf_canonical_to_opaque": [
                    "self",
                    "tf_canonicals",
                    "weights_proj"
                ],
                "opaque_to_tf_canonical": [
                    "self",
                    "opaque_param"
                ],
                "_opaque_to_cu_canonical": [
                    "self",
                    "opaque_param"
                ],
                "_cu_canonical_to_opaque": [
                    "self",
                    "cu_weights",
                    "cu_biases"
                ],
                "_cu_canonical_to_tf_canonical": [
                    "self",
                    "cu_weights",
                    "cu_biases"
                ],
                "_cu_canonical_to_tf_canonical_single_layer": [
                    "self",
                    "cu_weights",
                    "cu_biases",
                    "tf_weights",
                    "tf_biases",
                    "tf_weigths_proj"
                ],
                "_tf_canonical_to_cu_canonical": [
                    "self",
                    "tf_canonicals",
                    "weights_proj"
                ],
                "_cudnn_to_tf_weights": [
                    "self"
                ],
                "_tf_to_cudnn_weights": [
                    "self",
                    "layer"
                ],
                "_cudnn_to_tf_biases": [
                    "self"
                ],
                "_tf_to_cudnn_biases": [
                    "self"
                ]
            },
            "CudnnParamsFormatConverterLSTM": {
                "_cudnn_to_tf_gate_params": [
                    "self"
                ],
                "_tf_to_cudnn_gate_params": [
                    "self"
                ],
                "_cudnn_to_tf_weights": [
                    "self"
                ],
                "_tf_to_cudnn_weights": [
                    "self",
                    "layer"
                ],
                "_cudnn_to_tf_biases": [
                    "self"
                ],
                "_tf_to_cudnn_biases": [
                    "self"
                ],
                "_cu_canonical_to_tf_canonical_single_layer": [
                    "self",
                    "cu_weights",
                    "cu_biases",
                    "tf_weights",
                    "tf_biases",
                    "tf_weights_proj"
                ]
            },
            "CudnnParamsFormatConverterGRU": {
                "_cudnn_to_tf_weights": [
                    "self"
                ],
                "_tf_to_cudnn_weights": [
                    "self",
                    "layer"
                ],
                "_cudnn_to_tf_biases": [
                    "self"
                ],
                "_tf_to_cudnn_biases": [
                    "self"
                ],
                "_cu_canonical_to_tf_canonical_single_layer": [
                    "self",
                    "cu_weights",
                    "cu_biases",
                    "tf_weights",
                    "tf_biases",
                    "tf_weights_proj"
                ]
            },
            "CudnnParamsFormatConverterBasic": {
                "_cudnn_to_tf_weights": [
                    "self"
                ],
                "_tf_to_cudnn_weights": [
                    "self",
                    "layer"
                ],
                "_cudnn_to_tf_biases": [
                    "self"
                ],
                "_tf_to_cudnn_biases": [
                    "self"
                ]
            },
            "CudnnParamsFormatConverterTanh": {},
            "CudnnParamsFormatConverterRelu": {},
            "CudnnOpaqueParamsSaveable": {
                "__init__": [
                    "self",
                    "opaque_params",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "scope",
                    "name"
                ],
                "format_converter": [
                    "self"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ],
                "_trackable_save": [
                    "self",
                    "save_buffer"
                ],
                "_trackable_restore": [
                    "self",
                    "restore_buffer"
                ],
                "_add_trackable_dependencies": [
                    "self",
                    "trackable",
                    "dtype"
                ],
                "_trackable_track_params": [
                    "self",
                    "trackable",
                    "params"
                ],
                "_tf_canonical_names": [
                    "self"
                ],
                "_tf_canonical_name_prefix": [
                    "self",
                    "layer",
                    "is_fwd"
                ],
                "_tf_canonical_names_single_layer": [
                    "self",
                    "prefix",
                    "tf_weights_names",
                    "tf_biases_names"
                ]
            },
            "CudnnLSTMSaveable": {
                "_tf_canonical_names_single_layer": [
                    "self",
                    "prefix",
                    "tf_weights_names",
                    "tf_bias_names"
                ],
                "_trackable_track_params": [
                    "self",
                    "trackable",
                    "params"
                ]
            },
            "CudnnGRUSaveable": {
                "_tf_canonical_names_single_layer": [
                    "self",
                    "prefix",
                    "tf_weights_names",
                    "tf_bias_names"
                ]
            },
            "CudnnRNNTanhSaveable": {},
            "CudnnRNNReluSaveable": {},
            "_CudnnRNN": {
                "__init__": [
                    "self",
                    "rnn_mode",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dtype",
                    "dropout",
                    "seed",
                    "num_proj"
                ],
                "input_mode": [
                    "self"
                ],
                "input_size": [
                    "self"
                ],
                "num_units": [
                    "self"
                ],
                "num_layers": [
                    "self"
                ],
                "rnn_mode": [
                    "self"
                ],
                "direction": [
                    "self"
                ],
                "num_proj": [
                    "self"
                ],
                "params_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "input_c",
                    "params",
                    "is_training",
                    "sequence_lengths",
                    "time_major"
                ],
                "params_to_canonical": [
                    "self",
                    "params"
                ],
                "canonical_to_params": [
                    "self",
                    "weights",
                    "biases"
                ]
            },
            "CudnnLSTM": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dtype",
                    "dropout",
                    "seed",
                    "num_proj"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "input_c",
                    "params",
                    "sequence_lengths",
                    "time_major",
                    "is_training"
                ]
            },
            "_CudnnRNNNoInputC": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dtype",
                    "dropout",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "params",
                    "sequence_lengths",
                    "time_major",
                    "is_training"
                ]
            },
            "CudnnGRU": {},
            "CudnnRNNTanh": {},
            "CudnnRNNRelu": {}
        },
        "tensorflow_core.contrib.cudnn_rnn.python.ops": {},
        "tensorflow_core.contrib.cudnn_rnn.python.layers.cudnn_rnn": {
            "_CudnnRNN": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_mode",
                    "direction",
                    "dropout",
                    "seed",
                    "dtype",
                    "kernel_initializer",
                    "bias_initializer",
                    "name"
                ],
                "num_layers": [
                    "self"
                ],
                "num_units": [
                    "self"
                ],
                "input_mode": [
                    "self"
                ],
                "input_size": [
                    "self"
                ],
                "rnn_mode": [
                    "self"
                ],
                "direction": [
                    "self"
                ],
                "num_dirs": [
                    "self"
                ],
                "saveable": [
                    "self"
                ],
                "canonical_weight_shapes": [
                    "self"
                ],
                "canonical_bias_shapes": [
                    "self"
                ],
                "_update_trainable_weights": [
                    "self",
                    "getter"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "initial_state",
                    "sequence_lengths",
                    "time_major",
                    "training"
                ],
                "state_shape": [
                    "self",
                    "batch_size"
                ],
                "_zero_state": [
                    "self",
                    "batch_size"
                ],
                "_canonical_weight_shape": [
                    "self",
                    "layer"
                ],
                "_canonical_bias_shape": [
                    "self",
                    "unused_layer"
                ],
                "_canonical_to_opaque": [
                    "self",
                    "cu_weights",
                    "cu_biases"
                ],
                "_forward": [
                    "self",
                    "inputs",
                    "h",
                    "c",
                    "opaque_params",
                    "sequence_lengths",
                    "time_major",
                    "training"
                ],
                "_create_saveable": [
                    "self"
                ]
            },
            "CudnnLSTM": {
                "state_shape": [
                    "self",
                    "batch_size"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            },
            "_CudnnRNNNoInputC": {
                "state_shape": [
                    "self",
                    "batch_size"
                ]
            },
            "CudnnGRU": {},
            "CudnnRNNTanh": {},
            "CudnnRNNRelu": {}
        },
        "tensorflow_core.contrib.cudnn_rnn.python.layers": {},
        "tensorflow_core.contrib.stateless": {},
        "tensorflow_core.contrib.text": {},
        "tensorflow_core.contrib.text.python": {},
        "tensorflow_core.contrib.text.python.ops.gen_skip_gram_ops": {
            "skip_gram_generate_candidates": [
                "input_tensor",
                "min_skips",
                "max_skips",
                "start",
                "limit",
                "emit_self_as_target",
                "seed",
                "seed2",
                "name"
            ],
            "SkipGramGenerateCandidates": [
                "input_tensor",
                "min_skips",
                "max_skips",
                "start",
                "limit",
                "emit_self_as_target",
                "seed",
                "seed2",
                "name"
            ],
            "skip_gram_generate_candidates_eager_fallback": [
                "input_tensor",
                "min_skips",
                "max_skips",
                "start",
                "limit",
                "emit_self_as_target",
                "seed",
                "seed2",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.text.python.ops.skip_gram_ops": {
            "skip_gram_sample": [
                "input_tensor",
                "min_skips",
                "max_skips",
                "start",
                "limit",
                "emit_self_as_target",
                "vocab_freq_table",
                "vocab_min_count",
                "vocab_subsampling",
                "corpus_size",
                "batch_size",
                "batch_capacity",
                "seed",
                "name"
            ],
            "skip_gram_sample_with_text_vocab": [
                "input_tensor",
                "vocab_freq_file",
                "vocab_token_index",
                "vocab_token_dtype",
                "vocab_freq_index",
                "vocab_freq_dtype",
                "vocab_delimiter",
                "vocab_min_count",
                "vocab_subsampling",
                "corpus_size",
                "min_skips",
                "max_skips",
                "start",
                "limit",
                "emit_self_as_target",
                "batch_size",
                "batch_capacity",
                "seed",
                "name"
            ],
            "_filter_input": [
                "input_tensor",
                "vocab_freq_table",
                "vocab_min_count",
                "vocab_subsampling",
                "corpus_size",
                "seed"
            ]
        },
        "tensorflow_core.contrib.text.python.ops": {},
        "tensorflow_core.contrib.cluster_resolver": {},
        "tensorflow_core.contrib.cluster_resolver.python": {},
        "tensorflow_core.contrib.cluster_resolver.python.training.cluster_resolver": {},
        "tensorflow_core.contrib.cluster_resolver.python.training.tfconfig_cluster_resolver": {},
        "tensorflow_core.contrib.cluster_resolver.python.training.kubernetes_cluster_resolver": {},
        "tensorflow_core.contrib.cluster_resolver.python.training.slurm_cluster_resolver": {},
        "tensorflow_core.contrib.cluster_resolver.python.training.tpu_cluster_resolver": {},
        "tensorflow_core.contrib.cluster_resolver.python.training": {},
        "tensorflow_core.contrib.cluster_resolver.python.training.gce_cluster_resolver": {},
        "tensorflow_core.contrib.copy_graph": {},
        "tensorflow_core.contrib.copy_graph.python": {},
        "tensorflow_core.contrib.copy_graph.python.util.copy_elements": {
            "copy_variable_to_graph": [
                "org_instance",
                "to_graph",
                "scope"
            ],
            "copy_op_to_graph": [
                "org_instance",
                "to_graph",
                "variables",
                "scope"
            ],
            "get_copied_op": [
                "org_instance",
                "graph",
                "scope"
            ]
        },
        "tensorflow_core.contrib.copy_graph.python.util": {},
        "tensorflow_core.contrib.quantization": {},
        "tensorflow_core.contrib.quantization.python.nn_ops": {},
        "tensorflow_core.contrib.quantization.python.math_ops": {},
        "tensorflow_core.contrib.quantization.python.array_ops": {},
        "tensorflow_core.contrib.quantization.python": {},
        "tensorflow_core.contrib.deprecated": {},
        "tensorflow_core.contrib.saved_model": {},
        "tensorflow_core.contrib.saved_model.python": {},
        "tensorflow_core.contrib.saved_model.python.saved_model.keras_saved_model": {},
        "tensorflow_core.contrib.saved_model.python.saved_model.reader": {
            "read_saved_model": [
                "saved_model_dir"
            ],
            "get_saved_model_tag_sets": [
                "saved_model_dir"
            ]
        },
        "tensorflow_core.contrib.saved_model.python.saved_model": {},
        "tensorflow_core.contrib.signal": {},
        "tensorflow_core.contrib.session_bundle.exporter": {
            "gfile_copy_callback": [
                "files_to_copy",
                "export_dir_path"
            ],
            "regression_signature": [
                "input_tensor",
                "output_tensor"
            ],
            "classification_signature": [
                "input_tensor",
                "classes_tensor",
                "scores_tensor"
            ],
            "generic_signature": [
                "name_tensor_map"
            ],
            "Exporter": {
                "__init__": [
                    "self",
                    "saver"
                ],
                "init": [
                    "self",
                    "graph_def",
                    "init_op",
                    "clear_devices",
                    "default_graph_signature",
                    "named_graph_signatures",
                    "assets_collection",
                    "assets_callback"
                ],
                "export": [
                    "self",
                    "export_dir_base",
                    "global_step_tensor",
                    "sess",
                    "exports_to_keep"
                ],
                "_file_path_value": [
                    "self",
                    "path_tensor"
                ]
            }
        },
        "tensorflow_core.contrib.session_bundle.manifest_pb2": {},
        "tensorflow_core.contrib.session_bundle.gc": {
            "largest_export_versions": [
                "n"
            ],
            "one_of_every_n_export_versions": [
                "n"
            ],
            "mod_export_version": [
                "n"
            ],
            "union": [
                "lf",
                "rf"
            ],
            "negation": [
                "f"
            ],
            "get_paths": [
                "base_dir",
                "parser"
            ]
        },
        "tensorflow_core.contrib.session_bundle.constants": {},
        "tensorflow_core.contrib.session_bundle.session_bundle": {
            "maybe_session_bundle_dir": [
                "export_dir"
            ],
            "load_session_bundle_from_path": [
                "export_dir",
                "target",
                "config",
                "meta_graph_def"
            ]
        },
        "tensorflow_core.contrib.session_bundle": {},
        "tensorflow_core.contrib.session_bundle.bundle_shim": {
            "_add_input_to_signature_def": [
                "tensor_name",
                "map_key",
                "signature_def"
            ],
            "_add_output_to_signature_def": [
                "tensor_name",
                "map_key",
                "signature_def"
            ],
            "_convert_default_signature_to_signature_def": [
                "signatures"
            ],
            "_convert_named_signatures_to_signature_def": [
                "signatures"
            ],
            "_convert_signatures_to_signature_defs": [
                "metagraph_def"
            ],
            "_load_saved_model_from_session_bundle_path": [
                "export_dir",
                "target",
                "config"
            ],
            "load_session_bundle_or_saved_model_bundle_from_path": [
                "export_dir",
                "tags",
                "target",
                "config"
            ]
        },
        "tensorflow_core.contrib.recurrent": {},
        "tensorflow_core.contrib.recurrent.python.recurrent_api": {},
        "tensorflow_core.contrib.recurrent.python": {},
        "tensorflow_core.contrib.recurrent.python.ops.recurrent": {
            "_AssertIsCompatible": [
                "a",
                "b"
            ],
            "_Index": [
                "struct",
                "index"
            ],
            "_Update": [
                "struct_acc",
                "struct_x",
                "t"
            ],
            "_SeqLenDim": [
                "struct"
            ],
            "_Flatten": [
                "struct"
            ],
            "_Pack": [
                "elements",
                "struct_template"
            ],
            "_EmptyAcc": [
                "slen",
                "struct_template"
            ],
            "_EmptyLike": [
                "struct"
            ],
            "_Add": [
                "struct_x",
                "struct_y"
            ],
            "_Dtypes": [
                "struct"
            ],
            "_ConvertNoneGradientToZeros": [
                "xs",
                "dxs"
            ],
            "_GetCellGrad": [
                "cell_fn",
                "cell_grad"
            ],
            "_IsSingleTimeStep": [
                "inputs",
                "max_input_length"
            ],
            "Recurrent": [
                "theta",
                "state0",
                "inputs",
                "cell_fn",
                "cell_grad",
                "extras",
                "max_input_length",
                "use_tpu",
                "aligned_end"
            ],
            "_Recurrent": {
                "__init__": [
                    "self",
                    "cell_fn",
                    "cell_grad",
                    "theta",
                    "state0",
                    "inputs",
                    "max_input_length",
                    "extras",
                    "use_tpu",
                    "aligned_end"
                ],
                "_MaybeComputeMaxInputLength": [
                    "self",
                    "inputs",
                    "max_input_length"
                ],
                "Compute": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.recurrent.python.ops.functional_rnn": {
            "_GetDTypesFromStructure": [
                "struct"
            ],
            "_SetShapeFromTemplate": [
                "struct",
                "struct_template"
            ],
            "_ApplyLengthsToBatch": [
                "sequence_lengths",
                "tf_output"
            ],
            "_PickFinalStateFromHistory": [
                "acc_state",
                "sequence_length"
            ],
            "_PostProcessOutput": [
                "extended_acc_state",
                "extended_final_state",
                "func_cell",
                "total_time",
                "inputs_lengths",
                "is_reversed"
            ],
            "functional_rnn": [
                "cell",
                "inputs",
                "sequence_length",
                "initial_state",
                "dtype",
                "time_major",
                "scope",
                "use_tpu",
                "reverse"
            ],
            "bidirectional_functional_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "sequence_length",
                "time_major",
                "use_tpu",
                "fast_reverse",
                "scope"
            ],
            "_FunctionalRnnCell": {
                "__init__": [
                    "self",
                    "rnn_cell",
                    "seq_inputs",
                    "initial_state"
                ],
                "extended_initial_state": [
                    "self"
                ],
                "cell_step": [
                    "self"
                ],
                "theta": [
                    "self"
                ],
                "state_template": [
                    "self"
                ],
                "output_shape": [
                    "self"
                ],
                "GetOutputFromState": [
                    "self",
                    "state"
                ],
                "MaybeRemoveOutputFromState": [
                    "self",
                    "flat_state"
                ]
            }
        },
        "tensorflow_core.contrib.recurrent.python.ops": {},
        "tensorflow_core.contrib.tensor_forest": {},
        "tensorflow_core.contrib.tensor_forest.proto.fertile_stats_pb2": {},
        "tensorflow_core.contrib.tensor_forest.proto.tensor_forest_params_pb2": {},
        "tensorflow_core.contrib.tensor_forest.proto": {},
        "tensorflow_core.contrib.tensor_forest.python.tensor_forest": {
            "parse_number_or_string_to_proto": [
                "proto",
                "param"
            ],
            "build_params_proto": [
                "params"
            ],
            "get_epoch_variable": [],
            "ForestHParams": {
                "__init__": [
                    "self",
                    "num_trees",
                    "max_nodes",
                    "bagging_fraction",
                    "num_splits_to_consider",
                    "feature_bagging_fraction",
                    "max_fertile_nodes",
                    "split_after_samples",
                    "valid_leaf_threshold",
                    "dominate_method",
                    "dominate_fraction",
                    "model_name",
                    "split_finish_name",
                    "split_pruning_name",
                    "prune_every_samples",
                    "early_finish_check_every_samples",
                    "collate_examples",
                    "checkpoint_stats",
                    "use_running_stats_method",
                    "initialize_average_splits",
                    "inference_tree_paths",
                    "param_file",
                    "split_name"
                ],
                "values": [
                    "self"
                ],
                "fill": [
                    "self"
                ]
            },
            "TreeVariables": {
                "__init__": [
                    "self",
                    "params",
                    "tree_num",
                    "training",
                    "tree_config",
                    "tree_stat"
                ],
                "get_tree_name": [
                    "self",
                    "name",
                    "num"
                ]
            },
            "ForestVariables": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "training",
                    "tree_variables_class",
                    "tree_configs",
                    "tree_stats"
                ],
                "__setitem__": [
                    "self",
                    "t",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "t"
                ]
            },
            "RandomForestGraphs": {
                "__init__": [
                    "self",
                    "params",
                    "tree_configs",
                    "tree_stats",
                    "device_assigner",
                    "variables",
                    "tree_variables_class",
                    "tree_graphs",
                    "training"
                ],
                "_bag_features": [
                    "self",
                    "tree_num",
                    "input_data"
                ],
                "get_all_resource_handles": [
                    "self"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels",
                    "num_trainers",
                    "trainer_id"
                ],
                "inference_graph": [
                    "self",
                    "input_data"
                ],
                "average_size": [
                    "self"
                ],
                "training_loss": [
                    "self",
                    "features",
                    "labels",
                    "name"
                ],
                "validation_loss": [
                    "self",
                    "features",
                    "labels"
                ],
                "average_impurity": [
                    "self"
                ],
                "feature_importances": [
                    "self"
                ]
            },
            "RandomTreeGraphs": {
                "__init__": [
                    "self",
                    "variables",
                    "params",
                    "tree_num"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels",
                    "random_seed",
                    "data_spec",
                    "sparse_features",
                    "input_weights"
                ],
                "inference_graph": [
                    "self",
                    "input_data",
                    "data_spec",
                    "sparse_features"
                ],
                "size": [
                    "self"
                ],
                "feature_usage_counts": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.python": {},
        "tensorflow_core.contrib.tensor_forest.python.ops.gen_model_ops": {
            "create_tree_variable": [
                "tree_handle",
                "tree_config",
                "params",
                "name"
            ],
            "CreateTreeVariable": [
                "tree_handle",
                "tree_config",
                "params",
                "name"
            ],
            "create_tree_variable_eager_fallback": [
                "tree_handle",
                "tree_config",
                "params",
                "name",
                "ctx"
            ],
            "decision_tree_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "DecisionTreeResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "decision_tree_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "feature_usage_counts": [
                "tree_handle",
                "params",
                "name"
            ],
            "FeatureUsageCounts": [
                "tree_handle",
                "params",
                "name"
            ],
            "feature_usage_counts_eager_fallback": [
                "tree_handle",
                "params",
                "name",
                "ctx"
            ],
            "traverse_tree_v4": [
                "tree_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_spec",
                "params",
                "name"
            ],
            "TraverseTreeV4": [
                "tree_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_spec",
                "params",
                "name"
            ],
            "traverse_tree_v4_eager_fallback": [
                "tree_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_spec",
                "params",
                "name",
                "ctx"
            ],
            "tree_deserialize": [
                "tree_handle",
                "tree_config",
                "params",
                "name"
            ],
            "TreeDeserialize": [
                "tree_handle",
                "tree_config",
                "params",
                "name"
            ],
            "tree_deserialize_eager_fallback": [
                "tree_handle",
                "tree_config",
                "params",
                "name",
                "ctx"
            ],
            "tree_is_initialized_op": [
                "tree_handle",
                "name"
            ],
            "TreeIsInitializedOp": [
                "tree_handle",
                "name"
            ],
            "tree_is_initialized_op_eager_fallback": [
                "tree_handle",
                "name",
                "ctx"
            ],
            "tree_predictions_v4": [
                "tree_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_spec",
                "params",
                "name"
            ],
            "TreePredictionsV4": [
                "tree_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_spec",
                "params",
                "name"
            ],
            "tree_predictions_v4_eager_fallback": [
                "tree_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_spec",
                "params",
                "name",
                "ctx"
            ],
            "tree_serialize": [
                "tree_handle",
                "name"
            ],
            "TreeSerialize": [
                "tree_handle",
                "name"
            ],
            "tree_serialize_eager_fallback": [
                "tree_handle",
                "name",
                "ctx"
            ],
            "tree_size": [
                "tree_handle",
                "name"
            ],
            "TreeSize": [
                "tree_handle",
                "name"
            ],
            "tree_size_eager_fallback": [
                "tree_handle",
                "name",
                "ctx"
            ],
            "update_model_v4": [
                "tree_handle",
                "leaf_ids",
                "input_labels",
                "input_weights",
                "params",
                "name"
            ],
            "UpdateModelV4": [
                "tree_handle",
                "leaf_ids",
                "input_labels",
                "input_weights",
                "params",
                "name"
            ],
            "update_model_v4_eager_fallback": [
                "tree_handle",
                "leaf_ids",
                "input_labels",
                "input_weights",
                "params",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.tensor_forest.python.ops.stats_ops": {
            "fertile_stats_variable": [
                "params",
                "stats_config",
                "name",
                "container"
            ],
            "FertileStatsVariableSavable": {
                "__init__": [
                    "self",
                    "params",
                    "stats_handle",
                    "create_op",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ]
            },
            "FertileStatsVariable": {
                "__init__": [
                    "self",
                    "params",
                    "stats_config",
                    "name",
                    "container"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.python.ops.data_ops": {
            "CastToFloat": [
                "tensor"
            ],
            "GetColumnName": [
                "column_key",
                "col_num"
            ],
            "ParseDataTensorOrDict": [
                "data"
            ],
            "ParseLabelTensorOrDict": [
                "labels"
            ],
            "TensorForestDataSpec": {
                "__init__": [
                    "self"
                ],
                "SerializeToString": [
                    "self"
                ]
            },
            "DataColumnCollection": {
                "__init__": [
                    "self"
                ],
                "add": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "SerializeToString": [
                    "self"
                ]
            },
            "DataColumn": {
                "__init__": [
                    "self"
                ],
                "SerializeToString": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.python.ops.gen_stats_ops": {
            "create_fertile_stats_variable": [
                "stats_handle",
                "stats_config",
                "params",
                "name"
            ],
            "CreateFertileStatsVariable": [
                "stats_handle",
                "stats_config",
                "params",
                "name"
            ],
            "create_fertile_stats_variable_eager_fallback": [
                "stats_handle",
                "stats_config",
                "params",
                "name",
                "ctx"
            ],
            "fertile_stats_deserialize": [
                "stats_handle",
                "stats_config",
                "params",
                "name"
            ],
            "FertileStatsDeserialize": [
                "stats_handle",
                "stats_config",
                "params",
                "name"
            ],
            "fertile_stats_deserialize_eager_fallback": [
                "stats_handle",
                "stats_config",
                "params",
                "name",
                "ctx"
            ],
            "fertile_stats_is_initialized_op": [
                "stats_handle",
                "name"
            ],
            "FertileStatsIsInitializedOp": [
                "stats_handle",
                "name"
            ],
            "fertile_stats_is_initialized_op_eager_fallback": [
                "stats_handle",
                "name",
                "ctx"
            ],
            "fertile_stats_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "FertileStatsResourceHandleOp": [
                "container",
                "shared_name",
                "name"
            ],
            "fertile_stats_resource_handle_op_eager_fallback": [
                "container",
                "shared_name",
                "name",
                "ctx"
            ],
            "fertile_stats_serialize": [
                "stats_handle",
                "params",
                "name"
            ],
            "FertileStatsSerialize": [
                "stats_handle",
                "params",
                "name"
            ],
            "fertile_stats_serialize_eager_fallback": [
                "stats_handle",
                "params",
                "name",
                "ctx"
            ],
            "finalize_tree": [
                "tree_handle",
                "stats_handle",
                "params",
                "name"
            ],
            "FinalizeTree": [
                "tree_handle",
                "stats_handle",
                "params",
                "name"
            ],
            "finalize_tree_eager_fallback": [
                "tree_handle",
                "stats_handle",
                "params",
                "name",
                "ctx"
            ],
            "grow_tree_v4": [
                "tree_handle",
                "stats_handle",
                "finished_nodes",
                "params",
                "name"
            ],
            "GrowTreeV4": [
                "tree_handle",
                "stats_handle",
                "finished_nodes",
                "params",
                "name"
            ],
            "grow_tree_v4_eager_fallback": [
                "tree_handle",
                "stats_handle",
                "finished_nodes",
                "params",
                "name",
                "ctx"
            ],
            "process_input_v4": [
                "tree_handle",
                "stats_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_labels",
                "input_weights",
                "leaf_ids",
                "random_seed",
                "input_spec",
                "params",
                "name"
            ],
            "ProcessInputV4": [
                "tree_handle",
                "stats_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_labels",
                "input_weights",
                "leaf_ids",
                "random_seed",
                "input_spec",
                "params",
                "name"
            ],
            "process_input_v4_eager_fallback": [
                "tree_handle",
                "stats_handle",
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_labels",
                "input_weights",
                "leaf_ids",
                "random_seed",
                "input_spec",
                "params",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.tensor_forest.python.ops.gen_tensor_forest_ops": {
            "reinterpret_string_to_float": [
                "input_data",
                "name"
            ],
            "ReinterpretStringToFloat": [
                "input_data",
                "name"
            ],
            "reinterpret_string_to_float_eager_fallback": [
                "input_data",
                "name",
                "ctx"
            ],
            "scatter_add_ndim": [
                "input",
                "indices",
                "deltas",
                "name"
            ],
            "ScatterAddNdim": [
                "input",
                "indices",
                "deltas",
                "name"
            ],
            "scatter_add_ndim_eager_fallback": [
                "input",
                "indices",
                "deltas",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.tensor_forest.python.ops.model_ops": {
            "tree_variable": [
                "params",
                "tree_config",
                "stats_handle",
                "name",
                "container"
            ],
            "TreeVariableSavable": {
                "__init__": [
                    "self",
                    "params",
                    "tree_handle",
                    "stats_handle",
                    "create_op",
                    "name"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "unused_restored_shapes"
                ]
            },
            "TreeVariable": {
                "__init__": [
                    "self",
                    "params",
                    "tree_config",
                    "stats_handle",
                    "name",
                    "container"
                ],
                "_create_resource": [
                    "self"
                ],
                "_initialize": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "is_initialized": [
                    "self"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.python.ops.tensor_forest_ops": {},
        "tensorflow_core.contrib.tensor_forest.python.ops": {},
        "tensorflow_core.contrib.tensor_forest.client.eval_metrics": {
            "_top_k_generator": [
                "k"
            ],
            "_accuracy": [
                "predictions",
                "targets",
                "weights"
            ],
            "_r2": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_squeeze_and_onehot": [
                "targets",
                "depth"
            ],
            "_sigmoid_entropy": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_softmax_entropy": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_predictions": [
                "predictions",
                "unused_targets"
            ],
            "_class_log_loss": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_precision": [
                "predictions",
                "targets",
                "weights"
            ],
            "_precision_at_thresholds": [
                "predictions",
                "targets",
                "weights"
            ],
            "_recall": [
                "predictions",
                "targets",
                "weights"
            ],
            "_recall_at_thresholds": [
                "predictions",
                "targets",
                "weights"
            ],
            "_auc": [
                "probs",
                "targets",
                "weights"
            ],
            "get_metric": [
                "metric_name"
            ],
            "get_prediction_key": [
                "metric_name"
            ]
        },
        "tensorflow_core.contrib.tensor_forest.client.random_forest": {
            "_get_default_head": [
                "params",
                "weights_name",
                "output_type",
                "name"
            ],
            "get_model_fn": [
                "params",
                "graph_builder_class",
                "device_assigner",
                "feature_columns",
                "weights_name",
                "model_head",
                "keys_name",
                "early_stopping_rounds",
                "early_stopping_loss_threshold",
                "num_trainers",
                "trainer_id",
                "report_feature_importances",
                "local_eval",
                "head_scope",
                "include_all_in_serving",
                "output_type"
            ],
            "get_combined_model_fn": [
                "model_fns"
            ],
            "ModelBuilderOutputType": {},
            "TensorForestRunOpAtEndHook": {
                "__init__": [
                    "self",
                    "op_dict"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "TensorForestLossHook": {
                "__init__": [
                    "self",
                    "early_stopping_rounds",
                    "early_stopping_loss_threshold",
                    "loss_op"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "TensorForestEstimator": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "model_dir",
                    "feature_columns",
                    "graph_builder_class",
                    "config",
                    "weight_column",
                    "keys_column",
                    "feature_engineering_fn",
                    "early_stopping_rounds",
                    "early_stopping_loss_threshold",
                    "num_trainers",
                    "trainer_id",
                    "report_feature_importances",
                    "local_eval",
                    "version",
                    "head",
                    "include_all_in_serving"
                ]
            },
            "MultiForestMultiHeadEstimator": {
                "__init__": [
                    "self",
                    "params_list",
                    "device_assigner",
                    "model_dir",
                    "feature_columns",
                    "graph_builder_class",
                    "config",
                    "weight_column",
                    "keys_column",
                    "feature_engineering_fn",
                    "early_stopping_rounds",
                    "num_trainers",
                    "trainer_id",
                    "report_feature_importances",
                    "local_eval"
                ]
            },
            "CoreTensorForestEstimator": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "model_dir",
                    "feature_columns",
                    "graph_builder_class",
                    "config",
                    "weight_column",
                    "keys_column",
                    "feature_engineering_fn",
                    "early_stopping_rounds",
                    "early_stopping_loss_threshold",
                    "num_trainers",
                    "trainer_id",
                    "report_feature_importances",
                    "local_eval",
                    "version",
                    "head",
                    "include_all_in_serving"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.client": {},
        "tensorflow_core.contrib.tensor_forest.hybrid": {},
        "tensorflow_core.contrib.tensor_forest.hybrid.ops.gen_training_ops": {
            "hard_routing_function": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "max_nodes",
                "tree_depth",
                "name"
            ],
            "HardRoutingFunction": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "max_nodes",
                "tree_depth",
                "name"
            ],
            "hard_routing_function_eager_fallback": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "max_nodes",
                "tree_depth",
                "name",
                "ctx"
            ],
            "k_feature_gradient": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "routes",
                "layer_num",
                "random_seed",
                "name"
            ],
            "KFeatureGradient": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "routes",
                "layer_num",
                "random_seed",
                "name"
            ],
            "k_feature_gradient_eager_fallback": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "routes",
                "layer_num",
                "random_seed",
                "name",
                "ctx"
            ],
            "k_feature_routing_function": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "layer_num",
                "max_nodes",
                "num_features_per_node",
                "random_seed",
                "name"
            ],
            "KFeatureRoutingFunction": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "layer_num",
                "max_nodes",
                "num_features_per_node",
                "random_seed",
                "name"
            ],
            "k_feature_routing_function_eager_fallback": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "layer_num",
                "max_nodes",
                "num_features_per_node",
                "random_seed",
                "name",
                "ctx"
            ],
            "routing_function": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "max_nodes",
                "name"
            ],
            "RoutingFunction": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "max_nodes",
                "name"
            ],
            "routing_function_eager_fallback": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "max_nodes",
                "name",
                "ctx"
            ],
            "routing_gradient": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "routes",
                "max_nodes",
                "name"
            ],
            "RoutingGradient": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "routes",
                "max_nodes",
                "name"
            ],
            "routing_gradient_eager_fallback": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "routes",
                "max_nodes",
                "name",
                "ctx"
            ],
            "stochastic_hard_routing_function": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "tree_depth",
                "random_seed",
                "name"
            ],
            "StochasticHardRoutingFunction": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "tree_depth",
                "random_seed",
                "name"
            ],
            "stochastic_hard_routing_function_eager_fallback": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "tree_depth",
                "random_seed",
                "name",
                "ctx"
            ],
            "stochastic_hard_routing_gradient": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "path_probability",
                "path",
                "tree_depth",
                "name"
            ],
            "StochasticHardRoutingGradient": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "path_probability",
                "path",
                "tree_depth",
                "name"
            ],
            "stochastic_hard_routing_gradient_eager_fallback": [
                "input_data",
                "tree_parameters",
                "tree_biases",
                "path_probability",
                "path",
                "tree_depth",
                "name",
                "ctx"
            ],
            "unpack_path": [
                "path",
                "path_values",
                "name"
            ],
            "UnpackPath": [
                "path",
                "path_values",
                "name"
            ],
            "unpack_path_eager_fallback": [
                "path",
                "path_values",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.ops": {},
        "tensorflow_core.contrib.tensor_forest.hybrid.python.hybrid_layer": {
            "HybridLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.hybrid_model": {
            "HybridModel": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ],
                "_do_layer_inference": [
                    "self",
                    "layer",
                    "data"
                ],
                "_base_inference": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "predict_proba": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_graph": [
                    "self",
                    "data",
                    "labels",
                    "data_spec",
                    "epoch"
                ],
                "loss": [
                    "self",
                    "data",
                    "labels"
                ],
                "training_loss": [
                    "self",
                    "data",
                    "labels"
                ],
                "validation_loss": [
                    "self",
                    "data",
                    "labels"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python": {},
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models.stochastic_hard_decisions_to_data_then_nn": {
            "StochasticHardDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn": {
            "HardDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ],
                "_base_inference": [
                    "self",
                    "data",
                    "data_spec",
                    "soft"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models.k_feature_decisions_to_data_then_nn": {
            "KFeatureDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models.stochastic_soft_decisions_to_data_then_nn": {
            "StochasticSoftDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models.decisions_to_data_then_nn": {
            "DecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models.nn": {
            "NN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models.forest_to_data_then_nn": {
            "ForestToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.models": {},
        "tensorflow_core.contrib.tensor_forest.hybrid.python.ops.training_ops": {
            "_RoutingFunctionGradient": [
                "op",
                "grad"
            ],
            "_StochasticHardRoutingFunctionGradient": [
                "op",
                "routing_grad",
                "unused_path_grad"
            ],
            "_KFeatureRoutingFunctionGradient": [
                "op",
                "grad"
            ],
            "Load": []
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.ops": {},
        "tensorflow_core.contrib.tensor_forest.hybrid.python.layers.decisions_to_data": {
            "DecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "KFeatureDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "HardDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "soft_inference_graph": [
                    "self",
                    "data"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "StochasticHardDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "soft_inference_graph": [
                    "self",
                    "data"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "StochasticSoftDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.layers.fully_connected": {
            "FullyConnectedLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "ManyToOneLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "FlattenedFullyConnectedLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            }
        },
        "tensorflow_core.contrib.tensor_forest.hybrid.python.layers": {},
        "tensorflow_core.contrib.graph_editor.edit": {
            "detach_control_inputs": [
                "sgv"
            ],
            "detach_control_outputs": [
                "sgv",
                "control_outputs"
            ],
            "detach_inputs": [
                "sgv",
                "control_inputs"
            ],
            "detach_outputs": [
                "sgv",
                "control_outputs"
            ],
            "detach": [
                "sgv",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "connect": [
                "sgv0",
                "sgv1",
                "disconnect_first"
            ],
            "bypass": [
                "sgv"
            ]
        },
        "tensorflow_core.contrib.graph_editor.transform": {
            "replace_t_with_placeholder_handler": [
                "info",
                "t"
            ],
            "keep_t_if_possible_handler": [
                "info",
                "t"
            ],
            "assign_renamed_collections_handler": [
                "info",
                "elem",
                "elem_"
            ],
            "transform_op_if_inside_handler": [
                "info",
                "op",
                "keep_if_possible"
            ],
            "copy_op_handler": [
                "info",
                "op",
                "new_inputs",
                "copy_shape",
                "nodedef_fn"
            ],
            "copy": [
                "sgv",
                "dst_graph",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "copy_with_input_replacements": [
                "sgv",
                "replacement_ts",
                "dst_graph",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "_add_control_flow_ops": [
                "ops",
                "control_ios"
            ],
            "graph_replace": [
                "target_ts",
                "replacement_ts",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "TransformerInfo": {
                "__init__": [
                    "self",
                    "info"
                ],
                "_get_transformed_map": [
                    "self",
                    "top"
                ],
                "_transformed_elem": [
                    "self",
                    "original_top",
                    "missing_fn"
                ],
                "_original_elem": [
                    "self",
                    "transformed_top",
                    "missing_fn"
                ],
                "transformed": [
                    "self",
                    "original",
                    "missing_fn"
                ],
                "original": [
                    "self",
                    "transformed",
                    "missing_fn"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_TmpInfo": {
                "__init__": [
                    "self",
                    "sgv",
                    "dst_graph",
                    "dst_scope",
                    "src_scope"
                ],
                "new_name": [
                    "self",
                    "name"
                ]
            },
            "Transformer": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "sgv",
                    "dst_graph",
                    "dst_scope",
                    "src_scope",
                    "reuse_dst_scope"
                ],
                "_copy_ops": [
                    "self",
                    "info"
                ],
                "_finalize_cycles": [
                    "self",
                    "info"
                ],
                "_connect_control_inputs": [
                    "self",
                    "info"
                ],
                "_transform_sgv": [
                    "self",
                    "info",
                    "sgv"
                ],
                "_transformed_t": [
                    "self",
                    "info",
                    "t",
                    "consumer_op"
                ]
            }
        },
        "tensorflow_core.contrib.graph_editor.reroute": {
            "_check_ts_compatibility": [
                "ts0",
                "ts1"
            ],
            "_reroute_t": [
                "t0",
                "t1",
                "consumers1",
                "can_modify",
                "cannot_modify"
            ],
            "_reroute_ts": [
                "ts0",
                "ts1",
                "mode",
                "can_modify",
                "cannot_modify"
            ],
            "swap_ts": [
                "ts0",
                "ts1",
                "can_modify",
                "cannot_modify"
            ],
            "reroute_ts": [
                "ts0",
                "ts1",
                "can_modify",
                "cannot_modify"
            ],
            "_reroute_sgv_remap": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv_inputs": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv_outputs": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "swap_inputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_inputs": [
                "sgv0",
                "sgv1"
            ],
            "swap_outputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_outputs": [
                "sgv0",
                "sgv1"
            ],
            "swap_ios": [
                "sgv0",
                "sgv1"
            ],
            "reroute_ios": [
                "sgv0",
                "sgv1"
            ],
            "remove_control_inputs": [
                "op",
                "cops"
            ],
            "add_control_inputs": [
                "op",
                "cops"
            ],
            "_RerouteMode": {
                "check": [
                    "cls",
                    "mode"
                ]
            }
        },
        "tensorflow_core.contrib.graph_editor.util": {
            "concatenate_unique": [
                "la",
                "lb"
            ],
            "is_iterable": [
                "obj"
            ],
            "flatten_tree": [
                "tree",
                "leaves"
            ],
            "transform_tree": [
                "tree",
                "fn",
                "iterable_type"
            ],
            "check_graphs": [],
            "get_unique_graph": [
                "tops",
                "check_types",
                "none_if_empty"
            ],
            "make_list_of_op": [
                "ops",
                "check_graph",
                "allow_graph",
                "ignore_ts"
            ],
            "get_tensors": [
                "graph"
            ],
            "make_list_of_t": [
                "ts",
                "check_graph",
                "allow_graph",
                "ignore_ops"
            ],
            "get_generating_ops": [
                "ts"
            ],
            "get_consuming_ops": [
                "ts"
            ],
            "scope_finalize": [
                "scope"
            ],
            "scope_dirname": [
                "scope"
            ],
            "scope_basename": [
                "scope"
            ],
            "placeholder_name": [
                "t",
                "scope",
                "prefix"
            ],
            "make_placeholder_from_tensor": [
                "t",
                "scope",
                "prefix"
            ],
            "make_placeholder_from_dtype_and_shape": [
                "dtype",
                "shape",
                "scope",
                "prefix"
            ],
            "get_predefined_collection_names": [],
            "find_corresponding_elem": [
                "target",
                "dst_graph",
                "dst_scope",
                "src_scope"
            ],
            "find_corresponding": [
                "targets",
                "dst_graph",
                "dst_scope",
                "src_scope"
            ],
            "ListView": {
                "__init__": [
                    "self",
                    "list_"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "i"
                ],
                "__add__": [
                    "self",
                    "other"
                ]
            },
            "ControlOutputs": {
                "__init__": [
                    "self",
                    "graph"
                ],
                "update": [
                    "self"
                ],
                "_build": [
                    "self"
                ],
                "get_all": [
                    "self"
                ],
                "get": [
                    "self",
                    "op"
                ],
                "graph": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.graph_editor.subgraph": {
            "_finalize_index": [
                "index_or_t",
                "ts"
            ],
            "_finalize_indices": [
                "list_of_index_or_t",
                "ts"
            ],
            "_check_within_range": [
                "mapping",
                "n",
                "repetition"
            ],
            "_check_graph": [
                "sgv",
                "graph"
            ],
            "make_view": [],
            "make_view_from_scope": [
                "scope",
                "graph"
            ],
            "SubGraphView": {
                "__init__": [
                    "self",
                    "inside_ops",
                    "passthrough_ts"
                ],
                "__copy__": [
                    "self"
                ],
                "_assign_from": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "_remap_default": [
                    "self",
                    "remove_input_map",
                    "remove_output_map"
                ],
                "remap_default": [
                    "self",
                    "remove_input_map",
                    "remove_output_map"
                ],
                "_remap_inputs": [
                    "self",
                    "new_input_indices"
                ],
                "_remap_outputs": [
                    "self",
                    "new_output_indices"
                ],
                "_remap_outputs_make_unique": [
                    "self"
                ],
                "_remap_outputs_to_consumers": [
                    "self"
                ],
                "remap_outputs_make_unique": [
                    "self"
                ],
                "remap_outputs_to_consumers": [
                    "self"
                ],
                "_remove_unused_ops": [
                    "self",
                    "control_inputs"
                ],
                "remove_unused_ops": [
                    "self",
                    "control_inputs"
                ],
                "remap_inputs": [
                    "self",
                    "new_input_indices"
                ],
                "remap_outputs": [
                    "self",
                    "new_output_indices"
                ],
                "remap": [
                    "self",
                    "new_input_indices",
                    "new_output_indices"
                ],
                "find_op_by_name": [
                    "self",
                    "op_name"
                ],
                "__str__": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "ops": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "connected_inputs": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "connected_outputs": [
                    "self"
                ],
                "passthroughs": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "op": [
                    "self",
                    "op_id"
                ],
                "is_passthrough": [
                    "self",
                    "t"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "input_index": [
                    "self",
                    "t"
                ],
                "output_index": [
                    "self",
                    "t"
                ],
                "consumers": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.graph_editor.select": {
            "can_be_regex": [
                "obj"
            ],
            "make_regex": [
                "obj"
            ],
            "_get_input_ts": [
                "ops"
            ],
            "_get_output_ts": [
                "ops"
            ],
            "filter_ts": [
                "ops",
                "positive_filter"
            ],
            "filter_ts_from_regex": [
                "ops",
                "regex"
            ],
            "filter_ops": [
                "ops",
                "positive_filter"
            ],
            "filter_ops_from_regex": [
                "ops",
                "regex"
            ],
            "get_name_scope_ops": [
                "ops",
                "scope"
            ],
            "check_cios": [
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_ops_ios": [
                "ops",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "compute_boundary_ts": [
                "ops"
            ],
            "get_within_boundary_ops": [
                "ops",
                "seed_ops",
                "boundary_ops",
                "inclusive",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_forward_walk_ops": [
                "seed_ops",
                "inclusive",
                "within_ops",
                "within_ops_fn",
                "stop_at_ts",
                "control_outputs"
            ],
            "get_backward_walk_ops": [
                "seed_ops",
                "inclusive",
                "within_ops",
                "within_ops_fn",
                "stop_at_ts",
                "control_inputs"
            ],
            "get_walks_intersection_ops": [
                "forward_seed_ops",
                "backward_seed_ops",
                "forward_inclusive",
                "backward_inclusive",
                "within_ops",
                "within_ops_fn",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_walks_union_ops": [
                "forward_seed_ops",
                "backward_seed_ops",
                "forward_inclusive",
                "backward_inclusive",
                "within_ops",
                "within_ops_fn",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "select_ops": [],
            "select_ts": [],
            "select_ops_and_ts": []
        },
        "tensorflow_core.contrib.graph_editor": {},
        "tensorflow_core.contrib.graph_editor.tests.match": {
            "_make_graph_match": [
                "graph_match"
            ],
            "op_type": [
                "op_types",
                "op"
            ],
            "OpMatcher": {
                "__init__": [
                    "self",
                    "positive_filter"
                ],
                "_finalize_positive_filter": [
                    "self",
                    "elem"
                ],
                "__call__": [
                    "self",
                    "op"
                ],
                "input_ops": [
                    "self"
                ],
                "control_input_ops": [
                    "self"
                ],
                "output_ops": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.graph_editor.tests": {},
        "tensorflow_core.contrib.libsvm": {},
        "tensorflow_core.contrib.libsvm.ops.gen_libsvm_ops": {
            "decode_libsvm": [
                "input",
                "num_features",
                "dtype",
                "label_dtype",
                "name"
            ],
            "DecodeLibsvm": [
                "input",
                "num_features",
                "dtype",
                "label_dtype",
                "name"
            ],
            "decode_libsvm_eager_fallback": [
                "input",
                "num_features",
                "dtype",
                "label_dtype",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.libsvm.ops": {},
        "tensorflow_core.contrib.libsvm.python": {},
        "tensorflow_core.contrib.libsvm.python.ops.libsvm_ops": {
            "decode_libsvm": [
                "content",
                "num_features",
                "dtype",
                "label_dtype"
            ]
        },
        "tensorflow_core.contrib.libsvm.python.ops": {},
        "tensorflow_core.contrib.framework": {},
        "tensorflow_core.contrib.framework.python": {},
        "tensorflow_core.contrib.framework.python.ops.prettyprint_ops": {
            "_get_tensor_repr": [
                "t",
                "print_tensor_name",
                "print_tensor_type",
                "print_shape",
                "summarize_indicator_vector"
            ],
            "print_op": [
                "input_",
                "data",
                "message",
                "first_n",
                "summarize",
                "print_tensor_name",
                "print_tensor_type",
                "print_shape",
                "summarize_indicator_vector",
                "name"
            ]
        },
        "tensorflow_core.contrib.framework.python.ops.variables": {
            "zero_initializer": [
                "ref",
                "use_locking",
                "name"
            ],
            "assert_global_step": [
                "global_step_tensor"
            ],
            "assert_or_get_global_step": [
                "graph",
                "global_step_tensor"
            ],
            "get_global_step": [
                "graph"
            ],
            "create_global_step": [
                "graph"
            ],
            "get_or_create_global_step": [
                "graph"
            ],
            "local_variable": [
                "initial_value",
                "validate_shape",
                "name",
                "use_resource"
            ],
            "global_variable": [
                "initial_value",
                "validate_shape",
                "name",
                "use_resource"
            ],
            "variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "device",
                "partitioner",
                "custom_getter",
                "use_resource",
                "synchronization",
                "aggregation"
            ],
            "model_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "device",
                "partitioner",
                "custom_getter",
                "use_resource",
                "synchronization",
                "aggregation"
            ],
            "add_model_variable": [
                "var"
            ],
            "get_variables": [
                "scope",
                "suffix",
                "collection"
            ],
            "get_model_variables": [
                "scope",
                "suffix"
            ],
            "get_local_variables": [
                "scope",
                "suffix"
            ],
            "get_trainable_variables": [
                "scope",
                "suffix"
            ],
            "get_variables_to_restore": [
                "include",
                "exclude"
            ],
            "get_variables_by_suffix": [
                "suffix",
                "scope"
            ],
            "get_variables_by_name": [
                "given_name",
                "scope"
            ],
            "get_unique_variable": [
                "var_op_name"
            ],
            "assign_from_values": [
                "var_names_to_values"
            ],
            "assign_from_values_fn": [
                "var_names_to_values"
            ],
            "get_variable_full_name": [
                "var"
            ],
            "assign_from_checkpoint": [
                "model_path",
                "var_list",
                "ignore_missing_vars"
            ],
            "assign_from_checkpoint_fn": [
                "model_path",
                "var_list",
                "ignore_missing_vars",
                "reshape_variables"
            ],
            "filter_variables": [
                "var_list",
                "include_patterns",
                "exclude_patterns",
                "reg_search"
            ],
            "VariableDeviceChooser": {
                "__init__": [
                    "self",
                    "num_tasks",
                    "job_name",
                    "device_type",
                    "device_index",
                    "replica"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow_core.contrib.framework.python.ops.sort_ops": {},
        "tensorflow_core.contrib.framework.python.ops.gen_variable_ops": {
            "zero_initializer": [
                "ref",
                "name"
            ],
            "ZeroInitializer": [
                "ref",
                "name"
            ],
            "zero_initializer_eager_fallback": [
                "ref",
                "name",
                "ctx"
            ],
            "zero_var_initializer": [
                "var",
                "dtype",
                "shape",
                "name"
            ],
            "ZeroVarInitializer": [
                "var",
                "dtype",
                "shape",
                "name"
            ],
            "zero_var_initializer_eager_fallback": [
                "var",
                "dtype",
                "shape",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.framework.python.ops.arg_scope": {
            "_get_arg_stack": [],
            "current_arg_scope": [],
            "arg_scope_func_key": [
                "op"
            ],
            "_name_op": [
                "op"
            ],
            "_kwarg_names": [
                "func"
            ],
            "_add_op": [
                "op"
            ],
            "arg_scope": [
                "list_ops_or_scope"
            ],
            "add_arg_scope": [
                "func"
            ],
            "has_arg_scope": [
                "func"
            ],
            "arg_scoped_arguments": [
                "func"
            ]
        },
        "tensorflow_core.contrib.framework.python.ops.audio_ops": {},
        "tensorflow_core.contrib.framework.python.ops.ops": {
            "get_graph_from_inputs": [
                "op_input_list",
                "graph"
            ],
            "get_name_scope": []
        },
        "tensorflow_core.contrib.framework.python.ops.script_ops": {
            "py_func": [
                "func",
                "args",
                "kwargs",
                "output_types",
                "output_shapes",
                "stateful",
                "name"
            ]
        },
        "tensorflow_core.contrib.framework.python.ops.checkpoint_ops": {
            "load_linear_multiclass_bias_initializer": [
                "ckpt_path",
                "bias_tensor_name",
                "new_class_vocab_size",
                "old_class_vocab_file",
                "new_class_vocab_file",
                "num_class_oov_buckets",
                "initializer",
                "max_rows_in_memory"
            ],
            "load_variable_slot_initializer": [
                "ckpt_path",
                "old_tensor_name",
                "primary_partition_info",
                "new_row_vocab_size",
                "new_col_vocab_size",
                "old_row_vocab_file",
                "new_row_vocab_file",
                "old_col_vocab_file",
                "new_col_vocab_file",
                "num_row_oov_buckets",
                "num_col_oov_buckets",
                "initializer",
                "max_rows_in_memory"
            ]
        },
        "tensorflow_core.contrib.framework.python.ops": {},
        "tensorflow_core.contrib.framework.python.framework.experimental": {
            "_add_experimental_function_notice_to_docstring": [
                "doc"
            ],
            "experimental": [
                "func"
            ]
        },
        "tensorflow_core.contrib.framework.python.framework.tensor_util": {
            "reduce_sum_n": [
                "tensors",
                "name"
            ],
            "remove_squeezable_dimensions": [
                "predictions",
                "labels",
                "name"
            ],
            "_shape_tensor_compatible": [
                "expected_shape",
                "actual_shape"
            ],
            "_is_rank": [
                "expected_rank",
                "actual_tensor"
            ],
            "_is_shape": [
                "expected_shape",
                "actual_tensor",
                "actual_shape"
            ],
            "_assert_shape_op": [
                "expected_shape",
                "actual_tensor"
            ],
            "with_same_shape": [
                "expected_tensor",
                "tensor"
            ],
            "with_shape": [
                "expected_shape",
                "tensor"
            ],
            "assert_scalar_int": [
                "tensor",
                "name"
            ]
        },
        "tensorflow_core.contrib.framework.python.framework.checkpoint_utils": {
            "_get_checkpoint_filename": [
                "filepattern"
            ],
            "load_checkpoint": [
                "filepattern"
            ],
            "load_variable": [
                "checkpoint_dir",
                "name"
            ],
            "list_variables": [
                "checkpoint_dir"
            ],
            "_set_checkpoint_initializer": [
                "variable",
                "file_pattern",
                "tensor_name",
                "slice_spec",
                "name"
            ],
            "_set_variable_or_list_initializer": [
                "variable_or_list",
                "file_pattern",
                "tensor_name"
            ],
            "_collect_partitioned_variable": [
                "name",
                "var_scope"
            ],
            "init_from_checkpoint": [
                "checkpoint_dir",
                "assignment_map"
            ]
        },
        "tensorflow_core.contrib.framework.python.framework.graph_util": {
            "fuse_op": [
                "graph_def",
                "input_nodes",
                "output_nodes",
                "output_dtypes",
                "output_quantized",
                "op_name",
                "op_type"
            ],
            "get_placeholders": [
                "graph"
            ]
        },
        "tensorflow_core.contrib.framework.python.framework": {},
        "tensorflow_core.contrib.meta_graph_transform.meta_graph_transform": {
            "_op_name": [
                "tensor_name"
            ],
            "_get_shared_init_op": [
                "initializer_names"
            ],
            "_gtt_transforms": [
                "graph_def",
                "input_names",
                "output_names",
                "initializer_names",
                "transforms"
            ],
            "_freeze_transform": [
                "graph_def",
                "output_names",
                "initializer_names",
                "saver_def",
                "checkpoint_path"
            ],
            "_clean_save_and_restore": [
                "graph_def",
                "op",
                "removed_op_names"
            ],
            "_sparsify_gather_transform": [
                "graph_def",
                "input_names",
                "output_names",
                "initializer_names",
                "checkpoint_path"
            ],
            "_do_transforms": [
                "graph_def",
                "input_names",
                "output_names",
                "initializer_names",
                "transforms",
                "saver_def",
                "checkpoint_path"
            ],
            "_connect_to_shared_init_op": [
                "graph_def",
                "shared_init_op_name",
                "nodes_to_connect"
            ],
            "_freeze_graph_with_def_protos": [
                "input_graph_def",
                "output_node_names",
                "initializer_names",
                "shared_init_op_name",
                "input_saver_def",
                "input_checkpoint"
            ],
            "_find_all_mandatory_retain_ops": [
                "base_meta_graph_def"
            ],
            "_add_pruned_collection": [
                "base_meta_graph_def",
                "meta_graph_def",
                "collection_name",
                "removed_op_names"
            ],
            "_add_pruned_saver": [
                "base_meta_graph_def",
                "meta_graph_def",
                "removed_op_names"
            ],
            "_find_op": [
                "graph_def",
                "op_name"
            ],
            "_add_pruned_signature": [
                "base_meta_graph_def",
                "meta_graph_def",
                "signature_name",
                "removed_op_names"
            ],
            "_get_single_node_name_from_collection": [
                "meta_graph_def",
                "collection_key"
            ],
            "_get_all_node_names_from_collection": [
                "meta_graph_def",
                "collection_key"
            ],
            "_get_all_protos_from_collection": [
                "meta_graph_def",
                "collection_key"
            ],
            "_is_removed": [
                "tensor_name",
                "removed_op_names"
            ],
            "_is_removed_mentioned": [
                "s",
                "removed_op_names"
            ],
            "_check_tensor_not_removed": [
                "tensor_name",
                "removed_op_names"
            ],
            "_add_new_inits_to_collection": [
                "meta_graph_def",
                "updated_initializer_names"
            ],
            "meta_graph_transform": [
                "base_meta_graph_def",
                "input_names",
                "output_names",
                "transforms",
                "tags",
                "checkpoint_path"
            ]
        },
        "tensorflow_core.contrib.meta_graph_transform": {},
        "tensorflow_core.contrib.tfprof.model_analyzer": {
            "advise": [
                "graph",
                "run_meta",
                "tfprof_options"
            ],
            "print_model_analysis": [
                "graph",
                "run_meta",
                "op_log",
                "tfprof_cmd",
                "tfprof_options"
            ]
        },
        "tensorflow_core.contrib.tfprof.tfprof_logger": {
            "write_op_log": [
                "graph",
                "log_dir",
                "op_log",
                "run_meta",
                "add_trace"
            ]
        },
        "tensorflow_core.contrib.tfprof": {},
        "tensorflow_core.contrib.predictor.core_estimator_predictor": {
            "_get_signature_def": [
                "serving_input_receiver",
                "estimator",
                "output_key"
            ],
            "CoreEstimatorPredictor": {
                "__init__": [
                    "self",
                    "estimator",
                    "serving_input_receiver_fn",
                    "output_key",
                    "graph",
                    "config"
                ]
            }
        },
        "tensorflow_core.contrib.predictor.contrib_estimator_predictor": {
            "ContribEstimatorPredictor": {
                "__init__": [
                    "self",
                    "estimator",
                    "prediction_input_fn",
                    "input_alternative_key",
                    "output_alternative_key",
                    "graph",
                    "config"
                ]
            }
        },
        "tensorflow_core.contrib.predictor.predictor": {
            "Predictor": {
                "graph": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "feed_tensors": [
                    "self"
                ],
                "fetch_tensors": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_dict"
                ]
            }
        },
        "tensorflow_core.contrib.predictor.predictor_factories": {
            "from_contrib_estimator": [
                "estimator",
                "prediction_input_fn",
                "input_alternative_key",
                "output_alternative_key",
                "graph",
                "config"
            ],
            "from_estimator": [
                "estimator",
                "serving_input_receiver_fn",
                "output_key",
                "graph",
                "config"
            ],
            "from_saved_model": [
                "export_dir",
                "signature_def_key",
                "signature_def",
                "input_names",
                "output_names",
                "tags",
                "graph",
                "config"
            ]
        },
        "tensorflow_core.contrib.predictor.saved_model_predictor": {
            "get_meta_graph_def": [
                "saved_model_dir",
                "tags"
            ],
            "_get_signature_def": [
                "signature_def_key",
                "export_dir",
                "tags"
            ],
            "_check_signature_arguments": [
                "signature_def_key",
                "signature_def",
                "input_names",
                "output_names"
            ],
            "SavedModelPredictor": {
                "__init__": [
                    "self",
                    "export_dir",
                    "signature_def_key",
                    "signature_def",
                    "input_names",
                    "output_names",
                    "tags",
                    "graph",
                    "config"
                ]
            }
        },
        "tensorflow_core.contrib.predictor": {},
        "tensorflow_core.contrib.solvers": {},
        "tensorflow_core.contrib.solvers.python": {},
        "tensorflow_core.contrib.solvers.python.ops.lanczos": {
            "lanczos_bidiag": [
                "operator",
                "k",
                "orthogonalize",
                "starting_vector",
                "name"
            ],
            "bidiag_matmul": [
                "matrix",
                "alpha",
                "beta",
                "adjoint_b",
                "name"
            ]
        },
        "tensorflow_core.contrib.solvers.python.ops.least_squares": {
            "cgls": [
                "operator",
                "rhs",
                "tol",
                "max_iter",
                "name"
            ]
        },
        "tensorflow_core.contrib.solvers.python.ops.linear_equations": {
            "conjugate_gradient": [
                "operator",
                "rhs",
                "preconditioner",
                "x",
                "tol",
                "max_iter",
                "name"
            ]
        },
        "tensorflow_core.contrib.solvers.python.ops.util": {
            "create_operator": [
                "matrix"
            ],
            "identity_operator": [
                "matrix"
            ],
            "dot": [
                "x",
                "y"
            ],
            "l2norm_squared": [
                "v"
            ],
            "l2norm": [
                "v"
            ],
            "l2normalize": [
                "v"
            ]
        },
        "tensorflow_core.contrib.solvers.python.ops": {},
        "tensorflow_core.contrib.nn": {},
        "tensorflow_core.contrib.nn.python": {},
        "tensorflow_core.contrib.nn.python.ops.cross_entropy": {
            "deprecated_flipped_softmax_cross_entropy_with_logits": [
                "logits",
                "labels",
                "dim",
                "name"
            ],
            "deprecated_flipped_sparse_softmax_cross_entropy_with_logits": [
                "logits",
                "labels",
                "name"
            ],
            "deprecated_flipped_sigmoid_cross_entropy_with_logits": [
                "logits",
                "targets",
                "name"
            ]
        },
        "tensorflow_core.contrib.nn.python.ops.scaled_softplus": {
            "_reduce_and_reshape_grad": [
                "g",
                "t"
            ],
            "scaled_softplus": [
                "x",
                "alpha",
                "clip",
                "name"
            ]
        },
        "tensorflow_core.contrib.nn.python.ops.fwd_gradients": {
            "fwd_gradients": [
                "ys",
                "xs",
                "grad_xs",
                "assert_unused"
            ]
        },
        "tensorflow_core.contrib.nn.python.ops.alpha_dropout": {
            "alpha_dropout": [
                "x",
                "keep_prob",
                "noise_shape",
                "seed",
                "name"
            ]
        },
        "tensorflow_core.contrib.nn.python.ops.sampling_ops": {
            "_rank_resample": [
                "weights",
                "biases",
                "inputs",
                "sampled_values",
                "num_resampled",
                "resampling_temperature",
                "partition_strategy"
            ],
            "rank_sampled_softmax_loss": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_resampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "resampling_temperature",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ],
            "sampled_sparse_softmax_loss": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "sampled_values",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ]
        },
        "tensorflow_core.contrib.nn.python.ops": {},
        "tensorflow_core.contrib.integrate": {},
        "tensorflow_core.contrib.integrate.python": {},
        "tensorflow_core.contrib.integrate.python.ops.odes": {
            "_possibly_nonzero": [
                "x"
            ],
            "_scaled_dot_product": [
                "scale",
                "xs",
                "ys",
                "name"
            ],
            "_dot_product": [
                "xs",
                "ys",
                "name"
            ],
            "_runge_kutta_step": [
                "func",
                "y0",
                "f0",
                "t0",
                "dt",
                "tableau",
                "name"
            ],
            "_interp_fit": [
                "y0",
                "y1",
                "y_mid",
                "f0",
                "f1",
                "dt"
            ],
            "_interp_fit_rk": [
                "y0",
                "y1",
                "k",
                "dt",
                "tableau"
            ],
            "_interp_evaluate": [
                "coefficients",
                "t0",
                "t1",
                "t"
            ],
            "_optimal_step_size": [
                "last_step",
                "error_ratio",
                "safety",
                "ifactor",
                "dfactor",
                "order",
                "name"
            ],
            "_abs_square": [
                "x"
            ],
            "_ta_append": [
                "tensor_array",
                "value"
            ],
            "_assert_increasing": [
                "t"
            ],
            "_check_input_types": [
                "y0",
                "t",
                "dt"
            ],
            "_check_input_sizes": [
                "t",
                "dt"
            ],
            "_dopri5": [
                "func",
                "y0",
                "t",
                "rtol",
                "atol",
                "full_output",
                "first_step",
                "safety",
                "ifactor",
                "dfactor",
                "max_num_steps",
                "name"
            ],
            "odeint": [
                "func",
                "y0",
                "t",
                "rtol",
                "atol",
                "method",
                "options",
                "full_output",
                "name"
            ],
            "odeint_fixed": [
                "func",
                "y0",
                "t",
                "dt",
                "method",
                "name"
            ],
            "_RungeKuttaState": {},
            "_History": {},
            "_FixedGridIntegrator": {
                "integrate": [
                    "self",
                    "evol_func",
                    "y0",
                    "time_grid",
                    "dt_grid",
                    "steps_on_intervals"
                ],
                "_make_iteration_func": [
                    "self",
                    "evol_func",
                    "dt_grid"
                ],
                "_make_interval_integrator": [
                    "self",
                    "iteration_func",
                    "interval_sizes"
                ],
                "_step_func": [
                    "self",
                    "evol_func",
                    "t",
                    "dt",
                    "y"
                ]
            },
            "_MidpointFixedGridIntegrator": {
                "_step_func": [
                    "self",
                    "evol_func",
                    "t",
                    "dt",
                    "y"
                ]
            },
            "_RK4FixedGridIntegrator": {
                "_step_func": [
                    "self",
                    "evol_func",
                    "t",
                    "dt",
                    "y"
                ]
            }
        },
        "tensorflow_core.contrib.integrate.python.ops": {},
        "tensorflow_core.contrib.optimizer_v2.gradient_descent": {
            "GradientDescentOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "use_locking",
                    "name"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle",
                    "state"
                ],
                "_resource_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "handle",
                    "indices",
                    "state"
                ],
                "_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.optimizer_v2.adam": {
            "AdamOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_get_beta_accumulators": [
                    "self",
                    "state"
                ],
                "_create_vars": [
                    "self",
                    "var_list",
                    "state"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_apply_sparse_shared": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "scatter_add",
                    "state"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_scatter_add": [
                    "self",
                    "x",
                    "i",
                    "v"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "state"
                ],
                "_finish": [
                    "self",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.optimizer_v2.adadelta": {
            "AdadeltaOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "rho",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_create_vars": [
                    "self",
                    "var_list",
                    "state"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.optimizer_v2.optimizer_v2_symbols": {},
        "tensorflow_core.contrib.optimizer_v2.adagrad": {
            "AdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "use_locking",
                    "name"
                ],
                "_create_vars": [
                    "self",
                    "var_list",
                    "state"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.optimizer_v2.optimizer_v2": {
            "_get_processor": [
                "v"
            ],
            "_var_key_v2": [
                "var"
            ],
            "_resolve": [
                "value",
                "name"
            ],
            "_is_dynamic": [
                "value"
            ],
            "_OptimizableVariable": {
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_RefVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_DenseReadResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_DenseResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_TensorProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_OptimizerV2State": {
                "__init__": [
                    "self",
                    "op_name"
                ],
                "_init_with_static_hyper": [
                    "self",
                    "hyper"
                ],
                "_copy_with_dynamic_hyper": [
                    "self",
                    "hyper",
                    "distribution",
                    "non_slot_devices"
                ],
                "_variables": [
                    "self"
                ],
                "_slot_dict": [
                    "self",
                    "slot_name"
                ],
                "create_slot": [
                    "self",
                    "var",
                    "val",
                    "slot_name",
                    "optional_op_name"
                ],
                "create_slot_with_initializer": [
                    "self",
                    "var",
                    "initializer",
                    "shape",
                    "dtype",
                    "slot_name",
                    "optional_op_name"
                ],
                "zeros_slot": [
                    "self",
                    "var",
                    "slot_name",
                    "optional_op_name"
                ],
                "_create_or_restore_slot_variable": [
                    "self",
                    "slot_variable_position",
                    "slot_name",
                    "variable",
                    "optional_op_name"
                ],
                "get_slot": [
                    "self",
                    "var",
                    "name"
                ],
                "get_slot_names": [
                    "self"
                ],
                "create_non_slot": [
                    "self",
                    "initial_value",
                    "name",
                    "colocate_with"
                ],
                "_restore_slot_variable": [
                    "self",
                    "slot_name",
                    "variable",
                    "slot_variable"
                ],
                "get_non_slot": [
                    "self",
                    "name"
                ],
                "get_hyper": [
                    "self",
                    "name",
                    "dtype"
                ]
            },
            "OptimizerV2": {
                "__init__": [
                    "self",
                    "use_locking",
                    "name"
                ],
                "_set_hyper": [
                    "self",
                    "name",
                    "value"
                ],
                "minimize": [
                    "self",
                    "loss",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "name",
                    "grad_loss",
                    "stop_gradients",
                    "scale_loss_by_num_replicas"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "grad_loss",
                    "stop_gradients",
                    "scale_loss_by_num_replicas"
                ],
                "_scale_loss": [
                    "loss_value",
                    "scale_loss_by_num_replicas"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_get_or_create_state": [
                    "self",
                    "var_list"
                ],
                "_distributed_apply": [
                    "self",
                    "distribution",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_slot": [
                    "self",
                    "var",
                    "name"
                ],
                "get_slot_names": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "_create_vars": [
                    "self",
                    "var_list",
                    "state"
                ],
                "_prepare": [
                    "self",
                    "state"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle",
                    "state"
                ],
                "_resource_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "handle",
                    "indices",
                    "state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "handle",
                    "indices",
                    "state"
                ],
                "_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_finish": [
                    "self",
                    "state"
                ],
                "_get_per_graph_state": [
                    "self"
                ],
                "_get_state_for_var": [
                    "self",
                    "var"
                ],
                "_track_trackable": [
                    "self"
                ],
                "_checkpoint_dependencies": [
                    "self"
                ],
                "_lookup_dependency": [
                    "self",
                    "name"
                ],
                "_deferred_dependencies": [
                    "self"
                ],
                "_create_or_restore_slot_variable": [
                    "self",
                    "slot_variable_position",
                    "slot_name",
                    "variable"
                ],
                "_slot_dict": [
                    "self",
                    "slot_name"
                ],
                "_get_or_make_slot": [
                    "self",
                    "var",
                    "val",
                    "slot_name",
                    "op_name"
                ],
                "_get_or_make_slot_with_initializer": [
                    "self",
                    "var",
                    "initializer",
                    "shape",
                    "dtype",
                    "slot_name",
                    "op_name"
                ],
                "_create_non_slot_variable": [
                    "self",
                    "initial_value",
                    "name",
                    "colocate_with"
                ],
                "_get_non_slot_variable": [
                    "self",
                    "name",
                    "graph"
                ],
                "_non_slot_variables": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.optimizer_v2.momentum": {
            "MomentumOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "momentum",
                    "use_locking",
                    "name",
                    "use_nesterov"
                ],
                "_create_vars": [
                    "self",
                    "var_list",
                    "state"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.optimizer_v2.rmsprop": {
            "RMSPropOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "decay",
                    "momentum",
                    "epsilon",
                    "use_locking",
                    "centered",
                    "name"
                ],
                "_create_vars": [
                    "self",
                    "var_list",
                    "state"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.optimizer_v2": {},
        "tensorflow_core.contrib.util.loader": {
            "load_op_library": [
                "path"
            ]
        },
        "tensorflow_core.contrib.util": {},
        "tensorflow_core.contrib.remote_fused_graph": {},
        "tensorflow_core.contrib.remote_fused_graph.pylib": {},
        "tensorflow_core.contrib.remote_fused_graph.pylib.python": {},
        "tensorflow_core.contrib.remote_fused_graph.pylib.python.ops.remote_fused_graph_ops_test": {
            "RemoteFusedGraphExecuteTest": {
                "testBuild": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.remote_fused_graph.pylib.python.ops.remote_fused_graph_ops": {
            "remote_fused_graph_execute": [
                "inputs",
                "output_types",
                "graph_def",
                "graph_input_node_names",
                "graph_output_node_names",
                "executor_name",
                "serialized_executor_parameters",
                "default_graph_input_tensor_type_shapes",
                "default_graph_output_tensor_type_shapes"
            ]
        },
        "tensorflow_core.contrib.remote_fused_graph.pylib.python.ops.gen_remote_fused_graph_ops": {
            "remote_fused_graph_execute": [
                "inputs",
                "Toutputs",
                "serialized_remote_fused_graph_execute_info",
                "name"
            ],
            "RemoteFusedGraphExecute": [
                "inputs",
                "Toutputs",
                "serialized_remote_fused_graph_execute_info",
                "name"
            ],
            "remote_fused_graph_execute_eager_fallback": [
                "inputs",
                "Toutputs",
                "serialized_remote_fused_graph_execute_info",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.remote_fused_graph.pylib.python.ops": {},
        "tensorflow_core.contrib.staging": {},
        "tensorflow_core.contrib.all_reduce": {},
        "tensorflow_core.contrib.all_reduce.python.all_reduce": {},
        "tensorflow_core.contrib.all_reduce.python": {},
        "tensorflow_core.contrib.model_pruning": {},
        "tensorflow_core.contrib.model_pruning.python.learning": {
            "train": [
                "train_op",
                "logdir",
                "mask_update_op",
                "train_step_fn",
                "train_step_kwargs",
                "log_every_n_steps",
                "graph",
                "master",
                "is_chief",
                "global_step",
                "number_of_steps",
                "init_op",
                "init_feed_dict",
                "local_init_op",
                "init_fn",
                "ready_op",
                "summary_op",
                "save_summaries_secs",
                "summary_writer",
                "startup_delay_steps",
                "saver",
                "save_interval_secs",
                "sync_optimizer",
                "session_config",
                "trace_every_n_steps"
            ]
        },
        "tensorflow_core.contrib.model_pruning.python.pruning_utils": {
            "weight_mask_variable": [
                "var",
                "scope"
            ],
            "weight_threshold_variable": [
                "var",
                "scope"
            ],
            "kronecker_product": [
                "mat1",
                "mat2"
            ],
            "expand_tensor": [
                "tensor",
                "block_dims"
            ],
            "factorized_pool": [
                "input_tensor",
                "window_shape",
                "pooling_type",
                "strides",
                "padding",
                "name"
            ],
            "determine_partitioned_axis": [
                "partitioned_variable"
            ],
            "variable_assign": [
                "var",
                "new_value"
            ],
            "partitioned_variable_assign": [
                "partitioned_var",
                "new_value"
            ]
        },
        "tensorflow_core.contrib.model_pruning.python.strip_pruning_vars_lib": {
            "_node_name": [
                "tensor_name"
            ],
            "_tensor_name": [
                "node_name"
            ],
            "_get_masked_weights": [
                "input_graph_def"
            ],
            "strip_pruning_vars_fn": [
                "input_graph_def",
                "output_node_names"
            ],
            "graph_def_from_checkpoint": [
                "checkpoint_dir",
                "output_node_names"
            ]
        },
        "tensorflow_core.contrib.model_pruning.python.pruning": {
            "apply_mask": [
                "x",
                "scope"
            ],
            "get_masked_weights": [],
            "get_masks": [],
            "get_thresholds": [],
            "get_weights": [],
            "get_weight_sparsity": [],
            "get_pruning_hparams": [],
            "Pruning": {
                "__init__": [
                    "self",
                    "spec",
                    "global_step",
                    "sparsity"
                ],
                "_validate_spec": [
                    "self"
                ],
                "_setup_global_step": [
                    "self",
                    "global_step"
                ],
                "_setup_sparsity": [
                    "self"
                ],
                "_setup_last_update_step": [
                    "self"
                ],
                "_get_block_dims_map": [
                    "self"
                ],
                "_get_block_dims": [
                    "self",
                    "weight_name"
                ],
                "_get_weight_sparsity_map": [
                    "self"
                ],
                "_get_sparsity": [
                    "self",
                    "weight_name"
                ],
                "_update_mask": [
                    "self",
                    "weights",
                    "threshold"
                ],
                "_maybe_update_block_mask": [
                    "self",
                    "weights",
                    "threshold"
                ],
                "_get_mask_assign_ops": [
                    "self"
                ],
                "mask_update_op": [
                    "self"
                ],
                "conditional_mask_update_op": [
                    "self"
                ],
                "add_pruning_summaries": [
                    "self"
                ],
                "print_hparams": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.model_pruning.python": {},
        "tensorflow_core.contrib.model_pruning.python.layers.layers": {
            "_model_variable_getter": [
                "getter",
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "rename",
                "use_resource"
            ],
            "_build_variable_getter": [
                "rename"
            ],
            "_add_variable_to_collections": [
                "variable",
                "collections_set",
                "collections_name"
            ],
            "masked_convolution": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "masked_fully_connected": [
                "inputs",
                "num_outputs",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ]
        },
        "tensorflow_core.contrib.model_pruning.python.layers.rnn_cells": {
            "MaskedBasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "state_is_tuple",
                    "activation",
                    "reuse",
                    "name"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "MaskedLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation",
                    "reuse"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.model_pruning.python.layers.core_layers": {
            "_MaskedConv": {
                "__init__": [
                    "self",
                    "rank",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            },
            "MaskedConv2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ]
            },
            "MaskedFullyConnected": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            }
        },
        "tensorflow_core.contrib.model_pruning.python.layers": {},
        "tensorflow_core.contrib.timeseries": {},
        "tensorflow_core.contrib.timeseries.examples.predict": {
            "structural_ensemble_train_and_predict": [
                "csv_file_name"
            ],
            "ar_train_and_predict": [
                "csv_file_name"
            ],
            "train_and_predict": [
                "estimator",
                "csv_file_name",
                "training_steps"
            ],
            "make_plot": [
                "name",
                "training_times",
                "observed",
                "all_times",
                "mean",
                "upper_limit",
                "lower_limit"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow_core.contrib.timeseries.examples.known_anomaly": {
            "state_space_estimator": [
                "exogenous_feature_columns"
            ],
            "autoregressive_estimator": [
                "exogenous_feature_columns"
            ],
            "train_and_evaluate_exogenous": [
                "estimator_fn",
                "csv_file_name",
                "train_steps"
            ],
            "make_plot": [
                "name",
                "training_times",
                "observed",
                "all_times",
                "mean",
                "upper_limit",
                "lower_limit",
                "anomaly_locations"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow_core.contrib.timeseries.examples.lstm": {
            "train_and_predict": [
                "csv_file_name",
                "training_steps",
                "estimator_config",
                "export_directory"
            ],
            "main": [
                "unused_argv"
            ],
            "_LSTMModel": {
                "__init__": [
                    "self",
                    "num_units",
                    "num_features",
                    "exogenous_feature_columns",
                    "dtype"
                ],
                "initialize_graph": [
                    "self",
                    "input_statistics"
                ],
                "get_start_state": [
                    "self"
                ],
                "_filtering_step": [
                    "self",
                    "current_times",
                    "current_values",
                    "state",
                    "predictions"
                ],
                "_prediction_step": [
                    "self",
                    "current_times",
                    "state"
                ],
                "_imputation_step": [
                    "self",
                    "current_times",
                    "state"
                ],
                "_exogenous_input_step": [
                    "self",
                    "current_times",
                    "current_exogenous_regressors",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.examples.multivariate": {
            "multivariate_train_and_sample": [
                "csv_file_name",
                "export_directory",
                "training_steps"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow_core.contrib.timeseries.examples": {},
        "tensorflow_core.contrib.timeseries.python": {},
        "tensorflow_core.contrib.timeseries.python.timeseries.saved_model_utils": {
            "_colate_features_to_feeds_and_fetches": [
                "signature",
                "features",
                "graph",
                "continue_from"
            ],
            "predict_continuation": [
                "continue_from",
                "signatures",
                "session",
                "steps",
                "times",
                "exogenous_features"
            ],
            "cold_start_filter": [
                "signatures",
                "session",
                "features"
            ],
            "filter_continuation": [
                "continue_from",
                "signatures",
                "session",
                "features"
            ]
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.head": {
            "_check_feature_shapes_compatible_with": [
                "features",
                "compatible_with_name",
                "compatible_with_value",
                "ignore"
            ],
            "_check_train_eval_features": [
                "features",
                "model"
            ],
            "_identity_metric_single": [
                "name",
                "input_tensor"
            ],
            "_identity_metric_nested": [
                "name",
                "input_tensors"
            ],
            "state_to_dictionary": [
                "state_tuple"
            ],
            "_NoStatePredictOutput": {
                "as_signature_def": [
                    "self",
                    "receiver_tensors"
                ]
            },
            "TimeSeriesRegressionHead": {
                "__init__": [
                    "self",
                    "model",
                    "state_manager",
                    "optimizer",
                    "input_statistics_generator",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "create_loss": [
                    "self",
                    "features",
                    "mode",
                    "logits",
                    "labels"
                ],
                "logits_dimension": [
                    "self"
                ],
                "_train_ops": [
                    "self",
                    "features"
                ],
                "_evaluate_ops": [
                    "self",
                    "features"
                ],
                "_predict_ops": [
                    "self",
                    "features"
                ],
                "_serving_ops": [
                    "self",
                    "features"
                ],
                "_convert_feature_to_tensor": [
                    "self",
                    "name",
                    "value"
                ],
                "_gather_state": [
                    "self",
                    "features"
                ],
                "_check_predict_features": [
                    "self",
                    "features"
                ],
                "create_estimator_spec": [
                    "self",
                    "features",
                    "mode",
                    "labels"
                ]
            },
            "OneShotPredictionHead": {
                "_check_predict_features": [
                    "self",
                    "features"
                ],
                "_evaluate_ops": [
                    "self",
                    "features"
                ],
                "_serving_ops": [
                    "self",
                    "features"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.input_pipeline": {
            "predict_continuation_input_fn": [
                "evaluation",
                "steps",
                "times",
                "exogenous_features"
            ],
            "_canonicalize_numpy_data": [
                "data",
                "require_single_batch"
            ],
            "TimeSeriesReader": {
                "check_dataset_size": [
                    "self",
                    "minimum_dataset_size"
                ],
                "read": [
                    "self"
                ],
                "read_full": [
                    "self"
                ]
            },
            "NumpyReader": {
                "__init__": [
                    "self",
                    "data",
                    "read_num_records_hint"
                ],
                "check_dataset_size": [
                    "self",
                    "minimum_dataset_size"
                ],
                "read": [
                    "self"
                ],
                "read_full": [
                    "self"
                ]
            },
            "ReaderBaseTimeSeriesParser": {
                "__init__": [
                    "self",
                    "filenames",
                    "read_num_records_hint"
                ],
                "_get_reader": [
                    "self"
                ],
                "_process_records": [
                    "self",
                    "lines"
                ],
                "_get_filename_queue": [
                    "self",
                    "epoch_limit"
                ],
                "read": [
                    "self"
                ],
                "read_full": [
                    "self"
                ]
            },
            "CSVReader": {
                "__init__": [
                    "self",
                    "filenames",
                    "column_names",
                    "column_dtypes",
                    "skip_header_lines",
                    "read_num_records_hint"
                ],
                "_get_reader": [
                    "self"
                ],
                "_process_records": [
                    "self",
                    "lines"
                ]
            },
            "TFExampleReader": {
                "__init__": [
                    "self",
                    "filenames",
                    "features"
                ],
                "_get_reader": [
                    "self"
                ],
                "_process_records": [
                    "self",
                    "examples"
                ]
            },
            "TimeSeriesInputFn": {
                "create_batch": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            },
            "WholeDatasetInputFn": {
                "__init__": [
                    "self",
                    "time_series_reader"
                ],
                "create_batch": [
                    "self"
                ]
            },
            "RandomWindowInputFn": {
                "__init__": [
                    "self",
                    "time_series_reader",
                    "window_size",
                    "batch_size",
                    "queue_capacity_multiplier",
                    "shuffle_min_after_dequeue_multiplier",
                    "discard_out_of_order",
                    "discard_consecutive_batches_limit",
                    "jitter",
                    "num_threads",
                    "shuffle_seed"
                ],
                "create_batch": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.test_utils": {
            "_train_on_generated_data": [
                "generate_fn",
                "generative_model",
                "train_iterations",
                "seed",
                "learning_rate",
                "ignore_params_fn",
                "derived_param_test_fn",
                "train_input_fn_type",
                "train_state_manager"
            ],
            "test_parameter_recovery": [
                "generate_fn",
                "generative_model",
                "train_iterations",
                "test_case",
                "seed",
                "learning_rate",
                "rtol",
                "atol",
                "train_loss_tolerance_coeff",
                "ignore_params_fn",
                "derived_param_test_fn",
                "train_input_fn_type",
                "train_state_manager"
            ],
            "parameter_recovery_dry_run": [
                "generate_fn",
                "generative_model",
                "seed",
                "learning_rate",
                "train_input_fn_type",
                "train_state_manager"
            ],
            "AllWindowInputFn": {
                "__init__": [
                    "self",
                    "time_series_reader",
                    "window_size"
                ],
                "create_batch": [
                    "self"
                ]
            },
            "_SavingTensorHook": {
                "__init__": [
                    "self",
                    "tensors",
                    "every_n_iter",
                    "every_n_secs"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.model": {
            "TimeSeriesModel": {
                "__init__": [
                    "self",
                    "num_features",
                    "exogenous_feature_columns",
                    "dtype"
                ],
                "exogenous_feature_columns": [
                    "self"
                ],
                "generate": [
                    "self",
                    "number_of_series",
                    "series_length",
                    "model_parameters",
                    "seed"
                ],
                "initialize_graph": [
                    "self",
                    "input_statistics"
                ],
                "_scale_data": [
                    "self",
                    "data"
                ],
                "_scale_variance": [
                    "self",
                    "variance"
                ],
                "_scale_back_data": [
                    "self",
                    "data"
                ],
                "_scale_back_variance": [
                    "self",
                    "variance"
                ],
                "_check_graph_initialized": [
                    "self"
                ],
                "define_loss": [
                    "self",
                    "features",
                    "mode"
                ],
                "get_start_state": [
                    "self"
                ],
                "get_batch_loss": [
                    "self",
                    "features",
                    "mode",
                    "state"
                ],
                "predict": [
                    "self",
                    "features"
                ],
                "_get_exogenous_embedding_shape": [
                    "self"
                ],
                "_process_exogenous_features": [
                    "self",
                    "times",
                    "features"
                ]
            },
            "SequentialTimeSeriesModel": {
                "__init__": [
                    "self",
                    "train_output_names",
                    "predict_output_names",
                    "num_features",
                    "normalize_features",
                    "dtype",
                    "exogenous_feature_columns",
                    "exogenous_update_condition",
                    "static_unrolling_window_size_threshold"
                ],
                "_scale_back_predictions": [
                    "self",
                    "predictions"
                ],
                "_filtering_step": [
                    "self",
                    "current_times",
                    "current_values",
                    "state",
                    "predictions"
                ],
                "_prediction_step": [
                    "self",
                    "current_times",
                    "state"
                ],
                "_imputation_step": [
                    "self",
                    "current_times",
                    "state"
                ],
                "_exogenous_input_step": [
                    "self",
                    "current_times",
                    "current_exogenous_regressors",
                    "state"
                ],
                "_loss_additions": [
                    "self",
                    "times",
                    "values",
                    "mode"
                ],
                "_window_initializer": [
                    "self",
                    "times",
                    "state"
                ],
                "get_batch_loss": [
                    "self",
                    "features",
                    "mode",
                    "state"
                ],
                "_apply_exogenous_update": [
                    "self",
                    "current_times",
                    "step_number",
                    "state",
                    "raw_features",
                    "embedded_exogenous_regressors"
                ],
                "per_step_batch_loss": [
                    "self",
                    "features",
                    "mode",
                    "state"
                ],
                "predict": [
                    "self",
                    "features"
                ],
                "_state_update_loop": [
                    "self",
                    "times",
                    "state",
                    "state_update_fn",
                    "outputs"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.model_utils": {
            "fully_connected": [
                "inp",
                "inp_size",
                "layer_size",
                "name",
                "activation",
                "dtype"
            ],
            "parameter_switch": [
                "parameter_overrides"
            ],
            "canonicalize_times_or_steps_from_output": [
                "times",
                "steps",
                "previous_model_output"
            ]
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.estimators": {
            "TimeSeriesRegressor": {
                "__init__": [
                    "self",
                    "model",
                    "state_manager",
                    "optimizer",
                    "model_dir",
                    "config",
                    "head_type"
                ],
                "_model_start_state_placeholders": [
                    "self",
                    "batch_size_tensor",
                    "static_batch_size"
                ],
                "build_one_shot_parsing_serving_input_receiver_fn": [
                    "self",
                    "filtering_length",
                    "prediction_length",
                    "default_batch_size",
                    "values_input_dtype",
                    "truncate_values"
                ],
                "build_raw_serving_input_receiver_fn": [
                    "self",
                    "default_batch_size",
                    "default_series_length"
                ]
            },
            "ARRegressor": {
                "__init__": [
                    "self",
                    "periodicities",
                    "input_window_size",
                    "output_window_size",
                    "num_features",
                    "exogenous_feature_columns",
                    "num_time_buckets",
                    "loss",
                    "hidden_layer_sizes",
                    "anomaly_prior_probability",
                    "anomaly_distribution",
                    "optimizer",
                    "model_dir",
                    "config"
                ]
            },
            "LSTMAutoRegressor": {
                "__init__": [
                    "self",
                    "periodicities",
                    "input_window_size",
                    "output_window_size",
                    "model_dir",
                    "num_features",
                    "extra_feature_columns",
                    "num_timesteps",
                    "loss",
                    "num_units",
                    "optimizer",
                    "config"
                ]
            },
            "StateSpaceRegressor": {
                "__init__": [
                    "self",
                    "model",
                    "state_manager",
                    "optimizer",
                    "model_dir",
                    "config",
                    "head_type"
                ]
            },
            "StructuralEnsembleRegressor": {
                "__init__": [
                    "self",
                    "periodicities",
                    "num_features",
                    "cycle_num_latent_values",
                    "moving_average_order",
                    "autoregressive_order",
                    "exogenous_feature_columns",
                    "exogenous_update_condition",
                    "dtype",
                    "anomaly_prior_probability",
                    "optimizer",
                    "model_dir",
                    "config",
                    "head_type"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.feature_keys": {
            "State": {},
            "Times": {},
            "Values": {},
            "TrainEvalFeatures": {},
            "PredictionFeatures": {},
            "FilteringFeatures": {},
            "PredictionResults": {},
            "FilteringResults": {},
            "SavedModelLabels": {}
        },
        "tensorflow_core.contrib.timeseries.python.timeseries": {},
        "tensorflow_core.contrib.timeseries.python.timeseries.state_management": {
            "PassthroughStateManager": {
                "__init__": [
                    "self"
                ],
                "initialize_graph": [
                    "self",
                    "model",
                    "input_statistics"
                ],
                "define_loss": [
                    "self",
                    "model",
                    "features",
                    "mode"
                ]
            },
            "_OverridableStateManager": {
                "_define_loss_with_saved_state": [
                    "self",
                    "model",
                    "features",
                    "mode"
                ],
                "define_loss": [
                    "self",
                    "model",
                    "features",
                    "mode"
                ]
            },
            "FilteringOnlyStateManager": {
                "_define_loss_with_saved_state": [
                    "self",
                    "model",
                    "features",
                    "mode"
                ]
            },
            "ChainingStateManager": {
                "__init__": [
                    "self",
                    "state_saving_interval",
                    "checkpoint_state"
                ],
                "initialize_graph": [
                    "self",
                    "model",
                    "input_statistics"
                ],
                "_define_loss_with_saved_state": [
                    "self",
                    "model",
                    "features",
                    "mode"
                ],
                "_get_chunk_number": [
                    "self",
                    "time"
                ],
                "_get_cached_states": [
                    "self",
                    "times"
                ],
                "_update_cached_states": [
                    "self",
                    "model",
                    "features",
                    "mode"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.math_utils": {
            "normal_log_prob": [
                "loc",
                "scale",
                "x"
            ],
            "cauchy_log_prob": [
                "loc",
                "scale",
                "x"
            ],
            "mvn_tril_log_prob": [
                "loc",
                "scale_tril",
                "x"
            ],
            "clip_covariance": [
                "covariance_matrix",
                "maximum_variance_ratio",
                "minimum_variance"
            ],
            "block_diagonal": [
                "matrices",
                "dtype",
                "name"
            ],
            "power_sums_tensor": [
                "array_size",
                "power_matrix",
                "multiplier"
            ],
            "matrix_to_powers": [
                "matrix",
                "powers"
            ],
            "batch_matrix_pow": [
                "matrices",
                "powers"
            ],
            "batch_times_matrix": [
                "batch",
                "matrix",
                "adj_x",
                "adj_y"
            ],
            "matrix_times_batch": [
                "matrix",
                "batch",
                "adj_x",
                "adj_y"
            ],
            "make_toeplitz_matrix": [
                "inputs",
                "name"
            ],
            "sign_magnitude_positive_definite": [
                "raw",
                "off_diagonal_scale",
                "overall_scale"
            ],
            "transform_to_covariance_matrices": [
                "input_vectors",
                "matrix_size"
            ],
            "variable_covariance_matrix": [
                "size",
                "name",
                "dtype",
                "initial_diagonal_values",
                "initial_overall_scale_log"
            ],
            "batch_start_time": [
                "times"
            ],
            "batch_end_time": [
                "times"
            ],
            "log_noninformative_covariance_prior": [
                "covariance"
            ],
            "entropy_matched_cauchy_scale": [
                "covariance"
            ],
            "replicate_state": [
                "start_state",
                "batch_size"
            ],
            "TensorValuedMutableDenseHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "TupleOfTensorsLookup": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "default_values",
                    "empty_key",
                    "deleted_key",
                    "name",
                    "checkpoint"
                ],
                "lookup": [
                    "self",
                    "keys"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values"
                ],
                "check_table_dtypes": [
                    "self",
                    "key_dtype",
                    "value_dtype"
                ]
            },
            "InputStatisticsFromMiniBatch": {
                "__init__": [
                    "self",
                    "num_features",
                    "dtype",
                    "starting_variance_window_size"
                ],
                "initialize_graph": [
                    "self",
                    "features",
                    "update_statistics"
                ],
                "_update_statistics_from_mini_batch": [
                    "self",
                    "statistics",
                    "auxiliary_variables",
                    "times",
                    "values"
                ],
                "_create_variable_statistics_object": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.ar_model": {
            "FlatPredictionModel": {
                "__init__": [
                    "self",
                    "num_features",
                    "input_window_size",
                    "output_window_size",
                    "hidden_layer_sizes"
                ],
                "call": [
                    "self",
                    "input_window_features",
                    "output_window_features"
                ]
            },
            "LSTMPredictionModel": {
                "__init__": [
                    "self",
                    "num_features",
                    "input_window_size",
                    "output_window_size",
                    "num_units"
                ],
                "call": [
                    "self",
                    "input_window_features",
                    "output_window_features"
                ]
            },
            "ARModel": {
                "__init__": [
                    "self",
                    "periodicities",
                    "input_window_size",
                    "output_window_size",
                    "num_features",
                    "prediction_model_factory",
                    "num_time_buckets",
                    "loss",
                    "exogenous_feature_columns"
                ],
                "initialize_graph": [
                    "self",
                    "input_statistics"
                ],
                "get_start_state": [
                    "self"
                ],
                "random_model_parameters": [
                    "self",
                    "seed"
                ],
                "generate": [
                    "self",
                    "number_of_series",
                    "series_length",
                    "model_parameters",
                    "seed"
                ],
                "_predicted_covariance_op": [
                    "self",
                    "activations",
                    "num_values"
                ],
                "_predicted_mean_op": [
                    "self",
                    "activations"
                ],
                "prediction_ops": [
                    "self",
                    "times",
                    "values",
                    "exogenous_regressors"
                ],
                "_output_window_predictions": [
                    "self",
                    "input_window_features",
                    "output_window_features"
                ],
                "loss_op": [
                    "self",
                    "targets",
                    "prediction_ops"
                ],
                "_process_exogenous_features": [
                    "self",
                    "times",
                    "features"
                ],
                "predict": [
                    "self",
                    "features"
                ],
                "_process_window": [
                    "self",
                    "features",
                    "mode",
                    "exogenous_regressors"
                ],
                "get_batch_loss": [
                    "self",
                    "features",
                    "mode",
                    "state"
                ],
                "_compute_time_features": [
                    "self",
                    "time"
                ]
            },
            "AnomalyMixtureARModel": {
                "__init__": [
                    "self",
                    "periodicities",
                    "anomaly_prior_probability",
                    "input_window_size",
                    "output_window_size",
                    "num_features",
                    "prediction_model_factory",
                    "anomaly_distribution",
                    "num_time_buckets",
                    "exogenous_feature_columns"
                ],
                "_create_anomaly_ops": [
                    "self",
                    "times",
                    "values",
                    "prediction_ops_dict"
                ],
                "prediction_ops": [
                    "self",
                    "times",
                    "values",
                    "exogenous_regressors"
                ],
                "_anomaly_log_prob": [
                    "self",
                    "targets",
                    "prediction_ops"
                ],
                "loss_op": [
                    "self",
                    "targets",
                    "prediction_ops"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.kalman_filter": {
            "KalmanFilter": {
                "__init__": [
                    "self",
                    "dtype",
                    "simplified_posterior_covariance_computation"
                ],
                "do_filter": [
                    "self",
                    "estimated_state",
                    "estimated_state_covariance",
                    "predicted_observation",
                    "predicted_observation_covariance",
                    "observation",
                    "observation_model",
                    "observation_noise"
                ],
                "predict_state_mean": [
                    "self",
                    "prior_state",
                    "transition_matrices"
                ],
                "predict_state_var": [
                    "self",
                    "prior_state_var",
                    "transition_matrices",
                    "transition_noise_sums"
                ],
                "posterior_from_prior_state": [
                    "self",
                    "prior_state",
                    "prior_state_var",
                    "observation",
                    "observation_model",
                    "predicted_observations",
                    "observation_noise"
                ],
                "observed_from_state": [
                    "self",
                    "state_mean",
                    "state_var",
                    "observation_model",
                    "observation_noise"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.structural_ensemble": {
            "_replicate_level_trend_models": [
                "multivariate_configuration",
                "univariate_configuration"
            ],
            "StructuralEnsemble": {
                "__init__": [
                    "self",
                    "periodicities",
                    "moving_average_order",
                    "autoregressive_order",
                    "use_level_noise",
                    "configuration"
                ]
            },
            "MultiResolutionStructuralEnsemble": {
                "__init__": [
                    "self",
                    "cycle_num_latent_values",
                    "moving_average_order",
                    "autoregressive_order",
                    "periodicities",
                    "use_level_noise",
                    "configuration"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.filtering_postprocessor": {
            "cauchy_alternative_to_gaussian": [
                "current_times",
                "current_values",
                "outputs"
            ],
            "_interpolate_state_linear": [
                "first_state",
                "second_state",
                "first_responsibility"
            ],
            "FilteringStepPostprocessor": {
                "process_filtering_step": [
                    "self",
                    "current_times",
                    "current_values",
                    "predicted_state",
                    "filtered_state",
                    "outputs"
                ],
                "output_names": [
                    "self"
                ]
            },
            "StateInterpolatingAnomalyDetector": {
                "__init__": [
                    "self",
                    "anomaly_log_likelihood",
                    "anomaly_prior_probability",
                    "responsibility_scaling"
                ],
                "process_filtering_step": [
                    "self",
                    "current_times",
                    "current_values",
                    "predicted_state",
                    "filtered_state",
                    "outputs"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.test_utils": {
            "transition_power_test_template": [
                "test_case",
                "model",
                "num_steps"
            ],
            "noise_accumulator_test_template": [
                "test_case",
                "model",
                "num_steps"
            ]
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.state_space_model": {
            "StateSpaceModelConfiguration": {
                "__new__": [
                    "cls",
                    "num_features",
                    "use_observation_noise",
                    "dtype",
                    "covariance_prior_fn",
                    "bayesian_prior_weighting",
                    "filtering_postprocessor",
                    "trainable_start_state",
                    "exogenous_noise_increases",
                    "exogenous_noise_decreases",
                    "exogenous_feature_columns",
                    "exogenous_update_condition",
                    "filtering_maximum_posterior_variance_ratio",
                    "filtering_minimum_posterior_variance",
                    "transition_covariance_initial_log_scale_bias",
                    "static_unrolling_window_size_threshold"
                ]
            },
            "StateSpaceModel": {
                "__init__": [
                    "self",
                    "configuration"
                ],
                "transition_power_noise_accumulator": [
                    "self",
                    "num_steps"
                ],
                "transition_to_powers": [
                    "self",
                    "powers"
                ],
                "_window_initializer": [
                    "self",
                    "times",
                    "state"
                ],
                "_lookup_window_caches": [
                    "self",
                    "caches",
                    "indices"
                ],
                "_cached_transition_powers_and_sums": [
                    "self",
                    "num_steps"
                ],
                "_imputation_step": [
                    "self",
                    "current_times",
                    "state"
                ],
                "_filtering_step": [
                    "self",
                    "current_times",
                    "current_values",
                    "state",
                    "predictions"
                ],
                "_scale_back_predictions": [
                    "self",
                    "predictions"
                ],
                "_prediction_step": [
                    "self",
                    "current_times",
                    "state"
                ],
                "_exogenous_noise_decreasing": [
                    "self",
                    "current_times",
                    "exogenous_values",
                    "state"
                ],
                "_exogenous_noise_increasing": [
                    "self",
                    "current_times",
                    "exogenous_values",
                    "state"
                ],
                "_exogenous_input_step": [
                    "self",
                    "current_times",
                    "current_exogenous_regressors",
                    "state"
                ],
                "_loss_additions": [
                    "self",
                    "times",
                    "values",
                    "mode"
                ],
                "_variable_observation_transition_tradeoff_log": [
                    "self"
                ],
                "_define_parameters": [
                    "self",
                    "observation_transition_tradeoff_log"
                ],
                "_set_input_statistics": [
                    "self",
                    "input_statistics"
                ],
                "initialize_graph": [
                    "self",
                    "input_statistics"
                ],
                "_make_priors": [
                    "self"
                ],
                "get_prior_covariance": [
                    "self"
                ],
                "get_prior_mean": [
                    "self"
                ],
                "random_model_parameters": [
                    "self",
                    "seed"
                ],
                "generate": [
                    "self",
                    "number_of_series",
                    "series_length",
                    "model_parameters",
                    "seed",
                    "add_observation_noise"
                ],
                "get_state_transition": [
                    "self"
                ],
                "get_noise_transform": [
                    "self"
                ],
                "get_observation_model": [
                    "self",
                    "times"
                ],
                "get_broadcasted_observation_model": [
                    "self",
                    "times"
                ],
                "get_state_transition_noise_covariance": [
                    "self",
                    "minimum_initial_variance"
                ],
                "get_observation_noise_covariance": [
                    "self",
                    "minimum_initial_variance"
                ],
                "get_start_state": [
                    "self"
                ],
                "get_features_for_timesteps": [
                    "self",
                    "timesteps"
                ]
            },
            "StateSpaceEnsemble": {
                "__init__": [
                    "self",
                    "ensemble_members",
                    "configuration"
                ],
                "_set_input_statistics": [
                    "self",
                    "input_statistics"
                ],
                "_loss_additions": [
                    "self",
                    "times",
                    "values",
                    "mode"
                ],
                "_compute_blocked": [
                    "self",
                    "member_fn",
                    "name"
                ],
                "transition_to_powers": [
                    "self",
                    "powers"
                ],
                "_define_parameters": [
                    "self",
                    "observation_transition_tradeoff_log"
                ],
                "random_model_parameters": [
                    "self",
                    "seed"
                ],
                "get_prior_mean": [
                    "self"
                ],
                "get_state_transition": [
                    "self"
                ],
                "get_noise_transform": [
                    "self"
                ],
                "get_observation_model": [
                    "self",
                    "times"
                ],
                "get_broadcasted_observation_model": [
                    "self",
                    "times"
                ]
            },
            "StateSpaceIndependentEnsemble": {
                "transition_power_noise_accumulator": [
                    "self",
                    "num_steps"
                ],
                "get_prior_covariance": [
                    "self"
                ],
                "get_state_transition_noise_covariance": [
                    "self"
                ]
            },
            "StateSpaceCorrelatedFeaturesEnsemble": {
                "__init__": [
                    "self",
                    "ensemble_members",
                    "configuration"
                ],
                "transition_power_noise_accumulator": [
                    "self",
                    "num_steps"
                ],
                "get_broadcasted_observation_model": [
                    "self",
                    "times"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.level_trend": {
            "AdderStateSpaceModel": {
                "__init__": [
                    "self",
                    "use_level_noise",
                    "configuration"
                ],
                "get_prior_mean": [
                    "self"
                ],
                "transition_to_powers": [
                    "self",
                    "powers"
                ],
                "transition_power_noise_accumulator": [
                    "self",
                    "num_steps"
                ],
                "get_state_transition": [
                    "self"
                ],
                "get_noise_transform": [
                    "self"
                ],
                "get_observation_model": [
                    "self",
                    "times"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.periodic": {
            "CycleStateSpaceModel": {
                "__init__": [
                    "self",
                    "periodicity",
                    "configuration"
                ],
                "get_state_transition": [
                    "self"
                ],
                "get_noise_transform": [
                    "self"
                ],
                "transition_to_powers": [
                    "self",
                    "powers"
                ],
                "transition_power_noise_accumulator": [
                    "self",
                    "num_steps",
                    "noise_addition_coefficient"
                ],
                "get_observation_model": [
                    "self",
                    "times"
                ]
            },
            "ResolutionCycleModel": {
                "__init__": [
                    "self",
                    "num_latent_values",
                    "periodicity",
                    "near_integer_threshold",
                    "configuration"
                ],
                "_close_to_integer": [
                    "self",
                    "value"
                ],
                "transition_to_powers": [
                    "self",
                    "powers"
                ],
                "transition_power_noise_accumulator": [
                    "self",
                    "num_steps"
                ],
                "_whole_period_folding": [
                    "self"
                ],
                "_power_sum_array": [
                    "self",
                    "max_remaining_steps"
                ]
            }
        },
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models": {},
        "tensorflow_core.contrib.timeseries.python.timeseries.state_space_models.varma": {
            "VARMA": {
                "__init__": [
                    "self",
                    "autoregressive_order",
                    "moving_average_order",
                    "configuration"
                ],
                "_define_parameters": [
                    "self",
                    "observation_transition_tradeoff_log"
                ],
                "get_state_transition": [
                    "self"
                ],
                "get_noise_transform": [
                    "self"
                ],
                "get_observation_model": [
                    "self",
                    "times"
                ],
                "get_state_transition_noise_covariance": [
                    "self",
                    "minimum_initial_variance"
                ]
            }
        },
        "tensorflow_core.contrib.crf": {},
        "tensorflow_core.contrib.crf.python": {},
        "tensorflow_core.contrib.crf.python.ops.crf": {
            "crf_sequence_score": [
                "inputs",
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_multitag_sequence_score": [
                "inputs",
                "tag_bitmap",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_log_norm": [
                "inputs",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_log_likelihood": [
                "inputs",
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_unary_score": [
                "tag_indices",
                "sequence_lengths",
                "inputs"
            ],
            "crf_binary_score": [
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "viterbi_decode": [
                "score",
                "transition_params"
            ],
            "crf_decode": [
                "potentials",
                "transition_params",
                "sequence_length"
            ],
            "CrfForwardRnnCell": {
                "__init__": [
                    "self",
                    "transition_params"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "CrfDecodeForwardRnnCell": {
                "__init__": [
                    "self",
                    "transition_params"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "CrfDecodeBackwardRnnCell": {
                "__init__": [
                    "self",
                    "num_tags"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            }
        },
        "tensorflow_core.contrib.crf.python.ops": {},
        "tensorflow_core.contrib.resampler": {},
        "tensorflow_core.contrib.resampler.ops.gen_resampler_ops": {
            "resampler": [
                "data",
                "warp",
                "name"
            ],
            "Resampler": [
                "data",
                "warp",
                "name"
            ],
            "resampler_eager_fallback": [
                "data",
                "warp",
                "name",
                "ctx"
            ],
            "resampler_grad": [
                "data",
                "warp",
                "grad_output",
                "name"
            ],
            "ResamplerGrad": [
                "data",
                "warp",
                "grad_output",
                "name"
            ],
            "resampler_grad_eager_fallback": [
                "data",
                "warp",
                "grad_output",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.resampler.ops": {},
        "tensorflow_core.contrib.resampler.python": {},
        "tensorflow_core.contrib.resampler.python.ops.resampler_ops": {
            "resampler": [
                "data",
                "warp",
                "name"
            ],
            "_resampler_grad": [
                "op",
                "grad_output"
            ]
        },
        "tensorflow_core.contrib.resampler.python.ops.resampler_ops_test": {
            "_bilinearly_interpolate": [
                "data",
                "x",
                "y"
            ],
            "_make_warp": [
                "batch_size",
                "warp_height",
                "warp_width",
                "dtype"
            ],
            "ResamplerTest": {
                "test_op_forward_pass_gpu_float32": [
                    "self"
                ],
                "test_op_forward_pass_gpu_float64": [
                    "self"
                ],
                "test_op_forward_pass_cpu_float16": [
                    "self"
                ],
                "test_op_forward_pass_cpu_float32": [
                    "self"
                ],
                "test_op_forward_pass_cpu_float64": [
                    "self"
                ],
                "test_op_backward_pass_gpu_float32": [
                    "self"
                ],
                "test_op_backward_pass_cpu_float16": [
                    "self"
                ],
                "test_op_backward_pass_cpu_float32": [
                    "self"
                ],
                "test_op_backward_pass_cpu_float64": [
                    "self"
                ],
                "_test_op_forward_pass": [
                    "self",
                    "on_gpu",
                    "dtype",
                    "tol"
                ],
                "_test_op_backward_pass": [
                    "self",
                    "on_gpu",
                    "dtype",
                    "tol"
                ],
                "test_op_errors": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.resampler.python.ops": {},
        "tensorflow_core.contrib.linear_optimizer": {},
        "tensorflow_core.contrib.linear_optimizer.python.sdca_optimizer": {
            "SDCAOptimizer": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "num_loss_partitions",
                    "num_table_shards",
                    "symmetric_l1_regularization",
                    "symmetric_l2_regularization",
                    "adaptive",
                    "partitioner"
                ],
                "get_name": [
                    "self"
                ],
                "example_id_column": [
                    "self"
                ],
                "num_loss_partitions": [
                    "self"
                ],
                "num_table_shards": [
                    "self"
                ],
                "symmetric_l1_regularization": [
                    "self"
                ],
                "symmetric_l2_regularization": [
                    "self"
                ],
                "adaptive": [
                    "self"
                ],
                "partitioner": [
                    "self"
                ],
                "get_train_step": [
                    "self",
                    "columns_to_variables",
                    "weight_column_name",
                    "loss_type",
                    "features",
                    "targets",
                    "global_step"
                ]
            }
        },
        "tensorflow_core.contrib.linear_optimizer.python.sdca_estimator": {
            "_head_is_valid_for_sdca": [
                "head"
            ],
            "_add_bias_column": [
                "feature_columns",
                "columns_to_tensors",
                "bias_variable",
                "columns_to_variables"
            ],
            "sdca_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "_SdcaUpdateWeightsHook": {
                "__init__": [
                    "self"
                ],
                "set_parameters": [
                    "self",
                    "sdca_model",
                    "train_op"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "_SDCAEstimator": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "head",
                    "l1_regularization",
                    "l2_regularization",
                    "num_loss_partitions",
                    "config",
                    "feature_engineering_fn",
                    "partitioner"
                ]
            },
            "SDCALogisticClassifier": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "l1_regularization",
                    "l2_regularization",
                    "num_loss_partitions",
                    "config",
                    "feature_engineering_fn",
                    "partitioner"
                ],
                "predict_classes": [
                    "self",
                    "input_fn"
                ],
                "predict_proba": [
                    "self",
                    "input_fn"
                ]
            },
            "SDCALinearRegressor": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "l1_regularization",
                    "l2_regularization",
                    "num_loss_partitions",
                    "config",
                    "feature_engineering_fn",
                    "partitioner"
                ],
                "predict_scores": [
                    "self",
                    "input_fn"
                ]
            }
        },
        "tensorflow_core.contrib.linear_optimizer.python": {},
        "tensorflow_core.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable": {
            "ShardedMutableDenseHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "empty_key",
                    "deleted_key",
                    "num_shards",
                    "checkpoint",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "_num_shards": [
                    "self"
                ],
                "table_shards": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "_shard_indices": [
                    "self",
                    "keys"
                ],
                "_check_keys": [
                    "self",
                    "keys"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export_sharded": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.linear_optimizer.python.ops.sdca_ops": {
            "SdcaModel": {
                "__init__": [
                    "self",
                    "examples",
                    "variables",
                    "options"
                ],
                "_symmetric_l1_regularization": [
                    "self"
                ],
                "_symmetric_l2_regularization": [
                    "self"
                ],
                "_num_loss_partitions": [
                    "self"
                ],
                "_adaptive": [
                    "self"
                ],
                "_num_table_shards": [
                    "self"
                ],
                "_create_slots": [
                    "self"
                ],
                "_assertSpecified": [
                    "self",
                    "items",
                    "check_in"
                ],
                "_assertList": [
                    "self",
                    "items",
                    "check_in"
                ],
                "_var_to_list": [
                    "self",
                    "var"
                ],
                "_l1_loss": [
                    "self"
                ],
                "_l2_loss": [
                    "self",
                    "l2"
                ],
                "_convert_n_to_tensor": [
                    "self",
                    "input_list",
                    "as_ref"
                ],
                "_get_first_dimension_size_statically": [
                    "self",
                    "w",
                    "num_partitions"
                ],
                "_linear_predictions": [
                    "self",
                    "examples"
                ],
                "predictions": [
                    "self",
                    "examples"
                ],
                "_get_partitioned_update_ops": [
                    "self",
                    "v_num",
                    "num_partitions_by_var",
                    "p_assignments_by_var",
                    "gather_ids_by_var",
                    "weights",
                    "full_update",
                    "p_assignments",
                    "num_partitions"
                ],
                "minimize": [
                    "self",
                    "global_step",
                    "name"
                ],
                "update_weights": [
                    "self",
                    "train_op"
                ],
                "approximate_duality_gap": [
                    "self"
                ],
                "unregularized_loss": [
                    "self",
                    "examples"
                ],
                "regularized_loss": [
                    "self",
                    "examples"
                ]
            }
        },
        "tensorflow_core.contrib.linear_optimizer.python.ops.sparse_feature_column": {
            "SparseFeatureColumn": {
                "__init__": [
                    "self",
                    "example_indices",
                    "feature_indices",
                    "feature_values"
                ],
                "example_indices": [
                    "self"
                ],
                "feature_indices": [
                    "self"
                ],
                "feature_values": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.linear_optimizer.python.ops": {},
        "tensorflow_core.contrib.checkpoint": {},
        "tensorflow_core.contrib.checkpoint.python.containers": {
            "UniqueNameTracker": {
                "__init__": [
                    "self"
                ],
                "_values": [
                    "self"
                ],
                "track": [
                    "self",
                    "trackable",
                    "base_name"
                ]
            }
        },
        "tensorflow_core.contrib.checkpoint.python.visualize": {
            "dot_graph_from_checkpoint": [
                "save_path"
            ]
        },
        "tensorflow_core.contrib.checkpoint.python.split_dependency": {
            "split_dependency": [
                "component_names",
                "component_dtypes",
                "fill_save_buffer_fn",
                "consume_restore_buffer_fn",
                "device"
            ],
            "_CallbackSaveable": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "device",
                    "save_callback",
                    "restore_callback"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            },
            "_SplitDependency": {
                "__init__": [
                    "self",
                    "save_buffer",
                    "restore_buffer",
                    "name",
                    "dtype",
                    "device",
                    "num_components",
                    "fill_save_buffer_fn",
                    "consume_restore_buffer_fn"
                ],
                "_save": [
                    "self"
                ],
                "_restore": [
                    "self",
                    "tensor"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.checkpoint.python.python_state": {
            "NumpyState": {
                "_lookup_dependency": [
                    "self",
                    "name"
                ],
                "__getattribute__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ]
            },
            "_NumpyWrapper": {
                "__init__": [
                    "self",
                    "array"
                ],
                "serialize": [
                    "self"
                ],
                "deserialize": [
                    "self",
                    "string_value"
                ]
            }
        },
        "tensorflow_core.contrib.checkpoint.python": {},
        "tensorflow_core.contrib.quantize": {},
        "tensorflow_core.contrib.quantize.python.graph_matcher": {
            "Pattern": {
                "match": [
                    "self",
                    "op",
                    "tensor"
                ]
            },
            "OpTypePattern": {
                "__init__": [
                    "self",
                    "op_type",
                    "name",
                    "inputs",
                    "ordered_inputs"
                ],
                "name": [
                    "self"
                ],
                "match": [
                    "self",
                    "op",
                    "tensor"
                ]
            },
            "OneofPattern": {
                "__init__": [
                    "self",
                    "sub_patterns"
                ],
                "match": [
                    "self",
                    "op",
                    "tensor"
                ]
            },
            "MatchResult": {
                "__init__": [
                    "self"
                ],
                "add": [
                    "self",
                    "pattern",
                    "op",
                    "tensor"
                ],
                "_to_pattern": [
                    "self",
                    "pattern_or_name"
                ],
                "_get_op_tensor": [
                    "self",
                    "pattern_or_name"
                ],
                "get_op": [
                    "self",
                    "pattern_or_name"
                ],
                "get_tensor": [
                    "self",
                    "pattern_or_name"
                ],
                "merge_from": [
                    "self",
                    "other_match_result"
                ]
            },
            "GraphMatcher": {
                "__init__": [
                    "self",
                    "pattern"
                ],
                "_match_pattern": [
                    "self",
                    "pattern",
                    "op",
                    "tensor"
                ],
                "match_op": [
                    "self",
                    "op"
                ],
                "match_ops": [
                    "self",
                    "ops"
                ],
                "match_graph": [
                    "self",
                    "graph"
                ]
            }
        },
        "tensorflow_core.contrib.quantize.python.quant_ops": {
            "FixedQuantize": [
                "inputs",
                "init_min",
                "init_max",
                "scope"
            ],
            "_ModelVariable": [
                "name",
                "shape",
                "initializer",
                "collections",
                "trainable"
            ],
            "LastValueQuantize": [
                "inputs",
                "per_channel",
                "init_min",
                "init_max",
                "vars_collection",
                "name_prefix",
                "reuse",
                "is_training",
                "num_bits",
                "narrow_range",
                "symmetric"
            ],
            "MovingAvgQuantize": [
                "inputs",
                "per_channel",
                "init_min",
                "init_max",
                "ema_decay",
                "vars_collection",
                "name_prefix",
                "reuse",
                "is_training",
                "num_bits",
                "narrow_range",
                "symmetric"
            ],
            "_FakeQuantWithMinMaxVars": [
                "inputs",
                "min_var",
                "max_var",
                "per_channel",
                "num_bits",
                "narrow_range"
            ]
        },
        "tensorflow_core.contrib.quantize.python.common": {
            "BatchNormGroups": [
                "graph"
            ],
            "GetEndpointActivationOp": [
                "graph",
                "prefix"
            ],
            "_GetOperationByNameDontThrow": [
                "graph",
                "name"
            ],
            "CreateOrGetQuantizationStep": [],
            "DropStringPrefix": [
                "s",
                "prefix"
            ],
            "RerouteTensor": [
                "t0",
                "t1",
                "can_modify"
            ]
        },
        "tensorflow_core.contrib.quantize.python.input_to_ops": {
            "InputToOps": {
                "__init__": [
                    "self",
                    "graph"
                ],
                "ConsumerOperations": [
                    "self",
                    "producer_op"
                ]
            }
        },
        "tensorflow_core.contrib.quantize.python.quantize": {
            "Quantize": [
                "graph",
                "is_training",
                "weight_bits",
                "activation_bits",
                "symmetric",
                "ema_decay",
                "quant_delay",
                "vars_collection",
                "scope"
            ],
            "_QuantizeActivationLayers": [
                "quantized_ops",
                "graph",
                "is_training",
                "activation_bits",
                "ema_decay",
                "quant_delay",
                "vars_collection",
                "scope"
            ],
            "_CheckIfQuantizableOp": [
                "src_op",
                "quantized_ops"
            ],
            "_FindLayersToQuantize": [
                "graph"
            ],
            "_IsSkipLayer": [
                "activation_op"
            ],
            "_FollowedByFakeQuant": [
                "tensor"
            ],
            "_InsertQuantOp": [
                "context",
                "name",
                "producer",
                "consumers",
                "is_training",
                "moving_avg",
                "init_min",
                "init_max",
                "bits",
                "symmetric",
                "ema_decay",
                "quant_delay",
                "vars_collection",
                "narrow_range",
                "producer_scope",
                "consumer_scope"
            ],
            "_GetContextFromOp": [
                "op"
            ],
            "_AddContextToName": [
                "context",
                "name"
            ],
            "_LayerMatch": {
                "__init__": [
                    "self",
                    "layer_op",
                    "weight_tensor",
                    "activation_op",
                    "bypass_op",
                    "post_activation_bypass_op",
                    "bias_add_op"
                ],
                "layer_op": [
                    "self"
                ],
                "weight_tensor": [
                    "self"
                ],
                "activation_op": [
                    "self"
                ],
                "bypass_op": [
                    "self"
                ],
                "post_activation_bypass_op": [
                    "self"
                ],
                "bias_add_op": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.quantize.python.fold_batch_norms": {
            "FoldBatchNorms": [
                "graph",
                "is_training",
                "freeze_batch_norm_delay"
            ],
            "_FoldFusedBatchNorms": [
                "graph",
                "is_training",
                "freeze_batch_norm_delay"
            ],
            "_FindFusedBatchNorms": [
                "graph"
            ],
            "_ComputeBatchNormCorrections": [
                "context",
                "match",
                "freeze_batch_norm_delay"
            ],
            "_CloneWithNewOperands": [
                "layer_op",
                "input_tensor",
                "weight_tensor",
                "batch_to_space_op"
            ],
            "_FoldFusedBatchNormGrad": [
                "op",
                "unused_grad_y",
                "grad_mean",
                "grad_var",
                "unused_1",
                "unused_2",
                "unused_3"
            ],
            "_FoldUnfusedBatchNorms": [
                "graph",
                "is_training",
                "freeze_batch_norm_delay"
            ],
            "_IsValidUnfusedBatchNorm": [
                "graph",
                "context"
            ],
            "_FindMatchingTensor": [
                "graph",
                "match_pattern",
                "scope"
            ],
            "_GetBatchNormParams": [
                "graph",
                "context",
                "has_scaling"
            ],
            "_CreateFoldedOp": [
                "graph",
                "context",
                "has_scaling",
                "freeze_batch_norm_delay",
                "is_training"
            ],
            "_CloneOp": [
                "op",
                "new_name",
                "new_inputs"
            ],
            "_AssertShapesMatch": [
                "op_name",
                "in_tensor",
                "out_tensor"
            ],
            "_HasScaling": [
                "graph",
                "input_to_ops_map",
                "bn"
            ],
            "_OpCloner": {
                "__init__": [
                    "self"
                ],
                "_CloneMul": [
                    "self",
                    "op",
                    "inputs",
                    "new_name"
                ],
                "_CloneAdd": [
                    "self",
                    "op",
                    "inputs",
                    "new_name"
                ],
                "_CloneConv2d": [
                    "self",
                    "op",
                    "inputs",
                    "new_name"
                ],
                "_CloneDepthwiseConv2d": [
                    "self",
                    "op",
                    "inputs",
                    "new_name"
                ],
                "_CloneMatMul": [
                    "self",
                    "op",
                    "inputs",
                    "new_name"
                ],
                "Clone": [
                    "self",
                    "op",
                    "inputs",
                    "new_name"
                ],
                "_AssertConvShapes": [
                    "self",
                    "op_name",
                    "input_tensor",
                    "weights"
                ],
                "_AssertFCShapes": [
                    "self",
                    "op_name",
                    "weights",
                    "input_tensor"
                ]
            },
            "_BatchNormMatch": {
                "__init__": [
                    "self",
                    "layer_op",
                    "bn_op",
                    "output_tensor",
                    "input_tensor",
                    "weight_tensor",
                    "gamma_tensor",
                    "beta_tensor",
                    "mean_tensor",
                    "variance_tensor",
                    "moving_mean_tensor",
                    "moving_variance_tensor",
                    "bn_decay_mean_tensor",
                    "bn_decay_var_tensor",
                    "batch_epsilon",
                    "batch_to_space_op"
                ],
                "layer_op": [
                    "self"
                ],
                "bn_op": [
                    "self"
                ],
                "output_tensor": [
                    "self"
                ],
                "input_tensor": [
                    "self"
                ],
                "weight_tensor": [
                    "self"
                ],
                "gamma_tensor": [
                    "self"
                ],
                "beta_tensor": [
                    "self"
                ],
                "mean_tensor": [
                    "self"
                ],
                "variance_tensor": [
                    "self"
                ],
                "moving_mean_tensor": [
                    "self"
                ],
                "moving_variance_tensor": [
                    "self"
                ],
                "batch_epsilon": [
                    "self"
                ],
                "bn_decay_mean_tensor": [
                    "self"
                ],
                "bn_decay_var_tensor": [
                    "self"
                ],
                "batch_to_space_op": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.quantize.python.quantize_graph": {
            "_create_graph": [
                "input_graph",
                "is_training",
                "weight_bits",
                "activation_bits",
                "symmetric",
                "quant_delay",
                "freeze_bn_delay",
                "scope"
            ],
            "create_training_graph": [
                "input_graph",
                "quant_delay"
            ],
            "create_eval_graph": [
                "input_graph"
            ],
            "experimental_create_training_graph": [
                "input_graph",
                "weight_bits",
                "activation_bits",
                "symmetric",
                "quant_delay",
                "freeze_bn_delay",
                "scope"
            ],
            "experimental_create_eval_graph": [
                "input_graph",
                "weight_bits",
                "activation_bits",
                "symmetric",
                "quant_delay",
                "scope"
            ],
            "_check_for_training_ops": [
                "g"
            ]
        },
        "tensorflow_core.contrib.quantize.python": {},
        "tensorflow_core.contrib.kernel_methods": {},
        "tensorflow_core.contrib.kernel_methods.python.kernel_estimators": {
            "_check_valid_kernel_mappers": [
                "kernel_mappers"
            ],
            "_check_valid_head": [
                "head"
            ],
            "_update_features_and_columns": [
                "features",
                "feature_columns",
                "kernel_mappers_dict"
            ],
            "_kernel_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "_KernelEstimator": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "weight_column_name",
                    "head",
                    "optimizer",
                    "kernel_mappers",
                    "config"
                ]
            },
            "KernelLinearClassifier": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "optimizer",
                    "kernel_mappers",
                    "config"
                ],
                "predict_classes": [
                    "self",
                    "input_fn"
                ],
                "predict_proba": [
                    "self",
                    "input_fn"
                ]
            }
        },
        "tensorflow_core.contrib.kernel_methods.python.losses": {
            "sparse_multiclass_hinge_loss": [
                "labels",
                "logits",
                "weights",
                "scope",
                "loss_collection",
                "reduction"
            ]
        },
        "tensorflow_core.contrib.kernel_methods.python": {},
        "tensorflow_core.contrib.kernel_methods.python.mappers.dense_kernel_mapper": {
            "InvalidShapeError": {},
            "DenseKernelMapper": {
                "map": [
                    "self",
                    "input_tensor"
                ],
                "name": [
                    "self"
                ],
                "output_dim": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.kernel_methods.python.mappers.random_fourier_features": {
            "RandomFourierFeatureMapper": {
                "__init__": [
                    "self",
                    "input_dim",
                    "output_dim",
                    "stddev",
                    "seed",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "input_dim": [
                    "self"
                ],
                "output_dim": [
                    "self"
                ],
                "map": [
                    "self",
                    "input_tensor"
                ]
            }
        },
        "tensorflow_core.contrib.kernel_methods.python.mappers": {},
        "tensorflow_core.contrib.data": {},
        "tensorflow_core.contrib.data.python": {},
        "tensorflow_core.contrib.data.python.ops.grouping": {
            "group_by_reducer": [
                "key_func",
                "reducer"
            ],
            "group_by_window": [
                "key_func",
                "reduce_func",
                "window_size",
                "window_size_func"
            ],
            "bucket_by_sequence_length": [
                "element_length_func",
                "bucket_boundaries",
                "bucket_batch_sizes",
                "padded_shapes",
                "padding_values",
                "pad_to_bucket_boundary",
                "no_padding"
            ],
            "Reducer": {
                "__init__": [
                    "self",
                    "init_func",
                    "reduce_func",
                    "finalize_func"
                ]
            }
        },
        "tensorflow_core.contrib.data.python.ops.unique": {
            "unique": []
        },
        "tensorflow_core.contrib.data.python.ops.readers": {
            "make_csv_dataset": [
                "file_pattern",
                "batch_size",
                "column_names",
                "column_defaults",
                "label_name",
                "select_columns",
                "field_delim",
                "use_quote_delim",
                "na_value",
                "header",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed",
                "prefetch_buffer_size",
                "num_parallel_reads",
                "sloppy",
                "num_rows_for_inference",
                "compression_type"
            ],
            "make_batched_features_dataset": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "label_key",
                "reader_args",
                "num_epochs",
                "shuffle",
                "shuffle_buffer_size",
                "shuffle_seed",
                "prefetch_buffer_size",
                "reader_num_threads",
                "parser_num_threads",
                "sloppy_ordering",
                "drop_final_batch"
            ],
            "read_batch_features": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "reader_args",
                "randomize_input",
                "num_epochs",
                "capacity"
            ],
            "CsvDataset": {
                "__init__": [
                    "self",
                    "filenames",
                    "record_defaults",
                    "compression_type",
                    "buffer_size",
                    "header",
                    "field_delim",
                    "use_quote_delim",
                    "na_value",
                    "select_cols"
                ]
            },
            "SqlDataset": {
                "__init__": [
                    "self",
                    "driver_name",
                    "data_source_name",
                    "query",
                    "output_types"
                ]
            },
            "LMDBDataset": {
                "__init__": [
                    "self",
                    "filenames"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.data.python.ops.error_ops": {
            "ignore_errors": []
        },
        "tensorflow_core.contrib.data.python.ops.get_single_element": {
            "get_single_element": [
                "dataset"
            ],
            "reduce_dataset": [
                "dataset",
                "reducer"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.sliding": {
            "sliding_window_batch": [
                "window_size",
                "stride",
                "window_shift",
                "window_stride"
            ],
            "_SlideDataset": {
                "__init__": [
                    "self",
                    "input_dataset",
                    "window_size",
                    "window_shift",
                    "window_stride"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.data.python.ops.enumerate_ops": {
            "enumerate_dataset": [
                "start"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.interleave_ops": {
            "parallel_interleave": [
                "map_func",
                "cycle_length",
                "block_length",
                "sloppy",
                "buffer_output_elements",
                "prefetch_input_elements"
            ],
            "sloppy_interleave": [
                "map_func",
                "cycle_length",
                "block_length"
            ],
            "sample_from_datasets": [
                "datasets",
                "weights",
                "seed"
            ],
            "choose_from_datasets": [
                "datasets",
                "choice_dataset"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.shuffle_ops": {
            "shuffle_and_repeat": [
                "buffer_size",
                "count",
                "seed"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.random_ops": {
            "RandomDataset": {
                "__init__": [
                    "self",
                    "seed"
                ]
            }
        },
        "tensorflow_core.contrib.data.python.ops.writers": {
            "TFRecordWriter": {
                "__init__": [
                    "self",
                    "filename",
                    "compression_type"
                ]
            }
        },
        "tensorflow_core.contrib.data.python.ops.resampling": {
            "rejection_resample": [
                "class_func",
                "target_dist",
                "initial_dist",
                "seed"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.scan_ops": {
            "scan": [
                "initial_state",
                "scan_func"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.threadpool": {},
        "tensorflow_core.contrib.data.python.ops.prefetching_ops": {
            "prefetch_to_device": [
                "device",
                "buffer_size"
            ],
            "copy_to_device": [
                "target_device",
                "source_device"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.batching": {
            "dense_to_sparse_batch": [
                "batch_size",
                "row_shape"
            ],
            "unbatch": [],
            "batch_and_drop_remainder": [
                "batch_size"
            ],
            "padded_batch_and_drop_remainder": [
                "batch_size",
                "padded_shapes",
                "padding_values"
            ],
            "assert_element_shape": [
                "expected_shapes"
            ],
            "map_and_batch": [
                "map_func",
                "batch_size",
                "num_parallel_batches",
                "drop_remainder",
                "num_parallel_calls"
            ],
            "_RestructuredDataset": {
                "__init__": [
                    "self",
                    "dataset",
                    "output_types",
                    "output_shapes",
                    "output_classes"
                ],
                "element_spec": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.data.python.ops.iterator_ops": {
            "make_saveable_from_iterator": [
                "iterator"
            ],
            "CheckpointInputPipelineHook": {
                "__init__": [
                    "self",
                    "estimator"
                ]
            }
        },
        "tensorflow_core.contrib.data.python.ops.counter": {
            "Counter": [
                "start",
                "step",
                "dtype"
            ]
        },
        "tensorflow_core.contrib.data.python.ops.parsing_ops": {
            "parse_example_dataset": [
                "features",
                "num_parallel_calls"
            ]
        },
        "tensorflow_core.contrib.data.python.ops": {},
        "tensorflow_core.contrib.legacy_seq2seq": {},
        "tensorflow_core.contrib.legacy_seq2seq.python": {},
        "tensorflow_core.contrib.legacy_seq2seq.python.ops.seq2seq": {
            "_extract_argmax_and_embed": [
                "embedding",
                "output_projection",
                "update_embedding"
            ],
            "rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "loop_function",
                "scope"
            ],
            "basic_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "dtype",
                "scope"
            ],
            "tied_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "loop_function",
                "dtype",
                "scope"
            ],
            "embedding_rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "num_symbols",
                "embedding_size",
                "output_projection",
                "feed_previous",
                "update_embedding_for_previous",
                "scope"
            ],
            "embedding_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols",
                "embedding_size",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "embedding_tied_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_symbols",
                "embedding_size",
                "num_decoder_symbols",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "attention_decoder": [
                "decoder_inputs",
                "initial_state",
                "attention_states",
                "cell",
                "output_size",
                "num_heads",
                "loop_function",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "embedding_attention_decoder": [
                "decoder_inputs",
                "initial_state",
                "attention_states",
                "cell",
                "num_symbols",
                "embedding_size",
                "num_heads",
                "output_size",
                "output_projection",
                "feed_previous",
                "update_embedding_for_previous",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "embedding_attention_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols",
                "embedding_size",
                "num_heads",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "one2many_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs_dict",
                "enc_cell",
                "dec_cells_dict",
                "num_encoder_symbols",
                "num_decoder_symbols_dict",
                "embedding_size",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "sequence_loss_by_example": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "softmax_loss_function",
                "name"
            ],
            "sequence_loss": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "average_across_batch",
                "softmax_loss_function",
                "name"
            ],
            "model_with_buckets": [
                "encoder_inputs",
                "decoder_inputs",
                "targets",
                "weights",
                "buckets",
                "seq2seq",
                "softmax_loss_function",
                "per_example_loss",
                "name"
            ]
        },
        "tensorflow_core.contrib.legacy_seq2seq.python.ops": {},
        "tensorflow_core.contrib.decision_trees": {},
        "tensorflow_core.contrib.decision_trees.proto.generic_tree_model_extensions_pb2": {},
        "tensorflow_core.contrib.decision_trees.proto.generic_tree_model_pb2": {},
        "tensorflow_core.contrib.decision_trees.proto": {},
        "tensorflow_core.contrib.specs": {},
        "tensorflow_core.contrib.specs.python.specs_lib": {
            "check_keywords": [
                "spec"
            ],
            "get_positional": [
                "args",
                "kw",
                "kw_overrides"
            ],
            "External": [
                "module_name",
                "function_name"
            ],
            "Import": [
                "statements"
            ],
            "debug": [
                "mode"
            ],
            "Composable": {
                "__or__": [
                    "self",
                    "f"
                ],
                "__add__": [
                    "self",
                    "g"
                ],
                "__mul__": [
                    "self",
                    "g"
                ],
                "__pow__": [
                    "self",
                    "n"
                ]
            },
            "Callable": {
                "__init__": [
                    "self",
                    "f"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Operator": {
                "__init__": [
                    "self",
                    "op"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Function": {
                "__init__": [
                    "self",
                    "f"
                ],
                "__call__": [
                    "self"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Composition": {
                "__init__": [
                    "self",
                    "f",
                    "g"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.specs.python.specs_ops": {
            "Dws": [
                "n"
            ],
            "Dwm": [
                "n"
            ],
            "Var": [
                "name"
            ],
            "Idx": {
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Conc": {
                "__init__": [
                    "self",
                    "dim"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Shared": {
                "__init__": [
                    "self",
                    "subnet",
                    "name",
                    "scope"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow_core.contrib.specs.python.params_ops": {
            "Uf": [
                "lo",
                "hi"
            ],
            "Ui": [
                "lo",
                "hi"
            ],
            "Lf": [
                "lo",
                "hi"
            ],
            "Li": [
                "lo",
                "hi"
            ],
            "Nt": [
                "mu",
                "sigma",
                "limit"
            ]
        },
        "tensorflow_core.contrib.specs.python.specs": {
            "eval_params": [
                "params",
                "environment"
            ],
            "eval_spec": [
                "spec",
                "environment"
            ],
            "create_net_fun": [
                "spec",
                "environment"
            ],
            "create_net": [
                "spec",
                "inputs",
                "environment"
            ],
            "LocalImport": {
                "__init__": [
                    "self",
                    "names"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "some_type",
                    "value",
                    "traceback"
                ]
            }
        },
        "tensorflow_core.contrib.specs.python.summaries": {
            "_truncate_structure": [
                "x"
            ],
            "tf_structure": [
                "x",
                "include_shapes",
                "finished"
            ],
            "tf_print": [
                "x",
                "depth",
                "finished",
                "printer"
            ],
            "tf_num_params": [
                "x"
            ],
            "tf_left_split": [
                "op"
            ],
            "tf_parameter_iter": [
                "x"
            ],
            "_combine_filter": [
                "x"
            ],
            "tf_parameter_summary": [
                "x",
                "printer",
                "combine"
            ],
            "tf_spec_structure": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ],
            "tf_spec_summary": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ],
            "tf_spec_print": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ]
        },
        "tensorflow_core.contrib.specs.python": {},
        "tensorflow_core.contrib.reduce_slice_ops": {},
        "tensorflow_core.contrib.reduce_slice_ops.ops.gen_reduce_slice_ops": {
            "reduce_slice_max": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "ReduceSliceMax": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "reduce_slice_max_eager_fallback": [
                "data",
                "indices",
                "axis",
                "name",
                "ctx"
            ],
            "reduce_slice_min": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "ReduceSliceMin": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "reduce_slice_min_eager_fallback": [
                "data",
                "indices",
                "axis",
                "name",
                "ctx"
            ],
            "reduce_slice_prod": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "ReduceSliceProd": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "reduce_slice_prod_eager_fallback": [
                "data",
                "indices",
                "axis",
                "name",
                "ctx"
            ],
            "reduce_slice_sum": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "ReduceSliceSum": [
                "data",
                "indices",
                "axis",
                "name"
            ],
            "reduce_slice_sum_eager_fallback": [
                "data",
                "indices",
                "axis",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.reduce_slice_ops.ops": {},
        "tensorflow_core.contrib.reduce_slice_ops.python": {},
        "tensorflow_core.contrib.reduce_slice_ops.python.ops.reduce_slice_ops": {},
        "tensorflow_core.contrib.reduce_slice_ops.python.ops": {},
        "tensorflow_core.contrib.layers": {},
        "tensorflow_core.contrib.layers.ops.gen_sparse_feature_cross_op": {
            "sparse_feature_cross": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "out_type",
                "internal_type",
                "name"
            ],
            "SparseFeatureCross": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "out_type",
                "internal_type",
                "name"
            ],
            "sparse_feature_cross_eager_fallback": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "out_type",
                "internal_type",
                "name",
                "ctx"
            ],
            "sparse_feature_cross_v2": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "out_type",
                "internal_type",
                "name"
            ],
            "SparseFeatureCrossV2": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "out_type",
                "internal_type",
                "name"
            ],
            "sparse_feature_cross_v2_eager_fallback": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "out_type",
                "internal_type",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.layers.ops": {},
        "tensorflow_core.contrib.layers.python": {},
        "tensorflow_core.contrib.layers.python.ops.sparse_feature_cross_op": {
            "sparse_feature_cross": [
                "inputs",
                "hashed_output",
                "num_buckets",
                "name",
                "hash_key"
            ]
        },
        "tensorflow_core.contrib.layers.python.ops.bucketization_op": {
            "bucketize": [
                "input_tensor",
                "boundaries",
                "name"
            ]
        },
        "tensorflow_core.contrib.layers.python.ops": {},
        "tensorflow_core.contrib.layers.python.ops.sparse_ops": {
            "_multiplier_helper": [
                "shape"
            ],
            "_ignore_value_tensor": [
                "dtype",
                "ignore_value"
            ],
            "dense_to_sparse_tensor": [
                "dense_tensor",
                "ignore_value"
            ],
            "indicators_to_sparse_ids": [
                "indicators",
                "ignore_value",
                "dtype"
            ],
            "sparse_row_envelope": [
                "sparse_input",
                "row_axis",
                "col_axis",
                "name"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.layers": {
            "avg_pool2d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "avg_pool3d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "_fused_batch_norm": [
                "inputs",
                "decay",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "param_regularizers",
                "updates_collections",
                "is_training",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "data_format",
                "zero_debias_moving_mean",
                "scope"
            ],
            "batch_norm": [
                "inputs",
                "decay",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "param_regularizers",
                "updates_collections",
                "is_training",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "batch_weights",
                "fused",
                "data_format",
                "zero_debias_moving_mean",
                "scope",
                "renorm",
                "renorm_clipping",
                "renorm_decay",
                "adjustment"
            ],
            "bias_add": [
                "inputs",
                "activation_fn",
                "initializer",
                "regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "data_format",
                "scope"
            ],
            "convolution": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope",
                "conv_dims"
            ],
            "convolution1d": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution2d": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution3d": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution2d_in_plane": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution2d_transpose": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution3d_transpose": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "dense_to_sparse": [
                "tensor",
                "eos_token",
                "outputs_collections",
                "scope"
            ],
            "dropout": [
                "inputs",
                "keep_prob",
                "noise_shape",
                "is_training",
                "outputs_collections",
                "scope",
                "seed"
            ],
            "flatten": [
                "inputs",
                "outputs_collections",
                "scope"
            ],
            "_sparse_inner_flatten": [
                "inputs",
                "new_rank"
            ],
            "_dense_inner_flatten": [
                "inputs",
                "new_rank"
            ],
            "_inner_flatten": [
                "inputs",
                "new_rank",
                "output_collections",
                "scope"
            ],
            "_model_variable_getter": [
                "getter",
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "rename",
                "use_resource",
                "synchronization",
                "aggregation"
            ],
            "_build_variable_getter": [
                "rename"
            ],
            "_add_variable_to_collections": [
                "variable",
                "collections_set",
                "collections_name"
            ],
            "fully_connected": [
                "inputs",
                "num_outputs",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "gdn": [
                "inputs",
                "inverse",
                "beta_min",
                "gamma_init",
                "reparam_offset",
                "data_format",
                "activity_regularizer",
                "trainable",
                "name",
                "reuse"
            ],
            "layer_norm": [
                "inputs",
                "center",
                "scale",
                "activation_fn",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "begin_norm_axis",
                "begin_params_axis",
                "scope"
            ],
            "images_to_sequence": [
                "inputs",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "max_pool2d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "max_pool3d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "pool": [
                "inputs",
                "kernel_size",
                "pooling_type",
                "padding",
                "data_format",
                "dilation_rate",
                "stride",
                "outputs_collections",
                "scope"
            ],
            "one_hot_encoding": [
                "labels",
                "num_classes",
                "on_value",
                "off_value",
                "outputs_collections",
                "scope"
            ],
            "_apply_activation": [
                "y",
                "activation_fn",
                "output_collections"
            ],
            "repeat": [
                "inputs",
                "repetitions",
                "layer"
            ],
            "_scale_gradient_shape": [
                "op"
            ],
            "_scale_gradient_grad": [
                "op",
                "grad"
            ],
            "scale_gradient": [
                "inputs",
                "gradient_multiplier"
            ],
            "separable_convolution2d": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "depth_multiplier",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "pointwise_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "sequence_to_images": [
                "inputs",
                "height",
                "output_data_format",
                "outputs_collections",
                "scope"
            ],
            "softmax": [
                "logits",
                "scope"
            ],
            "spatial_softmax": [
                "features",
                "temperature",
                "name",
                "variables_collections",
                "trainable",
                "data_format"
            ],
            "stack": [
                "inputs",
                "layer",
                "stack_args"
            ],
            "unit_norm": [
                "inputs",
                "dim",
                "epsilon",
                "scope"
            ],
            "maxout": [
                "inputs",
                "num_units",
                "axis",
                "scope"
            ],
            "poincare_normalize": [
                "x",
                "axis",
                "epsilon",
                "name"
            ],
            "legacy_fully_connected": [
                "x",
                "num_output_units",
                "activation_fn",
                "weight_init",
                "bias_init",
                "name",
                "weight_collections",
                "bias_collections",
                "output_collections",
                "trainable",
                "weight_regularizer",
                "bias_regularizer"
            ],
            "GDN": {
                "__init__": [
                    "self",
                    "inverse",
                    "beta_min",
                    "gamma_init",
                    "reparam_offset",
                    "data_format",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ],
                "_channel_axis": [
                    "self"
                ],
                "_lower_bound": [
                    "inputs",
                    "bound",
                    "name"
                ],
                "_lower_bound_grad": [
                    "op",
                    "grad"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "compute_output_shape": [
                    "self",
                    "input_shape"
                ]
            }
        },
        "tensorflow_core.contrib.layers.python.layers.initializers": {
            "xavier_initializer": [
                "uniform",
                "seed",
                "dtype"
            ],
            "variance_scaling_initializer": [
                "factor",
                "mode",
                "uniform",
                "seed",
                "dtype"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.normalization": {
            "instance_norm": [
                "inputs",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "data_format",
                "scope"
            ],
            "group_norm": [
                "inputs",
                "groups",
                "channels_axis",
                "reduction_axes",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope",
                "mean_close_to_zero"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.optimizers": {
            "optimize_loss": [
                "loss",
                "global_step",
                "learning_rate",
                "optimizer",
                "gradient_noise_scale",
                "gradient_multipliers",
                "clip_gradients",
                "learning_rate_decay_fn",
                "update_ops",
                "variables",
                "name",
                "summaries",
                "colocate_gradients_with_ops",
                "increment_global_step"
            ],
            "_clip_gradients_by_norm": [
                "grads_and_vars",
                "clip_gradients"
            ],
            "_adaptive_max_norm": [
                "norm",
                "std_factor",
                "decay",
                "global_step",
                "epsilon",
                "name"
            ],
            "adaptive_clipping_fn": [
                "std_factor",
                "decay",
                "static_max_norm",
                "global_step",
                "report_summary",
                "epsilon",
                "name"
            ],
            "_add_scaled_noise_to_gradients": [
                "grads_and_vars",
                "gradient_noise_scale"
            ],
            "_multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.feature_column_ops": {
            "_maybe_reshape_input_tensor": [
                "tensor",
                "column_name",
                "output_rank"
            ],
            "_input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope",
                "output_rank",
                "default_name",
                "cols_to_outs"
            ],
            "input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope",
                "cols_to_outs"
            ],
            "sequence_input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "_create_embedding_lookup": [
                "column",
                "columns_to_tensors",
                "embedding_lookup_arguments",
                "num_outputs",
                "trainable",
                "weight_collections"
            ],
            "_create_joint_embedding_lookup": [
                "columns_to_tensors",
                "embedding_lookup_arguments",
                "num_outputs",
                "trainable",
                "weight_collections"
            ],
            "joint_weighted_sum_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "num_outputs",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "weighted_sum_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "num_outputs",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "parse_feature_columns_from_examples": [
                "serialized",
                "feature_columns",
                "name",
                "example_names"
            ],
            "transform_features": [
                "features",
                "feature_columns"
            ],
            "parse_feature_columns_from_sequence_examples": [
                "serialized",
                "context_feature_columns",
                "sequence_feature_columns",
                "name",
                "example_name"
            ],
            "_log_variable": [
                "variable"
            ],
            "_infer_real_valued_column_for_tensor": [
                "name",
                "tensor"
            ],
            "infer_real_valued_columns": [
                "features"
            ],
            "check_feature_columns": [
                "feature_columns"
            ],
            "_add_variable_collection": [
                "weight_collections"
            ],
            "_check_supported_sequence_columns": [
                "feature_columns"
            ],
            "_get_parent_columns": [
                "feature_column"
            ],
            "_gather_feature_columns": [
                "feature_columns"
            ],
            "_check_forbidden_sequence_columns": [
                "feature_columns"
            ],
            "_Transformer": {
                "__init__": [
                    "self",
                    "columns_to_tensors"
                ],
                "transform": [
                    "self",
                    "feature_column"
                ]
            }
        },
        "tensorflow_core.contrib.layers.python.layers.regularizers": {
            "l1_regularizer": [
                "scale",
                "scope"
            ],
            "l2_regularizer": [
                "scale",
                "scope"
            ],
            "l1_l2_regularizer": [
                "scale_l1",
                "scale_l2",
                "scope"
            ],
            "sum_regularizer": [
                "regularizer_list",
                "scope"
            ],
            "apply_regularization": [
                "regularizer",
                "weights_list"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.utils": {
            "collect_named_outputs": [
                "collections",
                "alias",
                "outputs"
            ],
            "append_tensor_alias": [
                "tensor",
                "alias"
            ],
            "gather_tensors_aliases": [
                "tensors"
            ],
            "get_tensor_aliases": [
                "tensor"
            ],
            "convert_collection_to_dict": [
                "collection",
                "clear_collection"
            ],
            "constant_value": [
                "value_or_tensor_or_var",
                "dtype"
            ],
            "static_cond": [
                "pred",
                "fn1",
                "fn2"
            ],
            "smart_cond": [
                "pred",
                "fn1",
                "fn2",
                "name"
            ],
            "get_variable_collections": [
                "variables_collections",
                "name"
            ],
            "_get_dimension": [
                "shape",
                "dim",
                "min_rank"
            ],
            "channel_dimension": [
                "shape",
                "data_format",
                "min_rank"
            ],
            "last_dimension": [
                "shape",
                "min_rank"
            ],
            "two_element_tuple": [
                "int_or_tuple"
            ],
            "n_positive_integers": [
                "n",
                "value"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.feature_column": {
            "sparse_column_with_integerized_feature": [
                "column_name",
                "bucket_size",
                "combiner",
                "dtype"
            ],
            "sparse_column_with_hash_bucket": [
                "column_name",
                "hash_bucket_size",
                "combiner",
                "dtype",
                "hash_keys"
            ],
            "sparse_column_with_keys": [
                "column_name",
                "keys",
                "default_value",
                "combiner",
                "dtype"
            ],
            "sparse_column_with_vocabulary_file": [
                "column_name",
                "vocabulary_file",
                "num_oov_buckets",
                "vocab_size",
                "default_value",
                "combiner",
                "dtype"
            ],
            "weighted_sparse_column": [
                "sparse_id_column",
                "weight_column_name",
                "dtype"
            ],
            "_is_variable": [
                "v"
            ],
            "_embeddings_from_arguments": [
                "column",
                "args",
                "weight_collections",
                "trainable",
                "output_rank"
            ],
            "_maybe_restore_from_checkpoint": [
                "checkpoint_path",
                "variable"
            ],
            "one_hot_column": [
                "sparse_id_column"
            ],
            "embedding_column": [
                "sparse_id_column",
                "dimension",
                "combiner",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm",
                "trainable"
            ],
            "shared_embedding_columns": [
                "sparse_id_columns",
                "dimension",
                "combiner",
                "shared_embedding_name",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm",
                "trainable"
            ],
            "scattered_embedding_column": [
                "column_name",
                "size",
                "dimension",
                "hash_key",
                "combiner",
                "initializer"
            ],
            "_reshape_real_valued_tensor": [
                "input_tensor",
                "output_rank",
                "column_name"
            ],
            "_real_valued_var_len_column": [
                "column_name",
                "default_value",
                "dtype",
                "normalizer",
                "is_sparse"
            ],
            "real_valued_column": [
                "column_name",
                "dimension",
                "default_value",
                "dtype",
                "normalizer"
            ],
            "bucketized_column": [
                "source_column",
                "boundaries"
            ],
            "crossed_column": [
                "columns",
                "hash_bucket_size",
                "combiner",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "hash_key"
            ],
            "_get_feature_config": [
                "feature_column"
            ],
            "create_feature_spec_for_parsing": [
                "feature_columns"
            ],
            "_create_sequence_feature_spec_for_parsing": [
                "sequence_feature_columns",
                "allow_missing_by_default"
            ],
            "make_place_holder_tensors_for_base_features": [
                "feature_columns"
            ],
            "_LinearEmbeddingLookupArguments": {},
            "_DeepEmbeddingLookupArguments": {},
            "_FeatureColumn": {
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collection",
                    "trainable",
                    "output_rank"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_key_without_properties": [
                    "self",
                    "properties"
                ]
            },
            "_SparseColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "is_integerized",
                    "bucket_size",
                    "lookup_config",
                    "combiner",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_get_input_sparse_tensor": [
                    "self",
                    "input_tensor"
                ],
                "is_compatible": [
                    "self",
                    "other_column"
                ],
                "_do_transform": [
                    "self",
                    "input_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_SparseColumnIntegerized": {
                "_do_transform": [
                    "self",
                    "input_tensor"
                ]
            },
            "_SparseColumnHashed": {
                "__new__": [
                    "cls",
                    "column_name",
                    "is_integerized",
                    "bucket_size",
                    "lookup_config",
                    "combiner",
                    "dtype",
                    "hash_keys"
                ],
                "_do_transform": [
                    "self",
                    "input_tensor"
                ]
            },
            "_SparseColumnKeys": {
                "_do_transform": [
                    "self",
                    "input_tensor"
                ]
            },
            "_SparseColumnVocabulary": {
                "_do_transform": [
                    "self",
                    "st"
                ]
            },
            "_WeightedSparseColumn": {
                "__new__": [
                    "cls",
                    "sparse_id_column",
                    "weight_column_name",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "lookup_config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_do_transform": [
                    "self",
                    "id_tensor",
                    "weight_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "is_compatible": [
                    "self",
                    "other_column"
                ]
            },
            "_OneHotColumn": {
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "transformed_input_tensor",
                    "unused_weight_collections",
                    "unused_trainable",
                    "output_rank"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ]
            },
            "_EmbeddingColumn": {
                "__new__": [
                    "cls",
                    "sparse_id_column",
                    "dimension",
                    "combiner",
                    "initializer",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "shared_embedding_name",
                    "shared_vocab_size",
                    "max_norm",
                    "trainable"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ]
            },
            "_ScatteredEmbeddingColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "size",
                    "dimension",
                    "hash_key",
                    "combiner",
                    "initializer"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ]
            },
            "_RealValuedVarLenColumn": {
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "normalizer_fn": [
                    "self"
                ],
                "_normalized_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ]
            },
            "_RealValuedColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "dimension",
                    "default_value",
                    "dtype",
                    "normalizer"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "normalizer_fn": [
                    "self"
                ],
                "_normalized_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_parse_example_spec": [
                    "self"
                ]
            },
            "_BucketizedColumn": {
                "__new__": [
                    "cls",
                    "source_column",
                    "boundaries"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "to_sparse_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_CrossedColumn": {
                "_assert_is_crossable": [
                    "column"
                ],
                "__new__": [
                    "cls",
                    "columns",
                    "hash_bucket_size",
                    "hash_key",
                    "combiner",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_num_buckets": [
                    "self"
                ],
                "_get_sparse_tensors": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            },
            "_LazyBuilderByColumnsToTensor": {
                "__init__": [
                    "self",
                    "columns_to_tensors"
                ],
                "get": [
                    "self",
                    "key"
                ]
            },
            "DataFrameColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "series"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "_SparseIdLookupConfig": {
                "__new__": [
                    "cls",
                    "vocabulary_file",
                    "keys",
                    "num_oov_buckets",
                    "vocab_size",
                    "default_value"
                ]
            }
        },
        "tensorflow_core.contrib.layers.python.layers.target_column": {
            "regression_target": [
                "label_name",
                "weight_column_name",
                "label_dimension"
            ],
            "multi_class_target": [
                "n_classes",
                "label_name",
                "weight_column_name"
            ],
            "binary_svm_target": [
                "label_name",
                "weight_column_name"
            ],
            "_mean_squared_loss": [
                "logits",
                "target"
            ],
            "_log_loss_with_two_classes": [
                "logits",
                "target"
            ],
            "_softmax_cross_entropy_loss": [
                "logits",
                "target"
            ],
            "_run_metrics": [
                "predictions",
                "labels",
                "metrics",
                "weights"
            ],
            "get_default_binary_metrics_for_eval": [
                "thresholds"
            ],
            "_float_weights_or_none": [
                "weights"
            ],
            "_labels_streaming_mean": [
                "unused_predictions",
                "labels",
                "weights"
            ],
            "_predictions_streaming_mean": [
                "predictions",
                "unused_labels",
                "weights"
            ],
            "_streaming_auc": [
                "predictions",
                "labels",
                "weights"
            ],
            "_accuracy_at_threshold": [
                "threshold"
            ],
            "_streaming_at_threshold": [
                "streaming_metrics_fn",
                "threshold"
            ],
            "ProblemType": {},
            "_TargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "num_label_columns",
                    "label_name",
                    "weight_column_name",
                    "problem_type"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ],
                "label_name": [
                    "self"
                ],
                "weight_column_name": [
                    "self"
                ],
                "num_label_columns": [
                    "self"
                ],
                "get_weight_tensor": [
                    "self",
                    "features"
                ],
                "problem_type": [
                    "self"
                ],
                "_weighted_loss": [
                    "self",
                    "loss",
                    "weight_tensor"
                ],
                "training_loss": [
                    "self",
                    "logits",
                    "target",
                    "features",
                    "name"
                ],
                "loss": [
                    "self",
                    "logits",
                    "target",
                    "features"
                ]
            },
            "_RegressionTargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "label_name",
                    "weight_column_name",
                    "label_dimension"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ]
            },
            "_MultiClassTargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "n_classes",
                    "label_name",
                    "weight_column_name"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "_default_eval_metrics": [
                    "self"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ]
            },
            "_BinarySvmTargetColumn": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ]
            },
            "_MetricKeys": {}
        },
        "tensorflow_core.contrib.layers.python.layers.encoders": {
            "bow_encoder": [
                "ids",
                "vocab_size",
                "embed_dim",
                "sparse_lookup",
                "initializer",
                "regularizer",
                "trainable",
                "scope",
                "reuse"
            ],
            "embed_sequence": [
                "ids",
                "vocab_size",
                "embed_dim",
                "unique",
                "initializer",
                "regularizer",
                "trainable",
                "scope",
                "reuse"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.summaries": {
            "_add_scalar_summary": [
                "tensor",
                "tag"
            ],
            "_add_histogram_summary": [
                "tensor",
                "tag"
            ],
            "summarize_activation": [
                "op"
            ],
            "summarize_tensor": [
                "tensor",
                "tag"
            ],
            "summarize_tensors": [
                "tensors",
                "summarizer"
            ],
            "summarize_collection": [
                "collection",
                "name_filter",
                "summarizer"
            ],
            "summarize_activations": [
                "name_filter",
                "summarizer"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers.rev_block_lib": {
            "_acc_grads": [],
            "_rev_layer_forward": [
                "xs",
                "f",
                "g",
                "f_side_input",
                "g_side_input",
                "gate_outputs"
            ],
            "_rev_layer_backward": [
                "ys",
                "grad_ys",
                "f",
                "g",
                "f_vars",
                "f_side_input",
                "g_vars",
                "g_side_input"
            ],
            "_rev_block_forward": [
                "x1",
                "x2",
                "f",
                "g",
                "num_layers",
                "f_side_input",
                "g_side_input",
                "gate_outputs"
            ],
            "_safe_wraps": [
                "fn"
            ],
            "_scope_wrap": [
                "fn",
                "scope"
            ],
            "rev_block": [
                "x1",
                "x2",
                "f",
                "g",
                "num_layers",
                "f_side_input",
                "g_side_input",
                "is_training"
            ],
            "enable_with_args": [
                "dec"
            ],
            "recompute_grad": [
                "fn",
                "use_data_dep",
                "tupleize_grads"
            ],
            "_is_on_tpu": [],
            "_recomputing_grad_fn": [
                "compute_fn",
                "original_args",
                "original_vars",
                "output_grads",
                "grad_fn_variables",
                "use_data_dep",
                "tupleize_grads",
                "arg_scope",
                "var_scope",
                "has_is_recompute_kwarg"
            ],
            "_recompute_grad": [
                "fn",
                "args",
                "use_data_dep",
                "tupleize_grads"
            ],
            "_underlying_variable_ref": [
                "t"
            ],
            "_force_data_dependency": [
                "first_compute",
                "then_compute"
            ],
            "_tuple_with_data_dep": [
                "tensors"
            ],
            "RevBlock": {
                "__init__": [
                    "self",
                    "f",
                    "g",
                    "num_layers",
                    "f_side_input",
                    "g_side_input",
                    "use_efficient_backprop",
                    "name"
                ],
                "call": [
                    "self",
                    "inputs",
                    "forward"
                ],
                "forward": [
                    "self",
                    "x1",
                    "x2"
                ],
                "backward": [
                    "self",
                    "y1",
                    "y2"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "_make_efficient_grad_fn": [
                    "self",
                    "inputs_",
                    "ys_"
                ],
                "_forward": [
                    "self",
                    "x1",
                    "x2"
                ],
                "_backward": [
                    "self",
                    "y1",
                    "y2"
                ]
            }
        },
        "tensorflow_core.contrib.layers.python.layers.embedding_ops": {
            "safe_embedding_lookup_sparse": [
                "embedding_weights",
                "sparse_ids",
                "sparse_weights",
                "combiner",
                "default_id",
                "name",
                "partition_strategy",
                "max_norm"
            ],
            "_prune_invalid_ids": [
                "sparse_ids",
                "sparse_weights"
            ],
            "_prune_invalid_weights": [
                "sparse_ids",
                "sparse_weights"
            ],
            "scattered_embedding_lookup": [
                "params",
                "values",
                "dimension",
                "name",
                "hash_key"
            ],
            "_sampled_scattered_embedding_lookup": [
                "params",
                "values",
                "dimension",
                "sampled_candidates",
                "hash_key",
                "name"
            ],
            "scattered_embedding_lookup_sparse": [
                "params",
                "sparse_values",
                "dimension",
                "combiner",
                "default_value",
                "name",
                "hash_key"
            ],
            "embedding_lookup_unique": [
                "params",
                "ids",
                "partition_strategy",
                "name"
            ],
            "_sampled_scattered_embedding_lookup_sparse": [
                "params",
                "sp_values",
                "dimension",
                "sampled_candidates",
                "hash_key",
                "with_sign_hash",
                "name"
            ],
            "embedding_lookup_sparse_with_distributed_aggregation": [
                "params",
                "sp_ids",
                "sp_weights",
                "partition_strategy",
                "name",
                "combiner",
                "max_norm"
            ],
            "_do_gather": [
                "params",
                "ids",
                "name"
            ],
            "_embedding_lookup_with_distributed_aggregation": [
                "params",
                "ids",
                "partition_strategy",
                "name",
                "max_norm",
                "weights",
                "idx",
                "segment_ids"
            ]
        },
        "tensorflow_core.contrib.layers.python.layers": {},
        "tensorflow_core.contrib.eager": {},
        "tensorflow_core.contrib.eager.python.saver": {
            "_init_from_checkpoint": [
                "self"
            ],
            "restore_variables_on_create": [
                "save_path",
                "map_func"
            ],
            "get_optimizer_variables": [
                "optimizer"
            ],
            "Saver": {
                "__init__": [
                    "self",
                    "var_list"
                ],
                "save": [
                    "self",
                    "file_prefix",
                    "global_step"
                ],
                "restore": [
                    "self",
                    "file_prefix"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.tfe": {},
        "tensorflow_core.contrib.eager.python.evaluator": {
            "Evaluator": {
                "__init__": [
                    "self",
                    "model"
                ],
                "__call__": [
                    "self"
                ],
                "init_variables": [
                    "self"
                ],
                "all_metric_results": [
                    "self",
                    "summary_logdir"
                ],
                "_all_metric_results": [
                    "self"
                ],
                "evaluate_on_dataset": [
                    "self",
                    "dataset"
                ],
                "run_evaluation": [
                    "init_op",
                    "call_op",
                    "results_op",
                    "sess"
                ],
                "call": [
                    "self",
                    "eval_data"
                ],
                "model": [
                    "self"
                ],
                "track_metric": [
                    "self",
                    "metric"
                ],
                "track_evaluator": [
                    "self",
                    "prefix",
                    "evaluator"
                ],
                "metric_variables": [
                    "self"
                ],
                "metrics": [
                    "self"
                ]
            },
            "SparseSoftmaxEvaluator": {
                "__init__": [
                    "self",
                    "model",
                    "loss_key",
                    "label_key",
                    "predicted_class_key",
                    "weights_key"
                ],
                "call": [
                    "self",
                    "eval_data"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.parameter_server": {
            "_eager_safe_variable_handle": [
                "shape",
                "dtype",
                "shared_name",
                "name",
                "graph_mode"
            ],
            "parameter_server_scope": [
                "is_chief",
                "ps_job_name",
                "num_ps_tasks"
            ],
            "SharedVariable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "name",
                    "dtype",
                    "constraint",
                    "initialize"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.metrics": {},
        "tensorflow_core.contrib.eager.python.metrics_impl": {
            "Metric": {
                "__init__": [
                    "self",
                    "name",
                    "use_global_variables"
                ],
                "__call__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "init_variables": [
                    "self"
                ],
                "build": [
                    "self"
                ],
                "call": [
                    "self"
                ],
                "result": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "aggregate": [
                    "self",
                    "metrics"
                ],
                "add_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer"
                ]
            },
            "Mean": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "use_global_variables"
                ],
                "build": [
                    "self"
                ],
                "call": [
                    "self",
                    "values",
                    "weights"
                ],
                "result": [
                    "self",
                    "write_summary"
                ]
            },
            "Accuracy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "call": [
                    "self",
                    "labels",
                    "predictions",
                    "weights"
                ]
            },
            "CategoricalAccuracy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "call": [
                    "self",
                    "labels",
                    "predictions",
                    "weights"
                ]
            },
            "BinaryAccuracy": {
                "__init__": [
                    "self",
                    "threshold",
                    "name",
                    "dtype"
                ],
                "call": [
                    "self",
                    "labels",
                    "predictions",
                    "weights"
                ]
            },
            "SparseAccuracy": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "call": [
                    "self",
                    "labels",
                    "predictions",
                    "weights"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.network": {
            "_network_name_scope_naming": [
                "current_variable_scope"
            ],
            "_default_naming_conflict_error_message": [
                "mapped_name",
                "first_variable",
                "second_variable",
                "network_name",
                "network_scope_name"
            ],
            "_restore_custom_map_func_error_message": [
                "mapped_name",
                "first_variable",
                "second_variable",
                "network_name",
                "network_scope_name"
            ],
            "_make_custom_getter_for_deferred_restorations": [],
            "_make_prefix_stripping_map_fn": [
                "scope_name"
            ],
            "save_network_checkpoint": [
                "network",
                "save_path",
                "global_step",
                "map_func"
            ],
            "_add_deferred_restoration": [
                "layer",
                "deferred_restoration"
            ],
            "_restore_existing_variables": [
                "network",
                "save_path",
                "map_func",
                "user_map_func"
            ],
            "_set_restore_on_create": [
                "network",
                "save_path",
                "map_func",
                "user_map_func",
                "existing_variables_by_checkpoint_name"
            ],
            "restore_network_checkpoint": [
                "network",
                "save_path",
                "map_func"
            ],
            "Network": {
                "__init__": [
                    "self",
                    "name"
                ],
                "_gather_saveables_for_checkpoint": [
                    "self"
                ],
                "_name_scope_name": [
                    "self",
                    "current_variable_scope"
                ],
                "_init_set_name": [
                    "self",
                    "name"
                ],
                "_finalize_name": [
                    "self",
                    "parent_network"
                ],
                "_set_scope": [
                    "self",
                    "scope"
                ],
                "_set_scope_for_nonnetwork_sublayer": [
                    "self",
                    "sublayer"
                ],
                "name": [
                    "self"
                ],
                "track_layer": [
                    "self",
                    "layer"
                ],
                "get_layer": [
                    "self",
                    "name",
                    "index"
                ],
                "weights": [
                    "self"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "trainable": [
                    "self",
                    "value"
                ],
                "layers": [
                    "self"
                ],
                "add_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "constraint"
                ],
                "add_loss": [
                    "self",
                    "losses",
                    "inputs"
                ],
                "losses": [
                    "self"
                ]
            },
            "Sequential": {
                "__init__": [
                    "self",
                    "layers_funcs",
                    "name"
                ],
                "add": [
                    "self",
                    "layer_func"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.datasets": {
            "Iterator": {
                "__init__": [
                    "self",
                    "dataset"
                ],
                "_next_internal": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python": {},
        "tensorflow_core.contrib.eager.python.examples": {},
        "tensorflow_core.contrib.eager.python.examples.gan.mnist": {
            "discriminator_loss": [
                "discriminator_real_outputs",
                "discriminator_gen_outputs"
            ],
            "generator_loss": [
                "discriminator_gen_outputs"
            ],
            "train_one_epoch": [
                "generator",
                "discriminator",
                "generator_optimizer",
                "discriminator_optimizer",
                "dataset",
                "step_counter",
                "log_interval",
                "noise_dim"
            ],
            "main": [
                "_"
            ],
            "Discriminator": {
                "__init__": [
                    "self",
                    "data_format"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "Generator": {
                "__init__": [
                    "self",
                    "data_format"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.gan": {},
        "tensorflow_core.contrib.eager.python.examples.revnet.ops": {
            "downsample": [
                "x",
                "filters",
                "strides",
                "axis"
            ]
        },
        "tensorflow_core.contrib.eager.python.examples.revnet.blocks": {
            "RevBlock": {
                "__init__": [
                    "self",
                    "n_res",
                    "filters",
                    "strides",
                    "input_shape",
                    "batch_norm_first",
                    "data_format",
                    "bottleneck",
                    "fused",
                    "dtype"
                ],
                "call": [
                    "self",
                    "h",
                    "training"
                ],
                "backward_grads": [
                    "self",
                    "x",
                    "y",
                    "dy",
                    "training"
                ]
            },
            "_Residual": {
                "__init__": [
                    "self",
                    "filters",
                    "strides",
                    "input_shape",
                    "batch_norm_first",
                    "data_format",
                    "bottleneck",
                    "fused",
                    "dtype"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ],
                "backward_grads": [
                    "self",
                    "y",
                    "dy",
                    "training"
                ],
                "backward_grads_with_downsample": [
                    "self",
                    "x",
                    "y",
                    "dy",
                    "training"
                ]
            },
            "_BottleneckResidualInner": {
                "__init__": [
                    "self",
                    "filters",
                    "strides",
                    "input_shape",
                    "batch_norm_first",
                    "data_format",
                    "fused",
                    "dtype"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            },
            "_ResidualInner": {
                "__init__": [
                    "self",
                    "filters",
                    "strides",
                    "input_shape",
                    "batch_norm_first",
                    "data_format",
                    "fused",
                    "dtype"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            },
            "InitBlock": {
                "__init__": [
                    "self",
                    "config"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            },
            "FinalBlock": {
                "__init__": [
                    "self",
                    "config"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.revnet.config": {
            "get_hparams_cifar_38": [],
            "get_hparams_cifar_110": [],
            "get_hparams_cifar_164": [],
            "get_hparams_imagenet_56": [],
            "get_hparams_imagenet_104": []
        },
        "tensorflow_core.contrib.eager.python.examples.revnet.revnet": {
            "RevNet": {
                "__init__": [
                    "self",
                    "config"
                ],
                "_construct_intermediate_blocks": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ],
                "compute_loss": [
                    "self",
                    "logits",
                    "labels"
                ],
                "compute_gradients": [
                    "self",
                    "saved_hidden",
                    "labels",
                    "training",
                    "l2_reg"
                ],
                "_apply_weight_decay": [
                    "self",
                    "grads"
                ],
                "get_moving_stats": [
                    "self"
                ],
                "restore_moving_stats": [
                    "self",
                    "values"
                ],
                "moving_average_variables": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.revnet": {},
        "tensorflow_core.contrib.eager.python.examples.spinn.data": {
            "get_non_parenthesis_words": [
                "items"
            ],
            "get_shift_reduce": [
                "items"
            ],
            "pad_and_reverse_word_ids": [
                "sentences"
            ],
            "pad_transitions": [
                "sentences_transitions"
            ],
            "load_vocabulary": [
                "data_root"
            ],
            "load_word_vectors": [
                "data_root",
                "vocab"
            ],
            "calculate_bins": [
                "length2count",
                "min_bin_size"
            ],
            "encode_sentence": [
                "sentence",
                "word2index"
            ],
            "SnliData": {
                "__init__": [
                    "self",
                    "data_file",
                    "word2index",
                    "sentence_len_limit"
                ],
                "num_batches": [
                    "self",
                    "batch_size"
                ],
                "get_generator": [
                    "self",
                    "batch_size"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.spinn": {},
        "tensorflow_core.contrib.eager.python.examples.rnn_ptb": {},
        "tensorflow_core.contrib.eager.python.examples.rnn_ptb.rnn_ptb": {
            "clip_gradients": [
                "grads_and_vars",
                "clip_ratio"
            ],
            "loss_fn": [
                "model",
                "inputs",
                "targets",
                "training"
            ],
            "_divide_into_batches": [
                "data",
                "batch_size"
            ],
            "_get_batch": [
                "data",
                "i",
                "seq_len"
            ],
            "evaluate": [
                "model",
                "data"
            ],
            "train": [
                "model",
                "optimizer",
                "train_data",
                "sequence_length",
                "clip_ratio"
            ],
            "small_model": [
                "use_cudnn_rnn"
            ],
            "large_model": [
                "use_cudnn_rnn"
            ],
            "test_model": [
                "use_cudnn_rnn"
            ],
            "main": [
                "_"
            ],
            "RNN": {
                "__init__": [
                    "self",
                    "hidden_dim",
                    "num_layers",
                    "keep_ratio"
                ],
                "call": [
                    "self",
                    "input_seq",
                    "training"
                ]
            },
            "Embedding": {
                "__init__": [
                    "self",
                    "vocab_size",
                    "embedding_dim"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "call": [
                    "self",
                    "x"
                ]
            },
            "PTBModel": {
                "__init__": [
                    "self",
                    "vocab_size",
                    "embedding_dim",
                    "hidden_dim",
                    "num_layers",
                    "dropout_ratio",
                    "use_cudnn_rnn"
                ],
                "call": [
                    "self",
                    "input_seq",
                    "training"
                ]
            },
            "Datasets": {
                "__init__": [
                    "self",
                    "path"
                ],
                "vocab_size": [
                    "self"
                ],
                "add": [
                    "self",
                    "word"
                ],
                "tokenize": [
                    "self",
                    "path"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.rnn_colorbot.rnn_colorbot": {
            "parse": [
                "line"
            ],
            "maybe_download": [
                "filename",
                "work_directory",
                "source_url"
            ],
            "load_dataset": [
                "data_dir",
                "url",
                "batch_size"
            ],
            "loss": [
                "labels",
                "predictions"
            ],
            "test": [
                "model",
                "eval_data"
            ],
            "train_one_epoch": [
                "model",
                "optimizer",
                "train_data",
                "log_interval"
            ],
            "main": [
                "_"
            ],
            "RNNColorbot": {
                "__init__": [
                    "self",
                    "rnn_cell_sizes",
                    "label_dimension",
                    "keep_prob"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.rnn_colorbot": {},
        "tensorflow_core.contrib.eager.python.examples.densenet.densenet": {
            "ConvBlock": {
                "__init__": [
                    "self",
                    "num_filters",
                    "data_format",
                    "bottleneck",
                    "weight_decay",
                    "dropout_rate"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            },
            "TransitionBlock": {
                "__init__": [
                    "self",
                    "num_filters",
                    "data_format",
                    "weight_decay",
                    "dropout_rate"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            },
            "DenseBlock": {
                "__init__": [
                    "self",
                    "num_layers",
                    "growth_rate",
                    "data_format",
                    "bottleneck",
                    "weight_decay",
                    "dropout_rate"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            },
            "DenseNet": {
                "__init__": [
                    "self",
                    "depth_of_model",
                    "growth_rate",
                    "num_of_blocks",
                    "output_classes",
                    "num_layers_in_each_block",
                    "data_format",
                    "bottleneck",
                    "compression",
                    "weight_decay",
                    "dropout_rate",
                    "pool_initial",
                    "include_top"
                ],
                "call": [
                    "self",
                    "x",
                    "training"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.densenet": {},
        "tensorflow_core.contrib.eager.python.examples.linear_regression.linear_regression": {
            "mean_square_loss": [
                "model",
                "xs",
                "ys"
            ],
            "fit": [
                "model",
                "dataset",
                "optimizer",
                "verbose",
                "logdir"
            ],
            "synthetic_dataset": [
                "w",
                "b",
                "noise_level",
                "batch_size",
                "num_batches"
            ],
            "synthetic_dataset_helper": [
                "w",
                "b",
                "num_features",
                "noise_level",
                "batch_size",
                "num_batches"
            ],
            "main": [
                "_"
            ],
            "LinearModel": {
                "__init__": [
                    "self"
                ],
                "call": [
                    "self",
                    "xs"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.linear_regression": {},
        "tensorflow_core.contrib.eager.python.examples.resnet50.resnet50": {
            "_IdentityBlock": {
                "__init__": [
                    "self",
                    "kernel_size",
                    "filters",
                    "stage",
                    "block",
                    "data_format"
                ],
                "call": [
                    "self",
                    "input_tensor",
                    "training"
                ]
            },
            "_ConvBlock": {
                "__init__": [
                    "self",
                    "kernel_size",
                    "filters",
                    "stage",
                    "block",
                    "data_format",
                    "strides"
                ],
                "call": [
                    "self",
                    "input_tensor",
                    "training"
                ]
            },
            "ResNet50": {
                "__init__": [
                    "self",
                    "data_format",
                    "name",
                    "trainable",
                    "include_top",
                    "pooling",
                    "classes"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.resnet50": {},
        "tensorflow_core.contrib.eager.python.examples.l2hmc.l2hmc": {
            "get_scg_energy_fn": [],
            "get_rw_energy_fn": [],
            "compute_loss": [
                "dynamics",
                "x",
                "scale",
                "eps"
            ],
            "loss_and_grads": [
                "dynamics",
                "x",
                "loss_fn"
            ],
            "Dynamics": {
                "__init__": [
                    "self",
                    "x_dim",
                    "minus_loglikelihood_fn",
                    "n_steps",
                    "eps",
                    "np_seed"
                ],
                "apply_transition": [
                    "self",
                    "position"
                ],
                "transition_kernel": [
                    "self",
                    "position",
                    "forward"
                ],
                "_forward_lf": [
                    "self",
                    "position",
                    "momentum",
                    "i"
                ],
                "_backward_lf": [
                    "self",
                    "position",
                    "momentum",
                    "i"
                ],
                "_update_momentum_forward": [
                    "self",
                    "position",
                    "momentum",
                    "t"
                ],
                "_update_position_forward": [
                    "self",
                    "position",
                    "momentum",
                    "t",
                    "mask",
                    "mask_inv"
                ],
                "_update_momentum_backward": [
                    "self",
                    "position",
                    "momentum",
                    "t"
                ],
                "_update_position_backward": [
                    "self",
                    "position",
                    "momentum",
                    "t",
                    "mask",
                    "mask_inv"
                ],
                "_compute_accept_prob": [
                    "self",
                    "position",
                    "momentum",
                    "position_post",
                    "momentum_post",
                    "sumlogdet"
                ],
                "_construct_time": [
                    "self"
                ],
                "_get_time": [
                    "self",
                    "i"
                ],
                "_construct_masks": [
                    "self"
                ],
                "_get_mask": [
                    "self",
                    "i"
                ],
                "kinetic": [
                    "self",
                    "v"
                ],
                "hamiltonian": [
                    "self",
                    "position",
                    "momentum"
                ],
                "grad_potential": [
                    "self",
                    "position",
                    "check_numerics"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.l2hmc.neural_nets": {
            "_custom_dense": [
                "units",
                "factor"
            ],
            "GenericNet": {
                "__init__": [
                    "self",
                    "x_dim",
                    "factor",
                    "n_hidden"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            }
        },
        "tensorflow_core.contrib.eager.python.examples.l2hmc": {},
        "tensorflow_core.contrib.stat_summarizer": {},
        "tensorflow_core.contrib.constrained_optimization": {},
        "tensorflow_core.contrib.constrained_optimization.python.test_util": {
            "ConstantMinimizationProblem": {
                "__init__": [
                    "self",
                    "constraints"
                ],
                "objective": [
                    "self"
                ],
                "constraints": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.constrained_optimization.python.swap_regret_optimizer": {
            "_maximal_eigenvector_power_method": [
                "matrix",
                "epsilon",
                "maximum_iterations"
            ],
            "_project_stochastic_matrix_wrt_euclidean_norm": [
                "matrix"
            ],
            "_project_log_stochastic_matrix_wrt_kl_divergence": [
                "log_matrix"
            ],
            "_SwapRegretOptimizer": {
                "__init__": [
                    "self",
                    "optimizer",
                    "constraint_optimizer"
                ],
                "constraint_optimizer": [
                    "self"
                ],
                "_initial_state": [
                    "self",
                    "num_constraints"
                ],
                "_stochastic_matrix": [
                    "self",
                    "state"
                ],
                "_distribution": [
                    "self",
                    "state"
                ],
                "_constraint_grad_and_var": [
                    "self",
                    "state",
                    "gradient"
                ],
                "_projection_op": [
                    "self",
                    "state",
                    "name"
                ],
                "_minimize_constrained": [
                    "self",
                    "minimization_problem",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ]
            },
            "AdditiveSwapRegretOptimizer": {
                "__init__": [
                    "self",
                    "optimizer",
                    "constraint_optimizer"
                ],
                "_initial_state": [
                    "self",
                    "num_constraints"
                ],
                "_stochastic_matrix": [
                    "self",
                    "state"
                ],
                "_constraint_grad_and_var": [
                    "self",
                    "state",
                    "gradient"
                ],
                "_projection_op": [
                    "self",
                    "state",
                    "name"
                ]
            },
            "MultiplicativeSwapRegretOptimizer": {
                "__init__": [
                    "self",
                    "optimizer",
                    "constraint_optimizer",
                    "minimum_multiplier_radius",
                    "initial_multiplier_radius"
                ],
                "_initial_state": [
                    "self",
                    "num_constraints"
                ],
                "_stochastic_matrix": [
                    "self",
                    "state"
                ],
                "_constraint_grad_and_var": [
                    "self",
                    "state",
                    "gradient"
                ],
                "_projection_op": [
                    "self",
                    "state",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.constrained_optimization.python.constrained_minimization_problem": {
            "ConstrainedMinimizationProblem": {
                "objective": [
                    "self"
                ],
                "num_constraints": [
                    "self"
                ],
                "constraints": [
                    "self"
                ],
                "proxy_constraints": [
                    "self"
                ],
                "pre_train_ops": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.constrained_optimization.python.constrained_optimizer": {
            "ConstrainedOptimizer": {
                "__init__": [
                    "self",
                    "optimizer"
                ],
                "optimizer": [
                    "self"
                ],
                "_minimize_constrained": [
                    "self",
                    "minimization_problem",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ],
                "minimize_constrained": [
                    "self",
                    "minimization_problem",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ],
                "minimize_unconstrained": [
                    "self",
                    "minimization_problem",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ],
                "minimize": [
                    "self",
                    "minimization_problem",
                    "unconstrained_steps",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ]
            }
        },
        "tensorflow_core.contrib.constrained_optimization.python.external_regret_optimizer": {
            "_project_multipliers_wrt_euclidean_norm": [
                "multipliers",
                "radius"
            ],
            "_ExternalRegretOptimizer": {
                "__init__": [
                    "self",
                    "optimizer",
                    "constraint_optimizer"
                ],
                "constraint_optimizer": [
                    "self"
                ],
                "_initial_state": [
                    "self",
                    "num_constraints"
                ],
                "_lagrange_multipliers": [
                    "self",
                    "state"
                ],
                "_constraint_grad_and_var": [
                    "self",
                    "state",
                    "gradient"
                ],
                "_projection_op": [
                    "self",
                    "state",
                    "name"
                ],
                "_minimize_constrained": [
                    "self",
                    "minimization_problem",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ]
            },
            "AdditiveExternalRegretOptimizer": {
                "__init__": [
                    "self",
                    "optimizer",
                    "constraint_optimizer",
                    "maximum_multiplier_radius"
                ],
                "_initial_state": [
                    "self",
                    "num_constraints"
                ],
                "_lagrange_multipliers": [
                    "self",
                    "state"
                ],
                "_constraint_grad_and_var": [
                    "self",
                    "state",
                    "gradient"
                ],
                "_projection_op": [
                    "self",
                    "state",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.constrained_optimization.python.candidates": {
            "_find_best_candidate_distribution_helper": [
                "objective_vector",
                "constraints_matrix",
                "maximum_violation"
            ],
            "find_best_candidate_distribution": [
                "objective_vector",
                "constraints_matrix",
                "epsilon"
            ],
            "find_best_candidate_index": [
                "objective_vector",
                "constraints_matrix",
                "rank_objectives"
            ]
        },
        "tensorflow_core.contrib.constrained_optimization.python": {},
        "tensorflow_core.contrib.batching": {},
        "tensorflow_core.contrib.batching.python": {},
        "tensorflow_core.contrib.batching.python.ops.batch_ops_test": {
            "delayed_plus1": [
                "x"
            ],
            "BatchOpsTest": {
                "testBasicUnbatchV1Decorated": [
                    "self"
                ],
                "testUnbatchGrad": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.batching.python.ops.batch_ops": {
            "_BatchGrad": [
                "op"
            ],
            "_UnbatchGrad": [
                "op",
                "grad"
            ],
            "batch_function_v1": [
                "num_batch_threads",
                "max_batch_size",
                "batch_timeout_micros",
                "allowed_batch_sizes",
                "grad_timeout_micros",
                "unbatch_timeout_micros",
                "max_enqueued_batches"
            ]
        },
        "tensorflow_core.contrib.batching.python.ops": {},
        "tensorflow_core.contrib.training": {},
        "tensorflow_core.contrib.training.python": {},
        "tensorflow_core.contrib.training.python.training.training": {
            "add_gradients_summaries": [
                "grads_and_vars"
            ],
            "clip_gradient_norms": [
                "gradients_to_variables",
                "max_norm"
            ],
            "clip_gradient_norms_fn": [
                "max_norm"
            ],
            "multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ],
            "create_train_op": [
                "total_loss",
                "optimizer",
                "global_step",
                "update_ops",
                "variables_to_train",
                "transform_grads_fn",
                "summarize_gradients",
                "gate_gradients",
                "aggregation_method",
                "colocate_gradients_with_ops",
                "check_numerics"
            ],
            "train": [
                "train_op",
                "logdir",
                "master",
                "is_chief",
                "scaffold",
                "hooks",
                "chief_only_hooks",
                "save_checkpoint_secs",
                "save_summaries_steps",
                "config",
                "max_wait_secs",
                "run_metadata"
            ]
        },
        "tensorflow_core.contrib.training.python.training.tuner": {
            "Tuner": {
                "next_trial": [
                    "self"
                ],
                "run_experiment": [
                    "self",
                    "experiment_fn"
                ]
            }
        },
        "tensorflow_core.contrib.training.python.training.resample": {
            "_repeat_range": [
                "counts",
                "name"
            ],
            "resample_at_rate": [
                "inputs",
                "rates",
                "scope",
                "seed",
                "back_prop"
            ],
            "weighted_resample": [
                "inputs",
                "weights",
                "overall_rate",
                "scope",
                "mean_decay",
                "seed"
            ]
        },
        "tensorflow_core.contrib.training.python.training.bucket_ops": {
            "_validate_bucket": [
                "tensor_list"
            ],
            "bucket": [
                "tensors",
                "which_bucket",
                "batch_size",
                "num_buckets",
                "num_threads",
                "capacity",
                "bucket_capacities",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "keep_input",
                "shared_name",
                "name"
            ],
            "bucket_by_sequence_length": [
                "input_length",
                "tensors",
                "batch_size",
                "bucket_boundaries",
                "num_threads",
                "capacity",
                "bucket_capacities",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "keep_input",
                "shared_name",
                "name"
            ]
        },
        "tensorflow_core.contrib.training.python.training.hparam_pb2": {},
        "tensorflow_core.contrib.training.python.training.sequence_queueing_state_saver": {
            "_check_multiple_of": [
                "value",
                "multiple_of"
            ],
            "_check_rank": [
                "value",
                "expected_rank"
            ],
            "_check_shape": [
                "value",
                "expected_shape"
            ],
            "_check_dimensions": [
                "value",
                "dimensions",
                "expected_sizes",
                "debug_prefix"
            ],
            "_prepare_sequence_inputs": [
                "inputs",
                "states"
            ],
            "batch_sequences_with_states": [
                "input_key",
                "input_sequences",
                "input_context",
                "input_length",
                "initial_states",
                "num_unroll",
                "batch_size",
                "num_threads",
                "capacity",
                "allow_small_batch",
                "pad",
                "make_keys_unique",
                "make_keys_unique_seed",
                "name"
            ],
            "_padding": [
                "sequences",
                "num_unroll"
            ],
            "_move_sparse_tensor_out_context": [
                "input_context",
                "input_sequences",
                "num_unroll"
            ],
            "_move_sparse_tensor_in_context": [
                "context",
                "sequences"
            ],
            "_deconstruct_sparse_tensor_seq": [
                "input_sequence",
                "shared_name"
            ],
            "_reconstruct_sparse_tensor_seq": [
                "sequence",
                "sparse_tensor_keys",
                "tensor_op_list",
                "batch_size",
                "num_unroll"
            ],
            "_SequenceInputWrapper": {
                "__init__": [
                    "self",
                    "length",
                    "key",
                    "sequences",
                    "context"
                ],
                "length": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "sequences": [
                    "self"
                ],
                "context": [
                    "self"
                ]
            },
            "NextQueuedSequenceBatch": {
                "__init__": [
                    "self",
                    "state_saver"
                ],
                "total_length": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "insertion_index": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "next_key": [
                    "self"
                ],
                "sequence": [
                    "self"
                ],
                "sequence_count": [
                    "self"
                ],
                "context": [
                    "self"
                ],
                "sequences": [
                    "self"
                ],
                "state": [
                    "self",
                    "state_name"
                ],
                "save_state": [
                    "self",
                    "state_name",
                    "value",
                    "name"
                ]
            },
            "SequenceQueueingStateSaver": {
                "__init__": [
                    "self",
                    "batch_size",
                    "num_unroll",
                    "input_length",
                    "input_key",
                    "input_sequences",
                    "input_context",
                    "initial_states",
                    "capacity",
                    "allow_small_batch",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "barrier": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "num_unroll": [
                    "self"
                ],
                "prefetch_op": [
                    "self"
                ],
                "next_batch": [
                    "self"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "_store_index_maps": [
                    "self",
                    "sequences",
                    "context",
                    "states"
                ],
                "_get_barrier_length_index": [
                    "self"
                ],
                "_get_barrier_total_length_index": [
                    "self"
                ],
                "_get_barrier_next_key_index": [
                    "self"
                ],
                "_get_barrier_sequence_index": [
                    "self"
                ],
                "_get_barrier_sequence_count_index": [
                    "self"
                ],
                "_get_barrier_index": [
                    "self",
                    "index_type",
                    "name"
                ],
                "_create_barrier": [
                    "self"
                ],
                "_create_prefetch_op": [
                    "self"
                ],
                "_prepare_barrier_reads": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.training.python.training.hparam": {
            "_parse_fail": [
                "name",
                "var_type",
                "value",
                "values"
            ],
            "_reuse_fail": [
                "name",
                "values"
            ],
            "_process_scalar_value": [
                "name",
                "parse_fn",
                "var_type",
                "m_dict",
                "values",
                "results_dictionary"
            ],
            "_process_list_value": [
                "name",
                "parse_fn",
                "var_type",
                "m_dict",
                "values",
                "results_dictionary"
            ],
            "_cast_to_type_if_compatible": [
                "name",
                "param_type",
                "value"
            ],
            "parse_values": [
                "values",
                "type_map",
                "ignore_unknown"
            ],
            "HParams": {
                "__init__": [
                    "self",
                    "hparam_def",
                    "model_structure"
                ],
                "_init_from_proto": [
                    "self",
                    "hparam_def"
                ],
                "add_hparam": [
                    "self",
                    "name",
                    "value"
                ],
                "set_hparam": [
                    "self",
                    "name",
                    "value"
                ],
                "del_hparam": [
                    "self",
                    "name"
                ],
                "parse": [
                    "self",
                    "values"
                ],
                "override_from_dict": [
                    "self",
                    "values_dict"
                ],
                "set_from_map": [
                    "self",
                    "values_map"
                ],
                "set_model_structure": [
                    "self",
                    "model_structure"
                ],
                "get_model_structure": [
                    "self"
                ],
                "to_json": [
                    "self",
                    "indent",
                    "separators",
                    "sort_keys"
                ],
                "parse_json": [
                    "self",
                    "values_json"
                ],
                "values": [
                    "self"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_get_kind_name": [
                    "param_type",
                    "is_list"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "hparam_def",
                    "import_scope"
                ]
            }
        },
        "tensorflow_core.contrib.training.python.training.evaluation": {
            "wait_for_new_checkpoint": [
                "checkpoint_dir",
                "last_checkpoint",
                "seconds_to_sleep",
                "timeout"
            ],
            "checkpoints_iterator": [
                "checkpoint_dir",
                "min_interval_secs",
                "timeout",
                "timeout_fn"
            ],
            "_scaffold_with_init": [
                "scaffold",
                "saver",
                "checkpoint_path"
            ],
            "evaluate_repeatedly": [
                "checkpoint_dir",
                "master",
                "scaffold",
                "eval_ops",
                "feed_dict",
                "final_ops",
                "final_ops_feed_dict",
                "eval_interval_secs",
                "hooks",
                "config",
                "max_number_of_evaluations",
                "timeout",
                "timeout_fn"
            ],
            "SummaryAtEndHook": {
                "__init__": [
                    "self",
                    "log_dir",
                    "summary_writer",
                    "summary_op",
                    "feed_dict"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow_core.contrib.training.python.training.sampling_ops": {
            "rejection_sample": [
                "tensors",
                "accept_prob_fn",
                "batch_size",
                "queue_threads",
                "enqueue_many",
                "prebatch_capacity",
                "prebatch_threads",
                "runtime_checks",
                "name"
            ],
            "stratified_sample": [
                "tensors",
                "labels",
                "target_probs",
                "batch_size",
                "init_probs",
                "enqueue_many",
                "queue_capacity",
                "threads_per_queue",
                "name"
            ],
            "_estimate_data_distribution": [
                "labels",
                "num_classes",
                "smoothing_constant"
            ],
            "_verify_data_inputs": [
                "tensor_list"
            ],
            "_verify_input": [
                "tensor_list",
                "labels",
                "probs_list"
            ],
            "_calculate_acceptance_probabilities": [
                "init_probs",
                "target_probs"
            ]
        },
        "tensorflow_core.contrib.training.python.training.device_setter": {
            "byte_size_load_fn": [
                "op"
            ],
            "RandomStrategy": {
                "__init__": [
                    "self",
                    "num_ps_tasks",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            },
            "GreedyLoadBalancingStrategy": {
                "__init__": [
                    "self",
                    "num_tasks",
                    "load_fn"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow_core.contrib.training.python.training": {},
        "tensorflow_core.contrib.training.python.training.feeding_queue_runner": {},
        "tensorflow_core.contrib.seq2seq": {},
        "tensorflow_core.contrib.seq2seq.ops.gen_beam_search_ops": {
            "gather_tree": [
                "step_ids",
                "parent_ids",
                "max_sequence_lengths",
                "end_token",
                "name"
            ],
            "GatherTree": [
                "step_ids",
                "parent_ids",
                "max_sequence_lengths",
                "end_token",
                "name"
            ],
            "gather_tree_eager_fallback": [
                "step_ids",
                "parent_ids",
                "max_sequence_lengths",
                "end_token",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.seq2seq.ops": {},
        "tensorflow_core.contrib.seq2seq.python": {},
        "tensorflow_core.contrib.seq2seq.python.ops.attention_wrapper": {
            "_luong_score": [
                "query",
                "keys",
                "scale"
            ],
            "_bahdanau_score": [
                "processed_query",
                "keys",
                "attention_v",
                "attention_g",
                "attention_b"
            ],
            "safe_cumprod": [
                "x"
            ],
            "monotonic_attention": [
                "p_choose_i",
                "previous_attention",
                "mode"
            ],
            "_monotonic_probability_fn": [
                "score",
                "previous_alignments",
                "sigmoid_noise",
                "mode",
                "seed"
            ],
            "_prepare_memory": [
                "memory",
                "memory_sequence_length",
                "memory_mask",
                "check_inner_dims_defined"
            ],
            "_maybe_mask_score": [
                "score",
                "memory_sequence_length",
                "memory_mask",
                "score_mask_value"
            ],
            "hardmax": [
                "logits",
                "name"
            ],
            "_compute_attention": [
                "attention_mechanism",
                "cell_output",
                "attention_state",
                "attention_layer"
            ],
            "AttentionMechanism": {
                "alignments_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ]
            },
            "_BaseAttentionMechanism": {
                "__init__": [
                    "self",
                    "query_layer",
                    "memory",
                    "probability_fn",
                    "memory_sequence_length",
                    "memory_layer",
                    "check_inner_dims_defined",
                    "score_mask_value",
                    "custom_key_value_fn",
                    "name"
                ],
                "memory_layer": [
                    "self"
                ],
                "query_layer": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "alignments_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "initial_alignments": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "initial_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ]
            },
            "_BaseAttentionMechanismV2": {
                "__init__": [
                    "self",
                    "memory",
                    "probability_fn",
                    "query_layer",
                    "memory_layer",
                    "memory_sequence_length"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "__call__": [
                    "self",
                    "inputs"
                ],
                "call": [
                    "self",
                    "inputs",
                    "mask",
                    "setup_memory"
                ],
                "_setup_memory": [
                    "self",
                    "memory",
                    "memory_sequence_length",
                    "memory_mask"
                ],
                "_calculate_attention": [
                    "self",
                    "query",
                    "state"
                ],
                "compute_mask": [
                    "self",
                    "inputs",
                    "mask"
                ],
                "get_config": [
                    "self"
                ],
                "_process_probability_fn": [
                    "self",
                    "func_name"
                ],
                "deserialize_inner_layer_from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ],
                "alignments_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "initial_alignments": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "initial_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ]
            },
            "LuongAttention": {
                "__init__": [
                    "self",
                    "num_units",
                    "memory",
                    "memory_sequence_length",
                    "scale",
                    "probability_fn",
                    "score_mask_value",
                    "dtype",
                    "custom_key_value_fn",
                    "name"
                ],
                "__call__": [
                    "self",
                    "query",
                    "state"
                ]
            },
            "LuongAttentionV2": {
                "__init__": [
                    "self",
                    "units",
                    "memory",
                    "memory_sequence_length",
                    "scale",
                    "probability_fn",
                    "dtype",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_calculate_attention": [
                    "self",
                    "query",
                    "state"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "BahdanauAttention": {
                "__init__": [
                    "self",
                    "num_units",
                    "memory",
                    "memory_sequence_length",
                    "normalize",
                    "probability_fn",
                    "score_mask_value",
                    "dtype",
                    "custom_key_value_fn",
                    "name"
                ],
                "__call__": [
                    "self",
                    "query",
                    "state"
                ]
            },
            "BahdanauAttentionV2": {
                "__init__": [
                    "self",
                    "units",
                    "memory",
                    "memory_sequence_length",
                    "normalize",
                    "probability_fn",
                    "kernel_initializer",
                    "dtype",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_calculate_attention": [
                    "self",
                    "query",
                    "state"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "_BaseMonotonicAttentionMechanism": {
                "initial_alignments": [
                    "self",
                    "batch_size",
                    "dtype"
                ]
            },
            "_BaseMonotonicAttentionMechanismV2": {
                "initial_alignments": [
                    "self",
                    "batch_size",
                    "dtype"
                ]
            },
            "BahdanauMonotonicAttention": {
                "__init__": [
                    "self",
                    "num_units",
                    "memory",
                    "memory_sequence_length",
                    "normalize",
                    "score_mask_value",
                    "sigmoid_noise",
                    "sigmoid_noise_seed",
                    "score_bias_init",
                    "mode",
                    "dtype",
                    "name"
                ],
                "__call__": [
                    "self",
                    "query",
                    "state"
                ]
            },
            "BahdanauMonotonicAttentionV2": {
                "__init__": [
                    "self",
                    "units",
                    "memory",
                    "memory_sequence_length",
                    "normalize",
                    "sigmoid_noise",
                    "sigmoid_noise_seed",
                    "score_bias_init",
                    "mode",
                    "kernel_initializer",
                    "dtype",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_calculate_attention": [
                    "self",
                    "query",
                    "state"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "LuongMonotonicAttention": {
                "__init__": [
                    "self",
                    "num_units",
                    "memory",
                    "memory_sequence_length",
                    "scale",
                    "score_mask_value",
                    "sigmoid_noise",
                    "sigmoid_noise_seed",
                    "score_bias_init",
                    "mode",
                    "dtype",
                    "name"
                ],
                "__call__": [
                    "self",
                    "query",
                    "state"
                ]
            },
            "LuongMonotonicAttentionV2": {
                "__init__": [
                    "self",
                    "units",
                    "memory",
                    "memory_sequence_length",
                    "scale",
                    "sigmoid_noise",
                    "sigmoid_noise_seed",
                    "score_bias_init",
                    "mode",
                    "dtype",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_calculate_attention": [
                    "self",
                    "query",
                    "state"
                ],
                "get_config": [
                    "self"
                ],
                "from_config": [
                    "cls",
                    "config",
                    "custom_objects"
                ]
            },
            "AttentionWrapperState": {
                "clone": [
                    "self"
                ]
            },
            "AttentionWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "attention_mechanism",
                    "attention_layer_size",
                    "alignment_history",
                    "cell_input_fn",
                    "output_attention",
                    "initial_cell_state",
                    "name",
                    "attention_layer",
                    "attention_fn",
                    "dtype"
                ],
                "_batch_size_checks": [
                    "self",
                    "batch_size",
                    "error_message"
                ],
                "_item_or_tuple": [
                    "self",
                    "seq"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.seq2seq.python.ops.sampler": {
            "_call_sampler": [
                "sample_n_fn",
                "sample_shape",
                "name"
            ],
            "bernoulli_sample": [
                "probs",
                "logits",
                "dtype",
                "sample_shape",
                "seed"
            ],
            "categorical_sample": [
                "logits",
                "dtype",
                "sample_shape",
                "seed"
            ],
            "_unstack_ta": [
                "inp"
            ],
            "Sampler": {
                "initialize": [
                    "self",
                    "inputs"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ]
            },
            "CustomSampler": {
                "__init__": [
                    "self",
                    "initialize_fn",
                    "sample_fn",
                    "next_inputs_fn",
                    "sample_ids_shape",
                    "sample_ids_dtype"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "inputs"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids"
                ]
            },
            "TrainingSampler": {
                "__init__": [
                    "self",
                    "time_major"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "inputs",
                    "sequence_length"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids"
                ]
            },
            "ScheduledEmbeddingTrainingSampler": {
                "__init__": [
                    "self",
                    "sampling_probability",
                    "embedding_fn",
                    "time_major",
                    "seed",
                    "scheduling_seed"
                ],
                "initialize": [
                    "self",
                    "inputs",
                    "sequence_length",
                    "embedding"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids"
                ]
            },
            "ScheduledOutputTrainingSampler": {
                "__init__": [
                    "self",
                    "sampling_probability",
                    "time_major",
                    "seed",
                    "next_inputs_fn"
                ],
                "initialize": [
                    "self",
                    "inputs",
                    "sequence_length",
                    "auxiliary_inputs"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids"
                ]
            },
            "GreedyEmbeddingSampler": {
                "__init__": [
                    "self",
                    "embedding_fn"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "embedding",
                    "start_tokens",
                    "end_token"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids"
                ]
            },
            "SampleEmbeddingSampler": {
                "__init__": [
                    "self",
                    "embedding_fn",
                    "softmax_temperature",
                    "seed"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ]
            },
            "InferenceSampler": {
                "__init__": [
                    "self",
                    "sample_fn",
                    "sample_shape",
                    "sample_dtype",
                    "end_fn",
                    "next_inputs_fn"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "start_inputs"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids"
                ]
            }
        },
        "tensorflow_core.contrib.seq2seq.python.ops.decoder": {
            "_create_zero_outputs": [
                "size",
                "dtype",
                "batch_size"
            ],
            "dynamic_decode": [
                "decoder",
                "output_time_major",
                "impute_finished",
                "maximum_iterations",
                "parallel_iterations",
                "swap_memory",
                "scope"
            ],
            "Decoder": {
                "batch_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "output_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "step": [
                    "self",
                    "time",
                    "inputs",
                    "state",
                    "name"
                ],
                "finalize": [
                    "self",
                    "outputs",
                    "final_state",
                    "sequence_lengths"
                ],
                "tracks_own_finished": [
                    "self"
                ]
            },
            "BaseDecoder": {
                "__init__": [
                    "self",
                    "output_time_major",
                    "impute_finished",
                    "maximum_iterations",
                    "parallel_iterations",
                    "swap_memory"
                ],
                "call": [
                    "self",
                    "inputs",
                    "initial_state"
                ],
                "batch_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "output_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "inputs",
                    "initial_state"
                ],
                "step": [
                    "self",
                    "time",
                    "inputs",
                    "state"
                ],
                "finalize": [
                    "self",
                    "outputs",
                    "final_state",
                    "sequence_lengths"
                ],
                "tracks_own_finished": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.seq2seq.python.ops.beam_search_decoder": {
            "_tile_batch": [
                "t",
                "multiplier"
            ],
            "tile_batch": [
                "t",
                "multiplier",
                "name"
            ],
            "gather_tree_from_array": [
                "t",
                "parent_ids",
                "sequence_length"
            ],
            "_check_ndims": [
                "t"
            ],
            "_check_static_batch_beam_maybe": [
                "shape",
                "batch_size",
                "beam_width"
            ],
            "_check_batch_beam": [
                "t",
                "batch_size",
                "beam_width"
            ],
            "_beam_search_step": [
                "time",
                "logits",
                "next_cell_state",
                "beam_state",
                "batch_size",
                "beam_width",
                "end_token",
                "length_penalty_weight",
                "coverage_penalty_weight"
            ],
            "get_attention_probs": [
                "next_cell_state",
                "coverage_penalty_weight"
            ],
            "_get_scores": [
                "log_probs",
                "sequence_lengths",
                "length_penalty_weight",
                "coverage_penalty_weight",
                "finished",
                "accumulated_attention_probs"
            ],
            "attention_probs_from_attn_state": [
                "attention_state"
            ],
            "_length_penalty": [
                "sequence_lengths",
                "penalty_factor"
            ],
            "_mask_probs": [
                "probs",
                "eos_token",
                "finished"
            ],
            "_maybe_tensor_gather_helper": [
                "gather_indices",
                "gather_from",
                "batch_size",
                "range_size",
                "gather_shape"
            ],
            "_tensor_gather_helper": [
                "gather_indices",
                "gather_from",
                "batch_size",
                "range_size",
                "gather_shape",
                "name"
            ],
            "BeamSearchDecoderState": {},
            "BeamSearchDecoderOutput": {},
            "FinalBeamSearchDecoderOutput": {},
            "BeamSearchDecoderMixin": {
                "__init__": [
                    "self",
                    "cell",
                    "beam_width",
                    "output_layer",
                    "length_penalty_weight",
                    "coverage_penalty_weight",
                    "reorder_tensor_arrays"
                ],
                "batch_size": [
                    "self"
                ],
                "_rnn_output_size": [
                    "self"
                ],
                "tracks_own_finished": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "finalize": [
                    "self",
                    "outputs",
                    "final_state",
                    "sequence_lengths"
                ],
                "_merge_batch_beams": [
                    "self",
                    "t",
                    "s"
                ],
                "_split_batch_beams": [
                    "self",
                    "t",
                    "s"
                ],
                "_maybe_split_batch_beams": [
                    "self",
                    "t",
                    "s"
                ],
                "_maybe_merge_batch_beams": [
                    "self",
                    "t",
                    "s"
                ],
                "_maybe_sort_array_beams": [
                    "self",
                    "t",
                    "parent_ids",
                    "sequence_length"
                ],
                "step": [
                    "self",
                    "time",
                    "inputs",
                    "state",
                    "name"
                ]
            },
            "BeamSearchDecoder": {
                "__init__": [
                    "self",
                    "cell",
                    "embedding",
                    "start_tokens",
                    "end_token",
                    "initial_state",
                    "beam_width",
                    "output_layer",
                    "length_penalty_weight",
                    "coverage_penalty_weight",
                    "reorder_tensor_arrays"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "output_dtype": [
                    "self"
                ]
            },
            "BeamSearchDecoderV2": {
                "__init__": [
                    "self",
                    "cell",
                    "beam_width",
                    "embedding_fn",
                    "output_layer",
                    "length_penalty_weight",
                    "coverage_penalty_weight",
                    "reorder_tensor_arrays"
                ],
                "initialize": [
                    "self",
                    "embedding",
                    "start_tokens",
                    "end_token",
                    "initial_state"
                ],
                "output_dtype": [
                    "self"
                ],
                "call": [
                    "self",
                    "embeddning",
                    "start_tokens",
                    "end_token",
                    "initial_state"
                ]
            }
        },
        "tensorflow_core.contrib.seq2seq.python.ops.loss": {
            "sequence_loss": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "average_across_batch",
                "sum_over_timesteps",
                "sum_over_batch",
                "softmax_loss_function",
                "name"
            ],
            "SequenceLoss": {
                "__init__": [
                    "self",
                    "average_across_timesteps",
                    "average_across_batch",
                    "sum_over_timesteps",
                    "sum_over_batch",
                    "softmax_loss_function",
                    "name"
                ],
                "__call__": [
                    "self",
                    "y_true",
                    "y_pred",
                    "sample_weight"
                ],
                "call": [
                    "self",
                    "y_true",
                    "y_pred"
                ]
            }
        },
        "tensorflow_core.contrib.seq2seq.python.ops.basic_decoder": {
            "BasicDecoderOutput": {},
            "BasicDecoder": {
                "__init__": [
                    "self",
                    "cell",
                    "helper",
                    "initial_state",
                    "output_layer"
                ],
                "batch_size": [
                    "self"
                ],
                "_rnn_output_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "output_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "step": [
                    "self",
                    "time",
                    "inputs",
                    "state",
                    "name"
                ]
            },
            "BasicDecoderV2": {
                "__init__": [
                    "self",
                    "cell",
                    "sampler",
                    "output_layer"
                ],
                "initialize": [
                    "self",
                    "inputs",
                    "initial_state"
                ],
                "batch_size": [
                    "self"
                ],
                "_rnn_output_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "output_dtype": [
                    "self"
                ],
                "step": [
                    "self",
                    "time",
                    "inputs",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.seq2seq.python.ops.helper": {
            "_call_sampler": [
                "sample_n_fn",
                "sample_shape",
                "name"
            ],
            "bernoulli_sample": [
                "probs",
                "logits",
                "dtype",
                "sample_shape",
                "seed"
            ],
            "categorical_sample": [
                "logits",
                "dtype",
                "sample_shape",
                "seed"
            ],
            "_unstack_ta": [
                "inp"
            ],
            "Helper": {
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids",
                    "name"
                ]
            },
            "CustomHelper": {
                "__init__": [
                    "self",
                    "initialize_fn",
                    "sample_fn",
                    "next_inputs_fn",
                    "sample_ids_shape",
                    "sample_ids_dtype"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids",
                    "name"
                ]
            },
            "TrainingHelper": {
                "__init__": [
                    "self",
                    "inputs",
                    "sequence_length",
                    "time_major",
                    "name"
                ],
                "inputs": [
                    "self"
                ],
                "sequence_length": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "name"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ]
            },
            "ScheduledEmbeddingTrainingHelper": {
                "__init__": [
                    "self",
                    "inputs",
                    "sequence_length",
                    "embedding",
                    "sampling_probability",
                    "time_major",
                    "seed",
                    "scheduling_seed",
                    "name"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids",
                    "name"
                ]
            },
            "ScheduledOutputTrainingHelper": {
                "__init__": [
                    "self",
                    "inputs",
                    "sequence_length",
                    "sampling_probability",
                    "time_major",
                    "seed",
                    "next_inputs_fn",
                    "auxiliary_inputs",
                    "name"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids",
                    "name"
                ]
            },
            "GreedyEmbeddingHelper": {
                "__init__": [
                    "self",
                    "embedding",
                    "start_tokens",
                    "end_token"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids",
                    "name"
                ]
            },
            "SampleEmbeddingHelper": {
                "__init__": [
                    "self",
                    "embedding",
                    "start_tokens",
                    "end_token",
                    "softmax_temperature",
                    "seed"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ]
            },
            "InferenceHelper": {
                "__init__": [
                    "self",
                    "sample_fn",
                    "sample_shape",
                    "sample_dtype",
                    "start_inputs",
                    "end_fn",
                    "next_inputs_fn"
                ],
                "batch_size": [
                    "self"
                ],
                "sample_ids_shape": [
                    "self"
                ],
                "sample_ids_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "name"
                ],
                "sample": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "name"
                ],
                "next_inputs": [
                    "self",
                    "time",
                    "outputs",
                    "state",
                    "sample_ids",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.seq2seq.python.ops": {},
        "tensorflow_core.contrib.seq2seq.python.ops.beam_search_ops": {},
        "tensorflow_core.contrib.memory_stats": {},
        "tensorflow_core.contrib.memory_stats.ops.gen_memory_stats_ops": {
            "bytes_in_use": [
                "name"
            ],
            "BytesInUse": [
                "name"
            ],
            "bytes_in_use_eager_fallback": [
                "name",
                "ctx"
            ],
            "bytes_limit": [
                "name"
            ],
            "BytesLimit": [
                "name"
            ],
            "bytes_limit_eager_fallback": [
                "name",
                "ctx"
            ],
            "max_bytes_in_use": [
                "name"
            ],
            "MaxBytesInUse": [
                "name"
            ],
            "max_bytes_in_use_eager_fallback": [
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.memory_stats.ops": {},
        "tensorflow_core.contrib.memory_stats.python": {},
        "tensorflow_core.contrib.memory_stats.python.ops.memory_stats_ops": {
            "BytesInUse": [],
            "BytesLimit": [],
            "MaxBytesInUse": []
        },
        "tensorflow_core.contrib.memory_stats.python.ops": {},
        "tensorflow_core.contrib.feature_column": {},
        "tensorflow_core.contrib.feature_column.python": {},
        "tensorflow_core.contrib.feature_column.python.feature_column.sequence_feature_column": {
            "sequence_input_layer": [
                "features",
                "feature_columns",
                "weight_collections",
                "trainable"
            ],
            "concatenate_context_input": [
                "context_input",
                "sequence_input"
            ],
            "sequence_categorical_column_with_identity": [
                "key",
                "num_buckets",
                "default_value"
            ],
            "sequence_categorical_column_with_hash_bucket": [
                "key",
                "hash_bucket_size",
                "dtype"
            ],
            "sequence_categorical_column_with_vocabulary_file": [
                "key",
                "vocabulary_file",
                "vocabulary_size",
                "num_oov_buckets",
                "default_value",
                "dtype"
            ],
            "sequence_categorical_column_with_vocabulary_list": [
                "key",
                "vocabulary_list",
                "dtype",
                "default_value",
                "num_oov_buckets"
            ],
            "sequence_numeric_column": [
                "key",
                "shape",
                "default_value",
                "dtype",
                "normalizer_fn"
            ],
            "_assert_all_equal_and_return": [
                "tensors",
                "name"
            ],
            "_SequenceNumericColumn": {
                "name": [
                    "self"
                ],
                "_parse_example_spec": [
                    "self"
                ],
                "_transform_feature": [
                    "self",
                    "inputs"
                ],
                "_variable_shape": [
                    "self"
                ],
                "_get_sequence_dense_tensor": [
                    "self",
                    "inputs",
                    "weight_collections",
                    "trainable"
                ]
            }
        },
        "tensorflow_core.contrib.feature_column.python.feature_column": {},
        "tensorflow_core.contrib.periodic_resample": {},
        "tensorflow_core.contrib.periodic_resample.python": {},
        "tensorflow_core.contrib.periodic_resample.python.ops.gen_periodic_resample_op": {
            "periodic_resample": [
                "values",
                "shape",
                "name"
            ],
            "PeriodicResample": [
                "values",
                "shape",
                "name"
            ],
            "periodic_resample_eager_fallback": [
                "values",
                "shape",
                "name",
                "ctx"
            ],
            "periodic_resample_op_grad": [
                "grad",
                "original_shape",
                "desired_shape",
                "name"
            ],
            "PeriodicResampleOpGrad": [
                "grad",
                "original_shape",
                "desired_shape",
                "name"
            ],
            "periodic_resample_op_grad_eager_fallback": [
                "grad",
                "original_shape",
                "desired_shape",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.periodic_resample.python.ops.periodic_resample_op": {
            "_periodic_resample_grad_cc": [
                "op",
                "grad"
            ]
        },
        "tensorflow_core.contrib.periodic_resample.python.ops": {},
        "tensorflow_core.contrib.sparsemax": {},
        "tensorflow_core.contrib.sparsemax.python": {},
        "tensorflow_core.contrib.sparsemax.python.ops.sparsemax_loss": {
            "sparsemax_loss": [
                "logits",
                "sparsemax",
                "labels",
                "name"
            ]
        },
        "tensorflow_core.contrib.sparsemax.python.ops.sparsemax": {
            "sparsemax": [
                "logits",
                "name"
            ]
        },
        "tensorflow_core.contrib.sparsemax.python.ops": {},
        "tensorflow_core.contrib.bayesflow": {},
        "tensorflow_core.contrib.bayesflow.python": {},
        "tensorflow_core.contrib.bayesflow.python.ops.monte_carlo": {},
        "tensorflow_core.contrib.bayesflow.python.ops.monte_carlo_impl": {
            "expectation_importance_sampler": [
                "f",
                "log_p",
                "sampling_dist_q",
                "z",
                "n",
                "seed",
                "name"
            ],
            "expectation_importance_sampler_logspace": [
                "log_f",
                "log_p",
                "sampling_dist_q",
                "z",
                "n",
                "seed",
                "name"
            ],
            "_logspace_mean": [
                "log_values"
            ],
            "expectation": [
                "f",
                "samples",
                "log_prob",
                "use_reparametrization",
                "axis",
                "keep_dims",
                "name"
            ],
            "_sample_mean": [
                "values"
            ],
            "_sample_max": [
                "values"
            ],
            "_get_samples": [
                "dist",
                "z",
                "n",
                "seed"
            ]
        },
        "tensorflow_core.contrib.bayesflow.python.ops": {},
        "tensorflow_core.contrib.nearest_neighbor": {},
        "tensorflow_core.contrib.nearest_neighbor.python": {},
        "tensorflow_core.contrib.nearest_neighbor.python.ops.nearest_neighbor_ops": {
            "hyperplane_lsh_probes": [
                "point_hyperplane_product",
                "num_tables",
                "num_hyperplanes_per_table",
                "num_probes",
                "name"
            ]
        },
        "tensorflow_core.contrib.nearest_neighbor.python.ops": {},
        "tensorflow_core.contrib.rpc": {},
        "tensorflow_core.contrib.rpc.python": {},
        "tensorflow_core.contrib.rpc.python.kernel_tests.test_example_pb2_grpc": {
            "add_TestCaseServiceServicer_to_server": [
                "servicer",
                "server"
            ],
            "TestCaseServiceStub": {
                "__init__": [
                    "self",
                    "channel"
                ]
            },
            "TestCaseServiceServicer": {
                "Increment": [
                    "self",
                    "request",
                    "context"
                ],
                "SleepForever": [
                    "self",
                    "request",
                    "context"
                ],
                "SometimesSleepForever": [
                    "self",
                    "request",
                    "context"
                ],
                "AlwaysFailWithInvalidArgument": [
                    "self",
                    "request",
                    "context"
                ],
                "SometimesFailWithInvalidArgument": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.contrib.rpc.python.kernel_tests.rpc_op_test_base": {
            "RpcOpTestBase": {
                "get_method_name": [
                    "self",
                    "suffix"
                ],
                "rpc": [
                    "self"
                ],
                "try_rpc": [
                    "self"
                ],
                "testScalarHostPortRpc": [
                    "self"
                ],
                "testScalarHostPortTryRpc": [
                    "self"
                ],
                "testEmptyHostPortRpc": [
                    "self"
                ],
                "testInvalidMethod": [
                    "self"
                ],
                "testInvalidAddress": [
                    "self"
                ],
                "testAlwaysFailingMethod": [
                    "self"
                ],
                "testSometimesFailingMethodWithManyRequests": [
                    "self"
                ],
                "testVecHostPortRpc": [
                    "self"
                ],
                "testVecHostPortManyParallelRpcs": [
                    "self"
                ],
                "testVecHostPortRpcUsingEncodeAndDecodeProto": [
                    "self"
                ],
                "testVecHostPortRpcCancelsUponSessionTimeOutWhenSleepingForever": [
                    "self"
                ],
                "testVecHostPortRpcCancelsUponConfiguredTimeOutWhenSleepingForever": [
                    "self"
                ],
                "testTryRpcPropagatesDeadlineErrorWithSometimesTimingOutRequests": [
                    "self"
                ],
                "testTryRpcWithMultipleAddressesSingleRequest": [
                    "self"
                ],
                "testTryRpcWithMultipleMethodsSingleRequest": [
                    "self"
                ],
                "testTryRpcWithMultipleAddressesAndRequests": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.rpc.python.kernel_tests.rpc_op_test_servicer": {
            "RpcOpTestServicer": {
                "Increment": [
                    "self",
                    "request",
                    "context"
                ],
                "AlwaysFailWithInvalidArgument": [
                    "self",
                    "request",
                    "context"
                ],
                "SometimesFailWithInvalidArgument": [
                    "self",
                    "request",
                    "context"
                ],
                "SleepForever": [
                    "self",
                    "request",
                    "context"
                ],
                "SometimesSleepForever": [
                    "self",
                    "request",
                    "context"
                ]
            }
        },
        "tensorflow_core.contrib.rpc.python.kernel_tests.test_example_pb2": {},
        "tensorflow_core.contrib.rpc.python.kernel_tests": {},
        "tensorflow_core.contrib.rpc.python.ops.rpc_op": {},
        "tensorflow_core.contrib.rpc.python.ops.gen_rpc_op": {
            "rpc": [
                "address",
                "method",
                "request",
                "protocol",
                "fail_fast",
                "timeout_in_ms",
                "name"
            ],
            "Rpc": [
                "address",
                "method",
                "request",
                "protocol",
                "fail_fast",
                "timeout_in_ms",
                "name"
            ],
            "rpc_eager_fallback": [
                "address",
                "method",
                "request",
                "protocol",
                "fail_fast",
                "timeout_in_ms",
                "name",
                "ctx"
            ],
            "try_rpc": [
                "address",
                "method",
                "request",
                "protocol",
                "fail_fast",
                "timeout_in_ms",
                "name"
            ],
            "TryRpc": [
                "address",
                "method",
                "request",
                "protocol",
                "fail_fast",
                "timeout_in_ms",
                "name"
            ],
            "try_rpc_eager_fallback": [
                "address",
                "method",
                "request",
                "protocol",
                "fail_fast",
                "timeout_in_ms",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.contrib.rpc.python.ops": {},
        "tensorflow_core.contrib.opt": {},
        "tensorflow_core.contrib.opt.python": {},
        "tensorflow_core.contrib.opt.python.training.lazy_adam_optimizer": {
            "LazyAdamOptimizer": {
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.weight_decay_optimizers": {
            "extend_with_decoupled_weight_decay": [
                "base_optimizer"
            ],
            "DecoupledWeightDecayExtension": {
                "__init__": [
                    "self",
                    "weight_decay"
                ],
                "minimize": [
                    "self",
                    "loss",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss",
                    "decay_var_list"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name",
                    "decay_var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_decay_weights_op": [
                    "self",
                    "var"
                ],
                "_decay_weights_sparse_op": [
                    "self",
                    "var",
                    "indices",
                    "scatter_add"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_scatter_add": [
                    "self",
                    "x",
                    "i",
                    "v",
                    "_"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            },
            "MomentumWOptimizer": {
                "__init__": [
                    "self",
                    "weight_decay",
                    "learning_rate",
                    "momentum",
                    "use_locking",
                    "name",
                    "use_nesterov"
                ]
            },
            "AdamWOptimizer": {
                "__init__": [
                    "self",
                    "weight_decay",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "use_locking",
                    "name"
                ]
            },
            "ShampooWOptimizer": {
                "__init__": [
                    "self",
                    "weight_decay",
                    "global_step",
                    "max_matrix_size",
                    "gbar_decay",
                    "gbar_weight",
                    "mat_gbar_decay",
                    "mat_gbar_weight",
                    "learning_rate",
                    "svd_interval",
                    "precond_update_interval",
                    "epsilon",
                    "alpha",
                    "use_iterative_root",
                    "use_locking",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.lazy_adam_gs_optimizer": {
            "LazyAdamGSOptimizer": {
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.nadam_optimizer": {
            "NadamOptimizer": {
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse_shared": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "scatter_add"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.multitask_optimizer_wrapper": {
            "_is_all_zeros": [
                "grad"
            ],
            "_get_wrapper": [
                "fn",
                "opt"
            ],
            "clip_gradients_by_global_norm": [
                "gradients_variables",
                "clip_norm"
            ],
            "MultitaskOptimizerWrapper": {
                "__init__": [
                    "self",
                    "opt"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.elastic_average_optimizer": {
            "ElasticAverageCustomGetter": {
                "__init__": [
                    "self",
                    "worker_device"
                ],
                "__call__": [
                    "self",
                    "getter",
                    "name",
                    "trainable",
                    "collections"
                ]
            },
            "ElasticAverageOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "num_worker",
                    "ea_custom_getter",
                    "communication_period",
                    "moving_rate",
                    "rho",
                    "use_locking",
                    "synchronous",
                    "name"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "grad_loss"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_init_op": [
                    "self",
                    "task_index"
                ],
                "make_session_run_hook": [
                    "self",
                    "is_chief",
                    "task_index"
                ],
                "swapping_saver": [
                    "self",
                    "var_list",
                    "name"
                ]
            },
            "_ElasticAverageOptimizerHook": {
                "__init__": [
                    "self",
                    "ea_optimizer",
                    "is_chief",
                    "task_index"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.lars_optimizer": {
            "LARSOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "momentum",
                    "weight_decay",
                    "eeta",
                    "epsilon",
                    "name",
                    "skip_list",
                    "use_nesterov"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "compute_lr": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ],
                "_prepare": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.powersign": {
            "PowerSignOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "base",
                    "beta",
                    "sign_decay_fn",
                    "use_locking",
                    "name"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.external_optimizer": {
            "_accumulate": [
                "list_"
            ],
            "_get_shape_tuple": [
                "tensor"
            ],
            "_prod": [
                "array"
            ],
            "_compute_gradients": [
                "tensor",
                "var_list"
            ],
            "ExternalOptimizerInterface": {
                "__init__": [
                    "self",
                    "loss",
                    "var_list",
                    "equalities",
                    "inequalities",
                    "var_to_bounds"
                ],
                "minimize": [
                    "self",
                    "session",
                    "feed_dict",
                    "fetches",
                    "step_callback",
                    "loss_callback"
                ],
                "_minimize": [
                    "self",
                    "initial_val",
                    "loss_grad_func",
                    "equality_funcs",
                    "equality_grad_funcs",
                    "inequality_funcs",
                    "inequality_grad_funcs",
                    "packed_bounds",
                    "step_callback",
                    "optimizer_kwargs"
                ],
                "_pack": [
                    "cls",
                    "tensors"
                ],
                "_make_eval_func": [
                    "self",
                    "tensors",
                    "session",
                    "feed_dict",
                    "fetches",
                    "callback"
                ],
                "_make_eval_funcs": [
                    "self",
                    "tensors",
                    "session",
                    "feed_dict",
                    "fetches",
                    "callback"
                ]
            },
            "ScipyOptimizerInterface": {
                "_minimize": [
                    "self",
                    "initial_val",
                    "loss_grad_func",
                    "equality_funcs",
                    "equality_grad_funcs",
                    "inequality_funcs",
                    "inequality_grad_funcs",
                    "packed_bounds",
                    "step_callback",
                    "optimizer_kwargs"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.adam_gs_optimizer": {
            "AdamGSOptimizer": {
                "__init__": [
                    "self",
                    "global_step",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_get_beta_accumulators": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse_shared": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "scatter_add"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_scatter_add": [
                    "self",
                    "x",
                    "i",
                    "v"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.moving_average_optimizer": {
            "MovingAverageOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "average_decay",
                    "num_updates",
                    "sequential_update"
                ],
                "compute_gradients": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_find_swapped_variable": [
                    "self",
                    "v_name_to_tensor",
                    "v_name",
                    "tensor"
                ],
                "swapping_saver": [
                    "self",
                    "var_list",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.reg_adagrad_optimizer": {
            "RegAdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "use_locking",
                    "name"
                ],
                "avoid_updating_slots": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "update_slots"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "update_slots"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "update_slots"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.variable_clipping_optimizer": {
            "VariableClippingOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "vars_to_clip_dims",
                    "max_norm",
                    "use_locking",
                    "colocate_clip_ops_with_vars",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_clip_dense": [
                    "self",
                    "var"
                ],
                "_clip_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_maybe_colocate_with": [
                    "self",
                    "var"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.model_average_optimizer": {
            "ModelAverageCustomGetter": {
                "__init__": [
                    "self",
                    "worker_device"
                ],
                "__call__": [
                    "self",
                    "getter",
                    "name",
                    "trainable",
                    "collections"
                ]
            },
            "ModelAverageOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "num_worker",
                    "is_chief",
                    "ma_custom_getter",
                    "interval_steps",
                    "use_locking",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "_local_vars_update": [
                    "self",
                    "var_list"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_init_op": [
                    "self"
                ],
                "make_session_run_hook": [
                    "self"
                ]
            },
            "_ModelAverageOptimizerHook": {
                "__init__": [
                    "self",
                    "ma_optimizer",
                    "is_chief"
                ],
                "begin": [
                    "self"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.shampoo": {
            "GetParam": [
                "var",
                "timestep"
            ],
            "ShampooOptimizer": {
                "__init__": [
                    "self",
                    "global_step",
                    "max_matrix_size",
                    "gbar_decay",
                    "gbar_weight",
                    "mat_gbar_decay",
                    "mat_gbar_weight",
                    "learning_rate",
                    "svd_interval",
                    "precond_update_interval",
                    "epsilon",
                    "alpha",
                    "use_iterative_root",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad_values",
                    "var",
                    "grad_indices"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse_shared": [
                    "self",
                    "grad_values",
                    "grad_indices",
                    "var"
                ],
                "_weighted_average": [
                    "self",
                    "var",
                    "weight",
                    "weight_t",
                    "rest"
                ],
                "_update_mat_g": [
                    "self",
                    "mat_g",
                    "grad",
                    "axes",
                    "mat_gbar_decay",
                    "mat_gbar_weight",
                    "i"
                ],
                "_compute_power_svd": [
                    "self",
                    "var",
                    "mat_g",
                    "mat_g_size",
                    "alpha",
                    "mat_h_slot_name"
                ],
                "_compute_power_iter": [
                    "self",
                    "var",
                    "mat_g",
                    "mat_g_size",
                    "alpha",
                    "mat_h_slot_name",
                    "iter_count",
                    "epsilon"
                ],
                "_compute_power": [
                    "self",
                    "var",
                    "mat_g",
                    "mat_g_size",
                    "alpha",
                    "mat_h_slot_name"
                ],
                "_apply_gradient": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.sign_decay": {
            "get_linear_decay_fn": [
                "decay_steps"
            ],
            "get_cosine_decay_fn": [
                "decay_steps",
                "num_periods",
                "zero_after"
            ],
            "get_restart_decay_fn": [
                "decay_steps",
                "num_periods",
                "zero_after"
            ]
        },
        "tensorflow_core.contrib.opt.python.training.ggt": {
            "GGTOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta1",
                    "use_locking",
                    "name",
                    "window",
                    "eps",
                    "svd_eps",
                    "sigma_eps"
                ],
                "_create_vars": [
                    "self",
                    "var_list",
                    "state"
                ],
                "_get_global_step": [
                    "self",
                    "state"
                ],
                "_get_moment1": [
                    "self",
                    "state"
                ],
                "_get_grad_buffer": [
                    "self",
                    "state"
                ],
                "_get_flat_grad": [
                    "self",
                    "state"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_prepare": [
                    "self",
                    "state"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var",
                    "state"
                ],
                "_finish": [
                    "self",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.addsign": {
            "AddSignOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "alpha",
                    "beta",
                    "sign_decay_fn",
                    "use_locking",
                    "name"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.matrix_functions": {
            "matrix_square_root": [
                "mat_a",
                "mat_a_size",
                "iter_count",
                "ridge_epsilon"
            ],
            "matrix_inverse_pth_root": [
                "mat_g",
                "mat_g_size",
                "alpha",
                "iter_count",
                "epsilon",
                "ridge_epsilon"
            ]
        },
        "tensorflow_core.contrib.opt.python.training.drop_stale_gradient_optimizer": {
            "DropStaleGradientOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "staleness",
                    "use_locking",
                    "name"
                ],
                "compute_gradients": [
                    "self",
                    "loss"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training.agn_optimizer": {
            "AGNCustomGetter": {
                "__init__": [
                    "self",
                    "worker_device"
                ],
                "__call__": [
                    "self",
                    "getter",
                    "name",
                    "trainable",
                    "collections"
                ]
            },
            "AGNOptimizer": {
                "__init__": [
                    "self",
                    "optimizer",
                    "num_worker",
                    "custom_getter",
                    "communication_period",
                    "use_locking",
                    "name"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_init_op": [
                    "self",
                    "task_index"
                ],
                "make_session_run_hook": [
                    "self",
                    "is_chief",
                    "task_index"
                ]
            },
            "_AGNOptimizerHook": {
                "__init__": [
                    "self",
                    "agn_optimizer",
                    "is_chief",
                    "task_index"
                ],
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ]
            }
        },
        "tensorflow_core.contrib.opt.python.training": {},
        "tensorflow_core.contrib.opt.python.training.adamax": {
            "AdaMaxOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_get_beta_accumulators": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse_shared": [
                    "self",
                    "grad",
                    "var",
                    "indices",
                    "scatter_add",
                    "scatter_update"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_scatter_update": [
                    "self",
                    "x",
                    "i",
                    "v"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "var",
                    "indices"
                ],
                "_finish": [
                    "self",
                    "update_ops",
                    "name_scope"
                ]
            }
        },
        "tensorflow_core.contrib.rnn": {},
        "tensorflow_core.contrib.rnn.python": {},
        "tensorflow_core.contrib.rnn.python.kernel_tests.benchmarking": {
            "device": [
                "use_gpu"
            ],
            "seconds_per_run": [
                "op",
                "sess",
                "num_runs"
            ],
            "dict_product": [
                "dicts"
            ]
        },
        "tensorflow_core.contrib.rnn.python.kernel_tests": {},
        "tensorflow_core.contrib.rnn.python.ops.rnn": {
            "stack_bidirectional_rnn": [
                "cells_fw",
                "cells_bw",
                "inputs",
                "initial_states_fw",
                "initial_states_bw",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "stack_bidirectional_dynamic_rnn": [
                "cells_fw",
                "cells_bw",
                "inputs",
                "initial_states_fw",
                "initial_states_bw",
                "dtype",
                "sequence_length",
                "parallel_iterations",
                "time_major",
                "scope",
                "swap_memory"
            ]
        },
        "tensorflow_core.contrib.rnn.python.ops.gru_ops": {
            "_GRUBlockCellGrad": [
                "op"
            ],
            "GRUBlockCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "cell_size",
                    "reuse",
                    "name"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "h_prev"
                ]
            },
            "GRUBlockCellV2": {
                "build": [
                    "self",
                    "input_shape"
                ]
            }
        },
        "tensorflow_core.contrib.rnn.python.ops.core_rnn_cell": {
            "_linear": [
                "args",
                "output_size",
                "bias",
                "bias_initializer",
                "kernel_initializer"
            ],
            "_Linear": {
                "__init__": [
                    "self",
                    "args",
                    "output_size",
                    "build_bias",
                    "bias_initializer",
                    "kernel_initializer"
                ],
                "__call__": [
                    "self",
                    "args"
                ]
            },
            "EmbeddingWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "embedding_classes",
                    "embedding_size",
                    "initializer",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "InputProjectionWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "num_proj",
                    "activation",
                    "input_size",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "OutputProjectionWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "output_size",
                    "activation",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.rnn.python.ops.rnn_cell": {
            "_get_concat_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "_get_sharded_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "_norm": [
                "g",
                "b",
                "inp",
                "scope"
            ],
            "_random_exp_initializer": [
                "minval",
                "maxval",
                "seed",
                "dtype"
            ],
            "_conv": [
                "args",
                "filter_size",
                "num_features",
                "bias",
                "bias_start"
            ],
            "CoupledInputForgetGateLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation",
                    "reuse",
                    "layer_norm",
                    "norm_gain",
                    "norm_shift"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "TimeFreqLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip",
                    "reuse"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "_make_tf_features": [
                    "self",
                    "input_feat"
                ]
            },
            "GridLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "share_time_frequency_weights",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip",
                    "num_frequency_blocks",
                    "start_freqindex_list",
                    "end_freqindex_list",
                    "couple_input_forget_gates",
                    "state_is_tuple",
                    "reuse"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "state_tuple_type": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "_compute": [
                    "self",
                    "freq_inputs",
                    "block",
                    "state",
                    "batch_size",
                    "state_prefix",
                    "state_is_tuple"
                ],
                "_make_tf_features": [
                    "self",
                    "input_feat",
                    "slice_offset"
                ]
            },
            "BidirectionalGridLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "share_time_frequency_weights",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip",
                    "num_frequency_blocks",
                    "start_freqindex_list",
                    "end_freqindex_list",
                    "couple_input_forget_gates",
                    "backward_slice_offset",
                    "reuse"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "AttentionCellWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "attn_length",
                    "attn_size",
                    "attn_vec_size",
                    "input_size",
                    "state_is_tuple",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "_attention": [
                    "self",
                    "query",
                    "attn_states"
                ]
            },
            "HighwayWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "couple_carry_transform_gates",
                    "carry_bias_init"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "_highway": [
                    "self",
                    "inp",
                    "out"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "LayerNormBasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "input_size",
                    "activation",
                    "layer_norm",
                    "norm_gain",
                    "norm_shift",
                    "dropout_keep_prob",
                    "dropout_prob_seed",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "_norm": [
                    "self",
                    "inp",
                    "scope",
                    "dtype"
                ],
                "_linear": [
                    "self",
                    "args"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "NASCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "num_proj",
                    "use_bias",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "UGRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "initializer",
                    "forget_bias",
                    "activation",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "IntersectionRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "num_in_proj",
                    "initializer",
                    "forget_bias",
                    "y_activation",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "CompiledWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "compile_stateful"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "PhasedLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "leak",
                    "ratio_on",
                    "trainable_ratio_on",
                    "period_init_min",
                    "period_init_max",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "_mod": [
                    "self",
                    "x",
                    "y"
                ],
                "_get_cycle_ratio": [
                    "self",
                    "time",
                    "phase",
                    "period"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "ConvLSTMCell": {
                "__init__": [
                    "self",
                    "conv_ndims",
                    "input_shape",
                    "output_channels",
                    "kernel_shape",
                    "use_bias",
                    "skip_connection",
                    "forget_bias",
                    "initializers",
                    "name"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "Conv1DLSTMCell": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "Conv2DLSTMCell": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "Conv3DLSTMCell": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "GLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "initializer",
                    "num_proj",
                    "number_of_groups",
                    "forget_bias",
                    "activation",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "_get_input_for_group": [
                    "self",
                    "inputs",
                    "group_id",
                    "group_size"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "LayerNormLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "forget_bias",
                    "activation",
                    "layer_norm",
                    "norm_gain",
                    "norm_shift",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "_linear": [
                    "self",
                    "args",
                    "output_size",
                    "bias",
                    "bias_initializer",
                    "kernel_initializer",
                    "layer_norm"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "SRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "activation",
                    "reuse",
                    "name"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "WeightNormLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "norm",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "forget_bias",
                    "activation",
                    "reuse"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "_normalize": [
                    "self",
                    "weight",
                    "name"
                ],
                "_linear": [
                    "self",
                    "args",
                    "output_size",
                    "norm",
                    "bias",
                    "bias_initializer",
                    "kernel_initializer"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "IndRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "activation",
                    "reuse",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "IndyGRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "activation",
                    "reuse",
                    "kernel_initializer",
                    "bias_initializer",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "IndyLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "activation",
                    "reuse",
                    "kernel_initializer",
                    "bias_initializer",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "NTMCell": {
                "__init__": [
                    "self",
                    "controller",
                    "memory_size",
                    "memory_vector_dim",
                    "read_head_num",
                    "write_head_num",
                    "shift_range",
                    "output_dim",
                    "clip_value",
                    "dtype",
                    "name"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "x",
                    "prev_state"
                ],
                "_expand": [
                    "self",
                    "x",
                    "dim",
                    "N"
                ],
                "_addressing": [
                    "self",
                    "k",
                    "beta",
                    "g",
                    "s",
                    "gamma",
                    "prev_M",
                    "prev_w"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ]
            },
            "MinimalRNNCell": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "kernel_initializer",
                    "bias_initializer",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "CFNCell": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "kernel_initializer",
                    "bias_initializer",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            }
        },
        "tensorflow_core.contrib.rnn.python.ops.fused_rnn_cell": {
            "FusedRNNCell": {
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            },
            "FusedRNNCellAdaptor": {
                "__init__": [
                    "self",
                    "cell",
                    "use_dynamic_rnn"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            },
            "TimeReversedFusedRNN": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "_reverse": [
                    "self",
                    "t",
                    "lengths"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            }
        },
        "tensorflow_core.contrib.rnn.python.ops.lstm_ops": {
            "_lstm_block_cell": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "b",
                "wci",
                "wcf",
                "wco",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "_block_lstm": [
                "seq_len_max",
                "x",
                "w",
                "b",
                "cs_prev",
                "h_prev",
                "wci",
                "wcf",
                "wco",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "_LSTMBlockCellGrad": [
                "op"
            ],
            "LSTMBlockCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "cell_clip",
                    "use_peephole",
                    "dtype",
                    "reuse",
                    "name"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "LSTMBlockWrapper": {
                "num_units": [
                    "self"
                ],
                "_call_cell": [
                    "self",
                    "inputs",
                    "initial_cell_state",
                    "initial_output",
                    "dtype",
                    "sequence_length"
                ],
                "call": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length"
                ],
                "_gather_states": [
                    "self",
                    "data",
                    "indices",
                    "batch_size"
                ]
            },
            "LSTMBlockFusedCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "cell_clip",
                    "use_peephole",
                    "reuse",
                    "dtype",
                    "name"
                ],
                "num_units": [
                    "self"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "_call_cell": [
                    "self",
                    "inputs",
                    "initial_cell_state",
                    "initial_output",
                    "dtype",
                    "sequence_length"
                ]
            }
        },
        "tensorflow_core.contrib.rnn.python.ops": {},
        "tensorflow_core.contrib.rnn.python.tools.checkpoint_convert": {
            "_rnn_name_replacement": [
                "var_name"
            ],
            "_rnn_name_replacement_sharded": [
                "var_name"
            ],
            "_split_sharded_vars": [
                "name_shape_map"
            ],
            "convert_names": [
                "checkpoint_from_path",
                "checkpoint_to_path",
                "write_v1_checkpoint"
            ],
            "main": [
                "_"
            ]
        },
        "tensorflow_core.contrib.rnn.python.tools": {},
        "tensorflow_core.lite": {},
        "tensorflow_core.lite.python.wrap_toco": {
            "wrapped_toco_convert": [
                "model_flags_str",
                "toco_flags_str",
                "input_data_str",
                "debug_info_str",
                "enable_mlir_converter"
            ],
            "wrapped_get_potentially_supported_ops": []
        },
        "tensorflow_core.lite.python.tflite_convert": {
            "_parse_array": [
                "values",
                "type_fn"
            ],
            "_parse_set": [
                "values"
            ],
            "_parse_inference_type": [
                "value",
                "flag"
            ],
            "_get_toco_converter": [
                "flags"
            ],
            "_convert_tf1_model": [
                "flags"
            ],
            "_convert_tf2_model": [
                "flags"
            ],
            "_check_tf1_flags": [
                "flags",
                "unparsed"
            ],
            "_get_tf1_parser": [],
            "_get_tf2_parser": [],
            "run_main": [
                "_"
            ],
            "main": []
        },
        "tensorflow_core.lite.python.convert_saved_model": {
            "_log_tensor_details": [
                "tensor_info"
            ],
            "get_meta_graph_def": [
                "saved_model_dir",
                "tag_set"
            ],
            "get_signature_def": [
                "meta_graph",
                "signature_key"
            ],
            "get_inputs_outputs": [
                "signature_def"
            ],
            "_get_tensors": [
                "graph",
                "signature_def_tensor_names",
                "user_tensor_names"
            ],
            "freeze_saved_model": [
                "saved_model_dir",
                "input_arrays",
                "input_shapes",
                "output_arrays",
                "tag_set",
                "signature_key"
            ]
        },
        "tensorflow_core.lite.python.lite": {
            "Optimize": {
                "__str__": [
                    "self"
                ]
            },
            "RepresentativeDataset": {
                "__init__": [
                    "self",
                    "input_gen"
                ]
            },
            "TargetSpec": {
                "__init__": [
                    "self",
                    "supported_ops",
                    "supported_types"
                ]
            },
            "TFLiteConverterBase": {
                "__init__": [
                    "self"
                ],
                "_grappler_config": [
                    "self"
                ],
                "_validate_representative_dataset": [
                    "self"
                ],
                "_validate_quantization": [
                    "self"
                ],
                "_is_int8_target_required": [
                    "self"
                ],
                "_smallest_supported_type": [
                    "self"
                ],
                "_any_optimization_enabled": [
                    "self"
                ],
                "_is_post_training_optimize": [
                    "self"
                ],
                "_is_int8_weight_only_quantize": [
                    "self"
                ],
                "_is_float16_quantize": [
                    "self"
                ],
                "_is_calibration_quantize": [
                    "self"
                ],
                "_calibrate_quantize_model": [
                    "self",
                    "result",
                    "inference_input_type",
                    "inference_output_type"
                ],
                "_get_base_converter_args": [
                    "self"
                ]
            },
            "TFLiteConverterV2": {
                "__init__": [
                    "self",
                    "funcs",
                    "trackable_obj"
                ],
                "from_concrete_functions": [
                    "cls",
                    "funcs"
                ],
                "from_saved_model": [
                    "cls",
                    "saved_model_dir",
                    "signature_keys",
                    "tags"
                ],
                "from_keras_model": [
                    "cls",
                    "model"
                ],
                "convert": [
                    "self"
                ]
            },
            "TFLiteConverter": {
                "__init__": [
                    "self",
                    "graph_def",
                    "input_tensors",
                    "output_tensors",
                    "input_arrays_with_shape",
                    "output_arrays",
                    "experimental_debug_info_func"
                ],
                "from_session": [
                    "cls",
                    "sess",
                    "input_tensors",
                    "output_tensors"
                ],
                "from_frozen_graph": [
                    "cls",
                    "graph_def_file",
                    "input_arrays",
                    "output_arrays",
                    "input_shapes"
                ],
                "from_saved_model": [
                    "cls",
                    "saved_model_dir",
                    "input_arrays",
                    "input_shapes",
                    "output_arrays",
                    "tag_set",
                    "signature_key"
                ],
                "from_keras_model_file": [
                    "cls",
                    "model_file",
                    "input_arrays",
                    "input_shapes",
                    "output_arrays",
                    "custom_objects"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "__getattribute__": [
                    "self",
                    "name"
                ],
                "convert": [
                    "self"
                ],
                "get_input_arrays": [
                    "self"
                ],
                "_has_valid_tensors": [
                    "self"
                ],
                "_set_batch_size": [
                    "self",
                    "batch_size"
                ]
            },
            "TocoConverter": {
                "from_session": [
                    "cls",
                    "sess",
                    "input_tensors",
                    "output_tensors"
                ],
                "from_frozen_graph": [
                    "cls",
                    "graph_def_file",
                    "input_arrays",
                    "output_arrays",
                    "input_shapes"
                ],
                "from_saved_model": [
                    "cls",
                    "saved_model_dir",
                    "input_arrays",
                    "input_shapes",
                    "output_arrays",
                    "tag_set",
                    "signature_key"
                ],
                "from_keras_model_file": [
                    "cls",
                    "model_file",
                    "input_arrays",
                    "input_shapes",
                    "output_arrays"
                ]
            }
        },
        "tensorflow_core.lite.python.convert": {
            "_try_convert_to_unicode": [
                "output"
            ],
            "toco_convert_protos": [
                "model_flags_str",
                "toco_flags_str",
                "input_data_str",
                "debug_info_str",
                "enable_mlir_converter"
            ],
            "build_toco_convert_protos": [
                "input_tensors",
                "output_tensors",
                "inference_type",
                "inference_input_type",
                "input_format",
                "input_shapes",
                "output_format",
                "quantized_input_stats",
                "default_ranges_stats",
                "drop_control_dependency",
                "reorder_across_fake_quant",
                "allow_custom_ops",
                "change_concat_input_ranges",
                "post_training_quantize",
                "quantize_to_float16",
                "dump_graphviz_dir",
                "dump_graphviz_video",
                "target_ops",
                "allow_nonexistent_arrays",
                "debug_info"
            ],
            "toco_convert_graph_def": [
                "input_data",
                "input_arrays_with_shape",
                "output_arrays",
                "enable_mlir_converter"
            ],
            "toco_convert_impl": [
                "input_data",
                "input_tensors",
                "output_tensors",
                "enable_mlir_converter"
            ],
            "toco_convert": [
                "input_data",
                "input_tensors",
                "output_tensors"
            ],
            "OpsSet": {
                "__str__": [
                    "self"
                ],
                "get_options": []
            },
            "ConverterError": {}
        },
        "tensorflow_core.lite.python.util": {
            "convert_dtype_to_tflite_type": [
                "tf_dtype"
            ],
            "get_tensor_name": [
                "tensor"
            ],
            "get_tensors_from_tensor_names": [
                "graph",
                "tensor_names"
            ],
            "set_tensor_shapes": [
                "tensors",
                "shapes"
            ],
            "get_grappler_config": [
                "optimizers_list"
            ],
            "run_graph_optimizations": [
                "graph_def",
                "input_arrays",
                "output_arrays",
                "config",
                "graph"
            ],
            "_convert_op_hints_if_present": [
                "sess",
                "graph_def",
                "output_tensors",
                "hinted_outputs_nodes"
            ],
            "freeze_graph": [
                "sess",
                "input_tensors",
                "output_tensors"
            ],
            "is_frozen_graph": [
                "sess"
            ],
            "build_debug_info_func": [
                "original_graph"
            ],
            "get_debug_info": [
                "nodes_to_debug_info_func",
                "converted_graph"
            ]
        },
        "tensorflow_core.lite.python.op_hint": {
            "_find_all_hints_in_nodes": [
                "nodes"
            ],
            "_extract_topology_sequence_mapping": [
                "nodes"
            ],
            "_find_children_hints_in_while_loop": [
                "function_def",
                "nodes_mapping"
            ],
            "_find_children_hints": [
                "call",
                "graph_def"
            ],
            "_tensor_name_base": [
                "full_tensor_name"
            ],
            "_tensorflow_output_name": [
                "tensor_name",
                "output_index"
            ],
            "_check_subgraph_closed": [
                "n",
                "reachable_by_input",
                "input_nodes_set",
                "name_to_input_name"
            ],
            "_convert_single_op_hint_to_stub": [
                "call",
                "graph_def",
                "function_def_nodes",
                "is_last_run"
            ],
            "_remove_one_redundant_stack_unstack": [
                "in_graph_def"
            ],
            "_remove_redundant_stack_unstack": [
                "graph_def"
            ],
            "_get_correct_mapping": [
                "original_index",
                "nodes"
            ],
            "_convert_op_hints_to_stubs_helper": [
                "graph_def",
                "write_callback"
            ],
            "find_all_hinted_output_nodes": [
                "session",
                "graph_def"
            ],
            "convert_op_hints_to_stubs": [
                "session",
                "graph_def",
                "write_callback"
            ],
            "OpHint": {
                "__init__": [
                    "self",
                    "function_name",
                    "level",
                    "children_inputs_mappings"
                ],
                "_validate_children_inputs_mappings": [
                    "self",
                    "children_inputs_mappings"
                ],
                "_setattr": [
                    "self",
                    "dest_op",
                    "name",
                    "value"
                ],
                "add_input": [
                    "self"
                ],
                "add_output": [
                    "self"
                ],
                "add_inputs": [
                    "self"
                ],
                "add_outputs": [
                    "self"
                ]
            },
            "_LiteOperand": {
                "aggregate_and_return_name_for_input": [
                    "self",
                    "out_graphdef"
                ],
                "aggregate_and_return_name_for_output": [
                    "self",
                    "fused_op_name",
                    "output_index",
                    "out_graphdef"
                ]
            },
            "_LiteSingleOperand": {
                "__init__": [
                    "self",
                    "node"
                ],
                "flatten": [
                    "self"
                ],
                "aggregate_and_return_name_for_input": [
                    "self",
                    "out_graphdef"
                ],
                "aggregate_and_return_name_for_output": [
                    "self",
                    "fused_op_name",
                    "index",
                    "out_graphdef"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_LiteAggregateOperand": {
                "__init__": [
                    "self",
                    "aggregation"
                ],
                "add": [
                    "self",
                    "sort",
                    "node"
                ],
                "flatten_nodes": [
                    "self"
                ],
                "flatten": [
                    "self"
                ],
                "aggregate_and_return_name_for_input": [
                    "self",
                    "out_graphdef"
                ],
                "aggregate_and_return_name_for_output": [
                    "self",
                    "fused_op_name",
                    "output_index",
                    "out_graphdef"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_LiteFuncCall": {
                "__init__": [
                    "self"
                ],
                "flattened_inputs_and_outputs": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.lite.python.lite_constants": {},
        "tensorflow_core.lite.python.interpreter": {
            "load_delegate": [
                "library",
                "options"
            ],
            "Delegate": {
                "__init__": [
                    "self",
                    "library",
                    "options"
                ],
                "__del__": [
                    "self"
                ],
                "_get_native_delegate_pointer": [
                    "self"
                ]
            },
            "Interpreter": {
                "__init__": [
                    "self",
                    "model_path",
                    "model_content",
                    "experimental_delegates"
                ],
                "__del__": [
                    "self"
                ],
                "allocate_tensors": [
                    "self"
                ],
                "_safe_to_run": [
                    "self"
                ],
                "_ensure_safe": [
                    "self"
                ],
                "_get_tensor_details": [
                    "self",
                    "tensor_index"
                ],
                "get_tensor_details": [
                    "self"
                ],
                "get_input_details": [
                    "self"
                ],
                "set_tensor": [
                    "self",
                    "tensor_index",
                    "value"
                ],
                "resize_tensor_input": [
                    "self",
                    "input_index",
                    "tensor_size"
                ],
                "get_output_details": [
                    "self"
                ],
                "get_tensor": [
                    "self",
                    "tensor_index"
                ],
                "tensor": [
                    "self",
                    "tensor_index"
                ],
                "invoke": [
                    "self"
                ],
                "reset_all_variables": [
                    "self"
                ]
            }
        },
        "tensorflow_core.lite.python": {},
        "tensorflow_core.lite.python.interpreter_wrapper.tensorflow_wrap_interpreter_wrapper": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "static"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "InterpreterWrapper_CreateWrapperCPPFromFile": [],
            "InterpreterWrapper_CreateWrapperCPPFromBuffer": [],
            "InterpreterWrapper": {
                "__init__": [
                    "self"
                ],
                "AllocateTensors": [
                    "self"
                ],
                "Invoke": [
                    "self"
                ],
                "InputIndices": [
                    "self"
                ],
                "OutputIndices": [
                    "self"
                ],
                "ResizeInputTensor": [
                    "self",
                    "i",
                    "value"
                ],
                "NumTensors": [
                    "self"
                ],
                "TensorName": [
                    "self",
                    "i"
                ],
                "TensorType": [
                    "self",
                    "i"
                ],
                "TensorSize": [
                    "self",
                    "i"
                ],
                "TensorQuantization": [
                    "self",
                    "i"
                ],
                "SetTensor": [
                    "self",
                    "i",
                    "value"
                ],
                "GetTensor": [
                    "self",
                    "i"
                ],
                "ResetVariableTensors": [
                    "self"
                ],
                "tensor": [
                    "self",
                    "base_object",
                    "i"
                ],
                "ModifyGraphWithDelegate": [
                    "self",
                    "delegate"
                ]
            }
        },
        "tensorflow_core.lite.python.interpreter_wrapper": {},
        "tensorflow_core.lite.python.optimize.tensorflow_lite_wrap_calibration_wrapper": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "static"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "CalibrationWrapper_CreateWrapperCPPFromBuffer": [
                "data"
            ],
            "CalibrationWrapper": {
                "__init__": [
                    "self"
                ],
                "Prepare": [
                    "self"
                ],
                "FeedTensor": [
                    "self",
                    "input_value"
                ],
                "QuantizeModel": [
                    "self",
                    "input_py_type",
                    "output_py_type",
                    "allow_float"
                ]
            }
        },
        "tensorflow_core.lite.python.optimize.calibrator": {
            "Calibrator": {
                "__init__": [
                    "self",
                    "model_content"
                ],
                "calibrate_and_quantize": [
                    "self",
                    "dataset_gen",
                    "input_type",
                    "output_type",
                    "allow_float"
                ]
            }
        },
        "tensorflow_core.lite.python.optimize": {},
        "tensorflow_core.lite.toco.toco_flags_pb2": {},
        "tensorflow_core.lite.toco.model_flags_pb2": {},
        "tensorflow_core.lite.toco.types_pb2": {},
        "tensorflow_core.lite.toco": {},
        "tensorflow_core.lite.toco.python.toco_from_protos": {
            "execute": [
                "unused_args"
            ],
            "main": []
        },
        "tensorflow_core.lite.toco.python": {},
        "tensorflow_core.lite.experimental": {},
        "tensorflow_core.lite.experimental.tensorboard.ops_util": {
            "get_potentially_supported_ops": [],
            "SupportedOp": {}
        },
        "tensorflow_core.lite.experimental.tensorboard": {},
        "tensorflow_core.lite.experimental.examples": {},
        "tensorflow_core.lite.experimental.examples.lstm.rnn": {
            "dynamic_rnn": [
                "cell",
                "inputs",
                "sequence_length",
                "initial_state",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ],
            "bidirectional_dynamic_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "sequence_length",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ]
        },
        "tensorflow_core.lite.experimental.examples.lstm.rnn_cell": {
            "TfLiteRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "activation",
                    "reuse",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "get_config": [
                    "self"
                ]
            },
            "TFLiteLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation",
                    "reuse",
                    "name",
                    "dtype"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "build": [
                    "self",
                    "inputs_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "state"
                ],
                "get_config": [
                    "self"
                ]
            }
        },
        "tensorflow_core.lite.experimental.examples.lstm": {},
        "tensorflow_core.lite.experimental.microfrontend": {},
        "tensorflow_core.lite.experimental.microfrontend.ops.gen_audio_microfrontend_op": {
            "audio_microfrontend": [
                "audio",
                "sample_rate",
                "window_size",
                "window_step",
                "num_channels",
                "upper_band_limit",
                "lower_band_limit",
                "smoothing_bits",
                "even_smoothing",
                "odd_smoothing",
                "min_signal_remaining",
                "enable_pcan",
                "pcan_strength",
                "pcan_offset",
                "gain_bits",
                "enable_log",
                "scale_shift",
                "left_context",
                "right_context",
                "frame_stride",
                "zero_padding",
                "out_scale",
                "out_type",
                "name"
            ],
            "AudioMicrofrontend": [
                "audio",
                "sample_rate",
                "window_size",
                "window_step",
                "num_channels",
                "upper_band_limit",
                "lower_band_limit",
                "smoothing_bits",
                "even_smoothing",
                "odd_smoothing",
                "min_signal_remaining",
                "enable_pcan",
                "pcan_strength",
                "pcan_offset",
                "gain_bits",
                "enable_log",
                "scale_shift",
                "left_context",
                "right_context",
                "frame_stride",
                "zero_padding",
                "out_scale",
                "out_type",
                "name"
            ],
            "audio_microfrontend_eager_fallback": [
                "audio",
                "sample_rate",
                "window_size",
                "window_step",
                "num_channels",
                "upper_band_limit",
                "lower_band_limit",
                "smoothing_bits",
                "even_smoothing",
                "odd_smoothing",
                "min_signal_remaining",
                "enable_pcan",
                "pcan_strength",
                "pcan_offset",
                "gain_bits",
                "enable_log",
                "scale_shift",
                "left_context",
                "right_context",
                "frame_stride",
                "zero_padding",
                "out_scale",
                "out_type",
                "name",
                "ctx"
            ],
            "_InitOpDefLibrary": [
                "op_list_proto_bytes"
            ]
        },
        "tensorflow_core.lite.experimental.microfrontend.ops": {},
        "tensorflow_core.lite.experimental.microfrontend.python": {},
        "tensorflow_core.lite.experimental.microfrontend.python.ops.audio_microfrontend_op": {
            "audio_microfrontend": [
                "audio",
                "sample_rate",
                "window_size",
                "window_step",
                "num_channels",
                "upper_band_limit",
                "lower_band_limit",
                "smoothing_bits",
                "even_smoothing",
                "odd_smoothing",
                "min_signal_remaining",
                "enable_pcan",
                "pcan_strength",
                "pcan_offset",
                "gain_bits",
                "enable_log",
                "scale_shift",
                "left_context",
                "right_context",
                "frame_stride",
                "zero_padding",
                "out_scale",
                "out_type"
            ]
        },
        "tensorflow_core.lite.experimental.microfrontend.python.ops": {},
        "tensorflow_core.tools": {},
        "tensorflow_core.tools.common.traverse": {
            "_traverse_internal": [
                "root",
                "visit",
                "stack",
                "path"
            ],
            "traverse": [
                "root",
                "visit"
            ]
        },
        "tensorflow_core.tools.common.test_module2": {
            "ModuleClass2": {
                "__init__": [
                    "self"
                ],
                "__model_class1_method__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.tools.common.public_api": {
            "PublicAPIVisitor": {
                "__init__": [
                    "self",
                    "visitor"
                ],
                "private_map": [
                    "self"
                ],
                "do_not_descend_map": [
                    "self"
                ],
                "set_root_name": [
                    "self",
                    "root_name"
                ],
                "_is_private": [
                    "self",
                    "path",
                    "name",
                    "obj"
                ],
                "_do_not_descend": [
                    "self",
                    "path",
                    "name"
                ],
                "__call__": [
                    "self",
                    "path",
                    "parent",
                    "children"
                ]
            }
        },
        "tensorflow_core.tools.common.test_module1": {
            "ModuleClass1": {
                "__init__": [
                    "self"
                ],
                "__model_class1_method__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.tools.common": {},
        "tensorflow_core.tools.compatibility.module_deprecations_v2": {},
        "tensorflow_core.tools.compatibility.tf_upgrade_v2": {
            "_is_ast_str": [
                "node"
            ],
            "_is_ast_true": [
                "node"
            ],
            "_is_ast_false": [
                "node"
            ],
            "_rename_if_arg_found_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs",
                "arg_name",
                "arg_ok_predicate",
                "remove_if_ok",
                "message"
            ],
            "_add_argument_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs",
                "arg_name",
                "arg_value_ast"
            ],
            "_iterator_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_dropout_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_cast_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_softmax_cross_entropy_with_logits_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_image_resize_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_pool_seed_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_extract_glimpse_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_add_summary_step_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_add_summary_recording_cond_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs",
                "cond"
            ],
            "_add_loss_reduction_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_rename_if_any_arg_found_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs",
                "arg_names",
                "arg_ok_predicate",
                "remove_if_ok",
                "message"
            ],
            "_rename_if_arg_found_and_add_loss_reduction_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs",
                "arg_names",
                "arg_ok_predicate",
                "remove_if_ok",
                "message"
            ],
            "_add_uniform_scaling_initializer_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_contrib_layers_xavier_initializer_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_contrib_layers_variance_scaling_initializer_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_contrib_layers_l1_regularizer_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_contrib_layers_l2_regularizer_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_name_scope_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_rename_to_compat_v1": [
                "node",
                "full_name",
                "logs",
                "reason"
            ],
            "_rename_func": [
                "node",
                "full_name",
                "new_name",
                "logs",
                "reason"
            ],
            "_string_split_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "_string_split_rtype_transformer": [
                "parent",
                "node",
                "full_name",
                "name",
                "logs"
            ],
            "UnaliasedTFImport": {
                "__init__": [
                    "self"
                ]
            },
            "VersionedTFImport": {
                "__init__": [
                    "self",
                    "version"
                ]
            },
            "TFAPIImportAnalysisSpec": {
                "__init__": [
                    "self"
                ]
            },
            "TFAPIChangeSpec": {
                "__init__": [
                    "self"
                ],
                "preprocess": [
                    "self",
                    "root_node"
                ],
                "clear_preprocessing": [
                    "self"
                ]
            }
        },
        "tensorflow_core.tools.compatibility.ast_edits": {
            "full_name_node": [
                "name",
                "ctx"
            ],
            "get_arg_value": [
                "node",
                "arg_name",
                "arg_pos"
            ],
            "uses_star_args_in_call": [
                "node"
            ],
            "uses_star_kwargs_in_call": [
                "node"
            ],
            "uses_star_args_or_kwargs_in_call": [
                "node"
            ],
            "excluded_from_module_rename": [
                "module",
                "import_rename_spec"
            ],
            "APIChangeSpec": {
                "preprocess": [
                    "self",
                    "root_node"
                ],
                "clear_preprocessing": [
                    "self"
                ]
            },
            "NoUpdateSpec": {
                "__init__": [
                    "self"
                ]
            },
            "_PastaEditVisitor": {
                "__init__": [
                    "self",
                    "api_change_spec"
                ],
                "visit": [
                    "self",
                    "node"
                ],
                "errors": [
                    "self"
                ],
                "warnings": [
                    "self"
                ],
                "warnings_and_errors": [
                    "self"
                ],
                "info": [
                    "self"
                ],
                "log": [
                    "self"
                ],
                "add_log": [
                    "self",
                    "severity",
                    "lineno",
                    "col",
                    "msg"
                ],
                "add_logs": [
                    "self",
                    "logs"
                ],
                "_get_applicable_entries": [
                    "self",
                    "transformer_field",
                    "full_name",
                    "name"
                ],
                "_get_applicable_dict": [
                    "self",
                    "transformer_field",
                    "full_name",
                    "name"
                ],
                "_get_full_name": [
                    "self",
                    "node"
                ],
                "_maybe_add_warning": [
                    "self",
                    "node",
                    "full_name"
                ],
                "_maybe_add_module_deprecation_warning": [
                    "self",
                    "node",
                    "full_name",
                    "whole_name"
                ],
                "_maybe_add_call_warning": [
                    "self",
                    "node",
                    "full_name",
                    "name"
                ],
                "_maybe_rename": [
                    "self",
                    "parent",
                    "node",
                    "full_name"
                ],
                "_maybe_change_to_function_call": [
                    "self",
                    "parent",
                    "node",
                    "full_name"
                ],
                "_maybe_add_arg_names": [
                    "self",
                    "node",
                    "full_name"
                ],
                "_maybe_modify_args": [
                    "self",
                    "node",
                    "full_name",
                    "name"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Import": [
                    "self",
                    "node"
                ],
                "visit_ImportFrom": [
                    "self",
                    "node"
                ]
            },
            "AnalysisResult": {},
            "APIAnalysisSpec": {},
            "PastaAnalyzeVisitor": {
                "__init__": [
                    "self",
                    "api_analysis_spec"
                ],
                "results": [
                    "self"
                ],
                "add_result": [
                    "self",
                    "analysis_result"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Import": [
                    "self",
                    "node"
                ],
                "visit_ImportFrom": [
                    "self",
                    "node"
                ]
            },
            "ASTCodeUpgrader": {
                "__init__": [
                    "self",
                    "api_change_spec"
                ],
                "process_file": [
                    "self",
                    "in_filename",
                    "out_filename"
                ],
                "format_log": [
                    "self",
                    "log",
                    "in_filename"
                ],
                "update_string_pasta": [
                    "self",
                    "text",
                    "in_filename"
                ],
                "_format_log": [
                    "self",
                    "log",
                    "in_filename",
                    "out_filename"
                ],
                "process_opened_file": [
                    "self",
                    "in_filename",
                    "in_file",
                    "out_filename",
                    "out_file"
                ],
                "process_tree": [
                    "self",
                    "root_directory",
                    "output_root_directory",
                    "copy_other_files"
                ],
                "process_tree_inplace": [
                    "self",
                    "root_directory"
                ]
            }
        },
        "tensorflow_core.tools.compatibility.renames_v2": {},
        "tensorflow_core.tools.compatibility.reorders_v2": {},
        "tensorflow_core.tools.compatibility.tf_upgrade_v2_safety": {
            "TFAPIChangeSpec": {
                "__init__": [
                    "self"
                ]
            }
        },
        "tensorflow_core.tools.compatibility.tf_upgrade_v2_main": {
            "process_file": [
                "in_filename",
                "out_filename",
                "upgrader"
            ],
            "main": []
        },
        "tensorflow_core.tools.compatibility.all_renames_v2": {},
        "tensorflow_core.tools.compatibility.ipynb": {
            "is_python": [
                "cell"
            ],
            "process_file": [
                "in_filename",
                "out_filename",
                "upgrader"
            ],
            "skip_magic": [
                "code_line",
                "magic_list"
            ],
            "check_line_split": [
                "code_line"
            ],
            "_get_code": [
                "input_file"
            ],
            "_update_notebook": [
                "original_notebook",
                "original_raw_lines",
                "updated_code_lines"
            ]
        },
        "tensorflow_core.tools.compatibility": {},
        "tensorflow_core.tools.graph_transforms": {
            "TransformGraph": [
                "input_graph_def",
                "inputs",
                "outputs",
                "transforms"
            ]
        },
        "tensorflow_core.tools.docs.pretty_docs": {
            "build_md_page": [
                "page_info"
            ],
            "_build_function_page": [
                "page_info"
            ],
            "_build_class_page": [
                "page_info"
            ],
            "_build_method_section": [
                "method_info",
                "heading_level"
            ],
            "_build_module_page": [
                "page_info"
            ],
            "_build_signature": [
                "obj_info",
                "use_full_name"
            ],
            "_build_compatibility": [
                "compatibility"
            ],
            "_build_function_details": [
                "function_details"
            ]
        },
        "tensorflow_core.tools.docs.doc_generator_visitor": {
            "DocGeneratorVisitor": {
                "__init__": [
                    "self",
                    "root_name"
                ],
                "set_root_name": [
                    "self",
                    "root_name"
                ],
                "index": [
                    "self"
                ],
                "tree": [
                    "self"
                ],
                "reverse_index": [
                    "self"
                ],
                "duplicate_of": [
                    "self"
                ],
                "duplicates": [
                    "self"
                ],
                "_add_prefix": [
                    "self",
                    "name"
                ],
                "__call__": [
                    "self",
                    "parent_name",
                    "parent",
                    "children"
                ],
                "_score_name": [
                    "self",
                    "name"
                ],
                "_maybe_find_duplicates": [
                    "self"
                ]
            }
        },
        "tensorflow_core.tools.docs.py_guide_parser": {
            "md_files_in_dir": [
                "py_guide_src_dir"
            ],
            "PyGuideParser": {
                "__init__": [
                    "self"
                ],
                "process": [
                    "self",
                    "full_path"
                ],
                "replace_line": [
                    "self",
                    "line_number",
                    "line"
                ],
                "process_title": [
                    "self",
                    "line_number",
                    "title"
                ],
                "process_section": [
                    "self",
                    "line_number",
                    "section_title",
                    "tag"
                ],
                "process_in_blockquote": [
                    "self",
                    "line_number",
                    "line"
                ],
                "process_line": [
                    "self",
                    "line_number",
                    "line"
                ]
            }
        },
        "tensorflow_core.tools.docs.doc_controls": {
            "do_not_generate_docs": [
                "obj"
            ],
            "do_not_doc_inheritable": [
                "obj"
            ],
            "for_subclass_implementers": [
                "obj"
            ],
            "should_skip": [
                "obj"
            ],
            "should_skip_class_attr": [
                "cls",
                "name"
            ]
        },
        "tensorflow_core.tools.docs.parser": {
            "is_free_function": [
                "py_object",
                "full_name",
                "index"
            ],
            "documentation_path": [
                "full_name",
                "is_fragment"
            ],
            "_get_raw_docstring": [
                "py_object"
            ],
            "_handle_compatibility": [
                "doc"
            ],
            "_gen_pairs": [
                "items"
            ],
            "_parse_function_details": [
                "docstring"
            ],
            "_parse_md_docstring": [
                "py_object",
                "relative_path_to_root",
                "reference_resolver"
            ],
            "_get_arg_spec": [
                "func"
            ],
            "_remove_first_line_indent": [
                "string"
            ],
            "_generate_signature": [
                "func",
                "reverse_index"
            ],
            "_get_guides_markdown": [
                "duplicate_names",
                "guide_index",
                "relative_path"
            ],
            "_get_defining_class": [
                "py_class",
                "name"
            ],
            "docs_for_object": [
                "full_name",
                "py_object",
                "parser_config"
            ],
            "_get_defined_in": [
                "py_object",
                "parser_config"
            ],
            "generate_global_index": [
                "library_name",
                "index",
                "reference_resolver"
            ],
            "TFDocsError": {},
            "_Errors": {
                "__init__": [
                    "self"
                ],
                "log_all": [
                    "self"
                ],
                "append": [
                    "self",
                    "full_name",
                    "message"
                ],
                "__len__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "ReferenceResolver": {
                "__init__": [
                    "self",
                    "duplicate_of",
                    "doc_index",
                    "is_fragment",
                    "py_module_names"
                ],
                "add_error": [
                    "self",
                    "message"
                ],
                "log_errors": [
                    "self"
                ],
                "num_errors": [
                    "self"
                ],
                "from_visitor": [
                    "cls",
                    "visitor",
                    "doc_index"
                ],
                "from_json_file": [
                    "cls",
                    "filepath",
                    "doc_index"
                ],
                "to_json_file": [
                    "self",
                    "filepath"
                ],
                "replace_references": [
                    "self",
                    "string",
                    "relative_path_to_root"
                ],
                "python_link": [
                    "self",
                    "link_text",
                    "ref_full_name",
                    "relative_path_to_root",
                    "code_ref"
                ],
                "_link_text_to_html": [
                    "link_text"
                ],
                "py_master_name": [
                    "self",
                    "full_name"
                ],
                "reference_to_url": [
                    "self",
                    "ref_full_name",
                    "relative_path_to_root"
                ],
                "_one_ref": [
                    "self",
                    "match",
                    "relative_path_to_root"
                ],
                "_doc_link": [
                    "self",
                    "string",
                    "link_text",
                    "manual_link_text",
                    "relative_path_to_root"
                ],
                "_doc_missing": [
                    "self",
                    "string",
                    "unused_hash_tag",
                    "unused_link_text",
                    "unused_manual_link_text",
                    "unused_relative_path_to_root"
                ],
                "_cc_link": [
                    "self",
                    "string",
                    "link_text",
                    "unused_manual_link_text",
                    "relative_path_to_root"
                ]
            },
            "_FunctionDetail": {
                "__str__": [
                    "self"
                ]
            },
            "_LinkInfo": {
                "is_link": [
                    "self"
                ]
            },
            "_OtherMemberInfo": {
                "is_link": [
                    "self"
                ]
            },
            "_FunctionPageInfo": {
                "__init__": [
                    "self",
                    "full_name"
                ],
                "for_function": [
                    "self"
                ],
                "for_class": [
                    "self"
                ],
                "for_module": [
                    "self"
                ],
                "full_name": [
                    "self"
                ],
                "short_name": [
                    "self"
                ],
                "defined_in": [
                    "self"
                ],
                "set_defined_in": [
                    "self",
                    "defined_in"
                ],
                "aliases": [
                    "self"
                ],
                "set_aliases": [
                    "self",
                    "aliases"
                ],
                "doc": [
                    "self"
                ],
                "set_doc": [
                    "self",
                    "doc"
                ],
                "guides": [
                    "self"
                ],
                "set_guides": [
                    "self",
                    "guides"
                ],
                "signature": [
                    "self"
                ],
                "set_signature": [
                    "self",
                    "function",
                    "reverse_index"
                ],
                "decorators": [
                    "self"
                ],
                "add_decorator": [
                    "self",
                    "dec"
                ],
                "get_metadata_html": [
                    "self"
                ]
            },
            "_ClassPageInfo": {
                "__init__": [
                    "self",
                    "full_name"
                ],
                "for_function": [
                    "self"
                ],
                "for_class": [
                    "self"
                ],
                "for_module": [
                    "self"
                ],
                "full_name": [
                    "self"
                ],
                "short_name": [
                    "self"
                ],
                "defined_in": [
                    "self"
                ],
                "set_defined_in": [
                    "self",
                    "defined_in"
                ],
                "aliases": [
                    "self"
                ],
                "set_aliases": [
                    "self",
                    "aliases"
                ],
                "doc": [
                    "self"
                ],
                "set_doc": [
                    "self",
                    "doc"
                ],
                "guides": [
                    "self"
                ],
                "set_guides": [
                    "self",
                    "guides"
                ],
                "namedtuplefields": [
                    "self"
                ],
                "set_namedtuplefields": [
                    "self",
                    "py_class"
                ],
                "bases": [
                    "self"
                ],
                "_set_bases": [
                    "self",
                    "relative_path",
                    "parser_config"
                ],
                "properties": [
                    "self"
                ],
                "_add_property": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc"
                ],
                "methods": [
                    "self"
                ],
                "_add_method": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc",
                    "signature",
                    "decorators"
                ],
                "classes": [
                    "self"
                ],
                "get_metadata_html": [
                    "self"
                ],
                "_add_class": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc",
                    "url"
                ],
                "other_members": [
                    "self"
                ],
                "_add_other_member": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc"
                ],
                "collect_docs_for_class": [
                    "self",
                    "py_class",
                    "parser_config"
                ]
            },
            "_ModulePageInfo": {
                "__init__": [
                    "self",
                    "full_name"
                ],
                "for_function": [
                    "self"
                ],
                "for_class": [
                    "self"
                ],
                "for_module": [
                    "self"
                ],
                "full_name": [
                    "self"
                ],
                "short_name": [
                    "self"
                ],
                "defined_in": [
                    "self"
                ],
                "set_defined_in": [
                    "self",
                    "defined_in"
                ],
                "aliases": [
                    "self"
                ],
                "set_aliases": [
                    "self",
                    "aliases"
                ],
                "doc": [
                    "self"
                ],
                "set_doc": [
                    "self",
                    "doc"
                ],
                "guides": [
                    "self"
                ],
                "set_guides": [
                    "self",
                    "guides"
                ],
                "modules": [
                    "self"
                ],
                "_add_module": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc",
                    "url"
                ],
                "classes": [
                    "self"
                ],
                "_add_class": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc",
                    "url"
                ],
                "functions": [
                    "self"
                ],
                "_add_function": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc",
                    "url"
                ],
                "other_members": [
                    "self"
                ],
                "_add_other_member": [
                    "self",
                    "short_name",
                    "full_name",
                    "obj",
                    "doc"
                ],
                "get_metadata_html": [
                    "self"
                ],
                "collect_docs_for_module": [
                    "self",
                    "parser_config"
                ]
            },
            "ParserConfig": {
                "__init__": [
                    "self",
                    "reference_resolver",
                    "duplicates",
                    "duplicate_of",
                    "tree",
                    "index",
                    "reverse_index",
                    "guide_index",
                    "base_dir"
                ],
                "py_name_to_object": [
                    "self",
                    "full_name"
                ]
            },
            "_PythonBuiltin": {
                "is_builtin": [
                    "self"
                ],
                "is_python_file": [
                    "self"
                ],
                "is_generated_file": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_PythonFile": {
                "__init__": [
                    "self",
                    "path",
                    "parser_config"
                ],
                "is_builtin": [
                    "self"
                ],
                "is_python_file": [
                    "self"
                ],
                "is_generated_file": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_ProtoFile": {
                "__init__": [
                    "self",
                    "path",
                    "parser_config"
                ],
                "is_builtin": [
                    "self"
                ],
                "is_python_file": [
                    "self"
                ],
                "is_generated_file": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_GeneratedFile": {
                "__init__": [
                    "self",
                    "path",
                    "parser_config"
                ],
                "is_builtin": [
                    "self"
                ],
                "is_python_file": [
                    "self"
                ],
                "is_generated_file": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_Metadata": {
                "__init__": [
                    "self",
                    "name",
                    "version"
                ],
                "append": [
                    "self",
                    "item"
                ],
                "build_html": [
                    "self"
                ]
            }
        },
        "tensorflow_core.tools.docs.generate_lib": {
            "write_docs": [
                "output_dir",
                "parser_config",
                "yaml_toc",
                "root_title",
                "search_hints",
                "site_api_path"
            ],
            "add_dict_to_dict": [
                "add_from",
                "add_to"
            ],
            "_get_default_private_map": [],
            "_get_default_do_not_descend_map": [],
            "extract": [
                "py_modules",
                "private_map",
                "do_not_descend_map",
                "visitor_cls"
            ],
            "build_doc_index": [
                "src_dir"
            ],
            "_build_guide_index": [
                "guide_src_dir"
            ],
            "update_id_tags_inplace": [
                "src_dir"
            ],
            "replace_refs": [
                "src_dir",
                "output_dir",
                "reference_resolver",
                "file_pattern",
                "api_docs_relpath"
            ],
            "DocControlsAwareCrawler": {
                "_is_private": [
                    "self",
                    "path",
                    "name",
                    "obj"
                ]
            },
            "_GetMarkdownTitle": {
                "__init__": [
                    "self"
                ],
                "process_title": [
                    "self",
                    "_",
                    "title"
                ]
            },
            "_DocInfo": {
                "__init__": [
                    "self",
                    "url",
                    "title"
                ]
            },
            "_GuideRef": {
                "__init__": [
                    "self",
                    "base_name",
                    "title",
                    "section_title",
                    "section_tag"
                ],
                "make_md_link": [
                    "self",
                    "url_prefix"
                ]
            },
            "_GenerateGuideIndex": {
                "__init__": [
                    "self"
                ],
                "process": [
                    "self",
                    "full_path",
                    "base_name"
                ],
                "process_title": [
                    "self",
                    "_",
                    "title"
                ],
                "process_section": [
                    "self",
                    "_",
                    "section_title",
                    "tag"
                ],
                "process_line": [
                    "self",
                    "_",
                    "line"
                ]
            },
            "_UpdateTags": {
                "process_section": [
                    "self",
                    "line_number",
                    "section_title",
                    "tag"
                ]
            },
            "DocGenerator": {
                "__init__": [
                    "self"
                ],
                "add_output_dir_argument": [
                    "self"
                ],
                "add_src_dir_argument": [
                    "self"
                ],
                "add_base_dir_argument": [
                    "self",
                    "default_base_dir"
                ],
                "parse_known_args": [
                    "self"
                ],
                "add_to_private_map": [
                    "self",
                    "d"
                ],
                "add_to_do_not_descend_map": [
                    "self",
                    "d"
                ],
                "set_private_map": [
                    "self",
                    "d"
                ],
                "set_do_not_descend_map": [
                    "self",
                    "d"
                ],
                "set_py_modules": [
                    "self",
                    "py_modules"
                ],
                "py_module_names": [
                    "self"
                ],
                "make_reference_resolver": [
                    "self",
                    "visitor",
                    "doc_index"
                ],
                "make_parser_config": [
                    "self",
                    "visitor",
                    "reference_resolver",
                    "guide_index",
                    "base_dir"
                ],
                "run_extraction": [
                    "self"
                ],
                "build": [
                    "self",
                    "flags"
                ]
            }
        },
        "tensorflow_core.tools.docs": {},
        "tensorflow_core.tools.pip_package.simple_console_for_windows": {
            "main": [
                "_"
            ]
        },
        "tensorflow_core.tools.pip_package.setup": {
            "find_files": [
                "pattern",
                "root"
            ],
            "BinaryDistribution": {
                "has_ext_modules": [
                    "self"
                ]
            },
            "InstallCommand": {
                "finalize_options": [
                    "self"
                ]
            },
            "InstallHeaders": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "mkdir_and_copy_file": [
                    "self",
                    "header"
                ],
                "run": [
                    "self"
                ],
                "get_inputs": [
                    "self"
                ],
                "get_outputs": [
                    "self"
                ]
            }
        },
        "tensorflow_core.tools.pip_package": {},
        "tensorflow": {
            "_forward_module": [
                "old_name"
            ],
            "_LazyLoader": {
                "__init__": [
                    "self",
                    "local_name",
                    "parent_module_globals",
                    "name"
                ],
                "_load": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "item"
                ],
                "__dir__": [
                    "self"
                ]
            }
        }
    }
}