{
    "v0.9": {
        "lib.spack.llnl": {},
        "lib.spack.llnl.util.link_tree": {
            "LinkTree": {
                "__init__": [
                    "self",
                    "source_root"
                ],
                "find_conflict": [
                    "self",
                    "dest_root"
                ],
                "merge": [
                    "self",
                    "dest_root"
                ],
                "unmerge": [
                    "self",
                    "dest_root"
                ]
            }
        },
        "lib.spack.llnl.util": {},
        "lib.spack.llnl.util.lock": {
            "Lock": {
                "__init__": [
                    "self",
                    "file_path"
                ],
                "_lock": [
                    "self",
                    "op",
                    "timeout"
                ],
                "_unlock": [
                    "self"
                ],
                "acquire_read": [
                    "self",
                    "timeout"
                ],
                "acquire_write": [
                    "self",
                    "timeout"
                ],
                "release_read": [
                    "self"
                ],
                "release_write": [
                    "self"
                ]
            },
            "LockError": {}
        },
        "lib.spack.llnl.util.lang": {
            "index_by": [
                "objects"
            ],
            "partition_list": [
                "elements",
                "predicate"
            ],
            "caller_locals": [],
            "get_calling_module_name": [],
            "attr_required": [
                "obj",
                "attr_name"
            ],
            "attr_setdefault": [
                "obj",
                "name",
                "value"
            ],
            "has_method": [
                "cls",
                "name"
            ],
            "list_modules": [
                "directory"
            ],
            "key_ordering": [
                "cls"
            ],
            "in_function": [
                "function_name"
            ],
            "check_kwargs": [
                "kwargs",
                "fun"
            ],
            "match_predicate": [],
            "DictWrapper": [
                "dictionary"
            ],
            "memoized": {
                "__init__": [
                    "self",
                    "func"
                ],
                "__call__": [
                    "self"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "objtype"
                ],
                "clear": [
                    "self"
                ]
            },
            "HashableMap": {
                "_cmp_key": [
                    "self"
                ],
                "copy": [
                    "self"
                ]
            },
            "RequiredAttributeError": {
                "__init__": [
                    "self",
                    "message"
                ]
            }
        },
        "lib.spack.llnl.util.tty.colify": {
            "config_variable_cols": [
                "elts",
                "console_width",
                "padding",
                "cols"
            ],
            "config_uniform_cols": [
                "elts",
                "console_width",
                "padding",
                "cols"
            ],
            "colify": [
                "elts"
            ],
            "colify_table": [
                "table"
            ],
            "colified": [
                "elts"
            ],
            "ColumnConfig": {
                "__init__": [
                    "self",
                    "cols"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.llnl.util.tty.color": {
            "colorize": [
                "string"
            ],
            "clen": [
                "string"
            ],
            "cextra": [
                "string"
            ],
            "cwrite": [
                "string",
                "stream",
                "color"
            ],
            "cprint": [
                "string",
                "stream",
                "color"
            ],
            "cescape": [
                "string"
            ],
            "ColorParseError": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "match_to_ansi": {
                "__init__": [
                    "self",
                    "color"
                ],
                "escape": [
                    "self",
                    "s"
                ],
                "__call__": [
                    "self",
                    "match"
                ]
            },
            "ColorStream": {
                "__init__": [
                    "self",
                    "stream",
                    "color"
                ],
                "write": [
                    "self",
                    "string"
                ],
                "writelines": [
                    "self",
                    "sequence"
                ]
            }
        },
        "lib.spack.docs._themes.sphinx_rtd_theme": {
            "get_html_theme_path": []
        },
        "lib.spack.docs.exts.sphinxcontrib": {},
        "lib.spack.docs.exts.sphinxcontrib.programoutput": {
            "_slice": [
                "value"
            ],
            "run_programs": [
                "app",
                "doctree"
            ],
            "init_cache": [
                "app"
            ],
            "setup": [
                "app"
            ],
            "program_output": {},
            "ProgramOutputDirective": {
                "run": [
                    "self"
                ]
            },
            "Command": {
                "__new__": [
                    "cls",
                    "command",
                    "shell",
                    "hide_standard_error",
                    "working_directory"
                ],
                "from_program_output_node": [
                    "cls",
                    "node"
                ],
                "execute": [
                    "self"
                ],
                "get_output": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ProgramOutputCache": {
                "__missing__": [
                    "self",
                    "command"
                ]
            }
        },
        "lib.spack.external.argparse": {
            "_callable": [
                "obj"
            ],
            "_ensure_value": [
                "namespace",
                "name",
                "value"
            ],
            "_get_action_name": [
                "argument"
            ],
            "_AttributeHolder": {
                "__repr__": [
                    "self"
                ],
                "_get_kwargs": [
                    "self"
                ],
                "_get_args": [
                    "self"
                ]
            },
            "HelpFormatter": {
                "__init__": [
                    "self",
                    "prog",
                    "indent_increment",
                    "max_help_position",
                    "width"
                ],
                "_indent": [
                    "self"
                ],
                "_dedent": [
                    "self"
                ],
                "_add_item": [
                    "self",
                    "func",
                    "args"
                ],
                "start_section": [
                    "self",
                    "heading"
                ],
                "end_section": [
                    "self"
                ],
                "add_text": [
                    "self",
                    "text"
                ],
                "add_usage": [
                    "self",
                    "usage",
                    "actions",
                    "groups",
                    "prefix"
                ],
                "add_argument": [
                    "self",
                    "action"
                ],
                "add_arguments": [
                    "self",
                    "actions"
                ],
                "format_help": [
                    "self"
                ],
                "_join_parts": [
                    "self",
                    "part_strings"
                ],
                "_format_usage": [
                    "self",
                    "usage",
                    "actions",
                    "groups",
                    "prefix"
                ],
                "_format_actions_usage": [
                    "self",
                    "actions",
                    "groups"
                ],
                "_format_text": [
                    "self",
                    "text"
                ],
                "_format_action": [
                    "self",
                    "action"
                ],
                "_format_action_invocation": [
                    "self",
                    "action"
                ],
                "_metavar_formatter": [
                    "self",
                    "action",
                    "default_metavar"
                ],
                "_format_args": [
                    "self",
                    "action",
                    "default_metavar"
                ],
                "_expand_help": [
                    "self",
                    "action"
                ],
                "_iter_indented_subactions": [
                    "self",
                    "action"
                ],
                "_split_lines": [
                    "self",
                    "text",
                    "width"
                ],
                "_fill_text": [
                    "self",
                    "text",
                    "width",
                    "indent"
                ],
                "_get_help_string": [
                    "self",
                    "action"
                ]
            },
            "RawDescriptionHelpFormatter": {
                "_fill_text": [
                    "self",
                    "text",
                    "width",
                    "indent"
                ]
            },
            "RawTextHelpFormatter": {
                "_split_lines": [
                    "self",
                    "text",
                    "width"
                ]
            },
            "ArgumentDefaultsHelpFormatter": {
                "_get_help_string": [
                    "self",
                    "action"
                ]
            },
            "ArgumentError": {
                "__init__": [
                    "self",
                    "argument",
                    "message"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ArgumentTypeError": {},
            "Action": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "nargs",
                    "const",
                    "default",
                    "type",
                    "choices",
                    "required",
                    "help",
                    "metavar"
                ],
                "_get_kwargs": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_StoreAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "nargs",
                    "const",
                    "default",
                    "type",
                    "choices",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_StoreConstAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "const",
                    "default",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_StoreTrueAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "required",
                    "help"
                ]
            },
            "_StoreFalseAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "required",
                    "help"
                ]
            },
            "_AppendAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "nargs",
                    "const",
                    "default",
                    "type",
                    "choices",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_AppendConstAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "const",
                    "default",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_CountAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "required",
                    "help"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_HelpAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "help"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_VersionAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "version",
                    "dest",
                    "default",
                    "help"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_SubParsersAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "prog",
                    "parser_class",
                    "dest",
                    "help",
                    "metavar"
                ],
                "add_parser": [
                    "self",
                    "name"
                ],
                "_get_subactions": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "FileType": {
                "__init__": [
                    "self",
                    "mode",
                    "bufsize"
                ],
                "__call__": [
                    "self",
                    "string"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Namespace": {
                "__init__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__contains__": [
                    "self",
                    "key"
                ]
            },
            "_ActionsContainer": {
                "__init__": [
                    "self",
                    "description",
                    "prefix_chars",
                    "argument_default",
                    "conflict_handler"
                ],
                "register": [
                    "self",
                    "registry_name",
                    "value",
                    "object"
                ],
                "_registry_get": [
                    "self",
                    "registry_name",
                    "value",
                    "default"
                ],
                "set_defaults": [
                    "self"
                ],
                "get_default": [
                    "self",
                    "dest"
                ],
                "add_argument": [
                    "self"
                ],
                "add_argument_group": [
                    "self"
                ],
                "add_mutually_exclusive_group": [
                    "self"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "_remove_action": [
                    "self",
                    "action"
                ],
                "_add_container_actions": [
                    "self",
                    "container"
                ],
                "_get_positional_kwargs": [
                    "self",
                    "dest"
                ],
                "_get_optional_kwargs": [
                    "self"
                ],
                "_pop_action_class": [
                    "self",
                    "kwargs",
                    "default"
                ],
                "_get_handler": [
                    "self"
                ],
                "_check_conflict": [
                    "self",
                    "action"
                ],
                "_handle_conflict_error": [
                    "self",
                    "action",
                    "conflicting_actions"
                ],
                "_handle_conflict_resolve": [
                    "self",
                    "action",
                    "conflicting_actions"
                ]
            },
            "_ArgumentGroup": {
                "__init__": [
                    "self",
                    "container",
                    "title",
                    "description"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "_remove_action": [
                    "self",
                    "action"
                ]
            },
            "_MutuallyExclusiveGroup": {
                "__init__": [
                    "self",
                    "container",
                    "required"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "_remove_action": [
                    "self",
                    "action"
                ]
            },
            "ArgumentParser": {
                "__init__": [
                    "self",
                    "prog",
                    "usage",
                    "description",
                    "epilog",
                    "version",
                    "parents",
                    "formatter_class",
                    "prefix_chars",
                    "fromfile_prefix_chars",
                    "argument_default",
                    "conflict_handler",
                    "add_help"
                ],
                "_get_kwargs": [
                    "self"
                ],
                "add_subparsers": [
                    "self"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "get_subparser": [
                    "self",
                    "name"
                ],
                "_get_optional_actions": [
                    "self"
                ],
                "_get_positional_actions": [
                    "self"
                ],
                "parse_args": [
                    "self",
                    "args",
                    "namespace"
                ],
                "parse_known_args": [
                    "self",
                    "args",
                    "namespace"
                ],
                "_parse_known_args": [
                    "self",
                    "arg_strings",
                    "namespace"
                ],
                "_read_args_from_files": [
                    "self",
                    "arg_strings"
                ],
                "convert_arg_line_to_args": [
                    "self",
                    "arg_line"
                ],
                "_match_argument": [
                    "self",
                    "action",
                    "arg_strings_pattern"
                ],
                "_match_arguments_partial": [
                    "self",
                    "actions",
                    "arg_strings_pattern"
                ],
                "_parse_optional": [
                    "self",
                    "arg_string"
                ],
                "_get_option_tuples": [
                    "self",
                    "option_string"
                ],
                "_get_nargs_pattern": [
                    "self",
                    "action"
                ],
                "_get_values": [
                    "self",
                    "action",
                    "arg_strings"
                ],
                "_get_value": [
                    "self",
                    "action",
                    "arg_string"
                ],
                "_check_value": [
                    "self",
                    "action",
                    "value"
                ],
                "format_usage": [
                    "self"
                ],
                "format_help": [
                    "self"
                ],
                "format_version": [
                    "self"
                ],
                "_get_formatter": [
                    "self"
                ],
                "print_usage": [
                    "self",
                    "file"
                ],
                "print_help": [
                    "self",
                    "file"
                ],
                "print_version": [
                    "self",
                    "file"
                ],
                "_print_message": [
                    "self",
                    "message",
                    "file"
                ],
                "exit": [
                    "self",
                    "status",
                    "message"
                ],
                "error": [
                    "self",
                    "message"
                ]
            }
        },
        "lib.spack.external": {},
        "lib.spack.external.functools_backport": {
            "total_ordering": [
                "cls"
            ]
        },
        "lib.spack.external.ordereddict_backport": {
            "OrderedDict": {
                "__init__": [
                    "self"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value",
                    "dict_setitem"
                ],
                "__delitem__": [
                    "self",
                    "key",
                    "dict_delitem"
                ],
                "__iter__": [
                    "self"
                ],
                "__reversed__": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "popitem": [
                    "self",
                    "last"
                ],
                "keys": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "iterkeys": [
                    "self"
                ],
                "itervalues": [
                    "self"
                ],
                "iteritems": [
                    "self"
                ],
                "update": [],
                "pop": [
                    "self",
                    "key",
                    "default"
                ],
                "setdefault": [
                    "self",
                    "key",
                    "default"
                ],
                "__repr__": [
                    "self",
                    "_repr_running"
                ],
                "__reduce__": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "fromkeys": [
                    "cls",
                    "iterable",
                    "value"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "viewkeys": [
                    "self"
                ],
                "viewvalues": [
                    "self"
                ],
                "viewitems": [
                    "self"
                ]
            }
        },
        "lib.spack.external.nose": {},
        "lib.spack.external.nose.loader": {
            "TestLoader": {
                "__init__": [
                    "self",
                    "config",
                    "importer",
                    "workingDir",
                    "selector"
                ],
                "getTestCaseNames": [
                    "self",
                    "testCaseClass"
                ],
                "_haveVisited": [
                    "self",
                    "path"
                ],
                "_addVisitedPath": [
                    "self",
                    "path"
                ],
                "loadTestsFromDir": [
                    "self",
                    "path"
                ],
                "loadTestsFromFile": [
                    "self",
                    "filename"
                ],
                "loadTestsFromGenerator": [
                    "self",
                    "generator",
                    "module"
                ],
                "loadTestsFromGeneratorMethod": [
                    "self",
                    "generator",
                    "cls"
                ],
                "loadTestsFromModule": [
                    "self",
                    "module",
                    "path",
                    "discovered"
                ],
                "loadTestsFromName": [
                    "self",
                    "name",
                    "module",
                    "discovered"
                ],
                "loadTestsFromNames": [
                    "self",
                    "names",
                    "module"
                ],
                "loadTestsFromTestCase": [
                    "self",
                    "testCaseClass"
                ],
                "loadTestsFromTestClass": [
                    "self",
                    "cls"
                ],
                "makeTest": [
                    "self",
                    "obj",
                    "parent"
                ],
                "_makeTest": [
                    "self",
                    "obj",
                    "parent"
                ],
                "resolve": [
                    "self",
                    "name",
                    "module"
                ],
                "parseGeneratedTest": [
                    "self",
                    "test"
                ]
            }
        },
        "lib.spack.external.nose.proxy": {
            "proxied_attribute": [
                "local_attr",
                "proxied_attr",
                "doc"
            ],
            "ResultProxyFactory": {
                "__init__": [
                    "self",
                    "config"
                ],
                "__call__": [
                    "self",
                    "result",
                    "test"
                ]
            },
            "ResultProxy": {
                "__init__": [
                    "self",
                    "result",
                    "test",
                    "config"
                ],
                "__repr__": [
                    "self"
                ],
                "_prepareErr": [
                    "self",
                    "err"
                ],
                "assertMyTest": [
                    "self",
                    "test"
                ],
                "afterTest": [
                    "self",
                    "test"
                ],
                "beforeTest": [
                    "self",
                    "test"
                ],
                "addError": [
                    "self",
                    "test",
                    "err"
                ],
                "addFailure": [
                    "self",
                    "test",
                    "err"
                ],
                "addSkip": [
                    "self",
                    "test",
                    "reason"
                ],
                "addSuccess": [
                    "self",
                    "test"
                ],
                "startTest": [
                    "self",
                    "test"
                ],
                "stop": [
                    "self"
                ],
                "stopTest": [
                    "self",
                    "test"
                ]
            }
        },
        "lib.spack.external.nose.importer": {
            "add_path": [
                "path",
                "config"
            ],
            "remove_path": [
                "path"
            ],
            "Importer": {
                "__init__": [
                    "self",
                    "config"
                ],
                "importFromPath": [
                    "self",
                    "path",
                    "fqname"
                ],
                "importFromDir": [
                    "self",
                    "dir",
                    "fqname"
                ],
                "_dirname_if_file": [
                    "self",
                    "filename"
                ],
                "sameModule": [
                    "self",
                    "mod",
                    "filename"
                ]
            }
        },
        "lib.spack.external.nose.suite": {
            "_strclass": [
                "cls"
            ],
            "MixedContextError": {},
            "LazySuite": {
                "__init__": [
                    "self",
                    "tests"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "addTest": [
                    "self",
                    "test"
                ],
                "run": [
                    "self",
                    "result"
                ],
                "__nonzero__": [
                    "self"
                ],
                "_get_tests": [
                    "self"
                ],
                "_set_tests": [
                    "self",
                    "tests"
                ]
            },
            "ContextSuite": {
                "__init__": [
                    "self",
                    "tests",
                    "context",
                    "factory",
                    "config",
                    "resultProxy",
                    "can_split"
                ],
                "__repr__": [
                    "self"
                ],
                "id": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "exc_info": [
                    "self"
                ],
                "_exc_info": [
                    "self"
                ],
                "run": [
                    "self",
                    "result"
                ],
                "hasFixtures": [
                    "self",
                    "ctx_callback"
                ],
                "implementsAnyFixture": [
                    "self",
                    "context",
                    "ctx_callback"
                ],
                "setUp": [
                    "self"
                ],
                "setupContext": [
                    "self",
                    "context"
                ],
                "shortDescription": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "teardownContext": [
                    "self",
                    "context"
                ],
                "_get_wrapped_tests": [
                    "self"
                ]
            },
            "ContextSuiteFactory": {
                "__init__": [
                    "self",
                    "config",
                    "suiteClass",
                    "resultProxy"
                ],
                "__call__": [
                    "self",
                    "tests"
                ],
                "ancestry": [
                    "self",
                    "context"
                ],
                "findContext": [
                    "self",
                    "tests"
                ],
                "makeSuite": [
                    "self",
                    "tests",
                    "context"
                ],
                "mixedSuites": [
                    "self",
                    "tests"
                ],
                "wrapTests": [
                    "self",
                    "tests"
                ]
            },
            "ContextList": {
                "__init__": [
                    "self",
                    "tests",
                    "context"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "FinalizingSuiteWrapper": {
                "__init__": [
                    "self",
                    "suite",
                    "finalize"
                ],
                "__call__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            },
            "TestDir": {
                "__init__": []
            },
            "TestModule": {
                "__init__": []
            }
        },
        "lib.spack.external.nose.case": {
            "Test": {
                "__init__": [
                    "self",
                    "test",
                    "config",
                    "resultProxy"
                ],
                "__call__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "afterTest": [
                    "self",
                    "result"
                ],
                "beforeTest": [
                    "self",
                    "result"
                ],
                "exc_info": [
                    "self"
                ],
                "id": [
                    "self"
                ],
                "address": [
                    "self"
                ],
                "_context": [
                    "self"
                ],
                "run": [
                    "self",
                    "result"
                ],
                "runTest": [
                    "self",
                    "result"
                ],
                "shortDescription": [
                    "self"
                ]
            },
            "TestBase": {
                "id": [
                    "self"
                ],
                "runTest": [
                    "self"
                ],
                "shortDescription": [
                    "self"
                ]
            },
            "FunctionTestCase": {
                "__init__": [
                    "self",
                    "test",
                    "setUp",
                    "tearDown",
                    "arg",
                    "descriptor"
                ],
                "address": [
                    "self"
                ],
                "_context": [
                    "self"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_descriptors": [
                    "self"
                ]
            },
            "MethodTestCase": {
                "__init__": [
                    "self",
                    "method",
                    "test",
                    "arg",
                    "descriptor"
                ],
                "__str__": [
                    "self"
                ],
                "address": [
                    "self"
                ],
                "_context": [
                    "self"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_descriptors": [
                    "self"
                ]
            }
        },
        "lib.spack.external.nose.pyversion": {
            "cmp_to_key": [
                "mycmp"
            ],
            "unbound_method": [
                "cls",
                "func"
            ],
            "ismethod": [
                "obj"
            ],
            "format_exception": [
                "exc_info",
                "encoding"
            ],
            "UnboundMethod": {
                "__init__": [
                    "self",
                    "cls",
                    "func"
                ],
                "address": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "UnboundSelf": {
                "__init__": [
                    "self",
                    "cls"
                ],
                "__getattribute__": [
                    "self",
                    "attr"
                ]
            }
        },
        "lib.spack.external.nose.exc": {},
        "lib.spack.external.nose.result": {
            "_exception_detail": [
                "exc"
            ],
            "ln": [],
            "TextTestResult": {
                "__init__": [
                    "self",
                    "stream",
                    "descriptions",
                    "verbosity",
                    "config",
                    "errorClasses"
                ],
                "addSkip": [
                    "self",
                    "test",
                    "reason"
                ],
                "addError": [
                    "self",
                    "test",
                    "err"
                ],
                "getDescription": [
                    "self",
                    "test"
                ],
                "printLabel": [
                    "self",
                    "label",
                    "err"
                ],
                "printErrors": [
                    "self"
                ],
                "printSummary": [
                    "self",
                    "start",
                    "stop"
                ],
                "wasSuccessful": [
                    "self"
                ],
                "_addError": [
                    "self",
                    "test",
                    "err"
                ],
                "_exc_info_to_string": [
                    "self",
                    "err",
                    "test"
                ]
            }
        },
        "lib.spack.external.nose.commands": {},
        "lib.spack.external.nose.__main__": {},
        "lib.spack.external.nose.selector": {
            "Selector": {
                "__init__": [
                    "self",
                    "config"
                ],
                "configure": [
                    "self",
                    "config"
                ],
                "matches": [
                    "self",
                    "name"
                ],
                "wantClass": [
                    "self",
                    "cls"
                ],
                "wantDirectory": [
                    "self",
                    "dirname"
                ],
                "wantFile": [
                    "self",
                    "file"
                ],
                "wantFunction": [
                    "self",
                    "function"
                ],
                "wantMethod": [
                    "self",
                    "method"
                ],
                "wantModule": [
                    "self",
                    "module"
                ]
            },
            "TestAddress": {
                "__init__": [
                    "self",
                    "name",
                    "workingDir"
                ],
                "totuple": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.nose.util": {
            "ls_tree": [
                "dir_path",
                "skip_pattern",
                "indent",
                "branch_indent",
                "last_indent",
                "last_branch_indent"
            ],
            "_ls_tree_lines": [
                "dir_path",
                "skip_pattern",
                "indent",
                "branch_indent",
                "last_indent",
                "last_branch_indent"
            ],
            "absdir": [
                "path"
            ],
            "absfile": [
                "path",
                "where"
            ],
            "anyp": [
                "predicate",
                "iterable"
            ],
            "file_like": [
                "name"
            ],
            "func_lineno": [
                "func"
            ],
            "isclass": [
                "obj"
            ],
            "ispackage": [
                "path"
            ],
            "isproperty": [
                "obj"
            ],
            "getfilename": [
                "package",
                "relativeTo"
            ],
            "getpackage": [
                "filename"
            ],
            "ln": [
                "label"
            ],
            "resolve_name": [
                "name",
                "module"
            ],
            "split_test_name": [
                "test"
            ],
            "test_address": [
                "test"
            ],
            "try_run": [
                "obj",
                "names"
            ],
            "src": [
                "filename"
            ],
            "regex_last_key": [
                "regex"
            ],
            "tolist": [
                "val"
            ],
            "transplant_func": [
                "func",
                "module"
            ],
            "transplant_class": [
                "cls",
                "module"
            ],
            "safe_str": [
                "val",
                "encoding"
            ],
            "is_executable": [
                "file"
            ],
            "odict": {
                "__init__": [
                    "self"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "item"
                ],
                "__str__": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "setdefault": [
                    "self",
                    "key",
                    "failobj"
                ],
                "update": [
                    "self",
                    "dict"
                ],
                "values": [
                    "self"
                ]
            }
        },
        "lib.spack.external.nose.sphinx": {},
        "lib.spack.external.nose.sphinx.pluginopts": {
            "autoplugin_directive": [
                "dirname",
                "arguments",
                "options",
                "content",
                "lineno",
                "content_offset",
                "block_text",
                "state",
                "state_machine"
            ],
            "autohelp_directive": [
                "dirname",
                "arguments",
                "options",
                "content",
                "lineno",
                "content_offset",
                "block_text",
                "state",
                "state_machine"
            ],
            "setup": [
                "app"
            ],
            "OptBucket": {
                "__init__": [
                    "self",
                    "doc",
                    "prog"
                ],
                "__iter__": [
                    "self"
                ],
                "format_help": [
                    "self"
                ],
                "add_option": [
                    "self"
                ]
            },
            "Opt": {
                "__init__": [
                    "self"
                ],
                "options": [
                    "self"
                ],
                "meta": [
                    "self",
                    "optstring"
                ]
            }
        },
        "lib.spack.external.nose.tools": {},
        "lib.spack.external.nose.tools.nontrivial": {
            "make_decorator": [
                "func"
            ],
            "raises": [],
            "set_trace": [],
            "timed": [
                "limit"
            ],
            "with_setup": [
                "setup",
                "teardown"
            ],
            "istest": [
                "func"
            ],
            "nottest": [
                "func"
            ],
            "TimeExpired": {}
        },
        "lib.spack.external.nose.tools.trivial": {
            "ok_": [
                "expr",
                "msg"
            ],
            "eq_": [
                "a",
                "b",
                "msg"
            ],
            "pep8": [
                "name"
            ],
            "Dummy": {
                "nop": []
            }
        },
        "lib.spack.external.nose.plugins.failuredetail": {
            "FailureDetail": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ],
                "formatFailure": [
                    "self",
                    "test",
                    "err"
                ]
            }
        },
        "lib.spack.external.nose.plugins.skip": {
            "Skip": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ]
            }
        },
        "lib.spack.external.nose.plugins.builtin": {},
        "lib.spack.external.nose.plugins": {},
        "lib.spack.external.nose.plugins.debug": {
            "Pdb": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ],
                "addError": [
                    "self",
                    "test",
                    "err"
                ],
                "addFailure": [
                    "self",
                    "test",
                    "err"
                ],
                "debug": [
                    "self",
                    "err"
                ]
            }
        },
        "lib.spack.external.nose.plugins.prof": {
            "Profile": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "available": [
                    "cls"
                ],
                "begin": [
                    "self"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ],
                "prepareTest": [
                    "self",
                    "test"
                ],
                "report": [
                    "self",
                    "stream"
                ],
                "finalize": [
                    "self",
                    "result"
                ],
                "_create_pfile": [
                    "self"
                ]
            }
        },
        "lib.spack.external.nose.plugins.collect": {
            "CollectOnly": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "prepareTestLoader": [
                    "self",
                    "loader"
                ],
                "prepareTestCase": [
                    "self",
                    "test"
                ]
            },
            "TestSuiteFactory": {
                "__init__": [
                    "self",
                    "conf"
                ],
                "__call__": [
                    "self",
                    "tests"
                ]
            },
            "TestSuite": {
                "__init__": [
                    "self",
                    "tests",
                    "conf"
                ],
                "addTest": [
                    "self",
                    "test"
                ]
            }
        },
        "lib.spack.external.nose.plugins.xunit": {
            "xml_safe": [
                "value"
            ],
            "escape_cdata": [
                "cdata"
            ],
            "id_split": [
                "idval"
            ],
            "nice_classname": [
                "obj"
            ],
            "exc_message": [
                "exc_info"
            ],
            "Tee": {
                "__init__": [
                    "self",
                    "encoding"
                ],
                "write": [
                    "self",
                    "data"
                ],
                "writelines": [
                    "self",
                    "lines"
                ],
                "flush": [
                    "self"
                ],
                "isatty": [
                    "self"
                ]
            },
            "Xunit": {
                "__init__": [
                    "self"
                ],
                "_timeTaken": [
                    "self"
                ],
                "_quoteattr": [
                    "self",
                    "attr"
                ],
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ],
                "report": [
                    "self",
                    "stream"
                ],
                "_startCapture": [
                    "self"
                ],
                "startContext": [
                    "self",
                    "context"
                ],
                "stopContext": [
                    "self",
                    "context"
                ],
                "beforeTest": [
                    "self",
                    "test"
                ],
                "_endCapture": [
                    "self"
                ],
                "afterTest": [
                    "self",
                    "test"
                ],
                "finalize": [
                    "self",
                    "test"
                ],
                "_getCapturedStdout": [
                    "self"
                ],
                "_getCapturedStderr": [
                    "self"
                ],
                "addError": [
                    "self",
                    "test",
                    "err",
                    "capt"
                ],
                "addFailure": [
                    "self",
                    "test",
                    "err",
                    "capt",
                    "tb_info"
                ],
                "addSuccess": [
                    "self",
                    "test",
                    "capt"
                ]
            }
        },
        "lib.spack.external.nose.plugins.errorclass": {
            "add_error_patch": [
                "result"
            ],
            "print_errors_patch": [
                "result"
            ],
            "print_label_patch": [
                "result"
            ],
            "wassuccessful_patch": [
                "result"
            ],
            "add_skip_patch": [
                "result"
            ],
            "MetaErrorClass": {
                "__init__": [
                    "self",
                    "name",
                    "bases",
                    "attr"
                ]
            },
            "ErrorClass": {
                "__init__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "ErrorClassPlugin": {
                "addError": [
                    "self",
                    "test",
                    "err"
                ],
                "prepareTestResult": [
                    "self",
                    "result"
                ],
                "patchResult": [
                    "self",
                    "result"
                ]
            }
        },
        "lib.spack.external.nose.plugins.logcapture": {
            "FilterSet": {
                "__init__": [
                    "self",
                    "filter_components"
                ],
                "_partition": [
                    "components"
                ],
                "allow": [
                    "self",
                    "record"
                ],
                "_any_match": [
                    "matchers",
                    "record"
                ],
                "_allow": [
                    "self",
                    "record"
                ],
                "_deny": [
                    "self",
                    "record"
                ]
            },
            "MyMemoryHandler": {
                "__init__": [
                    "self",
                    "logformat",
                    "logdatefmt",
                    "filters"
                ],
                "emit": [
                    "self",
                    "record"
                ],
                "flush": [
                    "self"
                ],
                "truncate": [
                    "self"
                ],
                "filter": [
                    "self",
                    "record"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ]
            },
            "LogCapture": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ],
                "setupLoghandler": [
                    "self"
                ],
                "begin": [
                    "self"
                ],
                "start": [
                    "self"
                ],
                "end": [
                    "self"
                ],
                "beforeTest": [
                    "self",
                    "test"
                ],
                "afterTest": [
                    "self",
                    "test"
                ],
                "formatFailure": [
                    "self",
                    "test",
                    "err"
                ],
                "formatError": [
                    "self",
                    "test",
                    "err"
                ],
                "formatLogRecords": [
                    "self"
                ],
                "addCaptureToErr": [
                    "self",
                    "ev",
                    "records"
                ]
            }
        },
        "lib.spack.external.nose.plugins.capture": {
            "Capture": {
                "__init__": [
                    "self"
                ],
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ],
                "afterTest": [
                    "self",
                    "test"
                ],
                "begin": [
                    "self"
                ],
                "beforeTest": [
                    "self",
                    "test"
                ],
                "formatError": [
                    "self",
                    "test",
                    "err"
                ],
                "formatFailure": [
                    "self",
                    "test",
                    "err"
                ],
                "addCaptureToErr": [
                    "self",
                    "ev",
                    "output"
                ],
                "start": [
                    "self"
                ],
                "end": [
                    "self"
                ],
                "finalize": [
                    "self",
                    "result"
                ],
                "_get_buffer": [
                    "self"
                ]
            }
        },
        "lib.spack.external.nose.plugins.deprecated": {
            "DeprecatedTest": {},
            "Deprecated": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ]
            }
        },
        "lib.spack.external.nose.plugins.isolate": {
            "IsolationPlugin": {
                "configure": [
                    "self",
                    "options",
                    "conf"
                ],
                "beforeContext": [
                    "self"
                ],
                "afterContext": [
                    "self"
                ],
                "loadTestsFromNames": [
                    "self",
                    "names",
                    "module"
                ],
                "prepareTestLoader": [
                    "self",
                    "loader"
                ]
            }
        },
        "lib.spack.external.nose.plugins.allmodules": {
            "AllModules": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "wantFile": [
                    "self",
                    "file"
                ],
                "wantModule": [
                    "self",
                    "module"
                ]
            }
        },
        "lib.spack.external.nose.plugins.attrib": {
            "attr": [],
            "get_method_attr": [
                "method",
                "cls",
                "attr_name",
                "default"
            ],
            "ContextHelper": {
                "__init__": [
                    "self",
                    "method",
                    "cls"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ]
            },
            "AttributeSelector": {
                "__init__": [
                    "self"
                ],
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ],
                "validateAttrib": [
                    "self",
                    "method",
                    "cls"
                ],
                "wantFunction": [
                    "self",
                    "function"
                ],
                "wantMethod": [
                    "self",
                    "method"
                ]
            }
        },
        "lib.spack.external.nose.ext": {},
        "lib.spack.external.yaml.nodes": {
            "Node": {
                "__init__": [
                    "self",
                    "tag",
                    "value",
                    "start_mark",
                    "end_mark"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ScalarNode": {
                "__init__": [
                    "self",
                    "tag",
                    "value",
                    "start_mark",
                    "end_mark",
                    "style"
                ]
            },
            "CollectionNode": {
                "__init__": [
                    "self",
                    "tag",
                    "value",
                    "start_mark",
                    "end_mark",
                    "flow_style"
                ]
            },
            "SequenceNode": {},
            "MappingNode": {}
        },
        "lib.spack.external.yaml.tokens": {
            "Token": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "DirectiveToken": {
                "__init__": [
                    "self",
                    "name",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "DocumentStartToken": {},
            "DocumentEndToken": {},
            "StreamStartToken": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "encoding"
                ]
            },
            "StreamEndToken": {},
            "BlockSequenceStartToken": {},
            "BlockMappingStartToken": {},
            "BlockEndToken": {},
            "FlowSequenceStartToken": {},
            "FlowMappingStartToken": {},
            "FlowSequenceEndToken": {},
            "FlowMappingEndToken": {},
            "KeyToken": {},
            "ValueToken": {},
            "BlockEntryToken": {},
            "FlowEntryToken": {},
            "AliasToken": {
                "__init__": [
                    "self",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "AnchorToken": {
                "__init__": [
                    "self",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "TagToken": {
                "__init__": [
                    "self",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "ScalarToken": {
                "__init__": [
                    "self",
                    "value",
                    "plain",
                    "start_mark",
                    "end_mark",
                    "style"
                ]
            }
        },
        "lib.spack.external.yaml.events": {
            "Event": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "NodeEvent": {
                "__init__": [
                    "self",
                    "anchor",
                    "start_mark",
                    "end_mark"
                ]
            },
            "CollectionStartEvent": {
                "__init__": [
                    "self",
                    "anchor",
                    "tag",
                    "implicit",
                    "start_mark",
                    "end_mark",
                    "flow_style"
                ]
            },
            "CollectionEndEvent": {},
            "StreamStartEvent": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "encoding"
                ]
            },
            "StreamEndEvent": {},
            "DocumentStartEvent": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "explicit",
                    "version",
                    "tags"
                ]
            },
            "DocumentEndEvent": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "explicit"
                ]
            },
            "AliasEvent": {},
            "ScalarEvent": {
                "__init__": [
                    "self",
                    "anchor",
                    "tag",
                    "implicit",
                    "value",
                    "start_mark",
                    "end_mark",
                    "style"
                ]
            },
            "SequenceStartEvent": {},
            "SequenceEndEvent": {},
            "MappingStartEvent": {},
            "MappingEndEvent": {}
        },
        "lib.spack.external.yaml.representer": {
            "RepresenterError": {},
            "BaseRepresenter": {
                "__init__": [
                    "self",
                    "default_style",
                    "default_flow_style"
                ],
                "represent": [
                    "self",
                    "data"
                ],
                "get_classobj_bases": [
                    "self",
                    "cls"
                ],
                "represent_data": [
                    "self",
                    "data"
                ],
                "add_representer": [
                    "cls",
                    "data_type",
                    "representer"
                ],
                "add_multi_representer": [
                    "cls",
                    "data_type",
                    "representer"
                ],
                "represent_scalar": [
                    "self",
                    "tag",
                    "value",
                    "style"
                ],
                "represent_sequence": [
                    "self",
                    "tag",
                    "sequence",
                    "flow_style"
                ],
                "represent_mapping": [
                    "self",
                    "tag",
                    "mapping",
                    "flow_style"
                ],
                "ignore_aliases": [
                    "self",
                    "data"
                ]
            },
            "SafeRepresenter": {
                "ignore_aliases": [
                    "self",
                    "data"
                ],
                "represent_none": [
                    "self",
                    "data"
                ],
                "represent_str": [
                    "self",
                    "data"
                ],
                "represent_unicode": [
                    "self",
                    "data"
                ],
                "represent_bool": [
                    "self",
                    "data"
                ],
                "represent_int": [
                    "self",
                    "data"
                ],
                "represent_long": [
                    "self",
                    "data"
                ],
                "represent_float": [
                    "self",
                    "data"
                ],
                "represent_list": [
                    "self",
                    "data"
                ],
                "represent_dict": [
                    "self",
                    "data"
                ],
                "represent_set": [
                    "self",
                    "data"
                ],
                "represent_date": [
                    "self",
                    "data"
                ],
                "represent_datetime": [
                    "self",
                    "data"
                ],
                "represent_yaml_object": [
                    "self",
                    "tag",
                    "data",
                    "cls",
                    "flow_style"
                ],
                "represent_undefined": [
                    "self",
                    "data"
                ]
            },
            "Representer": {
                "represent_str": [
                    "self",
                    "data"
                ],
                "represent_unicode": [
                    "self",
                    "data"
                ],
                "represent_long": [
                    "self",
                    "data"
                ],
                "represent_complex": [
                    "self",
                    "data"
                ],
                "represent_tuple": [
                    "self",
                    "data"
                ],
                "represent_name": [
                    "self",
                    "data"
                ],
                "represent_module": [
                    "self",
                    "data"
                ],
                "represent_instance": [
                    "self",
                    "data"
                ],
                "represent_object": [
                    "self",
                    "data"
                ]
            }
        },
        "lib.spack.external.yaml.error": {
            "Mark": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "line",
                    "column",
                    "buffer",
                    "pointer"
                ],
                "get_snippet": [
                    "self",
                    "indent",
                    "max_length"
                ],
                "__str__": [
                    "self"
                ]
            },
            "YAMLError": {},
            "MarkedYAMLError": {
                "__init__": [
                    "self",
                    "context",
                    "context_mark",
                    "problem",
                    "problem_mark",
                    "note"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.yaml": {
            "scan": [
                "stream",
                "Loader"
            ],
            "parse": [
                "stream",
                "Loader"
            ],
            "compose": [
                "stream",
                "Loader"
            ],
            "compose_all": [
                "stream",
                "Loader"
            ],
            "load": [
                "stream",
                "Loader"
            ],
            "load_all": [
                "stream",
                "Loader"
            ],
            "safe_load": [
                "stream"
            ],
            "safe_load_all": [
                "stream"
            ],
            "emit": [
                "events",
                "stream",
                "Dumper",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break"
            ],
            "serialize_all": [
                "nodes",
                "stream",
                "Dumper",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags"
            ],
            "serialize": [
                "node",
                "stream",
                "Dumper"
            ],
            "dump_all": [
                "documents",
                "stream",
                "Dumper",
                "default_style",
                "default_flow_style",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags"
            ],
            "dump": [
                "data",
                "stream",
                "Dumper"
            ],
            "safe_dump_all": [
                "documents",
                "stream"
            ],
            "safe_dump": [
                "data",
                "stream"
            ],
            "add_implicit_resolver": [
                "tag",
                "regexp",
                "first",
                "Loader",
                "Dumper"
            ],
            "add_path_resolver": [
                "tag",
                "path",
                "kind",
                "Loader",
                "Dumper"
            ],
            "add_constructor": [
                "tag",
                "constructor",
                "Loader"
            ],
            "add_multi_constructor": [
                "tag_prefix",
                "multi_constructor",
                "Loader"
            ],
            "add_representer": [
                "data_type",
                "representer",
                "Dumper"
            ],
            "add_multi_representer": [
                "data_type",
                "multi_representer",
                "Dumper"
            ],
            "YAMLObjectMetaclass": {
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "kwds"
                ]
            },
            "YAMLObject": {
                "from_yaml": [
                    "cls",
                    "loader",
                    "node"
                ],
                "to_yaml": [
                    "cls",
                    "dumper",
                    "data"
                ]
            }
        },
        "lib.spack.external.yaml.loader": {
            "BaseLoader": {
                "__init__": [
                    "self",
                    "stream"
                ]
            },
            "SafeLoader": {
                "__init__": [
                    "self",
                    "stream"
                ]
            },
            "Loader": {
                "__init__": [
                    "self",
                    "stream"
                ]
            }
        },
        "lib.spack.external.yaml.serializer": {
            "SerializerError": {},
            "Serializer": {
                "__init__": [
                    "self",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags"
                ],
                "open": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "serialize": [
                    "self",
                    "node"
                ],
                "anchor_node": [
                    "self",
                    "node"
                ],
                "generate_anchor": [
                    "self",
                    "node"
                ],
                "serialize_node": [
                    "self",
                    "node",
                    "parent",
                    "index"
                ]
            }
        },
        "lib.spack.external.yaml.emitter": {
            "EmitterError": {},
            "ScalarAnalysis": {
                "__init__": [
                    "self",
                    "scalar",
                    "empty",
                    "multiline",
                    "allow_flow_plain",
                    "allow_block_plain",
                    "allow_single_quoted",
                    "allow_double_quoted",
                    "allow_block"
                ]
            },
            "Emitter": {
                "__init__": [
                    "self",
                    "stream",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break"
                ],
                "dispose": [
                    "self"
                ],
                "emit": [
                    "self",
                    "event"
                ],
                "need_more_events": [
                    "self"
                ],
                "need_events": [
                    "self",
                    "count"
                ],
                "increase_indent": [
                    "self",
                    "flow",
                    "indentless"
                ],
                "expect_stream_start": [
                    "self"
                ],
                "expect_nothing": [
                    "self"
                ],
                "expect_first_document_start": [
                    "self"
                ],
                "expect_document_start": [
                    "self",
                    "first"
                ],
                "expect_document_end": [
                    "self"
                ],
                "expect_document_root": [
                    "self"
                ],
                "expect_node": [
                    "self",
                    "root",
                    "sequence",
                    "mapping",
                    "simple_key"
                ],
                "expect_alias": [
                    "self"
                ],
                "expect_scalar": [
                    "self"
                ],
                "expect_flow_sequence": [
                    "self"
                ],
                "expect_first_flow_sequence_item": [
                    "self"
                ],
                "expect_flow_sequence_item": [
                    "self"
                ],
                "expect_flow_mapping": [
                    "self"
                ],
                "expect_first_flow_mapping_key": [
                    "self"
                ],
                "expect_flow_mapping_key": [
                    "self"
                ],
                "expect_flow_mapping_simple_value": [
                    "self"
                ],
                "expect_flow_mapping_value": [
                    "self"
                ],
                "expect_block_sequence": [
                    "self"
                ],
                "expect_first_block_sequence_item": [
                    "self"
                ],
                "expect_block_sequence_item": [
                    "self",
                    "first"
                ],
                "expect_block_mapping": [
                    "self"
                ],
                "expect_first_block_mapping_key": [
                    "self"
                ],
                "expect_block_mapping_key": [
                    "self",
                    "first"
                ],
                "expect_block_mapping_simple_value": [
                    "self"
                ],
                "expect_block_mapping_value": [
                    "self"
                ],
                "check_empty_sequence": [
                    "self"
                ],
                "check_empty_mapping": [
                    "self"
                ],
                "check_empty_document": [
                    "self"
                ],
                "check_simple_key": [
                    "self"
                ],
                "process_anchor": [
                    "self",
                    "indicator"
                ],
                "process_tag": [
                    "self"
                ],
                "choose_scalar_style": [
                    "self"
                ],
                "process_scalar": [
                    "self"
                ],
                "prepare_version": [
                    "self",
                    "version"
                ],
                "prepare_tag_handle": [
                    "self",
                    "handle"
                ],
                "prepare_tag_prefix": [
                    "self",
                    "prefix"
                ],
                "prepare_tag": [
                    "self",
                    "tag"
                ],
                "prepare_anchor": [
                    "self",
                    "anchor"
                ],
                "analyze_scalar": [
                    "self",
                    "scalar"
                ],
                "flush_stream": [
                    "self"
                ],
                "write_stream_start": [
                    "self"
                ],
                "write_stream_end": [
                    "self"
                ],
                "write_indicator": [
                    "self",
                    "indicator",
                    "need_whitespace",
                    "whitespace",
                    "indention"
                ],
                "write_indent": [
                    "self"
                ],
                "write_line_break": [
                    "self",
                    "data"
                ],
                "write_version_directive": [
                    "self",
                    "version_text"
                ],
                "write_tag_directive": [
                    "self",
                    "handle_text",
                    "prefix_text"
                ],
                "write_single_quoted": [
                    "self",
                    "text",
                    "split"
                ],
                "write_double_quoted": [
                    "self",
                    "text",
                    "split"
                ],
                "determine_block_hints": [
                    "self",
                    "text"
                ],
                "write_folded": [
                    "self",
                    "text"
                ],
                "write_literal": [
                    "self",
                    "text"
                ],
                "write_plain": [
                    "self",
                    "text",
                    "split"
                ]
            }
        },
        "lib.spack.external.yaml.composer": {
            "ComposerError": {},
            "Composer": {
                "__init__": [
                    "self"
                ],
                "check_node": [
                    "self"
                ],
                "get_node": [
                    "self"
                ],
                "get_single_node": [
                    "self"
                ],
                "compose_document": [
                    "self"
                ],
                "compose_node": [
                    "self",
                    "parent",
                    "index"
                ],
                "compose_scalar_node": [
                    "self",
                    "anchor"
                ],
                "compose_sequence_node": [
                    "self",
                    "anchor"
                ],
                "compose_mapping_node": [
                    "self",
                    "anchor"
                ]
            }
        },
        "lib.spack.external.yaml.parser": {
            "ParserError": {},
            "Parser": {
                "__init__": [
                    "self"
                ],
                "dispose": [
                    "self"
                ],
                "check_event": [
                    "self"
                ],
                "peek_event": [
                    "self"
                ],
                "get_event": [
                    "self"
                ],
                "parse_stream_start": [
                    "self"
                ],
                "parse_implicit_document_start": [
                    "self"
                ],
                "parse_document_start": [
                    "self"
                ],
                "parse_document_end": [
                    "self"
                ],
                "parse_document_content": [
                    "self"
                ],
                "process_directives": [
                    "self"
                ],
                "parse_block_node": [
                    "self"
                ],
                "parse_flow_node": [
                    "self"
                ],
                "parse_block_node_or_indentless_sequence": [
                    "self"
                ],
                "parse_node": [
                    "self",
                    "block",
                    "indentless_sequence"
                ],
                "parse_block_sequence_first_entry": [
                    "self"
                ],
                "parse_block_sequence_entry": [
                    "self"
                ],
                "parse_indentless_sequence_entry": [
                    "self"
                ],
                "parse_block_mapping_first_key": [
                    "self"
                ],
                "parse_block_mapping_key": [
                    "self"
                ],
                "parse_block_mapping_value": [
                    "self"
                ],
                "parse_flow_sequence_first_entry": [
                    "self"
                ],
                "parse_flow_sequence_entry": [
                    "self",
                    "first"
                ],
                "parse_flow_sequence_entry_mapping_key": [
                    "self"
                ],
                "parse_flow_sequence_entry_mapping_value": [
                    "self"
                ],
                "parse_flow_sequence_entry_mapping_end": [
                    "self"
                ],
                "parse_flow_mapping_first_key": [
                    "self"
                ],
                "parse_flow_mapping_key": [
                    "self",
                    "first"
                ],
                "parse_flow_mapping_value": [
                    "self"
                ],
                "parse_flow_mapping_empty_value": [
                    "self"
                ],
                "process_empty_scalar": [
                    "self",
                    "mark"
                ]
            }
        },
        "lib.spack.external.yaml.dumper": {
            "BaseDumper": {
                "__init__": [
                    "self",
                    "stream",
                    "default_style",
                    "default_flow_style",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags"
                ]
            },
            "SafeDumper": {
                "__init__": [
                    "self",
                    "stream",
                    "default_style",
                    "default_flow_style",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags"
                ]
            },
            "Dumper": {
                "__init__": [
                    "self",
                    "stream",
                    "default_style",
                    "default_flow_style",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags"
                ]
            }
        },
        "lib.spack.external.jsonschema.cli": {
            "_namedAnyWithDefault": [
                "name"
            ],
            "_json_file": [
                "path"
            ],
            "parse_args": [
                "args"
            ],
            "main": [
                "args"
            ],
            "run": [
                "arguments",
                "stdout",
                "stderr"
            ]
        },
        "lib.spack.external.jsonschema": {},
        "lib.spack.external.jsonschema._validators": {
            "patternProperties": [
                "validator",
                "patternProperties",
                "instance",
                "schema"
            ],
            "additionalProperties": [
                "validator",
                "aP",
                "instance",
                "schema"
            ],
            "items": [
                "validator",
                "items",
                "instance",
                "schema"
            ],
            "additionalItems": [
                "validator",
                "aI",
                "instance",
                "schema"
            ],
            "minimum": [
                "validator",
                "minimum",
                "instance",
                "schema"
            ],
            "maximum": [
                "validator",
                "maximum",
                "instance",
                "schema"
            ],
            "multipleOf": [
                "validator",
                "dB",
                "instance",
                "schema"
            ],
            "minItems": [
                "validator",
                "mI",
                "instance",
                "schema"
            ],
            "maxItems": [
                "validator",
                "mI",
                "instance",
                "schema"
            ],
            "uniqueItems": [
                "validator",
                "uI",
                "instance",
                "schema"
            ],
            "pattern": [
                "validator",
                "patrn",
                "instance",
                "schema"
            ],
            "format": [
                "validator",
                "format",
                "instance",
                "schema"
            ],
            "minLength": [
                "validator",
                "mL",
                "instance",
                "schema"
            ],
            "maxLength": [
                "validator",
                "mL",
                "instance",
                "schema"
            ],
            "dependencies": [
                "validator",
                "dependencies",
                "instance",
                "schema"
            ],
            "enum": [
                "validator",
                "enums",
                "instance",
                "schema"
            ],
            "ref": [
                "validator",
                "ref",
                "instance",
                "schema"
            ],
            "type_draft3": [
                "validator",
                "types",
                "instance",
                "schema"
            ],
            "properties_draft3": [
                "validator",
                "properties",
                "instance",
                "schema"
            ],
            "disallow_draft3": [
                "validator",
                "disallow",
                "instance",
                "schema"
            ],
            "extends_draft3": [
                "validator",
                "extends",
                "instance",
                "schema"
            ],
            "type_draft4": [
                "validator",
                "types",
                "instance",
                "schema"
            ],
            "properties_draft4": [
                "validator",
                "properties",
                "instance",
                "schema"
            ],
            "required_draft4": [
                "validator",
                "required",
                "instance",
                "schema"
            ],
            "minProperties_draft4": [
                "validator",
                "mP",
                "instance",
                "schema"
            ],
            "maxProperties_draft4": [
                "validator",
                "mP",
                "instance",
                "schema"
            ],
            "allOf_draft4": [
                "validator",
                "allOf",
                "instance",
                "schema"
            ],
            "oneOf_draft4": [
                "validator",
                "oneOf",
                "instance",
                "schema"
            ],
            "anyOf_draft4": [
                "validator",
                "anyOf",
                "instance",
                "schema"
            ],
            "not_draft4": [
                "validator",
                "not_schema",
                "instance",
                "schema"
            ]
        },
        "lib.spack.external.jsonschema.compat": {
            "urlsplit": [
                "url"
            ],
            "urldefrag": [
                "url"
            ]
        },
        "lib.spack.external.jsonschema.validators": {
            "validates": [
                "version"
            ],
            "create": [
                "meta_schema",
                "validators",
                "version",
                "default_types"
            ],
            "extend": [
                "validator",
                "validators",
                "version"
            ],
            "validator_for": [
                "schema",
                "default"
            ],
            "validate": [
                "instance",
                "schema",
                "cls"
            ],
            "RefResolver": {
                "__init__": [
                    "self",
                    "base_uri",
                    "referrer",
                    "store",
                    "cache_remote",
                    "handlers"
                ],
                "from_schema": [
                    "cls",
                    "schema"
                ],
                "in_scope": [
                    "self",
                    "scope"
                ],
                "resolving": [
                    "self",
                    "ref"
                ],
                "resolve_fragment": [
                    "self",
                    "document",
                    "fragment"
                ],
                "resolve_remote": [
                    "self",
                    "uri"
                ]
            }
        },
        "lib.spack.external.jsonschema._utils": {
            "load_schema": [
                "name"
            ],
            "indent": [
                "string",
                "times"
            ],
            "format_as_index": [
                "indices"
            ],
            "find_additional_properties": [
                "instance",
                "schema"
            ],
            "extras_msg": [
                "extras"
            ],
            "types_msg": [
                "instance",
                "types"
            ],
            "flatten": [
                "suitable_for_isinstance"
            ],
            "ensure_list": [
                "thing"
            ],
            "unbool": [
                "element",
                "true",
                "false"
            ],
            "uniq": [
                "container"
            ],
            "URIDict": {
                "normalize": [
                    "self",
                    "uri"
                ],
                "__init__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "uri"
                ],
                "__setitem__": [
                    "self",
                    "uri",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "uri"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Unset": {
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema._reflect": {
            "_importAndCheckStack": [
                "importName"
            ],
            "namedAny": [
                "name"
            ],
            "_NoModuleFound": {},
            "InvalidName": {},
            "ModuleNotFound": {},
            "ObjectNotFound": {}
        },
        "lib.spack.external.jsonschema.__main__": {},
        "lib.spack.external.jsonschema.exceptions": {
            "by_relevance": [
                "weak",
                "strong"
            ],
            "best_match": [
                "errors",
                "key"
            ],
            "_Error": {
                "__init__": [
                    "self",
                    "message",
                    "validator",
                    "path",
                    "cause",
                    "context",
                    "validator_value",
                    "instance",
                    "schema",
                    "schema_path",
                    "parent"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ],
                "create_from": [
                    "cls",
                    "other"
                ],
                "absolute_path": [
                    "self"
                ],
                "absolute_schema_path": [
                    "self"
                ],
                "_set": [
                    "self"
                ],
                "_contents": [
                    "self"
                ]
            },
            "ValidationError": {},
            "SchemaError": {},
            "RefResolutionError": {},
            "UnknownType": {
                "__init__": [
                    "self",
                    "type",
                    "instance",
                    "schema"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ]
            },
            "FormatError": {
                "__init__": [
                    "self",
                    "message",
                    "cause"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ]
            },
            "ErrorTree": {
                "__init__": [
                    "self",
                    "errors"
                ],
                "__contains__": [
                    "self",
                    "index"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "total_errors": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema._format": {
            "_checks_drafts": [
                "both",
                "draft3",
                "draft4",
                "raises"
            ],
            "is_email": [
                "instance"
            ],
            "is_ipv4": [
                "instance"
            ],
            "is_host_name": [
                "instance"
            ],
            "is_regex": [
                "instance"
            ],
            "is_date": [
                "instance"
            ],
            "is_time": [
                "instance"
            ],
            "FormatChecker": {
                "__init__": [
                    "self",
                    "formats"
                ],
                "checks": [
                    "self",
                    "format",
                    "raises"
                ],
                "check": [
                    "self",
                    "instance",
                    "format"
                ],
                "conforms": [
                    "self",
                    "instance",
                    "format"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests": {},
        "lib.spack.external.jsonschema.tests.test_jsonschema_test_suite": {
            "make_case": [
                "schema",
                "data",
                "valid",
                "name"
            ],
            "maybe_skip": [
                "skip",
                "test_case",
                "case",
                "test"
            ],
            "load_json_cases": [
                "tests_glob",
                "ignore_glob",
                "basedir",
                "skip"
            ],
            "missing_format": [
                "checker"
            ],
            "TypesMixin": {
                "test_string_a_bytestring_is_a_string": [
                    "self"
                ]
            },
            "DecimalMixin": {
                "test_it_can_validate_with_decimals": [
                    "self"
                ]
            },
            "FormatMixin": {
                "test_it_returns_true_for_formats_it_does_not_know_about": [
                    "self"
                ],
                "test_it_does_not_validate_formats_by_default": [
                    "self"
                ],
                "test_it_validates_formats_if_a_checker_is_provided": [
                    "self"
                ],
                "test_it_validates_formats_of_any_type": [
                    "self"
                ]
            },
            "TestDraft3": {
                "test_any_type_is_valid_for_type_any": [
                    "self"
                ],
                "test_invalid_properties": [
                    "self"
                ],
                "test_minItems_invalid_string": [
                    "self"
                ]
            },
            "TestDraft4": {
                "test_invalid_properties": [
                    "self"
                ],
                "test_minItems_invalid_string": [
                    "self"
                ]
            },
            "RemoteRefResolutionMixin": {
                "setUp": [
                    "self"
                ],
                "resolve": [
                    "self",
                    "reference"
                ]
            },
            "Draft3RemoteResolution": {},
            "Draft4RemoteResolution": {}
        },
        "lib.spack.external.jsonschema.tests.test_cli": {
            "fake_validator": [],
            "TestParser": {
                "setUp": [
                    "self"
                ],
                "test_find_validator_by_fully_qualified_object_name": [
                    "self"
                ],
                "test_find_validator_in_jsonschema": [
                    "self"
                ]
            },
            "TestCLI": {
                "test_successful_validation": [
                    "self"
                ],
                "test_unsuccessful_validation": [
                    "self"
                ],
                "test_unsuccessful_validation_multiple_instances": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests.test_exceptions": {
            "TestBestMatch": {
                "best_match": [
                    "self",
                    "errors"
                ],
                "test_shallower_errors_are_better_matches": [
                    "self"
                ],
                "test_oneOf_and_anyOf_are_weak_matches": [
                    "self"
                ],
                "test_if_the_most_relevant_error_is_anyOf_it_is_traversed": [
                    "self"
                ],
                "test_if_the_most_relevant_error_is_oneOf_it_is_traversed": [
                    "self"
                ],
                "test_if_the_most_relevant_error_is_allOf_it_is_traversed": [
                    "self"
                ],
                "test_nested_context_for_oneOf": [
                    "self"
                ],
                "test_one_error": [
                    "self"
                ],
                "test_no_errors": [
                    "self"
                ]
            },
            "TestByRelevance": {
                "test_short_paths_are_better_matches": [
                    "self"
                ],
                "test_global_errors_are_even_better_matches": [
                    "self"
                ],
                "test_weak_validators_are_lower_priority": [
                    "self"
                ],
                "test_strong_validators_are_higher_priority": [
                    "self"
                ]
            },
            "TestErrorTree": {
                "test_it_knows_how_many_total_errors_it_contains": [
                    "self"
                ],
                "test_it_contains_an_item_if_the_item_had_an_error": [
                    "self"
                ],
                "test_it_does_not_contain_an_item_if_the_item_had_no_error": [
                    "self"
                ],
                "test_validators_that_failed_appear_in_errors_dict": [
                    "self"
                ],
                "test_it_creates_a_child_tree_for_each_nested_path": [
                    "self"
                ],
                "test_children_have_their_errors_dicts_built": [
                    "self"
                ],
                "test_it_does_not_contain_subtrees_that_are_not_in_the_instance": [
                    "self"
                ],
                "test_if_its_in_the_tree_anyhow_it_does_not_raise_an_error": [
                    "self"
                ]
            },
            "TestErrorReprStr": {
                "make_error": [
                    "self"
                ],
                "assertShows": [
                    "self",
                    "expected"
                ],
                "test_repr": [
                    "self"
                ],
                "test_unset_error": [
                    "self"
                ],
                "test_empty_paths": [
                    "self"
                ],
                "test_one_item_paths": [
                    "self"
                ],
                "test_multiple_item_paths": [
                    "self"
                ],
                "test_uses_pprint": [
                    "self"
                ],
                "test_str_works_with_instances_having_overriden_eq_operator": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests.compat": {},
        "lib.spack.external.jsonschema.tests.test_format": {
            "TestFormatChecker": {
                "setUp": [
                    "self"
                ],
                "test_it_can_validate_no_formats": [
                    "self"
                ],
                "test_it_raises_a_key_error_for_unknown_formats": [
                    "self"
                ],
                "test_it_can_register_cls_checkers": [
                    "self"
                ],
                "test_it_can_register_checkers": [
                    "self"
                ],
                "test_it_catches_registered_errors": [
                    "self"
                ],
                "test_format_error_causes_become_validation_error_causes": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests.test_validators": {
            "sorted_errors": [
                "errors"
            ],
            "TestCreateAndExtend": {
                "setUp": [
                    "self"
                ],
                "test_attrs": [
                    "self"
                ],
                "test_init": [
                    "self"
                ],
                "test_iter_errors": [
                    "self"
                ],
                "test_if_a_version_is_provided_it_is_registered": [
                    "self"
                ],
                "test_if_a_version_is_not_provided_it_is_not_registered": [
                    "self"
                ],
                "test_extend": [
                    "self"
                ]
            },
            "TestIterErrors": {
                "setUp": [
                    "self"
                ],
                "test_iter_errors": [
                    "self"
                ],
                "test_iter_errors_multiple_failures_one_validator": [
                    "self"
                ]
            },
            "TestValidationErrorMessages": {
                "message_for": [
                    "self",
                    "instance",
                    "schema"
                ],
                "test_single_type_failure": [
                    "self"
                ],
                "test_single_type_list_failure": [
                    "self"
                ],
                "test_multiple_type_failure": [
                    "self"
                ],
                "test_object_without_title_type_failure": [
                    "self"
                ],
                "test_object_with_name_type_failure": [
                    "self"
                ],
                "test_minimum": [
                    "self"
                ],
                "test_maximum": [
                    "self"
                ],
                "test_dependencies_failure_has_single_element_not_list": [
                    "self"
                ],
                "test_additionalItems_single_failure": [
                    "self"
                ],
                "test_additionalItems_multiple_failures": [
                    "self"
                ],
                "test_additionalProperties_single_failure": [
                    "self"
                ],
                "test_additionalProperties_multiple_failures": [
                    "self"
                ],
                "test_invalid_format_default_message": [
                    "self"
                ]
            },
            "TestValidationErrorDetails": {
                "test_anyOf": [
                    "self"
                ],
                "test_type": [
                    "self"
                ],
                "test_single_nesting": [
                    "self"
                ],
                "test_multiple_nesting": [
                    "self"
                ],
                "test_additionalProperties": [
                    "self"
                ],
                "test_patternProperties": [
                    "self"
                ],
                "test_additionalItems": [
                    "self"
                ],
                "test_additionalItems_with_items": [
                    "self"
                ]
            },
            "ValidatorTestMixin": {
                "setUp": [
                    "self"
                ],
                "test_valid_instances_are_valid": [
                    "self"
                ],
                "test_invalid_instances_are_not_valid": [
                    "self"
                ],
                "test_non_existent_properties_are_ignored": [
                    "self"
                ],
                "test_it_creates_a_ref_resolver_if_not_provided": [
                    "self"
                ],
                "test_it_delegates_to_a_ref_resolver": [
                    "self"
                ],
                "test_is_type_is_true_for_valid_type": [
                    "self"
                ],
                "test_is_type_is_false_for_invalid_type": [
                    "self"
                ],
                "test_is_type_evades_bool_inheriting_from_int": [
                    "self"
                ],
                "test_is_type_raises_exception_for_unknown_type": [
                    "self"
                ]
            },
            "TestDraft3Validator": {
                "test_is_type_is_true_for_any_type": [
                    "self"
                ],
                "test_is_type_does_not_evade_bool_if_it_is_being_tested": [
                    "self"
                ],
                "test_non_string_custom_types": [
                    "self"
                ]
            },
            "TestDraft4Validator": {},
            "TestBuiltinFormats": {},
            "TestValidatorFor": {
                "test_draft_3": [
                    "self"
                ],
                "test_draft_4": [
                    "self"
                ],
                "test_custom_validator": [
                    "self"
                ],
                "test_validator_for_jsonschema_default": [
                    "self"
                ],
                "test_validator_for_custom_default": [
                    "self"
                ]
            },
            "TestValidate": {
                "test_draft3_validator_is_chosen": [
                    "self"
                ],
                "test_draft4_validator_is_chosen": [
                    "self"
                ],
                "test_draft4_validator_is_the_default": [
                    "self"
                ]
            },
            "TestRefResolver": {
                "setUp": [
                    "self"
                ],
                "test_it_does_not_retrieve_schema_urls_from_the_network": [
                    "self"
                ],
                "test_it_resolves_local_refs": [
                    "self"
                ],
                "test_it_resolves_local_refs_with_id": [
                    "self"
                ],
                "test_it_retrieves_stored_refs": [
                    "self"
                ],
                "test_it_retrieves_unstored_refs_via_requests": [
                    "self"
                ],
                "test_it_retrieves_unstored_refs_via_urlopen": [
                    "self"
                ],
                "test_it_can_construct_a_base_uri_from_a_schema": [
                    "self"
                ],
                "test_it_can_construct_a_base_uri_from_a_schema_without_id": [
                    "self"
                ],
                "test_custom_uri_scheme_handlers": [
                    "self"
                ],
                "test_cache_remote_on": [
                    "self"
                ],
                "test_cache_remote_off": [
                    "self"
                ],
                "test_if_you_give_it_junk_you_get_a_resolution_error": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.architecture": {
            "get_sys_type_from_spack_globals": [],
            "get_sys_type_from_environment": [],
            "get_sys_type_from_platform": [],
            "sys_type": [],
            "InvalidSysTypeError": {
                "__init__": [
                    "self",
                    "sys_type"
                ]
            },
            "NoSysTypeError": {
                "__init__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.stage": {
            "_get_mirrors": [],
            "ensure_access": [
                "file"
            ],
            "purge": [],
            "find_tmp_root": [],
            "Stage": {
                "__init__": [
                    "self",
                    "url_or_fetch_strategy",
                    "name",
                    "mirror_path",
                    "keep",
                    "path"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "_need_to_create_path": [
                    "self"
                ],
                "expected_archive_files": [
                    "self"
                ],
                "archive_file": [
                    "self"
                ],
                "source_path": [
                    "self"
                ],
                "chdir": [
                    "self"
                ],
                "fetch": [
                    "self",
                    "mirror_only"
                ],
                "check": [
                    "self"
                ],
                "expand_archive": [
                    "self"
                ],
                "chdir_to_source": [
                    "self"
                ],
                "restage": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "destroy": [
                    "self"
                ]
            },
            "ResourceStage": {
                "__init__": [
                    "self",
                    "url_or_fetch_strategy",
                    "root",
                    "resource"
                ],
                "expand_archive": [
                    "self"
                ]
            },
            "StageComposite": {
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "source_path": [
                    "self"
                ],
                "path": [
                    "self"
                ],
                "chdir_to_source": [
                    "self"
                ],
                "archive_file": [
                    "self"
                ]
            },
            "DIYStage": {
                "__init__": [
                    "self",
                    "path"
                ],
                "chdir": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "chdir_to_source": [
                    "self"
                ],
                "fetch": [
                    "self",
                    "mirror_only"
                ],
                "check": [
                    "self"
                ],
                "expand_archive": [
                    "self"
                ],
                "restage": [
                    "self"
                ],
                "destroy": [
                    "self"
                ]
            },
            "StageError": {},
            "RestageError": {},
            "ChdirError": {}
        },
        "lib.spack.spack.build_environment": {
            "set_compiler_environment_variables": [
                "pkg",
                "env"
            ],
            "set_build_environment_variables": [
                "pkg",
                "env"
            ],
            "set_module_variables_for_package": [
                "pkg",
                "module"
            ],
            "get_rpaths": [
                "pkg"
            ],
            "parent_class_modules": [
                "cls"
            ],
            "setup_package": [
                "pkg"
            ],
            "fork": [
                "pkg",
                "function"
            ],
            "MakeExecutable": {
                "__init__": [
                    "self",
                    "name",
                    "jobs"
                ],
                "__call__": [
                    "self"
                ]
            },
            "InstallError": {}
        },
        "lib.spack.spack.modules": {
            "print_help": [],
            "inspect_path": [
                "prefix"
            ],
            "dependencies": [
                "spec",
                "request"
            ],
            "update_dictionary_extending_lists": [
                "target",
                "update"
            ],
            "parse_config_options": [
                "module_generator"
            ],
            "filter_blacklisted": [
                "specs",
                "module_name"
            ],
            "EnvModule": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "naming_scheme": [
                    "self"
                ],
                "tokens": [
                    "self"
                ],
                "use_name": [
                    "self"
                ],
                "category": [
                    "self"
                ],
                "blacklisted": [
                    "self"
                ],
                "write": [
                    "self"
                ],
                "header": [
                    "self"
                ],
                "module_specific_content": [
                    "self",
                    "configuration"
                ],
                "autoload": [
                    "self",
                    "spec"
                ],
                "prerequisite": [
                    "self",
                    "spec"
                ],
                "process_environment_command": [
                    "self",
                    "env"
                ],
                "file_name": [
                    "self"
                ],
                "remove": [
                    "self"
                ]
            },
            "Dotkit": {
                "file_name": [
                    "self"
                ],
                "header": [
                    "self"
                ],
                "prerequisite": [
                    "self",
                    "spec"
                ]
            },
            "TclModule": {
                "file_name": [
                    "self"
                ],
                "header": [
                    "self"
                ],
                "module_specific_content": [
                    "self",
                    "configuration"
                ]
            }
        },
        "lib.spack.spack.virtual": {
            "ProviderIndex": {
                "__init__": [
                    "self",
                    "specs"
                ],
                "update": [
                    "self",
                    "spec"
                ],
                "providers_for": [
                    "self"
                ],
                "_cross_provider_maps": [
                    "self",
                    "lmap",
                    "rmap"
                ],
                "__contains__": [
                    "self",
                    "name"
                ],
                "satisfies": [
                    "self",
                    "other"
                ]
            }
        },
        "lib.spack.spack.config": {
            "validate_section_name": [
                "section"
            ],
            "extend_with_default": [
                "validator_class"
            ],
            "validate_section": [
                "data",
                "schema"
            ],
            "highest_precedence_scope": [],
            "validate_scope": [
                "scope"
            ],
            "_read_config_file": [
                "filename",
                "schema"
            ],
            "clear_config_caches": [],
            "_merge_yaml": [
                "dest",
                "source"
            ],
            "get_config": [
                "section",
                "scope"
            ],
            "get_config_filename": [
                "scope",
                "section"
            ],
            "update_config": [
                "section",
                "update_data",
                "scope"
            ],
            "print_section": [
                "section"
            ],
            "spec_externals": [
                "spec"
            ],
            "is_spec_buildable": [
                "spec"
            ],
            "get_path": [
                "path",
                "data"
            ],
            "ConfigScope": {
                "__init__": [
                    "self",
                    "name",
                    "path"
                ],
                "get_section_filename": [
                    "self",
                    "section"
                ],
                "get_section": [
                    "self",
                    "section"
                ],
                "write_section": [
                    "self",
                    "section"
                ],
                "clear": [
                    "self"
                ]
            },
            "ConfigError": {},
            "ConfigFileError": {},
            "ConfigFormatError": {
                "__init__": [
                    "self",
                    "validation_error",
                    "data"
                ]
            },
            "ConfigSanityError": {}
        },
        "lib.spack.spack.preferred_packages": {
            "PreferredPackages": {
                "__init__": [
                    "self"
                ],
                "_order_for_package": [
                    "self",
                    "pkgname",
                    "component",
                    "second_key",
                    "test_all"
                ],
                "_component_compare": [
                    "self",
                    "pkgname",
                    "component",
                    "a",
                    "b",
                    "reverse_natural_compare",
                    "second_key"
                ],
                "_spec_compare": [
                    "self",
                    "pkgname",
                    "component",
                    "a",
                    "b",
                    "reverse_natural_compare",
                    "second_key"
                ],
                "_spec_for_pkgname": [
                    "self",
                    "pkgname",
                    "component",
                    "second_key"
                ],
                "provider_compare": [
                    "self",
                    "pkgname",
                    "provider_str",
                    "a",
                    "b"
                ],
                "spec_has_preferred_provider": [
                    "self",
                    "pkgname",
                    "provider_str"
                ],
                "version_compare": [
                    "self",
                    "pkgname",
                    "a",
                    "b"
                ],
                "variant_compare": [
                    "self",
                    "pkgname",
                    "a",
                    "b"
                ],
                "architecture_compare": [
                    "self",
                    "pkgname",
                    "a",
                    "b"
                ],
                "compiler_compare": [
                    "self",
                    "pkgname",
                    "a",
                    "b"
                ]
            }
        },
        "lib.spack.spack.patch": {
            "Patch": {
                "__init__": [
                    "self",
                    "pkg",
                    "path_or_url",
                    "level"
                ],
                "apply": [
                    "self",
                    "stage"
                ]
            },
            "NoSuchPatchFileError": {
                "__init__": [
                    "self",
                    "package",
                    "path"
                ]
            }
        },
        "lib.spack.spack.database": {
            "_autospec": [
                "function"
            ],
            "InstallRecord": {
                "__init__": [
                    "self",
                    "spec",
                    "path",
                    "installed",
                    "ref_count",
                    "explicit"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "cls",
                    "spec",
                    "dictionary"
                ]
            },
            "Database": {
                "__init__": [
                    "self",
                    "root",
                    "db_dir"
                ],
                "write_transaction": [
                    "self",
                    "timeout"
                ],
                "read_transaction": [
                    "self",
                    "timeout"
                ],
                "_write_to_yaml": [
                    "self",
                    "stream"
                ],
                "_read_spec_from_yaml": [
                    "self",
                    "hash_key",
                    "installs",
                    "parent_key"
                ],
                "_read_from_yaml": [
                    "self",
                    "stream"
                ],
                "reindex": [
                    "self",
                    "directory_layout"
                ],
                "_check_ref_counts": [
                    "self"
                ],
                "_write": [
                    "self"
                ],
                "_read": [
                    "self"
                ],
                "_add": [
                    "self",
                    "spec",
                    "path",
                    "directory_layout",
                    "explicit"
                ],
                "_increment_ref_count": [
                    "self",
                    "spec",
                    "directory_layout"
                ],
                "add": [
                    "self",
                    "spec",
                    "path",
                    "explicit"
                ],
                "_get_matching_spec_key": [
                    "self",
                    "spec"
                ],
                "get_record": [
                    "self",
                    "spec"
                ],
                "_decrement_ref_count": [
                    "self",
                    "spec"
                ],
                "_remove": [
                    "self",
                    "spec"
                ],
                "remove": [
                    "self",
                    "spec"
                ],
                "installed_extensions_for": [
                    "self",
                    "extendee_spec"
                ],
                "query": [
                    "self",
                    "query_spec",
                    "known",
                    "installed",
                    "explicit"
                ],
                "query_one": [
                    "self",
                    "query_spec",
                    "known",
                    "installed"
                ],
                "missing": [
                    "self",
                    "spec"
                ]
            },
            "_Transaction": {
                "__init__": [
                    "self",
                    "db",
                    "acquire_fn",
                    "release_fn",
                    "timeout"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type",
                    "value",
                    "traceback"
                ]
            },
            "ReadTransaction": {
                "_enter": [
                    "self"
                ],
                "_exit": [
                    "self"
                ]
            },
            "WriteTransaction": {
                "_enter": [
                    "self"
                ],
                "_exit": [
                    "self"
                ]
            },
            "CorruptDatabaseError": {
                "__init__": [
                    "self",
                    "path",
                    "msg"
                ]
            },
            "InvalidDatabaseVersionError": {
                "__init__": [
                    "self",
                    "expected",
                    "found"
                ]
            }
        },
        "lib.spack.spack.multimethod": {
            "SpecMultiMethod": {
                "__init__": [
                    "self",
                    "default"
                ],
                "register": [
                    "self",
                    "spec",
                    "method"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "objtype"
                ],
                "__call__": [
                    "self",
                    "package_self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "when": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "__call__": [
                    "self",
                    "method"
                ]
            },
            "MultiMethodError": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "NoSuchMethodError": {
                "__init__": [
                    "self",
                    "cls",
                    "method_name",
                    "spec",
                    "possible_specs"
                ]
            }
        },
        "lib.spack.spack.variant": {
            "Variant": {
                "__init__": [
                    "self",
                    "default",
                    "description"
                ]
            }
        },
        "lib.spack.spack.package": {
            "install_dependency_symlinks": [
                "pkg",
                "spec",
                "prefix"
            ],
            "flatten_dependencies": [
                "spec",
                "flat_dir"
            ],
            "validate_package_url": [
                "url_string"
            ],
            "dump_packages": [
                "spec",
                "path"
            ],
            "print_pkg": [
                "message"
            ],
            "_hms": [
                "seconds"
            ],
            "Package": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "global_license_file": [
                    "self"
                ],
                "version": [
                    "self"
                ],
                "version_urls": [
                    "self"
                ],
                "nearest_url": [
                    "self",
                    "version"
                ],
                "url_for_version": [
                    "self",
                    "version"
                ],
                "_make_resource_stage": [
                    "self",
                    "root_stage",
                    "fetcher",
                    "resource"
                ],
                "_make_root_stage": [
                    "self",
                    "fetcher"
                ],
                "_make_stage": [
                    "self"
                ],
                "stage": [
                    "self",
                    "stage"
                ],
                "_make_fetcher": [
                    "self"
                ],
                "fetcher": [
                    "self",
                    "f"
                ],
                "extendee_spec": [
                    "self"
                ],
                "extendee_args": [
                    "self"
                ],
                "is_extension": [
                    "self"
                ],
                "extends": [
                    "self",
                    "spec"
                ],
                "activated": [
                    "self"
                ],
                "preorder_traversal": [
                    "self",
                    "visited"
                ],
                "provides": [
                    "self",
                    "vpkg_name"
                ],
                "virtual_dependencies": [
                    "self",
                    "visited"
                ],
                "installed": [
                    "self"
                ],
                "installed_dependents": [
                    "self"
                ],
                "prefix": [
                    "self"
                ],
                "compiler": [
                    "self"
                ],
                "url_version": [
                    "self",
                    "version"
                ],
                "remove_prefix": [
                    "self"
                ],
                "do_fetch": [
                    "self",
                    "mirror_only"
                ],
                "do_stage": [
                    "self",
                    "mirror_only"
                ],
                "do_patch": [
                    "self"
                ],
                "namespace": [
                    "self"
                ],
                "do_fake_install": [
                    "self"
                ],
                "_get_needed_resources": [
                    "self"
                ],
                "_resource_stage": [
                    "self",
                    "resource"
                ],
                "do_install": [
                    "self",
                    "keep_prefix",
                    "keep_stage",
                    "ignore_deps",
                    "skip_patch",
                    "verbose",
                    "make_jobs",
                    "fake",
                    "explicit"
                ],
                "sanity_check_prefix": [
                    "self"
                ],
                "do_install_dependencies": [
                    "self"
                ],
                "build_log_path": [
                    "self"
                ],
                "module": [
                    "self"
                ],
                "setup_environment": [
                    "self",
                    "spack_env",
                    "run_env"
                ],
                "setup_dependent_environment": [
                    "self",
                    "spack_env",
                    "run_env",
                    "dependent_spec"
                ],
                "setup_dependent_package": [
                    "self",
                    "module",
                    "dependent_spec"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "do_uninstall": [
                    "self",
                    "force"
                ],
                "_check_extendable": [
                    "self"
                ],
                "_sanity_check_extension": [
                    "self"
                ],
                "do_activate": [
                    "self",
                    "force"
                ],
                "activate": [
                    "self",
                    "extension"
                ],
                "do_deactivate": [
                    "self"
                ],
                "deactivate": [
                    "self",
                    "extension"
                ],
                "do_restage": [
                    "self"
                ],
                "do_clean": [
                    "self"
                ],
                "format_doc": [
                    "self"
                ],
                "all_urls": [
                    "self"
                ],
                "fetch_remote_versions": [
                    "self"
                ],
                "rpath": [
                    "self"
                ],
                "rpath_args": [
                    "self"
                ]
            },
            "FetchError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "InstallError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "ExternalPackageError": {},
            "PackageStillNeededError": {
                "__init__": [
                    "self",
                    "spec",
                    "dependents"
                ]
            },
            "PackageError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "PackageVersionError": {
                "__init__": [
                    "self",
                    "version"
                ]
            },
            "VersionFetchError": {
                "__init__": [
                    "self",
                    "cls"
                ]
            },
            "NoURLError": {
                "__init__": [
                    "self",
                    "cls"
                ]
            },
            "ExtensionError": {},
            "ExtensionConflictError": {
                "__init__": [
                    "self",
                    "path"
                ]
            },
            "ActivationError": {
                "__init__": [
                    "self",
                    "msg",
                    "long_msg"
                ]
            },
            "DependencyConflictError": {
                "__init__": [
                    "self",
                    "conflict"
                ]
            }
        },
        "lib.spack.spack.parse": {
            "Token": {
                "__init__": [
                    "self",
                    "type",
                    "value",
                    "start",
                    "end"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "is_a": [
                    "self",
                    "type"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ]
            },
            "Lexer": {
                "__init__": [
                    "self",
                    "lexicon"
                ],
                "token": [
                    "self",
                    "type",
                    "value"
                ],
                "lex": [
                    "self",
                    "text"
                ]
            },
            "Parser": {
                "__init__": [
                    "self",
                    "lexer"
                ],
                "gettok": [
                    "self"
                ],
                "push_tokens": [
                    "self",
                    "iterable"
                ],
                "accept": [
                    "self",
                    "id"
                ],
                "next_token_error": [
                    "self",
                    "message"
                ],
                "last_token_error": [
                    "self",
                    "message"
                ],
                "unexpected_token": [
                    "self"
                ],
                "expect": [
                    "self",
                    "id"
                ],
                "setup": [
                    "self",
                    "text"
                ],
                "parse": [
                    "self",
                    "text"
                ]
            },
            "ParseError": {
                "__init__": [
                    "self",
                    "message",
                    "string",
                    "pos"
                ]
            },
            "LexError": {
                "__init__": [
                    "self",
                    "message",
                    "string",
                    "pos"
                ]
            }
        },
        "lib.spack.spack.resource": {
            "Resource": {
                "__init__": [
                    "self",
                    "name",
                    "fetcher",
                    "destination",
                    "placement"
                ]
            }
        },
        "lib.spack.spack.version": {
            "int_if_int": [
                "string"
            ],
            "coerce_versions": [
                "a",
                "b"
            ],
            "coerced": [
                "method"
            ],
            "_string_to_version": [
                "string"
            ],
            "ver": [
                "obj"
            ],
            "Version": {
                "__init__": [
                    "self",
                    "string"
                ],
                "up_to": [
                    "self",
                    "index"
                ],
                "lowest": [
                    "self"
                ],
                "highest": [
                    "self"
                ],
                "satisfies": [
                    "self",
                    "other"
                ],
                "wildcard": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "idx"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "concrete": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "other"
                ],
                "is_predecessor": [
                    "self",
                    "other"
                ],
                "is_successor": [
                    "self",
                    "other"
                ],
                "overlaps": [
                    "self",
                    "other"
                ],
                "union": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other"
                ]
            },
            "VersionRange": {
                "__init__": [
                    "self",
                    "start",
                    "end"
                ],
                "lowest": [
                    "self"
                ],
                "highest": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "concrete": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "other"
                ],
                "satisfies": [
                    "self",
                    "other"
                ],
                "overlaps": [
                    "self",
                    "other"
                ],
                "union": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "VersionList": {
                "__init__": [
                    "self",
                    "vlist"
                ],
                "add": [
                    "self",
                    "version"
                ],
                "concrete": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "lowest": [
                    "self"
                ],
                "highest": [
                    "self"
                ],
                "overlaps": [
                    "self",
                    "other"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "dictionary"
                ],
                "satisfies": [
                    "self",
                    "other",
                    "strict"
                ],
                "update": [
                    "self",
                    "other"
                ],
                "union": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other"
                ],
                "intersect": [
                    "self",
                    "other"
                ],
                "__contains__": [
                    "self",
                    "other"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__iter__": [
                    "self"
                ],
                "__reversed__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.graph": {
            "topological_sort": [
                "spec"
            ],
            "find": [
                "seq",
                "predicate"
            ],
            "graph_ascii": [
                "spec"
            ],
            "graph_dot": [],
            "AsciiGraph": {
                "__init__": [
                    "self"
                ],
                "_indent": [
                    "self"
                ],
                "_write_edge": [
                    "self",
                    "string",
                    "index",
                    "sub"
                ],
                "_connect_deps": [
                    "self",
                    "i",
                    "deps",
                    "label"
                ],
                "_set_state": [
                    "self",
                    "state",
                    "index",
                    "label"
                ],
                "_back_edge_line": [
                    "self",
                    "prev_ends",
                    "end",
                    "start",
                    "collapse",
                    "label"
                ],
                "_node_line": [
                    "self",
                    "index",
                    "name"
                ],
                "_collapse_line": [
                    "self",
                    "index"
                ],
                "_merge_right_line": [
                    "self",
                    "index"
                ],
                "_expand_right_line": [
                    "self",
                    "index"
                ],
                "write": [
                    "self",
                    "spec"
                ]
            }
        },
        "lib.spack.spack.environment": {
            "concatenate_paths": [
                "paths",
                "separator"
            ],
            "set_or_unset_not_first": [
                "variable",
                "changes",
                "errstream"
            ],
            "validate": [
                "env",
                "errstream"
            ],
            "filter_environment_blacklist": [
                "env",
                "variables"
            ],
            "NameModifier": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "NameValueModifier": {
                "__init__": [
                    "self",
                    "name",
                    "value"
                ]
            },
            "SetEnv": {
                "execute": [
                    "self"
                ]
            },
            "UnsetEnv": {
                "execute": [
                    "self"
                ]
            },
            "SetPath": {
                "execute": [
                    "self"
                ]
            },
            "AppendPath": {
                "execute": [
                    "self"
                ]
            },
            "PrependPath": {
                "execute": [
                    "self"
                ]
            },
            "RemovePath": {
                "execute": [
                    "self"
                ]
            },
            "EnvironmentModifications": {
                "__init__": [
                    "self",
                    "other"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "extend": [
                    "self",
                    "other"
                ],
                "_check_other": [
                    "other"
                ],
                "_get_outside_caller_attributes": [
                    "self"
                ],
                "set": [
                    "self",
                    "name",
                    "value"
                ],
                "unset": [
                    "self",
                    "name"
                ],
                "set_path": [
                    "self",
                    "name",
                    "elts"
                ],
                "append_path": [
                    "self",
                    "name",
                    "path"
                ],
                "prepend_path": [
                    "self",
                    "name",
                    "path"
                ],
                "remove_path": [
                    "self",
                    "name",
                    "path"
                ],
                "group_by_name": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "apply_modifications": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.fetch_strategy": {
            "_needs_stage": [
                "fun"
            ],
            "from_url": [
                "url"
            ],
            "from_kwargs": [],
            "args_are_for": [
                "args",
                "fetcher"
            ],
            "for_package_version": [
                "pkg",
                "version"
            ],
            "FetchStrategy": {
                "__init__": [
                    "self"
                ],
                "set_stage": [
                    "self",
                    "stage"
                ],
                "fetch": [
                    "self"
                ],
                "check": [
                    "self"
                ],
                "expand": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "__str__": [
                    "self"
                ],
                "matches": [
                    "cls",
                    "args"
                ]
            },
            "FetchStrategyComposite": {},
            "URLFetchStrategy": {
                "__init__": [
                    "self",
                    "url",
                    "digest"
                ],
                "fetch": [
                    "self"
                ],
                "archive_file": [
                    "self"
                ],
                "expand": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "check": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "VCSFetchStrategy": {
                "__init__": [
                    "self",
                    "name"
                ],
                "check": [
                    "self"
                ],
                "expand": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "GoFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "go_version": [
                    "self"
                ],
                "go": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "reset": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "GitFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "git_version": [
                    "self"
                ],
                "git": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "reset": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "SvnFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "svn": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "_remove_untracked_files": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "reset": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "HgFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "hg": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "reset": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "FetchError": {
                "__init__": [
                    "self",
                    "msg",
                    "long_msg"
                ]
            },
            "FailedDownloadError": {
                "__init__": [
                    "self",
                    "url",
                    "msg"
                ]
            },
            "NoArchiveFileError": {
                "__init__": [
                    "self",
                    "msg",
                    "long_msg"
                ]
            },
            "NoDigestError": {
                "__init__": [
                    "self",
                    "msg",
                    "long_msg"
                ]
            },
            "InvalidArgsError": {
                "__init__": [
                    "self",
                    "pkg",
                    "version"
                ]
            },
            "ChecksumError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "NoStageError": {
                "__init__": [
                    "self",
                    "method"
                ]
            }
        },
        "lib.spack.spack.directives": {
            "ensure_dicts": [
                "pkg"
            ],
            "version": [
                "pkg",
                "ver",
                "checksum"
            ],
            "_depends_on": [
                "pkg",
                "spec",
                "when"
            ],
            "depends_on": [
                "pkg",
                "spec",
                "when"
            ],
            "extends": [
                "pkg",
                "spec"
            ],
            "provides": [
                "pkg"
            ],
            "patch": [
                "pkg",
                "url_or_filename",
                "level",
                "when"
            ],
            "variant": [
                "pkg",
                "name",
                "default",
                "description"
            ],
            "resource": [
                "pkg"
            ],
            "directive": {
                "__init__": [
                    "self",
                    "dicts"
                ],
                "ensure_dicts": [
                    "self",
                    "pkg"
                ],
                "__call__": [
                    "self",
                    "directive_function"
                ]
            },
            "DirectiveError": {
                "__init__": [
                    "self",
                    "directive",
                    "message"
                ]
            },
            "CircularReferenceError": {
                "__init__": [
                    "self",
                    "directive",
                    "package"
                ]
            }
        },
        "lib.spack.spack.directory_layout": {
            "_check_concrete": [
                "spec"
            ],
            "DirectoryLayout": {
                "__init__": [
                    "self",
                    "root"
                ],
                "hidden_file_paths": [
                    "self"
                ],
                "all_specs": [
                    "self"
                ],
                "relative_path_for_spec": [
                    "self",
                    "spec"
                ],
                "create_install_directory": [
                    "self",
                    "spec"
                ],
                "check_installed": [
                    "self",
                    "spec"
                ],
                "extension_map": [
                    "self",
                    "spec"
                ],
                "check_extension_conflict": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "check_activated": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "add_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "remove_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "path_for_spec": [
                    "self",
                    "spec"
                ],
                "remove_install_directory": [
                    "self",
                    "spec"
                ]
            },
            "YamlDirectoryLayout": {
                "__init__": [
                    "self",
                    "root"
                ],
                "hidden_file_paths": [
                    "self"
                ],
                "relative_path_for_spec": [
                    "self",
                    "spec"
                ],
                "write_spec": [
                    "self",
                    "spec",
                    "path"
                ],
                "read_spec": [
                    "self",
                    "path"
                ],
                "spec_file_path": [
                    "self",
                    "spec"
                ],
                "metadata_path": [
                    "self",
                    "spec"
                ],
                "build_log_path": [
                    "self",
                    "spec"
                ],
                "build_env_path": [
                    "self",
                    "spec"
                ],
                "build_packages_path": [
                    "self",
                    "spec"
                ],
                "create_install_directory": [
                    "self",
                    "spec"
                ],
                "check_installed": [
                    "self",
                    "spec"
                ],
                "all_specs": [
                    "self"
                ],
                "specs_by_hash": [
                    "self"
                ],
                "extension_file_path": [
                    "self",
                    "spec"
                ],
                "_write_extensions": [
                    "self",
                    "spec",
                    "extensions"
                ],
                "_extension_map": [
                    "self",
                    "spec"
                ],
                "extension_map": [
                    "self",
                    "spec"
                ],
                "check_extension_conflict": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "check_activated": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "add_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "remove_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ]
            },
            "DirectoryLayoutError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "SpecHashCollisionError": {
                "__init__": [
                    "self",
                    "installed_spec",
                    "new_spec"
                ]
            },
            "RemoveFailedError": {
                "__init__": [
                    "self",
                    "installed_spec",
                    "prefix",
                    "error"
                ]
            },
            "InconsistentInstallDirectoryError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "InstallDirectoryAlreadyExistsError": {
                "__init__": [
                    "self",
                    "path"
                ]
            },
            "InvalidExtensionSpecError": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "ExtensionAlreadyInstalledError": {
                "__init__": [
                    "self",
                    "spec",
                    "ext_spec"
                ]
            },
            "ExtensionConflictError": {
                "__init__": [
                    "self",
                    "spec",
                    "ext_spec",
                    "conflict"
                ]
            },
            "NoSuchExtensionError": {
                "__init__": [
                    "self",
                    "spec",
                    "ext_spec"
                ]
            }
        },
        "lib.spack.spack.mirror": {
            "mirror_archive_filename": [
                "spec",
                "fetcher"
            ],
            "mirror_archive_path": [
                "spec",
                "fetcher"
            ],
            "get_matching_versions": [
                "specs"
            ],
            "suggest_archive_basename": [
                "resource"
            ],
            "create": [
                "path",
                "specs"
            ],
            "add_single_spec": [
                "spec",
                "mirror_root",
                "categories"
            ],
            "MirrorError": {
                "__init__": [
                    "self",
                    "msg",
                    "long_msg"
                ]
            }
        },
        "lib.spack.spack.hooks.dotkit": {
            "post_install": [
                "pkg"
            ],
            "post_uninstall": [
                "pkg"
            ]
        },
        "lib.spack.spack.hooks": {
            "all_hook_modules": [],
            "HookRunner": {
                "__init__": [
                    "self",
                    "hook_name"
                ],
                "__call__": [
                    "self",
                    "pkg"
                ]
            }
        },
        "lib.spack.spack.hooks.extensions": {
            "pre_uninstall": [
                "pkg"
            ]
        },
        "lib.spack.spack.hooks.tclmodule": {
            "post_install": [
                "pkg"
            ],
            "post_uninstall": [
                "pkg"
            ]
        },
        "lib.spack.spack.hooks.sbang": {
            "shebang_too_long": [
                "path"
            ],
            "filter_shebang": [
                "path"
            ],
            "filter_shebangs_in_directory": [
                "directory"
            ],
            "post_install": [
                "pkg"
            ]
        },
        "lib.spack.spack.hooks.licensing": {
            "pre_install": [
                "pkg"
            ],
            "set_up_license": [
                "pkg"
            ],
            "write_license_file": [
                "pkg",
                "license_path"
            ],
            "post_install": [
                "pkg"
            ],
            "symlink_license": [
                "pkg"
            ]
        },
        "lib.spack.spack.test.stage": {
            "use_tmp": [
                "use_tmp"
            ],
            "StageTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "get_stage_path": [
                    "self",
                    "stage",
                    "stage_name"
                ],
                "check_setup": [
                    "self",
                    "stage",
                    "stage_name"
                ],
                "check_fetch": [
                    "self",
                    "stage",
                    "stage_name"
                ],
                "check_expand_archive": [
                    "self",
                    "stage",
                    "stage_name"
                ],
                "check_chdir": [
                    "self",
                    "stage",
                    "stage_name"
                ],
                "check_chdir_to_source": [
                    "self",
                    "stage",
                    "stage_name"
                ],
                "check_destroy": [
                    "self",
                    "stage",
                    "stage_name"
                ],
                "test_setup_and_destroy_name_with_tmp": [
                    "self"
                ],
                "test_setup_and_destroy_name_without_tmp": [
                    "self"
                ],
                "test_setup_and_destroy_no_name_with_tmp": [
                    "self"
                ],
                "test_setup_and_destroy_no_name_without_tmp": [
                    "self"
                ],
                "test_chdir": [
                    "self"
                ],
                "test_fetch": [
                    "self"
                ],
                "test_expand_archive": [
                    "self"
                ],
                "test_restage": [
                    "self"
                ],
                "test_no_keep_without_exceptions": [
                    "self"
                ],
                "test_keep_without_exceptions": [
                    "self"
                ],
                "test_no_keep_with_exceptions": [
                    "self"
                ],
                "test_keep_exceptions": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.spec_syntax": {
            "SpecSyntaxTest": {
                "check_parse": [
                    "self",
                    "expected",
                    "spec"
                ],
                "check_lex": [
                    "self",
                    "tokens",
                    "spec"
                ],
                "test_package_names": [
                    "self"
                ],
                "test_simple_dependence": [
                    "self"
                ],
                "test_dependencies_with_versions": [
                    "self"
                ],
                "test_full_specs": [
                    "self"
                ],
                "test_canonicalize": [
                    "self"
                ],
                "test_parse_errors": [
                    "self"
                ],
                "test_duplicate_variant": [
                    "self"
                ],
                "test_duplicate_depdendence": [
                    "self"
                ],
                "test_duplicate_compiler": [
                    "self"
                ],
                "test_ambiguous": [
                    "self"
                ],
                "test_minimal_spaces": [
                    "self"
                ],
                "test_spaces_between_dependences": [
                    "self"
                ],
                "test_spaces_between_options": [
                    "self"
                ],
                "test_way_too_many_spaces": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.link_tree": {
            "LinkTreeTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "check_file_link": [
                    "self",
                    "filename"
                ],
                "check_dir": [
                    "self",
                    "filename"
                ],
                "test_merge_to_new_directory": [
                    "self"
                ],
                "test_merge_to_existing_directory": [
                    "self"
                ],
                "test_merge_with_empty_directories": [
                    "self"
                ],
                "test_ignore": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.namespace_trie": {
            "NamespaceTrieTest": {
                "setUp": [
                    "self"
                ],
                "test_add_single": [
                    "self"
                ],
                "test_add_multiple": [
                    "self"
                ],
                "test_add_three": [
                    "self"
                ],
                "test_add_none_single": [
                    "self"
                ],
                "test_add_none_multiple": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.optional_deps": {
            "ConcretizeTest": {
                "check_normalize": [
                    "self",
                    "spec_string",
                    "expected"
                ],
                "test_normalize_simple_conditionals": [
                    "self"
                ],
                "test_multiple_conditionals": [
                    "self"
                ],
                "test_chained_mpi": [
                    "self"
                ],
                "test_default_variant": [
                    "self"
                ],
                "test_transitive_chain": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.url_extrapolate": {
            "UrlExtrapolateTest": {
                "check_url": [
                    "self",
                    "base",
                    "version",
                    "new_url"
                ],
                "test_libelf_version": [
                    "self"
                ],
                "test_libdwarf_version": [
                    "self"
                ],
                "test_dyninst_version": [
                    "self"
                ],
                "test_partial_version_prefix": [
                    "self"
                ],
                "test_scalasca_partial_version": [
                    "self"
                ],
                "test_mpileaks_version": [
                    "self"
                ],
                "test_gcc": [
                    "self"
                ],
                "test_github_raw": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test": {
            "list_tests": [],
            "run": [
                "names",
                "outputDir",
                "verbose"
            ]
        },
        "lib.spack.spack.test.mock_database": {
            "MockDatabase": {
                "_mock_install": [
                    "self",
                    "spec"
                ],
                "_mock_remove": [
                    "self",
                    "spec"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.git_fetch": {
            "GitFetchTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "assert_rev": [
                    "self",
                    "rev"
                ],
                "try_fetch": [
                    "self",
                    "rev",
                    "test_file",
                    "args"
                ],
                "test_fetch_master": [
                    "self"
                ],
                "test_fetch_branch": [
                    "self"
                ],
                "test_fetch_tag": [
                    "self"
                ],
                "test_fetch_commit": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.lock": {
            "LockTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "multiproc_test": [
                    "self"
                ],
                "acquire_write": [
                    "self",
                    "barrier"
                ],
                "acquire_read": [
                    "self",
                    "barrier"
                ],
                "timeout_write": [
                    "self",
                    "barrier"
                ],
                "timeout_read": [
                    "self",
                    "barrier"
                ],
                "test_write_lock_timeout_on_write": [
                    "self"
                ],
                "test_write_lock_timeout_on_write_2": [
                    "self"
                ],
                "test_write_lock_timeout_on_write_3": [
                    "self"
                ],
                "test_read_lock_timeout_on_write": [
                    "self"
                ],
                "test_read_lock_timeout_on_write_2": [
                    "self"
                ],
                "test_read_lock_timeout_on_write_3": [
                    "self"
                ],
                "test_write_lock_timeout_on_read": [
                    "self"
                ],
                "test_write_lock_timeout_on_read_2": [
                    "self"
                ],
                "test_write_lock_timeout_on_read_3": [
                    "self"
                ],
                "test_write_lock_timeout_with_multiple_readers_2_1": [
                    "self"
                ],
                "test_write_lock_timeout_with_multiple_readers_2_2": [
                    "self"
                ],
                "test_write_lock_timeout_with_multiple_readers_3_1": [
                    "self"
                ],
                "test_write_lock_timeout_with_multiple_readers_3_2": [
                    "self"
                ],
                "test_complex_acquire_and_release_chain": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.svn_fetch": {
            "SvnFetchTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "assert_rev": [
                    "self",
                    "rev"
                ],
                "try_fetch": [
                    "self",
                    "rev",
                    "test_file",
                    "args"
                ],
                "test_fetch_default": [
                    "self"
                ],
                "test_fetch_r1": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.versions": {
            "VersionsTest": {
                "assert_ver_lt": [
                    "self",
                    "a",
                    "b"
                ],
                "assert_ver_gt": [
                    "self",
                    "a",
                    "b"
                ],
                "assert_ver_eq": [
                    "self",
                    "a",
                    "b"
                ],
                "assert_in": [
                    "self",
                    "needle",
                    "haystack"
                ],
                "assert_not_in": [
                    "self",
                    "needle",
                    "haystack"
                ],
                "assert_canonical": [
                    "self",
                    "canonical_list",
                    "version_list"
                ],
                "assert_overlaps": [
                    "self",
                    "v1",
                    "v2"
                ],
                "assert_no_overlap": [
                    "self",
                    "v1",
                    "v2"
                ],
                "assert_satisfies": [
                    "self",
                    "v1",
                    "v2"
                ],
                "assert_does_not_satisfy": [
                    "self",
                    "v1",
                    "v2"
                ],
                "check_intersection": [
                    "self",
                    "expected",
                    "a",
                    "b"
                ],
                "check_union": [
                    "self",
                    "expected",
                    "a",
                    "b"
                ],
                "test_two_segments": [
                    "self"
                ],
                "test_three_segments": [
                    "self"
                ],
                "test_alpha": [
                    "self"
                ],
                "test_patch": [
                    "self"
                ],
                "test_num_alpha_with_no_separator": [
                    "self"
                ],
                "test_alpha_with_dots": [
                    "self"
                ],
                "test_nums_and_patch": [
                    "self"
                ],
                "test_rc_versions": [
                    "self"
                ],
                "test_alpha_beta": [
                    "self"
                ],
                "test_double_alpha": [
                    "self"
                ],
                "test_padded_numbers": [
                    "self"
                ],
                "test_close_numbers": [
                    "self"
                ],
                "test_date_stamps": [
                    "self"
                ],
                "test_underscores": [
                    "self"
                ],
                "test_rpm_oddities": [
                    "self"
                ],
                "test_version_ranges": [
                    "self"
                ],
                "test_contains": [
                    "self"
                ],
                "test_in_list": [
                    "self"
                ],
                "test_ranges_overlap": [
                    "self"
                ],
                "test_overlap_with_containment": [
                    "self"
                ],
                "test_lists_overlap": [
                    "self"
                ],
                "test_canonicalize_list": [
                    "self"
                ],
                "test_intersection": [
                    "self"
                ],
                "test_intersect_with_containment": [
                    "self"
                ],
                "test_union_with_containment": [
                    "self"
                ],
                "test_basic_version_satisfaction": [
                    "self"
                ],
                "test_basic_version_satisfaction_in_lists": [
                    "self"
                ],
                "test_version_range_satisfaction": [
                    "self"
                ],
                "test_version_range_satisfaction_in_lists": [
                    "self"
                ],
                "test_satisfaction_with_lists": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.modules": {
            "mock_open": [
                "filename",
                "mode"
            ],
            "TclTests": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "get_modulefile_content": [
                    "self",
                    "spec"
                ],
                "test_simple_case": [
                    "self"
                ],
                "test_autoload": [
                    "self"
                ],
                "test_alter_environment": [
                    "self"
                ],
                "test_blacklist": [
                    "self"
                ],
                "test_conflicts": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.url_parse": {
            "UrlParseTest": {
                "assert_not_detected": [
                    "self",
                    "string"
                ],
                "check": [
                    "self",
                    "name",
                    "v",
                    "string"
                ],
                "test_wwwoffle_version": [
                    "self"
                ],
                "test_version_sourceforge_download": [
                    "self"
                ],
                "test_no_version": [
                    "self"
                ],
                "test_version_all_dots": [
                    "self"
                ],
                "test_version_underscore_separator": [
                    "self"
                ],
                "test_boost_version_style": [
                    "self"
                ],
                "test_erlang_version_style": [
                    "self"
                ],
                "test_another_erlang_version_style": [
                    "self"
                ],
                "test_yet_another_erlang_version_style": [
                    "self"
                ],
                "test_p7zip_version_style": [
                    "self"
                ],
                "test_new_github_style": [
                    "self"
                ],
                "test_gloox_beta_style": [
                    "self"
                ],
                "test_sphinx_beta_style": [
                    "self"
                ],
                "test_astyle_verson_style": [
                    "self"
                ],
                "test_version_dos2unix": [
                    "self"
                ],
                "test_version_internal_dash": [
                    "self"
                ],
                "test_version_single_digit": [
                    "self"
                ],
                "test_noseparator_single_digit": [
                    "self"
                ],
                "test_version_developer_that_hates_us_format": [
                    "self"
                ],
                "test_version_regular": [
                    "self"
                ],
                "test_version_github": [
                    "self"
                ],
                "test_version_github_with_high_patch_number": [
                    "self"
                ],
                "test_yet_another_version": [
                    "self"
                ],
                "test_lame_version_style": [
                    "self"
                ],
                "test_ruby_version_style": [
                    "self"
                ],
                "test_omega_version_style": [
                    "self"
                ],
                "test_rc_style": [
                    "self"
                ],
                "test_dash_rc_style": [
                    "self"
                ],
                "test_angband_version_style": [
                    "self"
                ],
                "test_stable_suffix": [
                    "self"
                ],
                "test_debian_style_1": [
                    "self"
                ],
                "test_debian_style_2": [
                    "self"
                ],
                "test_imagemagick_style": [
                    "self"
                ],
                "test_dash_version_dash_style": [
                    "self"
                ],
                "test_apache_version_style": [
                    "self"
                ],
                "test_jpeg_style": [
                    "self"
                ],
                "test_pypy_version": [
                    "self"
                ],
                "test_openssl_version": [
                    "self"
                ],
                "test_xaw3d_version": [
                    "self"
                ],
                "test_fann_version": [
                    "self"
                ],
                "test_iges_version": [
                    "self"
                ],
                "test_haxe_version": [
                    "self"
                ],
                "test_imap_version": [
                    "self"
                ],
                "test_suite3270_version": [
                    "self"
                ],
                "test_synergy_version": [
                    "self"
                ],
                "test_mvapich2_19_version": [
                    "self"
                ],
                "test_hdf5_version": [
                    "self"
                ],
                "test_scalasca_version": [
                    "self"
                ],
                "test_mpileaks_version": [
                    "self"
                ],
                "test_gcc_version": [
                    "self"
                ],
                "test_gcc_version_precedence": [
                    "self"
                ],
                "test_github_raw_url": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.config": {
            "ConfigTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "check_config": [
                    "self",
                    "comps",
                    "arch"
                ],
                "test_write_list_in_memory": [
                    "self"
                ],
                "test_write_key_in_memory": [
                    "self"
                ],
                "test_write_key_to_disk": [
                    "self"
                ],
                "test_write_to_same_priority_file": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.database": {
            "_print_ref_counts": [],
            "DatabaseTest": {
                "test_005_db_exists": [
                    "self"
                ],
                "test_010_all_install_sanity": [
                    "self"
                ],
                "test_015_write_and_read": [
                    "self"
                ],
                "_check_db_sanity": [
                    "self"
                ],
                "test_020_db_sanity": [
                    "self"
                ],
                "test_030_db_sanity_from_another_process": [
                    "self"
                ],
                "test_040_ref_counts": [
                    "self"
                ],
                "test_050_basic_query": [
                    "self"
                ],
                "_check_remove_and_add_package": [
                    "self",
                    "spec"
                ],
                "test_060_remove_and_add_root_package": [
                    "self"
                ],
                "test_070_remove_and_add_dependency_package": [
                    "self"
                ],
                "test_080_root_ref_counts": [
                    "self"
                ],
                "test_090_non_root_ref_counts": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.sbang": {
            "SbangTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_shebang_handling": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.multimethod": {
            "MultiMethodTest": {
                "test_no_version_match": [
                    "self"
                ],
                "test_one_version_match": [
                    "self"
                ],
                "test_version_overlap": [
                    "self"
                ],
                "test_mpi_version": [
                    "self"
                ],
                "test_undefined_mpi_version": [
                    "self"
                ],
                "test_default_works": [
                    "self"
                ],
                "test_architecture_match": [
                    "self"
                ],
                "test_dependency_match": [
                    "self"
                ],
                "test_virtual_dep_match": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.packages": {
            "PackagesTest": {
                "test_load_package": [
                    "self"
                ],
                "test_package_name": [
                    "self"
                ],
                "test_package_filename": [
                    "self"
                ],
                "test_nonexisting_package_filename": [
                    "self"
                ],
                "test_package_class_names": [
                    "self"
                ],
                "test_import_package": [
                    "self"
                ],
                "test_import_package_as": [
                    "self"
                ],
                "test_import_class_from_package": [
                    "self"
                ],
                "test_import_module_from_package": [
                    "self"
                ],
                "test_import_namespace_container_modules": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.cc": {
            "CompilerTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "check_cc": [
                    "self",
                    "command",
                    "args",
                    "expected"
                ],
                "check_ld": [
                    "self",
                    "command",
                    "args",
                    "expected"
                ],
                "check_cpp": [
                    "self",
                    "command",
                    "args",
                    "expected"
                ],
                "test_vcheck_mode": [
                    "self"
                ],
                "test_cpp_mode": [
                    "self"
                ],
                "test_as_mode": [
                    "self"
                ],
                "test_ccld_mode": [
                    "self"
                ],
                "test_ld_mode": [
                    "self"
                ],
                "test_dep_rpath": [
                    "self"
                ],
                "test_dep_include": [
                    "self"
                ],
                "test_dep_lib": [
                    "self"
                ],
                "test_all_deps": [
                    "self"
                ],
                "test_ld_deps": [
                    "self"
                ],
                "test_ld_deps_reentrant": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.concretize": {
            "ConcretizeTest": {
                "check_spec": [
                    "self",
                    "abstract",
                    "concrete"
                ],
                "check_concretize": [
                    "self",
                    "abstract_spec"
                ],
                "test_concretize_no_deps": [
                    "self"
                ],
                "test_concretize_dag": [
                    "self"
                ],
                "test_concretize_variant": [
                    "self"
                ],
                "test_concretize_preferred_version": [
                    "self"
                ],
                "test_concretize_with_virtual": [
                    "self"
                ],
                "test_concretize_with_restricted_virtual": [
                    "self"
                ],
                "test_concretize_with_provides_when": [
                    "self"
                ],
                "test_concretize_two_virtuals": [
                    "self"
                ],
                "test_concretize_two_virtuals_with_one_bound": [
                    "self"
                ],
                "test_concretize_two_virtuals_with_two_bound": [
                    "self"
                ],
                "test_concretize_two_virtuals_with_dual_provider": [
                    "self"
                ],
                "test_concretize_two_virtuals_with_dual_provider_and_a_conflict": [
                    "self"
                ],
                "test_virtual_is_fully_expanded_for_callpath": [
                    "self"
                ],
                "test_virtual_is_fully_expanded_for_mpileaks": [
                    "self"
                ],
                "test_my_dep_depends_on_provider_of_my_virtual_dep": [
                    "self"
                ],
                "test_compiler_inheritance": [
                    "self"
                ],
                "test_external_package": [
                    "self"
                ],
                "test_nobuild_package": [
                    "self"
                ],
                "test_external_and_virtual": [
                    "self"
                ],
                "test_find_spec_parents": [
                    "self"
                ],
                "test_find_spec_children": [
                    "self"
                ],
                "test_find_spec_sibling": [
                    "self"
                ],
                "test_find_spec_self": [
                    "self"
                ],
                "test_find_spec_none": [
                    "self"
                ],
                "test_compiler_child": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.environment": {
            "EnvironmentTest": {
                "setUp": [
                    "self"
                ],
                "test_set": [
                    "self"
                ],
                "test_unset": [
                    "self"
                ],
                "test_set_path": [
                    "self"
                ],
                "test_path_manipulation": [
                    "self"
                ],
                "test_extra_arguments": [
                    "self"
                ],
                "test_extend": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.spec_dag": {
            "SpecDagTest": {
                "test_conflicting_package_constraints": [
                    "self"
                ],
                "test_preorder_node_traversal": [
                    "self"
                ],
                "test_preorder_edge_traversal": [
                    "self"
                ],
                "test_preorder_path_traversal": [
                    "self"
                ],
                "test_postorder_node_traversal": [
                    "self"
                ],
                "test_postorder_edge_traversal": [
                    "self"
                ],
                "test_postorder_path_traversal": [
                    "self"
                ],
                "test_conflicting_spec_constraints": [
                    "self"
                ],
                "test_normalize_twice": [
                    "self"
                ],
                "test_normalize_a_lot": [
                    "self"
                ],
                "test_normalize_with_virtual_spec": [
                    "self"
                ],
                "check_links": [
                    "self",
                    "spec_to_check"
                ],
                "test_dependents_and_dependencies_are_correct": [
                    "self"
                ],
                "test_unsatisfiable_version": [
                    "self"
                ],
                "test_unsatisfiable_compiler": [
                    "self"
                ],
                "test_unsatisfiable_compiler_version": [
                    "self"
                ],
                "test_unsatisfiable_architecture": [
                    "self"
                ],
                "test_invalid_dep": [
                    "self"
                ],
                "test_equal": [
                    "self"
                ],
                "test_normalize_mpileaks": [
                    "self"
                ],
                "test_normalize_with_virtual_package": [
                    "self"
                ],
                "test_contains": [
                    "self"
                ],
                "test_copy_simple": [
                    "self"
                ],
                "test_copy_normalized": [
                    "self"
                ],
                "test_copy_concretized": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.package_sanity": {
            "PackageSanityTest": {
                "check_db": [
                    "self"
                ],
                "test_get_all_packages": [
                    "self"
                ],
                "test_get_all_mock_packages": [
                    "self"
                ],
                "test_url_versions": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.url_substitution": {
            "PackageSanityTest": {
                "test_hypre_url_substitution": [
                    "self"
                ],
                "test_otf2_url_substitution": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.yaml": {
            "YamlTest": {
                "setUp": [
                    "self"
                ],
                "test_parse": [
                    "self"
                ],
                "test_dict_order": [
                    "self"
                ],
                "test_line_numbers": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.tally_plugin": {
            "Tally": {
                "__init__": [
                    "self"
                ],
                "numberOfTestsRun": [
                    "self"
                ],
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ],
                "addSuccess": [
                    "self",
                    "test"
                ],
                "addError": [
                    "self",
                    "test",
                    "err"
                ],
                "addFailure": [
                    "self",
                    "test",
                    "err"
                ],
                "finalize": [
                    "self",
                    "result"
                ]
            }
        },
        "lib.spack.spack.test.hg_fetch": {
            "HgFetchTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "try_fetch": [
                    "self",
                    "rev",
                    "test_file",
                    "args"
                ],
                "test_fetch_default": [
                    "self"
                ],
                "test_fetch_rev0": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.directory_layout": {
            "DirectoryLayoutTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_read_and_write_spec": [
                    "self"
                ],
                "test_handle_unknown_package": [
                    "self"
                ],
                "test_find": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.pattern": {
            "CompositeTest": {
                "setUp": [
                    "self"
                ],
                "test_composite_from_method_list": [
                    "self"
                ],
                "test_composite_from_interface": [
                    "self"
                ],
                "test_error_conditions": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.spec_yaml": {
            "SpecDagTest": {
                "check_yaml_round_trip": [
                    "self",
                    "spec"
                ],
                "test_simple_spec": [
                    "self"
                ],
                "test_normal_spec": [
                    "self"
                ],
                "test_ambiguous_version_spec": [
                    "self"
                ],
                "test_concrete_spec": [
                    "self"
                ],
                "test_yaml_subdag": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.mirror": {
            "MirrorTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "set_up_package": [
                    "self",
                    "name",
                    "MockRepoClass",
                    "url_attr"
                ],
                "check_mirror": [
                    "self"
                ],
                "test_git_mirror": [
                    "self"
                ],
                "test_svn_mirror": [
                    "self"
                ],
                "test_hg_mirror": [
                    "self"
                ],
                "test_url_mirror": [
                    "self"
                ],
                "test_all_mirror": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.spec_semantics": {
            "SpecSematicsTest": {
                "check_satisfies": [
                    "self",
                    "spec",
                    "anon_spec",
                    "concrete"
                ],
                "check_unsatisfiable": [
                    "self",
                    "spec",
                    "anon_spec",
                    "concrete"
                ],
                "check_constrain": [
                    "self",
                    "expected",
                    "spec",
                    "constraint"
                ],
                "check_constrain_changed": [
                    "self",
                    "spec",
                    "constraint"
                ],
                "check_constrain_not_changed": [
                    "self",
                    "spec",
                    "constraint"
                ],
                "check_invalid_constraint": [
                    "self",
                    "spec",
                    "constraint"
                ],
                "test_satisfies": [
                    "self"
                ],
                "test_satisfies_namespace": [
                    "self"
                ],
                "test_satisfies_namespaced_dep": [
                    "self"
                ],
                "test_satisfies_compiler": [
                    "self"
                ],
                "test_satisfies_compiler_version": [
                    "self"
                ],
                "test_satisfies_architecture": [
                    "self"
                ],
                "test_satisfies_dependencies": [
                    "self"
                ],
                "test_satisfies_dependency_versions": [
                    "self"
                ],
                "test_satisfies_virtual_dependencies": [
                    "self"
                ],
                "test_satisfies_virtual_dependency_versions": [
                    "self"
                ],
                "test_satisfies_matching_variant": [
                    "self"
                ],
                "test_satisfies_unconstrained_variant": [
                    "self"
                ],
                "test_unsatisfiable_variants": [
                    "self"
                ],
                "test_unsatisfiable_variant_mismatch": [
                    "self"
                ],
                "test_satisfies_virtual": [
                    "self"
                ],
                "test_satisfies_virtual_dep_with_virtual_constraint": [
                    "self"
                ],
                "test_self_index": [
                    "self"
                ],
                "test_dep_index": [
                    "self"
                ],
                "test_spec_contains_deps": [
                    "self"
                ],
                "test_virtual_index": [
                    "self"
                ],
                "test_constrain_variants": [
                    "self"
                ],
                "test_constrain_arch": [
                    "self"
                ],
                "test_constrain_compiler": [
                    "self"
                ],
                "test_invalid_constraint": [
                    "self"
                ],
                "test_constrain_changed": [
                    "self"
                ],
                "test_constrain_not_changed": [
                    "self"
                ],
                "test_constrain_dependency_changed": [
                    "self"
                ],
                "test_constrain_dependency_not_changed": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.mock_packages_test": {
            "MockPackagesTest": {
                "initmock": [
                    "self"
                ],
                "set_pkg_dep": [
                    "self",
                    "pkg_name",
                    "spec"
                ],
                "cleanmock": [
                    "self"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.cmd": {},
        "lib.spack.spack.test.cmd.test_install": {
            "mock_open": [
                "filename",
                "mode"
            ],
            "mock_fetch_log": [
                "path"
            ],
            "MockSpec": {
                "__init__": [
                    "self",
                    "name",
                    "version",
                    "hashStr"
                ],
                "traverse": [
                    "self",
                    "order"
                ],
                "dag_hash": [
                    "self"
                ],
                "short_spec": [
                    "self"
                ]
            },
            "MockPackage": {
                "__init__": [
                    "self",
                    "spec",
                    "buildLogPath"
                ],
                "do_install": [
                    "self"
                ]
            },
            "MockPackageDb": {
                "__init__": [
                    "self",
                    "init"
                ],
                "get": [
                    "self",
                    "spec"
                ]
            },
            "MockArgs": {
                "__init__": [
                    "self",
                    "package"
                ]
            },
            "TestInstallTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_installing_both": [
                    "self"
                ],
                "test_dependency_already_installed": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.cmd.uninstall": {
            "MockArgs": {
                "__init__": [
                    "self",
                    "packages",
                    "all",
                    "force",
                    "dependents"
                ]
            },
            "TestUninstall": {
                "test_uninstall": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.util.crypto": {
            "checksum": [
                "hashlib_algo",
                "filename"
            ],
            "Checker": {
                "__init__": [
                    "self",
                    "hexdigest"
                ],
                "hash_name": [
                    "self"
                ],
                "check": [
                    "self",
                    "filename"
                ]
            }
        },
        "lib.spack.spack.util": {},
        "lib.spack.spack.util.debug": {
            "debug_handler": [
                "sig",
                "frame"
            ],
            "register_interrupt_handler": []
        },
        "lib.spack.spack.util.prefix": {
            "Prefix": {
                "__new__": [
                    "cls",
                    "path"
                ]
            }
        },
        "lib.spack.spack.util.multiproc": {
            "spawn": [
                "f"
            ],
            "parmap": [
                "f",
                "X"
            ],
            "Barrier": {
                "__init__": [
                    "self",
                    "n",
                    "timeout"
                ],
                "wait": [
                    "self"
                ]
            },
            "BarrierTimeoutError": {}
        },
        "lib.spack.spack.util.compression": {
            "allowed_archive": [
                "path"
            ],
            "decompressor_for": [
                "path"
            ],
            "strip_extension": [
                "path"
            ],
            "extension": [
                "path"
            ]
        },
        "lib.spack.spack.util.environment": {
            "get_path": [
                "name"
            ],
            "env_flag": [
                "name"
            ],
            "path_set": [
                "var_name",
                "directories"
            ],
            "path_put_first": [
                "var_name",
                "directories"
            ],
            "dump_environment": [
                "path"
            ]
        },
        "lib.spack.spack.util.naming": {
            "mod_to_class": [
                "mod_name"
            ],
            "spack_module_to_python_module": [
                "mod_name"
            ],
            "possible_spack_module_names": [
                "python_mod_name"
            ],
            "valid_module_name": [
                "mod_name"
            ],
            "valid_fully_qualified_module_name": [
                "mod_name"
            ],
            "validate_module_name": [
                "mod_name"
            ],
            "validate_fully_qualified_module_name": [
                "mod_name"
            ],
            "InvalidModuleNameError": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "InvalidFullyQualifiedModuleNameError": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "NamespaceTrie": {
                "__init__": [
                    "self",
                    "separator"
                ],
                "__setitem__": [
                    "self",
                    "namespace",
                    "value"
                ],
                "_get_helper": [
                    "self",
                    "namespace",
                    "full_name"
                ],
                "__getitem__": [
                    "self",
                    "namespace"
                ],
                "is_prefix": [
                    "self",
                    "namespace"
                ],
                "is_leaf": [
                    "self",
                    "namespace"
                ],
                "has_value": [
                    "self",
                    "namespace"
                ],
                "__contains__": [
                    "self",
                    "namespace"
                ],
                "_str_helper": [
                    "self",
                    "stream",
                    "level"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.util.string": {
            "comma_list": [
                "sequence",
                "article"
            ],
            "comma_or": [
                "sequence"
            ],
            "comma_and": [
                "sequence"
            ]
        },
        "lib.spack.spack.util.pattern": {
            "composite": [
                "interface",
                "method_list",
                "container"
            ]
        },
        "lib.spack.spack.compilers.xl": {
            "Xl": {
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "default_version": [
                    "self",
                    "comp"
                ],
                "fc_version": [
                    "cls",
                    "fc"
                ],
                "f77_version": [
                    "cls",
                    "f77"
                ]
            }
        },
        "lib.spack.spack.compilers": {
            "_auto_compiler_spec": [
                "function"
            ],
            "_to_dict": [
                "compiler"
            ],
            "get_compiler_config": [
                "arch",
                "scope"
            ],
            "add_compilers_to_config": [
                "compilers",
                "arch",
                "scope"
            ],
            "remove_compiler_from_config": [
                "compiler_spec",
                "arch",
                "scope"
            ],
            "all_compilers_config": [
                "arch",
                "scope"
            ],
            "all_compilers": [
                "arch",
                "scope"
            ],
            "default_compiler": [],
            "find_compilers": [],
            "supported_compilers": [],
            "supported": [
                "compiler_spec"
            ],
            "find": [
                "compiler_spec",
                "arch",
                "scope"
            ],
            "compilers_for_spec": [
                "compiler_spec",
                "arch",
                "scope"
            ],
            "compiler_for_spec": [
                "compiler_spec"
            ],
            "class_for_compiler_name": [
                "compiler_name"
            ],
            "all_compiler_types": [],
            "InvalidCompilerConfigurationError": {
                "__init__": [
                    "self",
                    "compiler_spec"
                ]
            },
            "NoCompilersError": {
                "__init__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.compilers.gcc": {
            "Gcc": {
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "cxx14_flag": [
                    "self"
                ],
                "fc_version": [
                    "cls",
                    "fc"
                ],
                "f77_version": [
                    "cls",
                    "f77"
                ]
            }
        },
        "lib.spack.spack.compilers.nag": {
            "Nag": {
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "f77_rpath_arg": [
                    "self"
                ],
                "fc_rpath_arg": [
                    "self"
                ],
                "default_version": [
                    "self",
                    "comp"
                ]
            }
        },
        "lib.spack.spack.compilers.clang": {
            "Clang": {
                "is_apple": [
                    "self"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "default_version": [
                    "self",
                    "comp"
                ]
            }
        },
        "lib.spack.spack.compilers.intel": {
            "Intel": {
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "default_version": [
                    "cls",
                    "comp"
                ]
            }
        },
        "lib.spack.spack.compilers.pgi": {
            "Pgi": {
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "default_version": [
                    "cls",
                    "comp"
                ]
            }
        },
        "lib.spack.spack.cmd.checksum": {
            "setup_parser": [
                "subparser"
            ],
            "get_checksums": [
                "versions",
                "urls"
            ],
            "checksum": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.install": {
            "setup_parser": [
                "subparser"
            ],
            "install": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.dependents": {
            "setup_parser": [
                "subparser"
            ],
            "dependents": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.stage": {
            "setup_parser": [
                "subparser"
            ],
            "stage": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.use": {
            "setup_parser": [
                "subparser"
            ],
            "use": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.doc": {
            "setup_parser": [
                "subparser"
            ],
            "doc": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.compilers": {
            "setup_parser": [
                "subparser"
            ],
            "compilers": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.test-install": {
            "setup_parser": [
                "subparser"
            ],
            "fetch_log": [
                "path"
            ],
            "failed_dependencies": [
                "spec"
            ],
            "get_top_spec_or_die": [
                "args"
            ],
            "install_single_spec": [
                "spec",
                "number_of_jobs"
            ],
            "get_filename": [
                "args",
                "top_spec"
            ],
            "test_install": [
                "parser",
                "args"
            ],
            "TestResult": {},
            "TestSuite": {
                "__init__": [
                    "self",
                    "filename"
                ],
                "__enter__": [
                    "self"
                ],
                "append": [
                    "self",
                    "item"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ]
            },
            "TestCase": {
                "__init__": [
                    "self",
                    "classname",
                    "name",
                    "time"
                ],
                "set_result": [
                    "self",
                    "result_type",
                    "message",
                    "error_type",
                    "text"
                ]
            }
        },
        "lib.spack.spack.cmd.load": {
            "setup_parser": [
                "subparser"
            ],
            "load": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.module": {
            "setup_parser": [
                "subparser"
            ],
            "module_find": [
                "mtype",
                "spec_array"
            ],
            "module_refresh": [],
            "module": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.purge": {
            "purge": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.deactivate": {
            "setup_parser": [
                "subparser"
            ],
            "deactivate": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.bootstrap": {
            "setup_parser": [
                "subparser"
            ],
            "get_origin_url": [],
            "bootstrap": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.reindex": {
            "reindex": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.clean": {
            "setup_parser": [
                "subparser"
            ],
            "clean": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.extensions": {
            "setup_parser": [
                "subparser"
            ],
            "extensions": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.config": {
            "setup_parser": [
                "subparser"
            ],
            "config_get": [
                "args"
            ],
            "config_edit": [
                "args"
            ],
            "config": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.patch": {
            "setup_parser": [
                "subparser"
            ],
            "patch": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.diy": {
            "setup_parser": [
                "subparser"
            ],
            "diy": [
                "self",
                "args"
            ]
        },
        "lib.spack.spack.cmd.unuse": {
            "setup_parser": [
                "subparser"
            ],
            "unuse": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.edit": {
            "edit_package": [
                "name",
                "repo_path",
                "namespace",
                "force"
            ],
            "setup_parser": [
                "subparser"
            ],
            "edit": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.fetch": {
            "setup_parser": [
                "subparser"
            ],
            "fetch": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.list": {
            "setup_parser": [
                "subparser"
            ],
            "list": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.unload": {
            "setup_parser": [
                "subparser"
            ],
            "unload": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.activate": {
            "setup_parser": [
                "subparser"
            ],
            "activate": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.uninstall": {
            "ask_for_confirmation": [
                "message"
            ],
            "setup_parser": [
                "subparser"
            ],
            "concretize_specs": [
                "specs",
                "allow_multiple_matches",
                "force"
            ],
            "installed_dependents": [
                "specs"
            ],
            "do_uninstall": [
                "specs",
                "force"
            ],
            "uninstall": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.python": {
            "setup_parser": [
                "subparser"
            ],
            "python": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.graph": {
            "setup_parser": [
                "subparser"
            ],
            "graph": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.help": {
            "setup_parser": [
                "subparser"
            ],
            "help": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.providers": {
            "setup_parser": [
                "subparser"
            ],
            "providers": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.cd": {
            "setup_parser": [
                "subparser"
            ],
            "cd": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.restage": {
            "setup_parser": [
                "subparser"
            ],
            "restage": [
                "parser",
                "args"
            ]
        }
    }
}